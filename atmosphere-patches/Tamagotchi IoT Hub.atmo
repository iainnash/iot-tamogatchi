{
  "name": "Tamagotchi IoT Hub",
  "createVersion": "2017-08-12",
  "description": "New Project",
  "lastModified": "2019-02-26T06:47:26.005Z",
  "created": "2019-02-26T06:47:26.005Z",
  "meta": {
    "projectTypeName": "NXP Rapid IoT",
    "projectTypeId": "NxpRpk"
  },
  "planes": {
    "NXP Rapid IoT": {
      "type": "mcuxpresso",
      "compilerVersion": "latest",
      "variants": [
        "NxpRpk"
      ],
      "meta": {},
      "elements": [
        {
          "name": "EmbeddedStaticTextDisplay",
          "type": "EmbeddedStaticTextDisplay",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables",
            "rpk"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "displayPage": "\n\tATMO_UI_Page_DisplayPageByCoord(ATMO_PROPERTY(EmbeddedStaticTextDisplay, x), ATMO_PROPERTY(EmbeddedStaticTextDisplay, y), false);\n\treturn ATMO_Status_Success;\n\t",
              "topRightButtonPressed": "\n\treturn ATMO_Status_Success;\n\t",
              "bottomRightButtonPressed": "\n\treturn ATMO_Status_Success;\n\t",
              "topLeftButtonPressed": "\n\treturn ATMO_Status_Success;\n\t",
              "bottomLeftButtonPressed": "\n\treturn ATMO_Status_Success;\n\t",
              "onDisplayed": "\n\treturn ATMO_Status_Success;\n    ",
              "setText": "\n    ATMO_Value_t strVal;\n    ATMO_InitValue(&strVal);\n    ATMO_CreateValueConverted(&strVal, ATMO_DATATYPE_STRING, in);\n    ATMO_UI_STATICTEXT_SetText(ATMO_VARIABLE(EmbeddedStaticTextDisplay,pageHandle), strVal.data);\n    ATMO_FreeValue(&strVal);\n\treturn ATMO_Status_Success;\n\t",
              "setup": "\n    ATMO_UI_PAGE_Config_t config;\n\tconfig.hidden = ATMO_PROPERTY(EmbeddedStaticTextDisplay, pageHidden);\n\tconfig.textColor = ATMO_PROPERTY(EmbeddedStaticTextDisplay, textColor);\n\tconfig.activeButtons = ATMO_UI_Page_GetButtonMask(ATMO_PROPERTY(EmbeddedStaticTextDisplay, topRightButtonEnabled),\n\t\tATMO_PROPERTY(EmbeddedStaticTextDisplay,bottomRightButtonEnabled), ATMO_PROPERTY(EmbeddedStaticTextDisplay, topLeftButtonEnabled), ATMO_PROPERTY(EmbeddedStaticTextDisplay, bottomLeftButtonEnabled));\n    config.x = ATMO_PROPERTY(EmbeddedStaticTextDisplay, x);\n\tconfig.y = ATMO_PROPERTY(EmbeddedStaticTextDisplay, y);\n\tstrncpy(config.topLeftButtonLabel, ATMO_PROPERTY(EmbeddedStaticTextDisplay, topLeftButtonLabel), ATMO_BUTTON_LABEL_MAXLEN);\n\tstrncpy(config.topRightButtonLabel, ATMO_PROPERTY(EmbeddedStaticTextDisplay, topRightButtonLabel), ATMO_BUTTON_LABEL_MAXLEN);\n\tstrncpy(config.bottomLeftButtonLabel, ATMO_PROPERTY(EmbeddedStaticTextDisplay, bottomLeftButtonLabel), ATMO_BUTTON_LABEL_MAXLEN);\n\tstrncpy(config.bottomRightButtonLabel, ATMO_PROPERTY(EmbeddedStaticTextDisplay, bottomRightButtonLabel), ATMO_BUTTON_LABEL_MAXLEN);\n    config.spanX = ATMO_PROPERTY(EmbeddedStaticTextDisplay, spanX);\n\tconfig.spanY = ATMO_PROPERTY(EmbeddedStaticTextDisplay, spanY);\n    config.title = ATMO_PROPERTY(EmbeddedStaticTextDisplay, pageTitle);\n    config.titleHidden = ATMO_PROPERTY(EmbeddedStaticTextDisplay, titleHidden);\n\tATMO_UI_STATICTEXT_Init(&config);\n\tATMO_VARIABLE(EmbeddedStaticTextDisplay, pageHandle) = config.templateInstance;\n    ATMO_UI_STATICTEXT_SetText(config.templateInstance, ATMO_PROPERTY(EmbeddedStaticTextDisplay, text));\n\tATMO_UI_STATICTEXT_SetTextSize(config.templateInstance, ATMO_PROPERTY(EmbeddedStaticTextDisplay, fontSize));\n\tATMO_UI_STATICTEXT_SetAlignment(config.templateInstance, ATMO_PROPERTY(EmbeddedStaticTextDisplay, horizontalAlignment));\n\tATMO_UI_STATICTEXT_RegisterButtonAbilityHandle(ATMO_VARIABLE(EmbeddedStaticTextDisplay,pageHandle), 1, ATMO_ABILITY(EmbeddedStaticTextDisplay, topRightButtonPressed));\n\tATMO_UI_STATICTEXT_RegisterButtonAbilityHandle(ATMO_VARIABLE(EmbeddedStaticTextDisplay,pageHandle), 2, ATMO_ABILITY(EmbeddedStaticTextDisplay, bottomRightButtonPressed));\n\tATMO_UI_STATICTEXT_RegisterButtonAbilityHandle(ATMO_VARIABLE(EmbeddedStaticTextDisplay,pageHandle), 3, ATMO_ABILITY(EmbeddedStaticTextDisplay, topLeftButtonPressed));\n    ATMO_UI_STATICTEXT_RegisterButtonAbilityHandle(ATMO_VARIABLE(EmbeddedStaticTextDisplay,pageHandle), 4, ATMO_ABILITY(EmbeddedStaticTextDisplay, bottomLeftButtonPressed));\n    \n\tif(!config.hidden)\n\t{\n\t\tATMO_UI_STATICTEXT_RegisterOnDisplayedAbilityHandle(ATMO_VARIABLE(EmbeddedStaticTextDisplay,pageHandle), ATMO_ABILITY(EmbeddedStaticTextDisplay, onDisplayed));\n\t}\n    return ATMO_Status_Success;\n    "
            },
            "variables": {
              "pageHandle": {
                "type": "ATMO_DriverInstanceHandle_t"
              }
            },
            "embeddedPropertyConversions": {
              "pageTitle": "string",
              "topRightButtonLabel": "string",
              "bottomRightButtonLabel": "string",
              "topLeftButtonLabel": "string",
              "bottomLeftButtonLabel": "string",
              "text": "string"
            },
            "codeUserChanged": {
              "displayPage": false,
              "topRightButtonPressed": false,
              "bottomRightButtonPressed": false,
              "topLeftButtonPressed": false,
              "bottomLeftButtonPressed": false,
              "onDisplayed": false,
              "setText": false,
              "setup": false
            },
            "textColor": "GUI_BLACK",
            "pageTitle": "Interactive IoT Hub",
            "titleHidden": false,
            "pageHidden": false,
            "topRightButtonLabel": "",
            "topRightButtonEnabled": false,
            "bottomRightButtonLabel": "",
            "bottomRightButtonEnabled": false,
            "topLeftButtonLabel": "",
            "topLeftButtonEnabled": false,
            "bottomLeftButtonLabel": "",
            "bottomLeftButtonEnabled": false,
            "x": 0,
            "y": 0,
            "spanX": 1,
            "spanY": 1,
            "text": "Connecting to server...",
            "fontSize": "ATMO_FONT_SIZE_20PT",
            "horizontalAlignment": "GUI_TA_LEFT"
          },
          "meta": {
            "editorX": 179,
            "editorY": 42,
            "lastTrigger": "onDisplayed"
          },
          "triggers": {
            "triggered": [],
            "topRightButtonPressed": [],
            "bottomRightButtonPressed": [],
            "topLeftButtonPressed": [],
            "bottomLeftButtonPressed": [],
            "onDisplayed": []
          },
          "interruptAbilities": {
            "trigger": false,
            "displayPage": false,
            "topRightButtonPressed": false,
            "bottomRightButtonPressed": false,
            "topLeftButtonPressed": false,
            "bottomLeftButtonPressed": false,
            "onDisplayed": false,
            "setText": false,
            "setup": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "displayPage",
              "triggers": []
            },
            {
              "name": "topRightButtonPressed",
              "triggers": [
                "topRightButtonPressed"
              ]
            },
            {
              "name": "bottomRightButtonPressed",
              "triggers": [
                "bottomRightButtonPressed"
              ]
            },
            {
              "name": "topLeftButtonPressed",
              "triggers": [
                "topLeftButtonPressed"
              ]
            },
            {
              "name": "bottomLeftButtonPressed",
              "triggers": [
                "bottomLeftButtonPressed"
              ]
            },
            {
              "name": "onDisplayed",
              "triggers": [
                "onDisplayed"
              ]
            },
            {
              "name": "setText",
              "triggers": []
            },
            {
              "name": "setup",
              "triggers": []
            }
          ]
        },
        {
          "name": "DisplayPerson",
          "type": "EmbeddedFunction",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\t\n\t// IAIN HACK DISPLAY SPLASH PAGE\nGUI_Clear();\nif (in->data[0]) {\n  switch (in->data[0]) {\n    case 'b':\n      GUI_GIF_Draw(_img_cool, _img_cool_length, 30, 5);\n      break;\n    case 'c':\n      GUI_GIF_Draw(_img_cry, _img_cry_length, 30, 5);\n      break;\n    case 'd':\n      GUI_GIF_Draw(_img_dead, _img_dead_length, 30, 5);\n      break;\n    case 'e':\n      GUI_GIF_Draw(_img_eat, _img_eat_length, 30, 5);\n      break;\n    case 'f':\n      GUI_GIF_Draw(_img_happy, _img_happy_length, 30, 5);\n      break;\n    case 'g':\n      GUI_GIF_Draw(_img_hello, _img_hello_length, 30, 5);\n      break;\n    case 'h':\n      GUI_GIF_Draw(_img_hungry, _img_hungry_length, 30, 5);\n      break;\n    case 'i':\n      GUI_GIF_Draw(_img_laughing, _img_laughing_length, 30, 5);\n      break;\n    case 'j':\n      GUI_GIF_Draw(_img_music, _img_music_length, 30, 5);\n      break;\n    case 'k':\n      GUI_GIF_Draw(_img_sad, _img_sad_length, 30, 5);\n      break;\n    case 'l':\n      GUI_GIF_Draw(_img_selfie, _img_selfie_length, 30, 5);\n      break;\n    case 'm':\n      GUI_GIF_Draw(_img_shower, _img_shower_length, 30, 5);\n      break;\n    case 'n':\n      GUI_GIF_Draw(_img_sick, _img_sick_length, 30, 5);\n      break;\n  }\n}\n\nchar txtWindow[41];\nif (in->data[1] != '\\0') {\n  int si;\n  for (si = 0; si < 40; si++) {\n    txtWindow[si] = in->data[si+1];\n    if (txtWindow[si] == '\\0') break;\n  }\n  txtWindow[si+1] = '\\0';\n}\n\nGUI_SetFont(&GUI_Font20_ASCII);\nGUI_SetTextMode(GUI_TM_NORMAL);\nGUI_DispStringHCenterAt(txtWindow, 172/2, 172 - 24);\n\n// END HACK\n\n\t\n\t\n\treturn ATMO_Status_Success;"
            },
            "variables": {},
            "embeddedPropertyConversions": {},
            "codeUserChanged": {
              "trigger": true
            }
          },
          "meta": {
            "editorX": 368,
            "editorY": 186,
            "lastTrigger": "triggered"
          },
          "triggers": {
            "triggered": []
          },
          "interruptAbilities": {
            "trigger": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            }
          ]
        },
        {
          "name": "BLECharacteristicCustom",
          "type": "EmbeddedBLECharacteristicCustom",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables",
            "ble"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_BLE_GATTSAddService(\n\t\tATMO_PROPERTY(BLECharacteristicCustom, instance),\n\t\t&ATMO_VARIABLE(BLECharacteristicCustom, bleServiceHandle), \n\t\tATMO_PROPERTY(BLECharacteristicCustom, bleServiceUuid));\n\t\n\tuint8_t property = 0;\n\tuint8_t permission = 0;\n\t\n\tproperty |= ATMO_PROPERTY(BLECharacteristicCustom, read) ? ATMO_BLE_Property_Read : 0;\n\tproperty |= ATMO_PROPERTY(BLECharacteristicCustom, write) ? ATMO_BLE_Property_Write : 0;\n\tproperty |= ATMO_PROPERTY(BLECharacteristicCustom, notify) ? ATMO_BLE_Property_Notify : 0;\n\n\tpermission |= ATMO_PROPERTY(BLECharacteristicCustom, read) ? ATMO_BLE_Permission_Read : 0;\n\tpermission |= ATMO_PROPERTY(BLECharacteristicCustom, write) ? ATMO_BLE_Permission_Write : 0;\n\n\tATMO_DATATYPE types[3] = {ATMO_PROPERTY(BLECharacteristicCustom, writeDataType), ATMO_PROPERTY(BLECharacteristicCustom, readDataType), ATMO_PROPERTY(BLECharacteristicCustom, notifyDataType)};\n\t\n\tATMO_BLE_GATTSAddCharacteristic(\n\t\tATMO_PROPERTY(BLECharacteristicCustom, instance),\n\t\t&ATMO_VARIABLE(BLECharacteristicCustom, bleCharacteristicHandle), \n\t\tATMO_VARIABLE(BLECharacteristicCustom, bleServiceHandle), \n\t\tATMO_PROPERTY(BLECharacteristicCustom, bleCharacteristicUuid), \n\t\tproperty, permission, ATMO_GetMaxValueSize(3, 64, types));\n\t\n\tATMO_BLE_GATTSRegisterCharacteristicAbilityHandle(\n\t\tATMO_PROPERTY(BLECharacteristicCustom, instance),\n\t\tATMO_VARIABLE(BLECharacteristicCustom, bleCharacteristicHandle), \n\t\tATMO_BLE_Characteristic_Written, \n\t\tATMO_ABILITY(BLECharacteristicCustom, written));\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setValue": "\n\t\n\t// Convert to the desired write data type\n\tATMO_Value_t convertedValue;\n\tATMO_InitValue(&convertedValue);\n\tATMO_CreateValueConverted(&convertedValue, ATMO_PROPERTY(BLECharacteristicCustom, readDataType), in);\n\n\tATMO_BLE_GATTSSetCharacteristic(\n\t\tATMO_PROPERTY(BLECharacteristicCustom, instance),\n\t\tATMO_VARIABLE(BLECharacteristicCustom, bleCharacteristicHandle),\n\t\tconvertedValue.size, \n\t\t(uint8_t *)convertedValue.data,\n\t\tNULL);\n\t\n\tATMO_FreeValue(&convertedValue);\n\t\t\n\treturn ATMO_Status_Success;\n\t",
              "written": "\n\tATMO_CreateValueConverted(out, ATMO_PROPERTY(BLECharacteristicCustom, writeDataType), in);\n\treturn ATMO_Status_Success;\n\t",
              "subscibed": "\treturn ATMO_Status_Success;",
              "unsubscribed": "\treturn ATMO_Status_Success;"
            },
            "variables": {
              "bleServiceHandle": {
                "type": "ATMO_BLE_Handle_t"
              },
              "bleCharacteristicHandle": {
                "type": "ATMO_BLE_Handle_t"
              }
            },
            "embeddedPropertyConversions": {
              "bleServiceUuid": "string",
              "bleCharacteristicUuid": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "setValue": false,
              "written": false,
              "subscibed": false,
              "unsubscribed": false
            },
            "instance": "ATMO_DRIVERINSTANCE_BLE_BLE1",
            "bleServiceUuid": "2d441758-e231-4bf3-a514-d447cb8d55dc",
            "bleCharacteristicUuid": "2d441758-e231-4bf3-a514-d447cb8d55dd",
            "read": false,
            "write": true,
            "notify": false,
            "readDataType": "ATMO_DATATYPE_STRING",
            "writeDataType": "ATMO_DATATYPE_STRING",
            "notifyDataType": "ATMO_DATATYPE_STRING"
          },
          "meta": {
            "editorX": 179,
            "editorY": 186,
            "lastTrigger": "written"
          },
          "triggers": {
            "triggered": [],
            "written": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "DisplayPerson",
                "targetAbility": "trigger"
              }
            ],
            "subscibed": [],
            "unsubscribed": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setValue": "valueSet",
            "written": true,
            "subscibed": true,
            "unsubscribed": true
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setValue",
              "triggers": []
            },
            {
              "name": "written",
              "triggers": [
                "written"
              ]
            },
            {
              "name": "subscibed",
              "triggers": [
                "subscibed"
              ]
            },
            {
              "name": "unsubscribed",
              "triggers": [
                "unsubscribed"
              ]
            }
          ]
        },
        {
          "name": "ENS210TemperatureHumidity",
          "type": "EmbeddedENS210",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\tATMO_ENS210_Config_t config;\n\tconfig.address = ATMO_PROPERTY(ENS210TemperatureHumidity, i2cAddress);\n\tconfig.i2cDriverInstance = ATMO_PROPERTY(ENS210TemperatureHumidity, i2cInstance);\n\tconfig.tempCalibrationOffset = ATMO_PROPERTY(ENS210TemperatureHumidity, tempCalibrationOffset);\n\n\treturn ( ATMO_ENS210_Init(&config) == ATMO_ENS210_Status_Success ) ? ATMO_Status_Success : ATMO_Status_Fail;\n",
              "setEnabled": "ATMO_ENS210_SetEnabled(true);\nreturn ATMO_Status_Success;",
              "setDisabled": "ATMO_ENS210_SetEnabled(false);\nreturn ATMO_Status_Success;",
              "setEnabledDisabled": "bool enabled = false;\nATMO_GetBool(in, &enabled);\nATMO_ENS210_SetEnabled(enabled);\nreturn ATMO_Status_Success;",
              "readTemperature": "    float tempC;\n    \n    if(ATMO_ENS210_GetTemperatureFloat(&tempC) == ATMO_ENS210_Status_Success)\n    {\n        ATMO_CreateValueFloat(out, tempC);\n    }\n    else\n    {\n        ATMO_CreateValueVoid(out);\n    }\n    \n    return ATMO_Status_Success;",
              "readHumidity": "    float humidityPct;\n\n    if(ATMO_ENS210_GetHumidityFloat(&humidityPct) == ATMO_ENS210_Status_Success)\n    {\n        ATMO_CreateValueFloat(out, humidityPct);\n    }\n    else\n    {\n        ATMO_CreateValueVoid(out);\n    }\n    \n    return ATMO_Status_Success;"
            },
            "variables": {},
            "embeddedPropertyConversions": {},
            "codeUserChanged": {
              "setup": false,
              "setEnabled": false,
              "setDisabled": false,
              "setEnabledDisabled": false,
              "readTemperature": false,
              "readHumidity": false
            },
            "i2cInstance": "ATMO_DRIVERINSTANCE_I2C_I2C2",
            "i2cAddress": "0x43",
            "tempCalibrationOffset": -7
          },
          "meta": {
            "editorX": 164,
            "editorY": 383,
            "lastTrigger": "humidityRead"
          },
          "triggers": {
            "triggered": [],
            "temperatureRead": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "Temp",
                "targetAbility": "setValue"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "Humidity",
                "targetAbility": "setValue"
              }
            ],
            "humidityRead": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "Humidity",
                "targetAbility": "setValue"
              }
            ]
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setEnabled": false,
            "setDisabled": false,
            "setEnabledDisabled": false,
            "readTemperature": false,
            "readHumidity": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setEnabled",
              "triggers": []
            },
            {
              "name": "setDisabled",
              "triggers": []
            },
            {
              "name": "setEnabledDisabled",
              "triggers": []
            },
            {
              "name": "readTemperature",
              "triggers": [
                "temperatureRead"
              ]
            },
            {
              "name": "readHumidity",
              "triggers": [
                "humidityRead"
              ]
            }
          ]
        },
        {
          "name": "CCS811AirQuality",
          "type": "EmbeddedCCS811",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\tATMO_CCS811_Config_t config;\n\tconfig.operatingMode = ATMO_PROPERTY(CCS811AirQuality, operatingMode);\n\tconfig.address = ATMO_PROPERTY(CCS811AirQuality, i2cAddress);\n\tconfig.i2cDriverInstance = ATMO_PROPERTY(CCS811AirQuality, i2cInstance);\n\n\treturn ( ATMO_CCS811_Init(&config) == ATMO_CCS811_Status_Success ) ? ATMO_Status_Success : ATMO_Status_Fail;\n",
              "setEnabled": "ATMO_CCS811_SetEnabled(true);\nreturn ATMO_Status_Success;",
              "setDisabled": "ATMO_CCS811_SetEnabled(false);\nreturn ATMO_Status_Success;",
              "setEnabledDisabled": "bool enabled = false;\nATMO_GetBool(in, &enabled);\nATMO_CCS811_SetEnabled(enabled);\nreturn ATMO_Status_Success;",
              "readTVOC": "    uint16_t tvoc;\n\n    if(ATMO_CCS811_GetTVOC(&tvoc) == ATMO_CCS811_Status_Success)\n    {\n        ATMO_CreateValueUnsignedInt(out, (unsigned int)tvoc);\n    }\n    else\n    {\n        ATMO_CreateValueVoid(out);\n    }\n    \n    return ATMO_Status_Success;",
              "readCO2": "    uint16_t co2;\n    \n    if(ATMO_CCS811_GetCO2(&co2) == ATMO_CCS811_Status_Success)\n    {\n        ATMO_CreateValueInt(out, (int)co2);\n    }\n    else\n    {\n        ATMO_CreateValueVoid(out);\n    }\n  \n    return ATMO_Status_Success;"
            },
            "variables": {},
            "embeddedPropertyConversions": {},
            "codeUserChanged": {
              "setup": false,
              "setEnabled": false,
              "setDisabled": false,
              "setEnabledDisabled": false,
              "readTVOC": false,
              "readCO2": false
            },
            "i2cInstance": "ATMO_DRIVERINSTANCE_I2C_I2C2",
            "i2cAddress": "0x5A",
            "operatingMode": "ATMO_CCS811_OperatingMode_1"
          },
          "meta": {
            "editorX": 163,
            "editorY": 494,
            "lastTrigger": "TVOCRead"
          },
          "triggers": {
            "triggered": [],
            "TVOCRead": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "AirQuality",
                "targetAbility": "setValue"
              }
            ],
            "CO2Read": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setEnabled": false,
            "setDisabled": false,
            "setEnabledDisabled": false,
            "readTVOC": false,
            "readCO2": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setEnabled",
              "triggers": []
            },
            {
              "name": "setDisabled",
              "triggers": []
            },
            {
              "name": "setEnabledDisabled",
              "triggers": []
            },
            {
              "name": "readTVOC",
              "triggers": [
                "TVOCRead"
              ]
            },
            {
              "name": "readCO2",
              "triggers": [
                "CO2Read"
              ]
            }
          ]
        },
        {
          "name": "FXOS8700AccelerometerMagnetometer",
          "type": "EmbeddedFXOS8700",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\tATMO_FXOS8700_Config_t config;\n\tconfig.address = ATMO_PROPERTY(FXOS8700AccelerometerMagnetometer, i2cAddress);\n\tconfig.i2cDriverInstance = ATMO_PROPERTY(FXOS8700AccelerometerMagnetometer, i2cInstance);\n\tconfig.gpioDriverInstance = ATMO_PROPERTY(FXOS8700AccelerometerMagnetometer, gpioInstance);\n\tconfig.int1En = ATMO_PROPERTY(FXOS8700AccelerometerMagnetometer, interrupt1Enabled);\n    config.int2En = ATMO_PROPERTY(FXOS8700AccelerometerMagnetometer, interrupt2Enabled);\n    config.int1Pin = ATMO_PROPERTY(FXOS8700AccelerometerMagnetometer, interrupt1Gpio);\n    config.int2Pin = ATMO_PROPERTY(FXOS8700AccelerometerMagnetometer, interrupt2Gpio);\n\n    switch(ATMO_PROPERTY(FXOS8700AccelerometerMagnetometer, motionDetectType))\n    {\n        case FXOS8700_NoDetect:\n        {\n            config.freefallEnabled = false;\n            config.motionEnabled = false;\n            config.tapDetectionEnabled = false;\n            break;\n        }\n        case FXOS8700_FreefallDetect:\n        {\n            config.freefallEnabled = true;\n            config.motionEnabled = false;\n            config.tapDetectionEnabled = false;\n            break;\n        }\n        case FXOS8700_MotionDetect:\n        {\n            config.freefallEnabled = false;\n            config.motionEnabled = true;\n            config.tapDetectionEnabled = false;\n            break;\n        }\n        case FXOS8700_TapDetect:\n        {\n            config.freefallEnabled = false;\n            config.motionEnabled = false;\n            config.tapDetectionEnabled = true;\n            break; \n        }\n        default:\n        {\n            config.freefallEnabled = false;\n            config.motionEnabled = false;  \n            config.tapDetectionEnabled = false;\n            break;\n        }\n    }\n\n    ATMO_FXOS8700_SetMotionDetectedAbilityHandle(ATMO_ABILITY(FXOS8700AccelerometerMagnetometer, detectMotion));\n    ATMO_FXOS8700_SetFreefallDetectedAbilityHandle(ATMO_ABILITY(FXOS8700AccelerometerMagnetometer, detectFreefall));\n    ATMO_FXOS8700_SetTapDetectedAbilityHandle(ATMO_ABILITY(FXOS8700AccelerometerMagnetometer, detectTap));\n\tATMO_FXOS8700_Init(&config);\n\n    return ATMO_Status_Success;\n\t",
              "setEnabled": "ATMO_FXOS8700_SetEnabled(true);\nreturn ATMO_Status_Success;",
              "setDisabled": "ATMO_FXOS8700_SetEnabled(false);\nreturn ATMO_Status_Success;",
              "setEnabledDisabled": "bool enabled = false;\nATMO_GetBool(in, &enabled);\nATMO_FXOS8700_SetEnabled(enabled);\nreturn ATMO_Status_Success;",
              "getAccelData": "    ATMO_3dFloatVector_t data;\r\n\r\n    if( ATMO_FXOS8700_GetAccelData(&data) != ATMO_FXOS8700_Status_Success )\r\n    {\r\n        ATMO_CreateValueVoid(out);\r\n        return ATMO_Status_Fail;\r\n    }\r\n\r\n    ATMO_CreateValue3dVectorFloat(out, &data);\r\n\r\n    return ATMO_Status_Success;",
              "getAccelX": "\tATMO_3dFloatVector_t data;\n\n\tif(ATMO_FXOS8700_GetAccelData(&data) != ATMO_FXOS8700_Status_Success)\n\t{\n\t\tATMO_CreateValueVoid(out);\n\t\treturn ATMO_Status_Fail;\n\t}\n\n\tATMO_CreateValueFloat(out, data.x);\n\treturn ATMO_Status_Success;\n",
              "getAccelY": "\tATMO_3dFloatVector_t data;\n\n\tif(ATMO_FXOS8700_GetAccelData(&data) != ATMO_FXOS8700_Status_Success)\n\t{\n\t\tATMO_CreateValueVoid(out);\n\t\treturn ATMO_Status_Fail;\n\t}\n\n\tATMO_CreateValueFloat(out, data.y);\n\treturn ATMO_Status_Success;\n",
              "getAccelZ": "\tATMO_3dFloatVector_t data;\n\n\tif(ATMO_FXOS8700_GetAccelData(&data) != ATMO_FXOS8700_Status_Success)\n\t{\n\t\tATMO_CreateValueVoid(out);\n\t\treturn ATMO_Status_Fail;\n\t}\n\n\tATMO_CreateValueFloat(out, data.z);\n\treturn ATMO_Status_Success;\n",
              "getMagData": "    ATMO_3dFloatVector_t data;\r\n\r\n    if( ATMO_FXOS8700_GetMagData(&data) != ATMO_FXOS8700_Status_Success )\r\n    {\r\n        ATMO_CreateValueVoid(out);\r\n        return ATMO_Status_Fail;\r\n    }\r\n\r\n    ATMO_CreateValue3dVectorFloat(out, &data);\r\n\r\n    return ATMO_Status_Success;",
              "getMagX": "\tATMO_3dFloatVector_t data;\n\n\tif(ATMO_FXOS8700_GetMagData(&data) != ATMO_FXOS8700_Status_Success)\n\t{\n\t\tATMO_CreateValueVoid(out);\n\t\treturn ATMO_Status_Fail;\n\t}\n\n\tATMO_CreateValueFloat(out, data.x);\n\treturn ATMO_Status_Success;\n",
              "getMagY": "\tATMO_3dFloatVector_t data;\n\n\tif(ATMO_FXOS8700_GetMagData(&data) != ATMO_FXOS8700_Status_Success)\n\t{\n\t\tATMO_CreateValueVoid(out);\n\t\treturn ATMO_Status_Fail;\n\t}\n\n\tATMO_CreateValueFloat(out, data.y);\n\treturn ATMO_Status_Success;\n",
              "getMagZ": "\tATMO_3dFloatVector_t data;\n\n\tif(ATMO_FXOS8700_GetMagData(&data) != ATMO_FXOS8700_Status_Success)\n\t{\n\t\tATMO_CreateValueVoid(out);\n\t\treturn ATMO_Status_Fail;\n\t}\n\n\tATMO_CreateValueFloat(out, data.z);\n\treturn ATMO_Status_Success;\n",
              "detectTap": "\treturn ATMO_Status_Success;\n",
              "detectMotion": "\treturn ATMO_Status_Success;\n",
              "detectFreefall": "\treturn ATMO_Status_Success;\n",
              "enableFreefallDetection": "if(ATMO_FXOS8700_EnableFreefallDetection() == ATMO_FXOS8700_Status_Success)\n{\n    return ATMO_Status_Success;\n}\n\nreturn ATMO_Status_Fail;",
              "enableMotionDetection": "if(ATMO_FXOS8700_EnableMotionDetection() == ATMO_FXOS8700_Status_Success)\n{\n    return ATMO_Status_Success;\n}\n\nreturn ATMO_Status_Fail;",
              "enableTapDetection": "if(ATMO_FXOS8700_EnableTapDetection() == ATMO_FXOS8700_Status_Success)\n{\n    return ATMO_Status_Success;\n}\n\nreturn ATMO_Status_Fail;",
              "disableDetection": "if(ATMO_FXOS8700_DisableAllDetection() == ATMO_FXOS8700_Status_Success)\n{\n    return ATMO_Status_Success;\n}\n\nreturn ATMO_Status_Fail;"
            },
            "variables": {},
            "embeddedPropertyConversions": {},
            "codeUserChanged": {
              "setup": false,
              "setEnabled": false,
              "setDisabled": false,
              "setEnabledDisabled": false,
              "getAccelData": false,
              "getAccelX": false,
              "getAccelY": false,
              "getAccelZ": false,
              "getMagData": false,
              "getMagX": false,
              "getMagY": false,
              "getMagZ": false,
              "detectTap": false,
              "detectMotion": false,
              "detectFreefall": false,
              "enableFreefallDetection": false,
              "enableMotionDetection": false,
              "enableTapDetection": false,
              "disableDetection": false
            },
            "i2cInstance": "ATMO_DRIVERINSTANCE_I2C_I2C2",
            "gpioInstance": "ATMO_DRIVERINSTANCE_GPIO_GPIO1",
            "interrupt1Enabled": true,
            "interrupt2Enabled": true,
            "interrupt1Gpio": "ATMO_DEFAULT_GPIO",
            "interrupt2Gpio": "PTD13",
            "motionDetectType": "FXOS8700_MotionDetect",
            "i2cAddress": "0x1E"
          },
          "meta": {
            "editorX": 229,
            "editorY": 589,
            "lastTrigger": "motionDetected"
          },
          "triggers": {
            "triggered": [],
            "accelDataRead": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "HasMotion",
                "targetAbility": "setValue"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "EmbeddedNxpRpkBacklight",
                "targetAbility": "setBacklightHigh"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "Interval1",
                "targetAbility": "trigger"
              }
            ],
            "accelXRead": [],
            "accelYRead": [],
            "accelZRead": [],
            "magDataRead": [],
            "magXRead": [],
            "magYRead": [],
            "magZRead": [],
            "tapDetected": [],
            "motionDetected": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "EmbeddedNxpRpkBacklight",
                "targetAbility": "setBacklightHigh"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "HasMotion",
                "targetAbility": "trigger"
              }
            ],
            "freefallDetected": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setEnabled": false,
            "setDisabled": false,
            "setEnabledDisabled": false,
            "getAccelData": false,
            "getAccelX": false,
            "getAccelY": false,
            "getAccelZ": false,
            "getMagData": false,
            "getMagX": false,
            "getMagY": false,
            "getMagZ": false,
            "detectTap": false,
            "detectMotion": false,
            "detectFreefall": false,
            "enableFreefallDetection": false,
            "enableMotionDetection": false,
            "enableTapDetection": false,
            "disableDetection": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setEnabled",
              "triggers": []
            },
            {
              "name": "setDisabled",
              "triggers": []
            },
            {
              "name": "setEnabledDisabled",
              "triggers": []
            },
            {
              "name": "getAccelData",
              "triggers": [
                "accelDataRead"
              ]
            },
            {
              "name": "getAccelX",
              "triggers": [
                "accelXRead"
              ]
            },
            {
              "name": "getAccelY",
              "triggers": [
                "accelYRead"
              ]
            },
            {
              "name": "getAccelZ",
              "triggers": [
                "accelZRead"
              ]
            },
            {
              "name": "getMagData",
              "triggers": [
                "magDataRead"
              ]
            },
            {
              "name": "getMagX",
              "triggers": [
                "magXRead"
              ]
            },
            {
              "name": "getMagY",
              "triggers": [
                "magYRead"
              ]
            },
            {
              "name": "getMagZ",
              "triggers": [
                "magZRead"
              ]
            },
            {
              "name": "detectTap",
              "triggers": [
                "tapDetected"
              ]
            },
            {
              "name": "detectMotion",
              "triggers": [
                "motionDetected"
              ]
            },
            {
              "name": "detectFreefall",
              "triggers": [
                "freefallDetected"
              ]
            },
            {
              "name": "enableFreefallDetection",
              "triggers": []
            },
            {
              "name": "enableMotionDetection",
              "triggers": []
            },
            {
              "name": "enableTapDetection",
              "triggers": []
            },
            {
              "name": "disableDetection",
              "triggers": []
            }
          ]
        },
        {
          "name": "MPL3115Pressure",
          "type": "EmbeddedMPL3115",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\tATMO_MPL3115_Config_t config;\n\tconfig.address = ATMO_PROPERTY(MPL3115Pressure, i2cAddress);\n\tconfig.i2cDriverInstance = ATMO_PROPERTY(MPL3115Pressure, i2cInstance);\n\tconfig.MPLsettings.mode = MPL_MODE_PRESSURE;\n\tconfig.MPLsettings.oversample = MPL_OS_0;\t\t\t// oversampling = 1\n\tconfig.MPLsettings.autoAcquisitionTime = MPL_ST_0;\t// Auto acquisition time = 1s\n\tconfig.MPLsettings.pressureOffset = ATMO_PROPERTY(MPL3115Pressure, pressureOffset);\t// Offset pressure correction = 4*-128 = -512Pa (8 bits signed integer)\n\tconfig.MPLsettings.altitudeOffset = ATMO_PROPERTY(MPL3115Pressure, altitudeOffset);\t// Offset altitude correction = 128m (signed 8 bits integer)\n\tconfig.MPLsettings.tempOffset = ATMO_PROPERTY(MPL3115Pressure, tempOffset);\t\t\t// Offset temperature correction -8°C (0.0625°C/LSB)\n\tconfig.MPLsettings.fifoMode = FIFO_DISABLED;\t\t// FIFO mode disabled\n\tconfig.MPLsettings.fifoWatermark = 5;\t\t\t\t// 6 bits to set the number of FIFO samples required to trigger a watermark interrupt.\n\tconfig.MPLsettings.fifoINTpin = FIFO_INT1;\t\t\t// set pin INT1 as output for FIFO interrupt\n\n\treturn ( ATMO_MPL3115_Init(&config) == ATMO_MPL3115_Status_Success ) ? ATMO_Status_Success : ATMO_Status_Fail;\n",
              "setEnabled": "ATMO_MPL3115_SetEnabled(true);\nreturn ATMO_Status_Success;",
              "setDisabled": "ATMO_MPL3115_SetEnabled(false);\nreturn ATMO_Status_Success;",
              "setEnabledDisabled": "bool enabled = false;\nATMO_GetBool(in, &enabled);\nATMO_MPL3115_SetEnabled(enabled);\nreturn ATMO_Status_Success;",
              "readAltitude": "    uint32_t altitudeMeters;\n    if(ATMO_MPL3115_GetAltitude(&altitudeMeters) != ATMO_MPL3115_Status_Success)\n    {\n        ATMO_CreateValueVoid(out);\n        return ATMO_Status_Fail;\n    }\n    ATMO_CreateValueInt(out, (int)altitudeMeters);\n    return ATMO_Status_Success;",
              "readPressure": "    uint32_t pressurePa;\n    if(ATMO_MPL3115_GetPressure(&pressurePa) != ATMO_MPL3115_Status_Success)\n    {\n        ATMO_CreateValueVoid(out);\n        return ATMO_Status_Fail;\n    }\n    ATMO_CreateValueInt(out, (int)pressurePa);\n    return ATMO_Status_Success;",
              "readPressureKpa": "    uint32_t pressurePa;\n    if(ATMO_MPL3115_GetPressure(&pressurePa) != ATMO_MPL3115_Status_Success)\n    {\n        ATMO_CreateValueVoid(out);\n        return ATMO_Status_Fail;\n    }\n    ATMO_CreateValueInt(out, (int)(pressurePa/1000));\n    return ATMO_Status_Success;"
            },
            "variables": {},
            "embeddedPropertyConversions": {},
            "codeUserChanged": {
              "setup": false,
              "setEnabled": false,
              "setDisabled": false,
              "setEnabledDisabled": false,
              "readAltitude": false,
              "readPressure": false,
              "readPressureKpa": false
            },
            "i2cInstance": "ATMO_DRIVERINSTANCE_I2C_I2C2",
            "i2cAddress": "0x60",
            "pressureOffset": "0",
            "altitudeOffset": "0",
            "tempOffset": "0"
          },
          "meta": {
            "editorX": 159,
            "editorY": 697,
            "lastTrigger": "pressureRead"
          },
          "triggers": {
            "triggered": [],
            "altitudeRead": [],
            "pressureRead": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "ConvertPressure",
                "targetAbility": "trigger"
              }
            ],
            "pressureReadKpa": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setEnabled": false,
            "setDisabled": false,
            "setEnabledDisabled": false,
            "readAltitude": false,
            "readPressure": false,
            "readPressureKpa": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setEnabled",
              "triggers": []
            },
            {
              "name": "setDisabled",
              "triggers": []
            },
            {
              "name": "setEnabledDisabled",
              "triggers": []
            },
            {
              "name": "readAltitude",
              "triggers": [
                "altitudeRead"
              ]
            },
            {
              "name": "readPressure",
              "triggers": [
                "pressureRead"
              ]
            },
            {
              "name": "readPressureKpa",
              "triggers": [
                "pressureReadKpa"
              ]
            }
          ]
        },
        {
          "name": "Interval",
          "type": "EmbeddedInterval",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_INTERVAL_Handle_t intervalHandle;\n    ATMO_INTERVAL_AddAbilityInterval(\n\t\tATMO_PROPERTY(Interval, instance), \n\t\tATMO_ABILITY(Interval, interval), \n\t\tATMO_PROPERTY(Interval, time), \n\t\t&intervalHandle\n\t);\n\t\n\treturn ATMO_Status_Success;\n\t",
              "interval": "\treturn ATMO_Status_Success;"
            },
            "variables": {},
            "embeddedPropertyConversions": {},
            "codeUserChanged": {
              "setup": false,
              "interval": false
            },
            "instance": "ATMO_DRIVERINSTANCE_INTERVAL_INTERVAL1",
            "time": "10000"
          },
          "meta": {
            "editorX": 12,
            "editorY": 533,
            "lastTrigger": "interval"
          },
          "triggers": {
            "triggered": [],
            "interval": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "ENS210TemperatureHumidity",
                "targetAbility": "readTemperature"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "CCS811AirQuality",
                "targetAbility": "readTVOC"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "MPL3115Pressure",
                "targetAbility": "readPressure"
              },
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "TSL2572AmbientLight",
                "targetAbility": "readAmbientLight"
              }
            ]
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "interval": true
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "interval",
              "triggers": [
                "interval"
              ]
            }
          ]
        },
        {
          "name": "ConvertPressure",
          "type": "EmbeddedFunction",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\tunsigned int pressurePa = 0;\n\tATMO_GetUnsignedInt(in, &pressurePa);\n\tATMO_CreateValueUnsignedInt(out, pressurePa / 100);\n\treturn ATMO_Status_Success;\n\treturn ATMO_Status_Success;"
            },
            "variables": {},
            "embeddedPropertyConversions": {},
            "codeUserChanged": {
              "trigger": true
            }
          },
          "meta": {
            "editorX": 273,
            "editorY": 714,
            "lastTrigger": "triggered"
          },
          "triggers": {
            "triggered": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "Pressure",
                "targetAbility": "setValue"
              }
            ]
          },
          "interruptAbilities": {
            "trigger": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            }
          ]
        },
        {
          "name": "WellKnownRecord",
          "type": "EmbeddedNfcWellKnown",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables",
            "nfc"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n    ATMO_NFC_RegisterStoredRecord(ATMO_PROPERTY(WellKnownRecord, instance), &ATMO_VARIABLE(WellKnownRecord, record), &ATMO_VARIABLE(WellKnownRecord, recordHandle));\n\n    if(ATMO_PROPERTY(WellKnownRecord, type) == ATMO_NFC_TYPE_WELLKNOWN_TEXT)\n    {\n        ATMO_NFC_MakeRecordText(&ATMO_VARIABLE(WellKnownRecord, record), ATMO_PROPERTY(WellKnownRecord, defaultValue));\n    }\n    else\n    {\n        ATMO_NFC_MakeRecordURL(&ATMO_VARIABLE(WellKnownRecord, record), ATMO_PROPERTY(WellKnownRecord, defaultValue));\n    }\n\n    ATMO_NFC_SyncAtmoRecords(ATMO_PROPERTY(WellKnownRecord, instance));\n\n\treturn ATMO_Status_Success;\n\t",
              "setRecord": "\n    char str[128];\n\n    if( ATMO_GetString(in, str, 128) != ATMO_Status_Success )\n    {\n        return ATMO_Status_Fail;\n    }\n\n    if(ATMO_PROPERTY(WellKnownRecord, type) == ATMO_NFC_TYPE_WELLKNOWN_TEXT)\n    {\n        ATMO_NFC_MakeRecordText(&ATMO_VARIABLE(WellKnownRecord, record), str);\n    }\n    else\n    {\n        ATMO_NFC_MakeRecordURL(&ATMO_VARIABLE(WellKnownRecord, record), str);\n    }\n\n    ATMO_NFC_SyncAtmoRecords(ATMO_PROPERTY(WellKnownRecord, instance));\n\treturn ATMO_Status_Success;\n\t"
            },
            "variables": {
              "record": {
                "type": "ATMO_NFC_Record_t"
              },
              "recordHandle": {
                "type": "unsigned int"
              }
            },
            "embeddedPropertyConversions": {
              "defaultValue": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "setRecord": false
            },
            "instance": "ATMO_DRIVERINSTANCE_NFC_NFC1",
            "type": "ATMO_NFC_TYPE_WELLKNOWN_URL",
            "defaultValue": "https://github.com/iainnash"
          },
          "meta": {
            "editorX": 368,
            "editorY": 40,
            "lastTrigger": "recordSet"
          },
          "triggers": {
            "triggered": [],
            "recordSet": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setRecord": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setRecord",
              "triggers": [
                "recordSet"
              ]
            }
          ]
        },
        {
          "name": "Temp",
          "type": "EmbeddedBLECharacteristicCustom",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables",
            "ble"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_BLE_GATTSAddService(\n\t\tATMO_PROPERTY(Temp, instance),\n\t\t&ATMO_VARIABLE(Temp, bleServiceHandle), \n\t\tATMO_PROPERTY(Temp, bleServiceUuid));\n\t\n\tuint8_t property = 0;\n\tuint8_t permission = 0;\n\t\n\tproperty |= ATMO_PROPERTY(Temp, read) ? ATMO_BLE_Property_Read : 0;\n\tproperty |= ATMO_PROPERTY(Temp, write) ? ATMO_BLE_Property_Write : 0;\n\tproperty |= ATMO_PROPERTY(Temp, notify) ? ATMO_BLE_Property_Notify : 0;\n\n\tpermission |= ATMO_PROPERTY(Temp, read) ? ATMO_BLE_Permission_Read : 0;\n\tpermission |= ATMO_PROPERTY(Temp, write) ? ATMO_BLE_Permission_Write : 0;\n\n\tATMO_DATATYPE types[3] = {ATMO_PROPERTY(Temp, writeDataType), ATMO_PROPERTY(Temp, readDataType), ATMO_PROPERTY(Temp, notifyDataType)};\n\t\n\tATMO_BLE_GATTSAddCharacteristic(\n\t\tATMO_PROPERTY(Temp, instance),\n\t\t&ATMO_VARIABLE(Temp, bleCharacteristicHandle), \n\t\tATMO_VARIABLE(Temp, bleServiceHandle), \n\t\tATMO_PROPERTY(Temp, bleCharacteristicUuid), \n\t\tproperty, permission, ATMO_GetMaxValueSize(3, 64, types));\n\t\n\tATMO_BLE_GATTSRegisterCharacteristicAbilityHandle(\n\t\tATMO_PROPERTY(Temp, instance),\n\t\tATMO_VARIABLE(Temp, bleCharacteristicHandle), \n\t\tATMO_BLE_Characteristic_Written, \n\t\tATMO_ABILITY(Temp, written));\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setValue": "\n\t\n\t// Convert to the desired write data type\n\tATMO_Value_t convertedValue;\n\tATMO_InitValue(&convertedValue);\n\tATMO_CreateValueConverted(&convertedValue, ATMO_PROPERTY(Temp, readDataType), in);\n\n\tATMO_BLE_GATTSSetCharacteristic(\n\t\tATMO_PROPERTY(Temp, instance),\n\t\tATMO_VARIABLE(Temp, bleCharacteristicHandle),\n\t\tconvertedValue.size, \n\t\t(uint8_t *)convertedValue.data,\n\t\tNULL);\n\t\n\tATMO_FreeValue(&convertedValue);\n\t\t\n\treturn ATMO_Status_Success;\n\t",
              "written": "\n\tATMO_CreateValueConverted(out, ATMO_PROPERTY(Temp, writeDataType), in);\n\treturn ATMO_Status_Success;\n\t",
              "subscibed": "\treturn ATMO_Status_Success;",
              "unsubscribed": "\treturn ATMO_Status_Success;"
            },
            "variables": {
              "bleServiceHandle": {
                "type": "ATMO_BLE_Handle_t"
              },
              "bleCharacteristicHandle": {
                "type": "ATMO_BLE_Handle_t"
              }
            },
            "embeddedPropertyConversions": {
              "bleServiceUuid": "string",
              "bleCharacteristicUuid": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "setValue": false,
              "written": false,
              "subscibed": false,
              "unsubscribed": false
            },
            "instance": "ATMO_DRIVERINSTANCE_BLE_BLE1",
            "bleServiceUuid": "2d441758-e231-4bf3-a514-d447cb8d55dc",
            "bleCharacteristicUuid": "2d441758-e231-4bf3-a514-d447cb8d55de",
            "read": true,
            "write": false,
            "notify": true,
            "readDataType": "ATMO_DATATYPE_FLOAT",
            "writeDataType": "ATMO_DATATYPE_FLOAT",
            "notifyDataType": "ATMO_DATATYPE_FLOAT"
          },
          "meta": {
            "editorX": 348,
            "editorY": 316,
            "lastTrigger": "written"
          },
          "triggers": {
            "triggered": [],
            "written": [],
            "subscibed": [],
            "unsubscribed": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setValue": "valueSet",
            "written": true,
            "subscibed": true,
            "unsubscribed": true
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setValue",
              "triggers": []
            },
            {
              "name": "written",
              "triggers": [
                "written"
              ]
            },
            {
              "name": "subscibed",
              "triggers": [
                "subscibed"
              ]
            },
            {
              "name": "unsubscribed",
              "triggers": [
                "unsubscribed"
              ]
            }
          ]
        },
        {
          "name": "Humidity",
          "type": "EmbeddedBLECharacteristicCustom",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables",
            "ble"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_BLE_GATTSAddService(\n\t\tATMO_PROPERTY(Humidity, instance),\n\t\t&ATMO_VARIABLE(Humidity, bleServiceHandle), \n\t\tATMO_PROPERTY(Humidity, bleServiceUuid));\n\t\n\tuint8_t property = 0;\n\tuint8_t permission = 0;\n\t\n\tproperty |= ATMO_PROPERTY(Humidity, read) ? ATMO_BLE_Property_Read : 0;\n\tproperty |= ATMO_PROPERTY(Humidity, write) ? ATMO_BLE_Property_Write : 0;\n\tproperty |= ATMO_PROPERTY(Humidity, notify) ? ATMO_BLE_Property_Notify : 0;\n\n\tpermission |= ATMO_PROPERTY(Humidity, read) ? ATMO_BLE_Permission_Read : 0;\n\tpermission |= ATMO_PROPERTY(Humidity, write) ? ATMO_BLE_Permission_Write : 0;\n\n\tATMO_DATATYPE types[3] = {ATMO_PROPERTY(Humidity, writeDataType), ATMO_PROPERTY(Humidity, readDataType), ATMO_PROPERTY(Humidity, notifyDataType)};\n\t\n\tATMO_BLE_GATTSAddCharacteristic(\n\t\tATMO_PROPERTY(Humidity, instance),\n\t\t&ATMO_VARIABLE(Humidity, bleCharacteristicHandle), \n\t\tATMO_VARIABLE(Humidity, bleServiceHandle), \n\t\tATMO_PROPERTY(Humidity, bleCharacteristicUuid), \n\t\tproperty, permission, ATMO_GetMaxValueSize(3, 64, types));\n\t\n\tATMO_BLE_GATTSRegisterCharacteristicAbilityHandle(\n\t\tATMO_PROPERTY(Humidity, instance),\n\t\tATMO_VARIABLE(Humidity, bleCharacteristicHandle), \n\t\tATMO_BLE_Characteristic_Written, \n\t\tATMO_ABILITY(Humidity, written));\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setValue": "\n\t\n\t// Convert to the desired write data type\n\tATMO_Value_t convertedValue;\n\tATMO_InitValue(&convertedValue);\n\tATMO_CreateValueConverted(&convertedValue, ATMO_PROPERTY(Humidity, readDataType), in);\n\n\tATMO_BLE_GATTSSetCharacteristic(\n\t\tATMO_PROPERTY(Humidity, instance),\n\t\tATMO_VARIABLE(Humidity, bleCharacteristicHandle),\n\t\tconvertedValue.size, \n\t\t(uint8_t *)convertedValue.data,\n\t\tNULL);\n\t\n\tATMO_FreeValue(&convertedValue);\n\t\t\n\treturn ATMO_Status_Success;\n\t",
              "written": "\n\tATMO_CreateValueConverted(out, ATMO_PROPERTY(Humidity, writeDataType), in);\n\treturn ATMO_Status_Success;\n\t",
              "subscibed": "\treturn ATMO_Status_Success;",
              "unsubscribed": "\treturn ATMO_Status_Success;"
            },
            "variables": {
              "bleServiceHandle": {
                "type": "ATMO_BLE_Handle_t"
              },
              "bleCharacteristicHandle": {
                "type": "ATMO_BLE_Handle_t"
              }
            },
            "embeddedPropertyConversions": {
              "bleServiceUuid": "string",
              "bleCharacteristicUuid": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "setValue": false,
              "written": false,
              "subscibed": false,
              "unsubscribed": false
            },
            "instance": "ATMO_DRIVERINSTANCE_BLE_BLE1",
            "bleServiceUuid": "2d441758-e231-4bf3-a514-d447cb8d55dc",
            "bleCharacteristicUuid": "2d441758-e231-4bf3-a514-d447cb8d55df",
            "read": true,
            "write": false,
            "notify": true,
            "readDataType": "ATMO_DATATYPE_FLOAT",
            "writeDataType": "ATMO_DATATYPE_FLOAT",
            "notifyDataType": "ATMO_DATATYPE_FLOAT"
          },
          "meta": {
            "editorX": 348,
            "editorY": 403,
            "lastTrigger": "written"
          },
          "triggers": {
            "triggered": [],
            "written": [],
            "subscibed": [],
            "unsubscribed": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setValue": "valueSet",
            "written": true,
            "subscibed": true,
            "unsubscribed": true
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setValue",
              "triggers": []
            },
            {
              "name": "written",
              "triggers": [
                "written"
              ]
            },
            {
              "name": "subscibed",
              "triggers": [
                "subscibed"
              ]
            },
            {
              "name": "unsubscribed",
              "triggers": [
                "unsubscribed"
              ]
            }
          ]
        },
        {
          "name": "AirQuality",
          "type": "EmbeddedBLECharacteristicCustom",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables",
            "ble"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_BLE_GATTSAddService(\n\t\tATMO_PROPERTY(AirQuality, instance),\n\t\t&ATMO_VARIABLE(AirQuality, bleServiceHandle), \n\t\tATMO_PROPERTY(AirQuality, bleServiceUuid));\n\t\n\tuint8_t property = 0;\n\tuint8_t permission = 0;\n\t\n\tproperty |= ATMO_PROPERTY(AirQuality, read) ? ATMO_BLE_Property_Read : 0;\n\tproperty |= ATMO_PROPERTY(AirQuality, write) ? ATMO_BLE_Property_Write : 0;\n\tproperty |= ATMO_PROPERTY(AirQuality, notify) ? ATMO_BLE_Property_Notify : 0;\n\n\tpermission |= ATMO_PROPERTY(AirQuality, read) ? ATMO_BLE_Permission_Read : 0;\n\tpermission |= ATMO_PROPERTY(AirQuality, write) ? ATMO_BLE_Permission_Write : 0;\n\n\tATMO_DATATYPE types[3] = {ATMO_PROPERTY(AirQuality, writeDataType), ATMO_PROPERTY(AirQuality, readDataType), ATMO_PROPERTY(AirQuality, notifyDataType)};\n\t\n\tATMO_BLE_GATTSAddCharacteristic(\n\t\tATMO_PROPERTY(AirQuality, instance),\n\t\t&ATMO_VARIABLE(AirQuality, bleCharacteristicHandle), \n\t\tATMO_VARIABLE(AirQuality, bleServiceHandle), \n\t\tATMO_PROPERTY(AirQuality, bleCharacteristicUuid), \n\t\tproperty, permission, ATMO_GetMaxValueSize(3, 64, types));\n\t\n\tATMO_BLE_GATTSRegisterCharacteristicAbilityHandle(\n\t\tATMO_PROPERTY(AirQuality, instance),\n\t\tATMO_VARIABLE(AirQuality, bleCharacteristicHandle), \n\t\tATMO_BLE_Characteristic_Written, \n\t\tATMO_ABILITY(AirQuality, written));\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setValue": "\n\t\n\t// Convert to the desired write data type\n\tATMO_Value_t convertedValue;\n\tATMO_InitValue(&convertedValue);\n\tATMO_CreateValueConverted(&convertedValue, ATMO_PROPERTY(AirQuality, readDataType), in);\n\n\tATMO_BLE_GATTSSetCharacteristic(\n\t\tATMO_PROPERTY(AirQuality, instance),\n\t\tATMO_VARIABLE(AirQuality, bleCharacteristicHandle),\n\t\tconvertedValue.size, \n\t\t(uint8_t *)convertedValue.data,\n\t\tNULL);\n\t\n\tATMO_FreeValue(&convertedValue);\n\t\t\n\treturn ATMO_Status_Success;\n\t",
              "written": "\n\tATMO_CreateValueConverted(out, ATMO_PROPERTY(AirQuality, writeDataType), in);\n\treturn ATMO_Status_Success;\n\t",
              "subscibed": "\treturn ATMO_Status_Success;",
              "unsubscribed": "\treturn ATMO_Status_Success;"
            },
            "variables": {
              "bleServiceHandle": {
                "type": "ATMO_BLE_Handle_t"
              },
              "bleCharacteristicHandle": {
                "type": "ATMO_BLE_Handle_t"
              }
            },
            "embeddedPropertyConversions": {
              "bleServiceUuid": "string",
              "bleCharacteristicUuid": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "setValue": false,
              "written": false,
              "subscibed": false,
              "unsubscribed": false
            },
            "instance": "ATMO_DRIVERINSTANCE_BLE_BLE1",
            "bleServiceUuid": "2d441758-e231-4bf3-a514-d447cb8d55dc",
            "bleCharacteristicUuid": "2d441758-e231-4bf3-a514-d447cb8d55e0",
            "read": true,
            "write": false,
            "notify": true,
            "readDataType": "ATMO_DATATYPE_UNSIGNED_INT",
            "writeDataType": "ATMO_DATATYPE_UNSIGNED_INT",
            "notifyDataType": "ATMO_DATATYPE_UNSIGNED_INT"
          },
          "meta": {
            "editorX": 343,
            "editorY": 494,
            "lastTrigger": "written"
          },
          "triggers": {
            "triggered": [],
            "written": [],
            "subscibed": [],
            "unsubscribed": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setValue": "valueSet",
            "written": true,
            "subscibed": true,
            "unsubscribed": true
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setValue",
              "triggers": []
            },
            {
              "name": "written",
              "triggers": [
                "written"
              ]
            },
            {
              "name": "subscibed",
              "triggers": [
                "subscibed"
              ]
            },
            {
              "name": "unsubscribed",
              "triggers": [
                "unsubscribed"
              ]
            }
          ]
        },
        {
          "name": "HasMotion",
          "type": "EmbeddedBLECharacteristicCustom",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables",
            "ble"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_BLE_GATTSAddService(\n\t\tATMO_PROPERTY(HasMotion, instance),\n\t\t&ATMO_VARIABLE(HasMotion, bleServiceHandle), \n\t\tATMO_PROPERTY(HasMotion, bleServiceUuid));\n\t\n\tuint8_t property = 0;\n\tuint8_t permission = 0;\n\t\n\tproperty |= ATMO_PROPERTY(HasMotion, read) ? ATMO_BLE_Property_Read : 0;\n\tproperty |= ATMO_PROPERTY(HasMotion, write) ? ATMO_BLE_Property_Write : 0;\n\tproperty |= ATMO_PROPERTY(HasMotion, notify) ? ATMO_BLE_Property_Notify : 0;\n\n\tpermission |= ATMO_PROPERTY(HasMotion, read) ? ATMO_BLE_Permission_Read : 0;\n\tpermission |= ATMO_PROPERTY(HasMotion, write) ? ATMO_BLE_Permission_Write : 0;\n\n\tATMO_DATATYPE types[3] = {ATMO_PROPERTY(HasMotion, writeDataType), ATMO_PROPERTY(HasMotion, readDataType), ATMO_PROPERTY(HasMotion, notifyDataType)};\n\t\n\tATMO_BLE_GATTSAddCharacteristic(\n\t\tATMO_PROPERTY(HasMotion, instance),\n\t\t&ATMO_VARIABLE(HasMotion, bleCharacteristicHandle), \n\t\tATMO_VARIABLE(HasMotion, bleServiceHandle), \n\t\tATMO_PROPERTY(HasMotion, bleCharacteristicUuid), \n\t\tproperty, permission, ATMO_GetMaxValueSize(3, 64, types));\n\t\n\tATMO_BLE_GATTSRegisterCharacteristicAbilityHandle(\n\t\tATMO_PROPERTY(HasMotion, instance),\n\t\tATMO_VARIABLE(HasMotion, bleCharacteristicHandle), \n\t\tATMO_BLE_Characteristic_Written, \n\t\tATMO_ABILITY(HasMotion, written));\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setValue": "\n\t\n\t// Convert to the desired write data type\n\tATMO_Value_t convertedValue;\n\tATMO_InitValue(&convertedValue);\n\tATMO_CreateValueConverted(&convertedValue, ATMO_PROPERTY(HasMotion, readDataType), in);\n\n\tATMO_BLE_GATTSSetCharacteristic(\n\t\tATMO_PROPERTY(HasMotion, instance),\n\t\tATMO_VARIABLE(HasMotion, bleCharacteristicHandle),\n\t\tconvertedValue.size, \n\t\t(uint8_t *)convertedValue.data,\n\t\tNULL);\n\t\n\tATMO_FreeValue(&convertedValue);\n\t\t\n\treturn ATMO_Status_Success;\n\t",
              "written": "\n\tATMO_CreateValueConverted(out, ATMO_PROPERTY(HasMotion, writeDataType), in);\n\treturn ATMO_Status_Success;\n\t",
              "subscibed": "\treturn ATMO_Status_Success;",
              "unsubscribed": "\treturn ATMO_Status_Success;"
            },
            "variables": {
              "bleServiceHandle": {
                "type": "ATMO_BLE_Handle_t"
              },
              "bleCharacteristicHandle": {
                "type": "ATMO_BLE_Handle_t"
              }
            },
            "embeddedPropertyConversions": {
              "bleServiceUuid": "string",
              "bleCharacteristicUuid": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "setValue": false,
              "written": false,
              "subscibed": false,
              "unsubscribed": false
            },
            "instance": "ATMO_DRIVERINSTANCE_BLE_BLE1",
            "bleServiceUuid": "2d441758-e231-4bf3-a514-d447cb8d55dc",
            "bleCharacteristicUuid": "2d441758-e231-4bf3-a514-d447cb8d55e1",
            "read": false,
            "write": false,
            "notify": true,
            "readDataType": "ATMO_DATATYPE_VOID",
            "writeDataType": "ATMO_DATATYPE_VOID",
            "notifyDataType": "ATMO_DATATYPE_VOID"
          },
          "meta": {
            "editorX": 433,
            "editorY": 575,
            "lastTrigger": "written"
          },
          "triggers": {
            "triggered": [],
            "written": [],
            "subscibed": [],
            "unsubscribed": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setValue": "valueSet",
            "written": true,
            "subscibed": true,
            "unsubscribed": true
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setValue",
              "triggers": []
            },
            {
              "name": "written",
              "triggers": [
                "written"
              ]
            },
            {
              "name": "subscibed",
              "triggers": [
                "subscibed"
              ]
            },
            {
              "name": "unsubscribed",
              "triggers": [
                "unsubscribed"
              ]
            }
          ]
        },
        {
          "name": "EmbeddedNxpRpkBacklight",
          "type": "EmbeddedNxpRpkBacklight",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables",
            "rpk"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n    Backlight_SetLevel(ATMO_PROPERTY(EmbeddedNxpRpkBacklight, initialSetting));\n\treturn ATMO_Status_Success;\n\t",
              "setBacklightOff": "\n    Backlight_SetLevel(BLIGHT_LEVEL_OFF);\n\treturn ATMO_Status_Success;\n    ",
              "setBacklightLow": "\n    Backlight_SetLevel(BLIGHT_LEVEL_LOW);\n\treturn ATMO_Status_Success;\n\t",
              "setBacklightMedium": "\n    Backlight_SetLevel(BLIGHT_LEVEL_MEDIUM);\n\treturn ATMO_Status_Success;\n    ",
              "setBacklightHigh": "\n    Backlight_SetLevel(BLIGHT_LEVEL_HIGH);\n\treturn ATMO_Status_Success;\n\t"
            },
            "variables": {},
            "embeddedPropertyConversions": {},
            "codeUserChanged": {
              "setup": false,
              "setBacklightOff": false,
              "setBacklightLow": false,
              "setBacklightMedium": false,
              "setBacklightHigh": false
            },
            "initialSetting": "BLIGHT_LEVEL_LOW"
          },
          "meta": {
            "editorX": 592,
            "editorY": 770,
            "lastTrigger": "backlightSet"
          },
          "triggers": {
            "triggered": [],
            "backlightSet": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setBacklightOff": false,
            "setBacklightLow": false,
            "setBacklightMedium": false,
            "setBacklightHigh": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setBacklightOff",
              "triggers": [
                "backlightSet"
              ]
            },
            {
              "name": "setBacklightLow",
              "triggers": [
                "backlightSet"
              ]
            },
            {
              "name": "setBacklightMedium",
              "triggers": [
                "backlightSet"
              ]
            },
            {
              "name": "setBacklightHigh",
              "triggers": [
                "backlightSet"
              ]
            }
          ]
        },
        {
          "name": "Interval1",
          "type": "EmbeddedInterval",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_INTERVAL_Handle_t intervalHandle;\n    ATMO_INTERVAL_AddAbilityInterval(\n\t\tATMO_PROPERTY(Interval1, instance), \n\t\tATMO_ABILITY(Interval1, interval), \n\t\tATMO_PROPERTY(Interval1, time), \n\t\t&intervalHandle\n\t);\n\t\n\treturn ATMO_Status_Success;\n\t",
              "interval": "\treturn ATMO_Status_Success;"
            },
            "variables": {},
            "embeddedPropertyConversions": {},
            "codeUserChanged": {
              "setup": false,
              "interval": false
            },
            "instance": "ATMO_DRIVERINSTANCE_INTERVAL_INTERVAL1",
            "time": "20000"
          },
          "meta": {
            "editorX": 457,
            "editorY": 686,
            "lastTrigger": "interval"
          },
          "triggers": {
            "triggered": [],
            "interval": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "EmbeddedNxpRpkBacklight",
                "targetAbility": "setBacklightLow"
              }
            ]
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "interval": true
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "interval",
              "triggers": [
                "interval"
              ]
            }
          ]
        },
        {
          "name": "Pressure",
          "type": "EmbeddedBLECharacteristicCustom",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables",
            "ble"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_BLE_GATTSAddService(\n\t\tATMO_PROPERTY(Pressure, instance),\n\t\t&ATMO_VARIABLE(Pressure, bleServiceHandle), \n\t\tATMO_PROPERTY(Pressure, bleServiceUuid));\n\t\n\tuint8_t property = 0;\n\tuint8_t permission = 0;\n\t\n\tproperty |= ATMO_PROPERTY(Pressure, read) ? ATMO_BLE_Property_Read : 0;\n\tproperty |= ATMO_PROPERTY(Pressure, write) ? ATMO_BLE_Property_Write : 0;\n\tproperty |= ATMO_PROPERTY(Pressure, notify) ? ATMO_BLE_Property_Notify : 0;\n\n\tpermission |= ATMO_PROPERTY(Pressure, read) ? ATMO_BLE_Permission_Read : 0;\n\tpermission |= ATMO_PROPERTY(Pressure, write) ? ATMO_BLE_Permission_Write : 0;\n\n\tATMO_DATATYPE types[3] = {ATMO_PROPERTY(Pressure, writeDataType), ATMO_PROPERTY(Pressure, readDataType), ATMO_PROPERTY(Pressure, notifyDataType)};\n\t\n\tATMO_BLE_GATTSAddCharacteristic(\n\t\tATMO_PROPERTY(Pressure, instance),\n\t\t&ATMO_VARIABLE(Pressure, bleCharacteristicHandle), \n\t\tATMO_VARIABLE(Pressure, bleServiceHandle), \n\t\tATMO_PROPERTY(Pressure, bleCharacteristicUuid), \n\t\tproperty, permission, ATMO_GetMaxValueSize(3, 64, types));\n\t\n\tATMO_BLE_GATTSRegisterCharacteristicAbilityHandle(\n\t\tATMO_PROPERTY(Pressure, instance),\n\t\tATMO_VARIABLE(Pressure, bleCharacteristicHandle), \n\t\tATMO_BLE_Characteristic_Written, \n\t\tATMO_ABILITY(Pressure, written));\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setValue": "\n\t\n\t// Convert to the desired write data type\n\tATMO_Value_t convertedValue;\n\tATMO_InitValue(&convertedValue);\n\tATMO_CreateValueConverted(&convertedValue, ATMO_PROPERTY(Pressure, readDataType), in);\n\n\tATMO_BLE_GATTSSetCharacteristic(\n\t\tATMO_PROPERTY(Pressure, instance),\n\t\tATMO_VARIABLE(Pressure, bleCharacteristicHandle),\n\t\tconvertedValue.size, \n\t\t(uint8_t *)convertedValue.data,\n\t\tNULL);\n\t\n\tATMO_FreeValue(&convertedValue);\n\t\t\n\treturn ATMO_Status_Success;\n\t",
              "written": "\n\tATMO_CreateValueConverted(out, ATMO_PROPERTY(Pressure, writeDataType), in);\n\treturn ATMO_Status_Success;\n\t",
              "subscibed": "\treturn ATMO_Status_Success;",
              "unsubscribed": "\treturn ATMO_Status_Success;"
            },
            "variables": {
              "bleServiceHandle": {
                "type": "ATMO_BLE_Handle_t"
              },
              "bleCharacteristicHandle": {
                "type": "ATMO_BLE_Handle_t"
              }
            },
            "embeddedPropertyConversions": {
              "bleServiceUuid": "string",
              "bleCharacteristicUuid": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "setValue": false,
              "written": false,
              "subscibed": false,
              "unsubscribed": false
            },
            "instance": "ATMO_DRIVERINSTANCE_BLE_BLE1",
            "bleServiceUuid": "2d441758-e231-4bf3-a514-d447cb8d55dc",
            "bleCharacteristicUuid": "2d441758-e231-4bf3-a514-d447cb8d55e2",
            "read": true,
            "write": false,
            "notify": true,
            "readDataType": "ATMO_DATATYPE_UNSIGNED_INT",
            "writeDataType": "ATMO_DATATYPE_UNSIGNED_INT",
            "notifyDataType": "ATMO_DATATYPE_UNSIGNED_INT"
          },
          "meta": {
            "editorX": 392,
            "editorY": 765,
            "lastTrigger": "written"
          },
          "triggers": {
            "triggered": [],
            "written": [],
            "subscibed": [],
            "unsubscribed": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setValue": "valueSet",
            "written": true,
            "subscibed": true,
            "unsubscribed": true
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setValue",
              "triggers": []
            },
            {
              "name": "written",
              "triggers": [
                "written"
              ]
            },
            {
              "name": "subscibed",
              "triggers": [
                "subscibed"
              ]
            },
            {
              "name": "unsubscribed",
              "triggers": [
                "unsubscribed"
              ]
            }
          ]
        },
        {
          "name": "TSL2572AmbientLight",
          "type": "EmbeddedTSL2572",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\tATMO_TSL2572_Config_t config;\n\tconfig.address = ATMO_PROPERTY(TSL2572AmbientLight, i2cAddress);\n\tconfig.i2cDriverInstance = ATMO_PROPERTY(TSL2572AmbientLight, i2cInstance);\n\n\treturn ( ATMO_TSL2572_Init(&config) == ATMO_TSL2572_Status_Success ) ? ATMO_Status_Success : ATMO_Status_Fail;\n",
              "setEnabled": "ATMO_TSL2572_SetEnabled(true);\nreturn ATMO_Status_Success;",
              "setDisabled": "ATMO_TSL2572_SetEnabled(false);\nreturn ATMO_Status_Success;",
              "setEnabledDisabled": "bool enabled = false;\nATMO_GetBool(in, &enabled);\nATMO_TSL2572_SetEnabled(enabled);\nreturn ATMO_Status_Success;",
              "readAmbientLight": "    float lightLux;\n    if(ATMO_TSL2572_GetAmbientLight(&lightLux) != ATMO_TSL2572_Status_Success)\n    {\n        ATMO_CreateValueVoid(out);\n        return ATMO_Status_Fail;\n    }\n    ATMO_CreateValueInt(out, (int)lightLux);\n    return ATMO_Status_Success;"
            },
            "variables": {},
            "embeddedPropertyConversions": {},
            "codeUserChanged": {
              "setup": false,
              "setEnabled": false,
              "setDisabled": false,
              "setEnabledDisabled": false,
              "readAmbientLight": false
            },
            "i2cInstance": "ATMO_DRIVERINSTANCE_I2C_I2C2",
            "i2cAddress": "0x39"
          },
          "meta": {
            "editorX": 161,
            "editorY": 796,
            "lastTrigger": "ambientLightRead"
          },
          "triggers": {
            "triggered": [],
            "ambientLightRead": [
              {
                "mapping": {},
                "targetOrder": [],
                "targetElement": "AmbientLight",
                "targetAbility": "setValue"
              }
            ]
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setEnabled": false,
            "setDisabled": false,
            "setEnabledDisabled": false,
            "readAmbientLight": false
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setEnabled",
              "triggers": []
            },
            {
              "name": "setDisabled",
              "triggers": []
            },
            {
              "name": "setEnabledDisabled",
              "triggers": []
            },
            {
              "name": "readAmbientLight",
              "triggers": [
                "ambientLightRead"
              ]
            }
          ]
        },
        {
          "name": "AmbientLight",
          "type": "EmbeddedBLECharacteristicCustom",
          "variants": [
            "embedded",
            "triggers",
            "abilities",
            "properties",
            "variables",
            "ble"
          ],
          "properties": {
            "errorData": {},
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_BLE_GATTSAddService(\n\t\tATMO_PROPERTY(AmbientLight, instance),\n\t\t&ATMO_VARIABLE(AmbientLight, bleServiceHandle), \n\t\tATMO_PROPERTY(AmbientLight, bleServiceUuid));\n\t\n\tuint8_t property = 0;\n\tuint8_t permission = 0;\n\t\n\tproperty |= ATMO_PROPERTY(AmbientLight, read) ? ATMO_BLE_Property_Read : 0;\n\tproperty |= ATMO_PROPERTY(AmbientLight, write) ? ATMO_BLE_Property_Write : 0;\n\tproperty |= ATMO_PROPERTY(AmbientLight, notify) ? ATMO_BLE_Property_Notify : 0;\n\n\tpermission |= ATMO_PROPERTY(AmbientLight, read) ? ATMO_BLE_Permission_Read : 0;\n\tpermission |= ATMO_PROPERTY(AmbientLight, write) ? ATMO_BLE_Permission_Write : 0;\n\n\tATMO_DATATYPE types[3] = {ATMO_PROPERTY(AmbientLight, writeDataType), ATMO_PROPERTY(AmbientLight, readDataType), ATMO_PROPERTY(AmbientLight, notifyDataType)};\n\t\n\tATMO_BLE_GATTSAddCharacteristic(\n\t\tATMO_PROPERTY(AmbientLight, instance),\n\t\t&ATMO_VARIABLE(AmbientLight, bleCharacteristicHandle), \n\t\tATMO_VARIABLE(AmbientLight, bleServiceHandle), \n\t\tATMO_PROPERTY(AmbientLight, bleCharacteristicUuid), \n\t\tproperty, permission, ATMO_GetMaxValueSize(3, 64, types));\n\t\n\tATMO_BLE_GATTSRegisterCharacteristicAbilityHandle(\n\t\tATMO_PROPERTY(AmbientLight, instance),\n\t\tATMO_VARIABLE(AmbientLight, bleCharacteristicHandle), \n\t\tATMO_BLE_Characteristic_Written, \n\t\tATMO_ABILITY(AmbientLight, written));\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setValue": "\n\t\n\t// Convert to the desired write data type\n\tATMO_Value_t convertedValue;\n\tATMO_InitValue(&convertedValue);\n\tATMO_CreateValueConverted(&convertedValue, ATMO_PROPERTY(AmbientLight, readDataType), in);\n\n\tATMO_BLE_GATTSSetCharacteristic(\n\t\tATMO_PROPERTY(AmbientLight, instance),\n\t\tATMO_VARIABLE(AmbientLight, bleCharacteristicHandle),\n\t\tconvertedValue.size, \n\t\t(uint8_t *)convertedValue.data,\n\t\tNULL);\n\t\n\tATMO_FreeValue(&convertedValue);\n\t\t\n\treturn ATMO_Status_Success;\n\t",
              "written": "\n\tATMO_CreateValueConverted(out, ATMO_PROPERTY(AmbientLight, writeDataType), in);\n\treturn ATMO_Status_Success;\n\t",
              "subscibed": "\treturn ATMO_Status_Success;",
              "unsubscribed": "\treturn ATMO_Status_Success;"
            },
            "variables": {
              "bleServiceHandle": {
                "type": "ATMO_BLE_Handle_t"
              },
              "bleCharacteristicHandle": {
                "type": "ATMO_BLE_Handle_t"
              }
            },
            "embeddedPropertyConversions": {
              "bleServiceUuid": "string",
              "bleCharacteristicUuid": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "setValue": false,
              "written": false,
              "subscibed": false,
              "unsubscribed": false
            },
            "instance": "ATMO_DRIVERINSTANCE_BLE_BLE1",
            "bleServiceUuid": "2d441758-e231-4bf3-a514-d447cb8d55dc",
            "bleCharacteristicUuid": "2d441758-e231-4bf3-a514-d447cb8d55e3",
            "read": true,
            "write": false,
            "notify": true,
            "readDataType": "ATMO_DATATYPE_UNSIGNED_INT",
            "writeDataType": "ATMO_DATATYPE_UNSIGNED_INT",
            "notifyDataType": "ATMO_DATATYPE_UNSIGNED_INT"
          },
          "meta": {
            "editorX": 379,
            "editorY": 859,
            "lastTrigger": "written"
          },
          "triggers": {
            "triggered": [],
            "written": [],
            "subscibed": [],
            "unsubscribed": []
          },
          "interruptAbilities": {
            "trigger": false,
            "setup": false,
            "setValue": "valueSet",
            "written": true,
            "subscibed": true,
            "unsubscribed": true
          },
          "abilities": [
            {
              "name": "trigger",
              "triggers": [
                "triggered"
              ]
            },
            {
              "name": "setup",
              "triggers": []
            },
            {
              "name": "setValue",
              "triggers": []
            },
            {
              "name": "written",
              "triggers": [
                "written"
              ]
            },
            {
              "name": "subscibed",
              "triggers": [
                "subscibed"
              ]
            },
            {
              "name": "unsubscribed",
              "triggers": [
                "unsubscribed"
              ]
            }
          ]
        }
      ],
      "libraries": {
        "ens210": {
          "libName": "ens210",
          "description": "AMS ENS210 Humidity and Temperature Sensor",
          "type": "Humidity, Temperature Sensor",
          "icon": "",
          "manufacturer": "AMS",
          "image": "",
          "version": "",
          "eelVersion": "3",
          "shoppingCartLinks": {
            "digikey": {
              "links": {
                "info": "https://www.digikey.com/products/en/development-boards-kits-programmers/evaluation-boards-sensors/795?k=AMS%20ens210"
              },
              "cartData": {
                "part": "ENS210-QF_EK_ST-ND",
                "partid": "6490748",
                "source": "dkstudio",
                "qty": "1"
              }
            }
          },
          "requires": [
            "embedded",
            "i2c",
            "fpmath"
          ],
          "elements": [
            {
              "name": "ENS210TemperatureHumidity",
              "type": "EmbeddedENS210",
              "icon": "EmbeddedTempHumidity.svg",
              "defaultAbility": "readTemperature",
              "defaultTrigger": "temperatureRead",
              "helpPageHref": "https://developer.atmosphereiot.com/documents/elements/amsens210element.html",
              "hidden": false,
              "abilities": [
                {
                  "name": "setup",
                  "hidden": true,
                  "code": "\tATMO_ENS210_Config_t config;\n\tconfig.address = ATMO_PROPERTY(undefined, i2cAddress);\n\tconfig.i2cDriverInstance = ATMO_PROPERTY(undefined, i2cInstance);\n\tconfig.tempCalibrationOffset = ATMO_PROPERTY(undefined, tempCalibrationOffset);\n\n\treturn ( ATMO_ENS210_Init(&config) == ATMO_ENS210_Status_Success ) ? ATMO_Status_Success : ATMO_Status_Fail;\n"
                },
                {
                  "name": "setEnabled",
                  "triggers": [],
                  "code": "ATMO_ENS210_SetEnabled(true);\nreturn ATMO_Status_Success;"
                },
                {
                  "name": "setDisabled",
                  "triggers": [],
                  "code": "ATMO_ENS210_SetEnabled(false);\nreturn ATMO_Status_Success;"
                },
                {
                  "name": "setEnabledDisabled",
                  "triggers": [],
                  "code": "bool enabled = false;\nATMO_GetBool(in, &enabled);\nATMO_ENS210_SetEnabled(enabled);\nreturn ATMO_Status_Success;"
                },
                {
                  "name": "readTemperature",
                  "triggers": [
                    "temperatureRead"
                  ],
                  "code": "    float tempC;\n    \n    if(ATMO_ENS210_GetTemperatureFloat(&tempC) == ATMO_ENS210_Status_Success)\n    {\n        ATMO_CreateValueFloat(out, tempC);\n    }\n    else\n    {\n        ATMO_CreateValueVoid(out);\n    }\n    \n    return ATMO_Status_Success;"
                },
                {
                  "name": "readHumidity",
                  "triggers": [
                    "humidityRead"
                  ],
                  "code": "    float humidityPct;\n\n    if(ATMO_ENS210_GetHumidityFloat(&humidityPct) == ATMO_ENS210_Status_Success)\n    {\n        ATMO_CreateValueFloat(out, humidityPct);\n    }\n    else\n    {\n        ATMO_CreateValueVoid(out);\n    }\n    \n    return ATMO_Status_Success;"
                }
              ],
              "properties": [
                {
                  "name": "i2cInstance",
                  "input": "driverInstance",
                  "driverType": "i2c"
                },
                {
                  "name": "i2cAddress",
                  "input": "number",
                  "value": "0x43"
                },
                {
                  "name": "tempCalibrationOffset",
                  "input": "number",
                  "value": "0"
                }
              ],
              "triggers": [],
              "variables": [],
              "language": {
                "en-US": {
                  "EmbeddedENS210": "AMS ENS210",
                  "i2cInstance": "I2C Driver Instance",
                  "i2cAddress": "I2C Address",
                  "setEnabled": "Set Enabled",
                  "setDisabled": "Set Disabled",
                  "setEnabledDisabled": "Set Enabled State",
                  "readTemperature": "Read Temperature (C)",
                  "temperatureRead": "Temperature Read",
                  "readHumidity": "Read Humidity (%rh)",
                  "humidityRead": "Humidity Read",
                  "tempCalibrationOffset": "Temperature Calibration Offset"
                }
              }
            }
          ],
          "files": {
            "common": {
              "headers": {
                "ens210.h": "#ifndef _ATMO_ENS210_H_\n#define _ATMO_ENS210_H_\n\n#include \"../app_src/atmosphere_platform.h\"\n#include \"../i2c/i2c.h\"\n\ntypedef enum {\n    ATMO_ENS210_Status_Success              = 0x00u,  // Common - Operation was successful\n    ATMO_ENS210_Status_Fail                 = 0x01u,  // Common - Operation failed\n    ATMO_ENS210_Status_Initialized          = 0x02u,  // Common - Peripheral already initialized\n    ATMO_ENS210_Status_Invalid              = 0x03u,  // Common - Invalid operation or result\n    ATMO_ENS210_Status_NotSupported         = 0x04u,  // Common - Feature not supported by platform\n} ATMO_ENS210_Status_t;\n\ntypedef struct {\n    uint16_t address;\n    int16_t tempCalibrationOffset;\n    ATMO_DriverInstanceHandle_t i2cDriverInstance;\n} ATMO_ENS210_Config_t;\n\n/**\n * Initialize ENS210 Driver\n *\n * @param[in] config - Device configuration (optional)\n */\nATMO_ENS210_Status_t ATMO_ENS210_Init(ATMO_ENS210_Config_t *config);\n\n/**\n * Enable/Disable ENS210 Driver\n *\n * @param[in] enabled\n */\nATMO_ENS210_Status_t ATMO_ENS210_SetEnabled(bool enabled);\n\n/**\n * Get enabled/disabled status of ENS210 driver\n *\n * @param[out] enabled\n */\nATMO_ENS210_Status_t ATMO_ENS210_GetEnabled(bool *enabled);\n\n/**\n * Set basic device configuration\n *\n * @param[in] config\n */\nATMO_ENS210_Status_t ATMO_ENS210_SetConfiguration(const ATMO_ENS210_Config_t *config);\n\n/**\n * Get device configuration\n * \n * @param[out] config\n */\nATMO_ENS210_Status_t ATMO_ENS210_GetConfiguration(ATMO_ENS210_Config_t *config);\n\n/**\n * Get Temperature in degrees celsius\n * \n * @param[out] temperatureCelsius\n */\nATMO_ENS210_Status_t ATMO_ENS210_GetTemperature(int32_t *temperatureCelsius);\n\n/**\n * Get Humidity\n * \n * @param[out] humidityPct\n */\nATMO_ENS210_Status_t ATMO_ENS210_GetHumidity(int32_t *humidityPct);\n\n/**\n * Get Temperature in degrees celsius\n * \n * @param[out] temperatureCelsius\n */\nATMO_ENS210_Status_t ATMO_ENS210_GetTemperatureFloat(float *temperatureCelsius);\n\n/**\n * Get Humidity\n * \n * @param[out] humidityPct\n */\nATMO_ENS210_Status_t ATMO_ENS210_GetHumidityFloat(float *humidityPct);\n\n#endif\n",
                "ens210_internal.h": "/*\n*********************************************************************************\n * Copyright 2018 by ams AG                                                     *\n *                                                                              *\n * Redistribution and use in source and binary forms, with or without           *\n * modification, *are permitted provided that the following conditions are met: *\n *  1. Redistributions of source code must retain the above copyright notice,   *\n * this list of conditions and the following disclaimer.                        *\n *                                                                              *\n *  2. Redistributions in binary form must reproduce the above copyright notice,*\n *  this list of conditions and the following disclaimer in the documentation   *\n *  and/or other materials provided with the distribution.                      *\n *  3. Neither the name of the copyright holder nor the names of its            *\n * contributors may be used to endorse or promote products derived from this    *\n * software without specific prior written permission.                          *\n *                                                                              *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"  *\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    *\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   *\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE    *\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR          *\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         *\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS     *\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      *\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)      *\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   *\n * POSSIBILITY OF SUCH DAMAGE.                                                  *\n ********************************************************************************\n*/\n\n\n#ifndef __ENS210_H_\n#define __ENS210_H_\n\n#include \"../app_src/atmosphere_platform.h\"\n\n/*! @addtogroup ens210   ENS210 Driver API\n * This module provides the API to operate an ENS210 relative humidity and temperature sensor with I2C interface.\n *\n * Basic steps to operate the sensor are as follows:\n * -# Set Run mode (#ENS210_SensRun_Set)\n * -# Start measurement (#ENS210_SensStart_Set)\n * -# Wait for measurement to complete\n * -# Read measurement (#ENS210_TVal_Get, #ENS210_HVal_Get, #ENS210_THVal_Get)\n *\n * Please refer to ENS210 Reference Driver and Porting Guide for more details on platform porting. In this module, names\n * T and H have been used to refer to temperature and relative humidity respectively to comply with ENS210 datasheet\n * naming convention.\n *\n * Example 1 - Sample application code to measure temperature and relative humidity without error checking\n * -------------------------------------------------------------------------------------------------------\n * @code\n * uint32_t T_Raw, H_Raw;\n * int32_t T_mCelsius, T_mFahrenheit, T_mKelvin, H_Percent;\n *\n * //Set runmode, start measurement, wait, read measurement (for both T and H)\n * ENS210_SensRun_Set(ENS210_SENSRUN_T_MODE_SINGLE_SHOT | ENS210_SENSRUN_H_MODE_SINGLE_SHOT);\n * ENS210_SensStart_Set(ENS210_SENSSTART_T_START | ENS210_SENSSTART_H_START);\n * WaitMsec(ENS210_T_H_CONVERSION_TIME_MS);\n * ENS210_THVal_Get(&T_Raw,&H_Raw);\n *\n * //Convert the raw temperature to milli Kelvin\n * T_mKelvin = ENS210_ConvertRawToKelvin(T_Raw, 1000);\n * //Convert the raw temperature to milli Celsius\n * T_mCelsius = ENS210_ConvertRawToCelsius(T_Raw, 1000);\n * //Convert the raw temperature to milli Fahrenheit\n * T_mFahrenheit = ENS210_ConvertRawToFahrenheit(T_Raw, 1000);\n * printf(\"T crc ok = %s\\n\", ENS210_IsCrcOk(T_Raw)  ? \"yes\" : \"no\");\n * printf(\"T valid = %s \\n\", ENS210_IsDataValid(T_Raw) ? \"yes\" : \"no\");\n * //Update the int32_t format specifier (%ld) based on platform word-size\n * printf(\"T = %ld mK %ld mC %ld mF \\n\", T_mKelvin, T_mCelsius, T_mFahrenheit);\n *\n * //Convert the raw relative humidity to milli %\n * H_Percent = ENS210_ConvertRawToPercentageH(H_Raw, 1000);\n * printf(\"H crc ok = %s\\n\", ENS210_IsCrcOk(H_Raw)  ? \"yes\" : \"no\");\n * printf(\"H valid = %s \\n\", ENS210_IsDataValid(H_Raw) ? \"yes\" : \"no\");\n * //Update the int32_t format specifier (%ld) based on platform word-size\n * printf(\"H = %ld m%%\\n\", H_Percent);\n *\n * @endcode\n *\n *\n * Example 2 - Sample application code to measure relative humidity with error checking\n * ------------------------------------------------------------------------------------\n * @code\n * uint32_t H_Raw;\n * int32_t H_Percent;\n * int status;\n * bool i2cOk;\n *\n * i2cOk = true; //Start accumulating I2C transaction errors\n *\n * status = ENS210_SensRun_Set(ENS210_SENSRUN_H_MODE_SINGLE_SHOT);\n * i2cOk &= status==I2C_RESULT_OK;\n *\n * status = ENS210_SensStart_Set(ENS210_SENSSTART_H_START);\n * i2cOk &= status==I2C_RESULT_OK;\n *\n * WaitMsec(ENS210_T_H_CONVERSION_TIME_MS);\n *\n * status = ENS210_HVal_Get(&H_Raw);\n * i2cOk &= status==I2C_RESULT_OK;\n *\n * if( !i2cOk ) {\n *     printf(\"H i2c error\\n\")\n * } else if( !ENS210_IsCrcOk(H_Raw) ) {\n *     printf(\"H crc error\\n\")\n * } else if( !ENS210_IsDataValid(H_Raw) ) {\n *     printf(\"H data invalid\\n\")\n * } else {\n *     //Convert the raw relative humidity to milli %\n *     H_Percent = ENS210_ConvertRawToPercentageH(H_Raw,1000);\n *     //Update the int32_t format specifier (%ld) based on platform word-size\n *     printf(\"H = %ld m%%\\n\", H_Percent);\n * }\n *\n * @endcode\n *\n * @{\n */\n/*****************************************************************************\n * Types/enumerations/variables\n ****************************************************************************/\n\n/*! @brief Status return codes. */\ntypedef enum ens210_status_ {\n    ens210_success = 0,             /*!< Function returned successfully. */\n    ens210_I2C_error = 1,           /*!< I2C Error. */\n    ens210_invalid_ID = 2,          /*!< Invalid ID. */\n    ens210_Tdata_CRC_error = 3,     /*!< CRC error for temperature data. */\n    ens210_Hdata_CRC_error = 4,     /*!< CRC error for humidity data. */\n    ens210_T_invalid_data = 5,      /*!< Temperature Data is invalid. */\n    ens210_H_invalid_data = 6,      /*!< Humidity Data is invalid. */\n    ens210_wrong_parameter = 7,     /*!< Wrong Parameter entered. */\n    ens210_noinit = 8               /*!< ENS210 was not initialized. */\n} ens210_status_t;\n\n/*! @brief Measurement mode of Sensor */\nenum measurement_mode {\n    mode_TH = 0,        /*!< ENS210 set to measure both temperature and humidity. */\n    mode_Tonly = 1,     /*!< ENS210 set to measure temperature only. */\n    mode_Honly = 2      /*!< ENS210 set to measure humidity only. */\n};\n\n/*! ENS210 os-free driver version info */\n#define ENS210_OSFREE_DRIVER_VERSION            2\n\n/*! ENS210 T and H conversion time in milliseconds. Refer to ENS210 data sheet for timing information. */\n#define ENS210_T_H_CONVERSION_TIME_MS           130\n\n/*! ENS210 T conversion time in milliseconds */\n#define ENS210_T_CONVERSION_TIME_MS             110\n\n/*! ENS210 Booting time in milliseconds. */\n#define ENS210_BOOTING_TIME_MS                  10\n\n/*! ENS210 Reset time in milliseconds. */\n#define ENS210_RESET_WAIT_TIME_MS               10\n\n/*! ENS210 I2C slave address */\n#define ENS210_I2C_SLAVE_ADDRESS                (uint8_t)0x43\n\n/*! ENS210 SysCtrl register: Low power enable */\n#define ENS210_SYSCTRL_LOWPOWER_ENABLE          (1 << 0)\n/*! ENS210 SysCtrl register: Low power disable */\n#define ENS210_SYSCTRL_LOWPOWER_DISABLE         (0 << 0)\n/*! ENS210 SysCtrl register: Reset enable */\n#define ENS210_SYSCTRL_RESET_ENABLE             (1 << 7)\n/*! ENS210 SysCtrl register: Reset disable */\n#define ENS210_SYSCTRL_RESET_DISABLE            (0 << 7)\n\n/*! ENS210 SysStat register: Standby or Booting mode */\n#define ENS210_SYSSTAT_MODE_STANDBY             (0 << 0)\n/*! ENS210 SysStat register: Active mode */\n#define ENS210_SYSSTAT_MODE_ACTIVE              (1 << 0)\n\n\n/*! ENS210 SensRun register: temperature single shot mode */\n#define ENS210_SENSRUN_T_MODE_SINGLE_SHOT       (0 << 0)\n/*! ENS210 SensRun register: temperature continuous mode */\n#define ENS210_SENSRUN_T_MODE_CONTINUOUS        (1 << 0)\n/*! ENS210 SensRun register: relative humidity single shot mode */\n#define ENS210_SENSRUN_H_MODE_SINGLE_SHOT       (0 << 1)\n/*! ENS210 SensRun register: relative humidity continuous mode */\n#define ENS210_SENSRUN_H_MODE_CONTINUOUS        (1 << 1)\n\n/*! ENS210  SensStart register: T sensor start */\n#define ENS210_SENSSTART_T_START                (1 << 0)\n/*! ENS210  SensStart register: H sensor start */\n#define ENS210_SENSSTART_H_START                (1 << 1)\n\n/*! ENS210  SensStop register: T sensor stop */\n#define ENS210_SENSSTOP_T_STOP                  (1 << 0)\n/*! ENS210  SensStop register: H sensor stop */\n#define ENS210_SENSSTOP_H_STOP                  (1 << 1)\n\n/*! ENS210  SensStat register: T sensor idle */\n#define ENS210_SENSSTAT_T_STAT_IDLE             (0 << 0)\n/*! ENS210  SensStat register: T sensor active */\n#define ENS210_SENSSTAT_T_STAT_ACTIVE           (1 << 0)\n/*! ENS210  SensStat register: H sensor idle */\n#define ENS210_SENSSTAT_H_STAT_IDLE             (0 << 1)\n/*! ENS210  SensStat register: H sensor active */\n#define ENS210_SENSSTAT_H_STAT_ACTIVE           (1 << 1)\n\n/* wrapper for the I2C write, I2C read and wait functions needed by the sensor driver */\n/* it is expected that the I2C_Read and I2C_Write functions return 0 if the I2C transaction is successful */\ntypedef struct _ens210_IoFunc_t\n{\n    uint8_t   (*I2C_Read)(uint8_t *writeBuf, uint32_t writeSize, uint8_t *readBuf, uint32_t readSize);  /*!< External I2C read function */\n    uint8_t   (*I2C_Write)(uint8_t *writeBuf, uint32_t writeSize);  /*!< External I2C write function */\n    void      (*WaitMsec)(uint32_t millisec); /*!< Wait function in milliseconds */\n} ens210_IoFunc_t, *pens210_IoFunc_t;\n\n/*! @brief    ENS210 ID block structure */\ntypedef struct ENS210_Ids_s\n{\n    uint16_t    partId;             /*!< Part ID */\n    uint8_t     uId[8];             /*!< Unique Identifier 8 bytes */\n} ENS210_Ids_t;\n\n/*! @brief Structure of measurement data. */\ntypedef struct ens210_meas_data_s\n{\n    int32_t T_Celsius;              /*!< Temperature in Celsius */\n    int32_t T_Fahrenheit;           /*!< Temperature in Fahrenheit */\n    int32_t T_Kelvin;               /*!< Temperature in Kelvin */\n    int32_t T_mCelsius;             /*!< Temperature in milliCelsius */\n    int32_t T_mFahrenheit;          /*!< Temperature in milliFahrenheit */\n    int32_t T_mKelvin;              /*!< Temperature in milliKelvin */\n    int32_t H_Percent;              /*!< Relative Humidity to % */\n    int32_t H_mPercent;             /*!< Relative Humidity to milli% */\n} ens210_meas_data_t;\n\n/****************************************************************************\n * Function Prototypes\n ****************************************************************************/\n\n/*!\n * @brief   Initialize ENS210 driver.\n * @param   pIoFunc     :   Pointer to a structure of external functions or values\n */\nvoid ENS210_Init_Driver(ens210_IoFunc_t* pIoFunc);\n\n/*!\n * @brief   De-initialize ENS210 driver.\n */\nvoid ENS210_Deinit_Driver();\n\n/*!\n * @brief   Initialize ENS210 hardware.\n * @return  The return status value (0 for success)\n */\nens210_status_t ENS210_Init_Hw(void);\n\n/*!\n * @brief   Set ENS210 SysCtrl register; enabling reset and/or low power.\n * @param   sysCtrl     :   Mask composed of  ENS210_SYSCTRL_xxx macros.\n * @return  The return status value (0 for success)\n *  */\nens210_status_t ENS210_SysCtrl_Set(uint8_t sysCtrl);\n\n/*!\n * @brief   Get ENS210 SysCtrl register.\n * @param   sysCtrl     :   Pointer to receive value of the register. Must not be null.\n * @return  The return status value (0 for success)\n * @note    If the return indicates I2C failure, the value of the out parameter is undefined.\n */\nens210_status_t ENS210_SysCtrl_Get(uint8_t *sysCtrl);\n\n/*!\n * @brief   Get ENS210 SysStat register.\n * @param   sysStat     :   Pointer to receive value of the register. Must not be null.\n * @return  The return status value (0 for success)\n * @note    If the return indicates I2C failure, the value of the out parameter is undefined.\n */\nens210_status_t ENS210_SysStat_Get(uint8_t *sysStat);\n\n/*!\n * @brief   Set ENS210 SensRun register; set the run mode single shot/continuous for T and H sensors.\n * @param   sensRun     :   Mask composed of ENS210_SENSRUN_xxx macros.\n * @return  The return status value (0 for success)\n */\nens210_status_t ENS210_SensRun_Set(uint8_t sensRun);\n\n/*!\n * @brief   Get ENS210 SensRun register.\n * @param   sensRun     :   Pointer to receive value of the register. Must not be null.\n * @return  The return status value (0 for success)\n * @note    If the return indicates I2C failure, the value of the out parameter is undefined.\n */\nens210_status_t ENS210_SensRun_Get(uint8_t *sensRun);\n\n/*!\n * @brief   Set ENS210 SensStart register; starts the measurement for T and/or H sensors.\n * @param   sensStart   :  Mask composed of ENS210_SENSSTART_xxx macros.\n * @return  The return status value (0 for success)\n */\nens210_status_t ENS210_SensStart_Set(uint8_t sensStart);\n\n/*!\n * @brief   Set ENS210 SensStop register; stops the measurement for T and/or H sensors.\n * @param   sensStop    :   Mask composed of ENS210_SENSSTOP_xxx macros.\n * @return  The return status value (0 for success)\n */\nens210_status_t ENS210_SensStop_Set(uint8_t sensStop);\n\n/*!\n * @brief   Get ENS210 SensStat register.\n * @param   sensStat    :   Pointer to receive value of the register. Must not be null.\n * @return  The return status value (0 for success)\n */\nens210_status_t ENS210_SensStat_Get(uint8_t *sensStat);\n\n/*!\n * @brief   Get ENS210 TVal register; raw measurement data as well as CRC and valid indication.\n * @param   traw         :   Pointer to receive value of the register. Must not be null.\n * @return  The return status value (0 for success)\n * @note\n * Use ENS210_IsCrcOk and ENS210_IsDataValid before using the measurement data.\\n\n * Use ENS210_ConvertRawToXXX to convert raw data to standard units.\\n\n * If the return indicates I2C failure, the value of the out parameter is undefined.\n */\nens210_status_t ENS210_TVal_Get(uint32_t *traw);\n\n/*!\n * @brief   Get ENS210 HVal register; raw measurement data as well as CRC and valid indication.\n * @param   hraw         :   Pointer to receive value of register. Must not be null.\n * @return  The return status value (0 for success)\n * @note\n * Use ENS210_IsCrcOk and ENS210_IsDataValid before using the measurement data.\\n\n * If the return indicates I2C failure, the value of the out parameter is undefined.\n */\nens210_status_t ENS210_HVal_Get(uint32_t *hraw);\n\n/*!\n * @brief   Get ENS210 TVal and HVal registers; raw measurement data as well as CRC and valid indication.\n * @param   traw         :   Pointer to receive value of TVal register. Must not be null.\n * @param   hraw         :   Pointer to receive value of HVal register. Must not be null.\n * @return  The return status value (0 for success)\n * @note\n * Use ENS210_IsCrcOk and ENS210_IsDataValid before using the measurement data.\\n\n * If the return indicates I2C failure, the value of the out parameter is undefined.\n */\nens210_status_t ENS210_THVal_Get(uint32_t *traw, uint32_t *hraw);\n\n/*!\n * @brief   Get ENS210 Part ID and UID.\n * @param   ids         :   Pointer to receive ids. Must not be null.\n * @return  The return status value (0 for success)\n * @note    If this function returns an error, it is suggested to reset the device to bring it to a known state.\n */\nens210_status_t ENS210_Ids_Get(ENS210_Ids_t *ids);\n\n/*!\n * @brief   Get ENS210 temperature and humidity measurements\n * @param   meas_mode    :   Measurement mode\n * @param   results      :   Pointer to the result structure\n * @return  The return status value (0 for success)\n * @note\n * mode = 0: temperature and humidity\\n\n * mode = 1: temperature only\\n\n * mode = 2: humidity only\n */\nens210_status_t ENS210_Measure(uint8_t meas_mode, ens210_meas_data_t *results);\n\n/*!\n * @}\n */\n\n#endif /* __ENS210_H_ */\n\n"
              },
              "objects": {
                "ens210.c": "#include \"ens210.h\"\n#include \"ens210_internal.h\"\n\ntypedef struct {\n    ATMO_ENS210_Config_t config;\n    bool configured;\n} ATMO_ENS210_Priv_Config;\n\nstatic ATMO_ENS210_Priv_Config _ATMO_ENS210_config;\n\nstatic ATMO_I2C_Peripheral_t _ATMO_ENS210_i2cConfig = {\n    .operatingMode = ATMO_I2C_OperatingMode_Master,\n    .baudRate = ATMO_I2C_BaudRate_Standard_Mode\n};\n\nstatic bool _ATMO_ENS210_Enabled = true;\n\nstatic uint8_t ATMO_ENS210_I2CRead_Simple(uint8_t *writeBuf, uint32_t writeSize, uint8_t *readBuf, uint32_t readSize)\n{\n\tATMO_I2C_Status_t status = ATMO_I2C_MasterRead(_ATMO_ENS210_config.config.i2cDriverInstance, _ATMO_ENS210_config.config.address, writeBuf, writeSize, readBuf, readSize, 1000);\n\treturn (status == ATMO_I2C_Status_Success) ? 0 : 1;\n}\n\nstatic uint8_t ATMO_ENS210_I2CWrite_Simple(uint8_t *writeBuf, uint32_t writeSize)\n{\n\tATMO_I2C_Status_t status = ATMO_I2C_MasterWrite(_ATMO_ENS210_config.config.i2cDriverInstance, _ATMO_ENS210_config.config.address, NULL, 0, writeBuf, writeSize, 1000);\n\treturn (status == ATMO_I2C_Status_Success) ? 0 : 1;\n}\n\nATMO_ENS210_Status_t ATMO_ENS210_Init(ATMO_ENS210_Config_t *config)\n{\n    // Did the user supply a configuration?\n    if( config )\n    {\n        ATMO_ENS210_SetConfiguration(config);\n    }\n    else\n    {\n        _ATMO_ENS210_config.configured = false;\n    }\n\n    ens210_IoFunc_t io;\n    io.I2C_Read = ATMO_ENS210_I2CRead_Simple;\n    io.I2C_Write = ATMO_ENS210_I2CWrite_Simple;\n    io.WaitMsec = ATMO_PLATFORM_DelayMilliseconds;\n    ENS210_Init_Driver(&io);\n    ENS210_Init_Hw();\n\n    return ATMO_ENS210_Status_Success;\n}\n\nATMO_ENS210_Status_t ATMO_ENS210_SetEnabled(bool enabled)\n{\n    _ATMO_ENS210_Enabled = enabled;\n    return ATMO_ENS210_Status_Success;\n}\n\nATMO_ENS210_Status_t ATMO_ENS210_GetEnabled(bool *enabled)\n{\n    *enabled = _ATMO_ENS210_Enabled;\n    return ATMO_ENS210_Status_Success;\n}\n\nATMO_ENS210_Status_t ATMO_ENS210_SetConfiguration(const ATMO_ENS210_Config_t *config)\n{\n    if( config == NULL )\n    {\n        return ATMO_ENS210_Status_Fail;\n    }\n\n    if( ATMO_I2C_SetConfiguration(config->i2cDriverInstance, &_ATMO_ENS210_i2cConfig) != ATMO_I2C_Status_Success )\n    {\n        return ATMO_ENS210_Status_Fail;\n    }\n    memcpy( &_ATMO_ENS210_config.config, config, sizeof(ATMO_ENS210_Config_t) );\n    _ATMO_ENS210_config.configured = true;\n\n    return ATMO_ENS210_Status_Success;\n}\n\nATMO_ENS210_Status_t ATMO_ENS210_GetConfiguration(ATMO_ENS210_Config_t *config)\n{\n    if( config == NULL || !_ATMO_ENS210_config.configured )\n    {\n        return ATMO_ENS210_Status_Fail;\n    }\n\n    memcpy(config, &_ATMO_ENS210_config.config, sizeof(ATMO_ENS210_Config_t));\n\n    return ATMO_ENS210_Status_Success;\n}\n\nATMO_ENS210_Status_t ATMO_ENS210_GetTemperature(int32_t *temperatureCelsius)\n{\n    if(!_ATMO_ENS210_Enabled || !_ATMO_ENS210_config.configured)\n    {\n        return ATMO_ENS210_Status_Fail;\n    }\n\n    ens210_meas_data_t results;\n    if( ENS210_Measure(mode_Tonly, &results) != 0 )\n    {\n        return ATMO_ENS210_Status_Fail;\n    }\n\n    *temperatureCelsius = results.T_Celsius + _ATMO_ENS210_config.config.tempCalibrationOffset;\n\n    return ATMO_ENS210_Status_Success;\n}\n\nATMO_ENS210_Status_t ATMO_ENS210_GetHumidity(int32_t *humidityPct)\n{\n    if(!_ATMO_ENS210_Enabled)\n    {\n        return ATMO_ENS210_Status_Fail;\n    }\n\n    ens210_meas_data_t results;\n    if( ENS210_Measure(mode_Honly, &results) != 0 )\n    {\n        return ATMO_ENS210_Status_Fail;\n    }\n\n    *humidityPct = results.H_Percent;\n\n    return ATMO_ENS210_Status_Success;\n}\n\nATMO_ENS210_Status_t ATMO_ENS210_GetTemperatureFloat(float *temperatureCelsius)\n{\n    if(!_ATMO_ENS210_Enabled || !_ATMO_ENS210_config.configured)\n    {\n        return ATMO_ENS210_Status_Fail;\n    }\n\n    ens210_meas_data_t results;\n    if( ENS210_Measure(mode_Tonly, &results) != 0 )\n    {\n        return ATMO_ENS210_Status_Fail;\n    }\n\n    *temperatureCelsius = (results.T_mCelsius / 1000.0) + _ATMO_ENS210_config.config.tempCalibrationOffset;\n\n    return ATMO_ENS210_Status_Success;\n}\n\nATMO_ENS210_Status_t ATMO_ENS210_GetHumidityFloat(float *humidityPct)\n{\n    if(!_ATMO_ENS210_Enabled)\n    {\n        return ATMO_ENS210_Status_Fail;\n    }\n\n    ens210_meas_data_t results;\n    if( ENS210_Measure(mode_Honly, &results) != 0 )\n    {\n        return ATMO_ENS210_Status_Fail;\n    }\n\n    *humidityPct = results.H_mPercent / 1000.0;\n\n    return ATMO_ENS210_Status_Success;\n}",
                "ens210_internal.c": "/*\n*********************************************************************************\n * Copyright 2018 by ams AG                                                     *\n *                                                                              *\n * Redistribution and use in source and binary forms, with or without           *\n * modification, *are permitted provided that the following conditions are met: *\n *  1. Redistributions of source code must retain the above copyright notice,   *\n * this list of conditions and the following disclaimer.                        *\n *                                                                              *\n *  2. Redistributions in binary form must reproduce the above copyright notice,*\n *  this list of conditions and the following disclaimer in the documentation   *\n *  and/or other materials provided with the distribution.                      *\n *  3. Neither the name of the copyright holder nor the names of its            *\n * contributors may be used to endorse or promote products derived from this    *\n * software without specific prior written permission.                          *\n *                                                                              *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"  *\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    *\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   *\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE    *\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR          *\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         *\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS     *\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      *\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)      *\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   *\n * POSSIBILITY OF SUCH DAMAGE.                                                  *\n ********************************************************************************\n*/\n\n/**\n * @file\n * This is the source file for the temperature and humidity sensor ENS210 driver.\n */\n\n#include \"ens210_internal.h\"\n#include <string.h>\n#include <assert.h>\n\n/*****************************************************************************\n * Private macros and functions\n ****************************************************************************/\n/* Register addresses */\n#define ENS210_REG_PART_ID     0x00\n#define ENS210_REG_UID         0x04\n#define ENS210_REG_SYS_CTRL    0x10\n#define ENS210_REG_SYS_STAT    0x11\n#define ENS210_REG_SENS_RUN    0x21\n#define ENS210_REG_SENS_START  0x22\n#define ENS210_REG_SENS_STOP   0x23\n#define ENS210_REG_SENS_STAT   0x24\n#define ENS210_REG_T_VAL       0x30\n#define ENS210_REG_H_VAL       0x33\n\n/** Mask to extract 16-bit data from raw T and H values */\n#define ENS210_T_H_MASK        0xFFFFU\n\n/** Simplification macro, implementing integer division with simple rounding to closest number\n *  It supports both positive and negative numbers, but ONLY positive divisors */\n#define IDIV(n,d)              ((n)>0 ? ((n)+(d)/2)/(d) : ((n)-(d)/2)/(d))\n\n#define CRC7WIDTH              7     //7 bits CRC has polynomial of 7th order (has 8 terms)\n#define CRC7POLY               0x89  //The 8 coefficients of the polynomial\n#define CRC7IVEC               0x7F  //Initial vector has all 7 bits high\n\n#define DATA7WIDTH             17\n#define DATA7MASK              ((1UL << DATA7WIDTH) - 1)  //0b 1 1111 1111 1111 1111\n#define DATA7MSB               (1UL << (DATA7WIDTH - 1))  //0b 1 0000 0000 0000 0000\n\n/** When the ENS210 is soldered a correction on T needs to be applied (see application note).\n *  Typically the correction is 50mK. Units for raw T is 1/64K. */\n#define ENS210_TRAW_SOLDERCORRECTION  (50*64/1000)\n\n/*****************************************************************************\n * Variables\n ****************************************************************************/\n\nstatic ens210_IoFunc_t sENS210_Func;\nstatic bool initDriverDone = false;\nstatic bool initHwDone = false;\n\n/*****************************************************************************\n * Private functions prototypes\n ****************************************************************************/\n\n/*\n * @brief   Compute the CRC7 results.\n * @param   val   :   the value\n * @return  The CRC7 computed result\n */\nstatic uint32_t ENS210_ComputeCRC7(uint32_t val);\n\n/*\n * @brief   Verify the CRC of the raw temperature or relative humidity.\n * @param   raw         :  Raw temperature or relative humidity value to be verified (#ENS210_TVal_Get, #ENS210_HVal_Get, #ENS210_THVal_Get).\n * @return  True - Success,  False - Failure.\n * @note    This function can be used on raw T as well as raw H data (since they use the same format and CRC).\n */\nstatic bool ENS210_IsCrcOk(uint32_t raw);\n\n/*\n * @brief   Verify data validity of the raw temperature or relative humidity.\n * @param   raw         :  Raw  temperature or relative humidity value to be verified (#ENS210_TVal_Get, #ENS210_HVal_Get, #ENS210_THVal_Get).\n * @return  True - Valid,  False - Invalid.\n */\nstatic bool ENS210_IsDataValid(uint32_t raw);\n\n/*\n * @brief   Converts a raw temperature value into Kelvin.\n *          The output value is in Kelvin multiplied by parameter \"multiplier\".\n * @param   traw        :   The temperature value in the raw format (#ENS210_TVal_Get, #ENS210_THVal_Get).\n * @param   multiplier  :   The multiplication factor.\n * @return  The temperature value in 1/multiplier Kelvin.\n * @note    The multiplier should be between 1 and 1024 (inclusive) to avoid overflows.\n * @note    Typical values for multiplier are 1, 10, 100, 1000, or powers of 2.\n */\nstatic int32_t ENS210_ConvertRawToKelvin(uint32_t traw, int multiplier);\n\n/*\n * @brief   Converts a raw temperature value into Celsius.\n *          The output value is in Celsius multiplied by parameter \"multiplier\".\n * @param   traw         :   The temperature value in the raw format (#ENS210_TVal_Get, #ENS210_THVal_Get).\n * @param   multiplier   :   The multiplication factor.\n * @return  The temperature value in 1/multiplier Celsius.\n * @note    The multiplier should be between 1 and 1024 (inclusive) to avoid overflows.\n * @note    Typical values for multiplier are 1, 10, 100, 1000, or powers of 2.\n */\nstatic int32_t ENS210_ConvertRawToCelsius(uint32_t traw, int multiplier);\n\n/*\n * @brief   Converts a raw temperature value into Fahrenheit.\n *          The output value is in Fahrenheit multiplied by parameter \"multiplier\".\n * @param   traw         :   The temperature value in the raw format (#ENS210_TVal_Get, #ENS210_THVal_Get).\n * @param   multiplier   :   The multiplication factor of the converted temperature\n * @return  The temperature value in 1/multiplier Fahrenheit.\n * @note    The multiplier should be between 1 and 1024 (inclusive) to avoid overflows.\n * @note    Typical values for multiplier are 1, 10, 100, or powers of 2.\n */\nstatic int32_t ENS210_ConvertRawToFahrenheit(uint32_t traw, int multiplier);\n\n/*\n * @brief   Converts a raw relative humidity value into human readable format.\n * @param   hraw         :   The relative humidity value in the raw format (#ENS210_HVal_Get, #ENS210_THVal_Get).\n * @param   multiplier   :   The multiplication factor of the converted relative humidity.\n * @return  The converted relative humidity value\n * @note    The multiplier should be between 1 and 1024 (inclusive) to avoid overflows.\n * @note    Typical values for multiplier are 1, 10, 100, 1000, or powers of 2.\n */\nstatic int32_t ENS210_ConvertRawToPercentageH(uint32_t hraw, int multiplier);\n\n/*****************************************************************************\n * Private functions\n ****************************************************************************/\n\n//Compute the CRC-7 of 'val' (which should only have 17 bits)\nstatic uint32_t ENS210_ComputeCRC7(uint32_t val)\n{\n    //Setup polynomial\n    uint32_t pol= CRC7POLY;\n\n    //Align polynomial with data\n    pol = pol << (DATA7WIDTH-CRC7WIDTH-1);\n\n    //Loop variable (indicates which bit to test, start with highest)\n    uint32_t bit = DATA7MSB;\n\n    //Make room for CRC value\n    val = val << CRC7WIDTH;\n    bit = bit << CRC7WIDTH;\n    pol = pol << CRC7WIDTH;\n\n    //Insert initial vector\n    val |= CRC7IVEC;\n\n    //Apply division until all bits done\n    while( bit & (DATA7MASK<<CRC7WIDTH) )\n    {\n        if( bit & val )\n        {\n            val ^= pol;\n        }\n        bit >>= 1;\n        pol >>= 1;\n    }\n    return val;\n}\n\n//Verify the CRC\nstatic bool ENS210_IsCrcOk(uint32_t raw)\n{\n    uint32_t crc, data;\n\n    assert(raw <= 0xffffffUL);\n\n    //Extract 7-bit CRC(Bit-17 to Bit-23)\n    crc =  (raw >> 17) & 0x7F;\n\n    //Get the raw T/H and data valid indication.\n    data =  raw & 0x1ffff;\n\n    return ENS210_ComputeCRC7(data) == crc;\n}\n\n//Check the Data Valid Bit\nstatic bool ENS210_IsDataValid(uint32_t raw)\n{\n    assert(raw <= 0xffffffUL);\n\n    //Bit-16 is data valid bit. It will be set if data is valid\n    return (raw & (1UL << 16)) != 0;\n}\n\n//Convert raw temperature to Kelvin\n//The output value is in Kelvin multiplied by parameter \"multiplier\"\nstatic int32_t ENS210_ConvertRawToKelvin(uint32_t traw, int multiplier)\n{\n    int32_t t;\n\n    assert((1 <= multiplier) && (multiplier <= 1024));\n\n    //Get the raw temperature\n    t = traw & ENS210_T_H_MASK;\n\n    //Compensate for soldering effect\n    t-= ENS210_TRAW_SOLDERCORRECTION;\n\n    //We must compute and return m*K\n    //where m is the multiplier, R the raw value and K is temperature in Kelvin.\n    //K=R/64 (since raw has format 10.6).\n    //m*K =  m*R/64\n    return IDIV(t*multiplier, 64);\n}\n\n//Convert raw temperature to Celsius\n//The output value is in Celsius multiplied by parameter \"multiplier\"\nstatic int32_t ENS210_ConvertRawToCelsius(uint32_t traw, int multiplier)\n{\n    int32_t t;\n\n    assert((1 <= multiplier) && (multiplier <= 1024));\n\n    //Get the raw temperature\n    t = traw & ENS210_T_H_MASK;\n\n    //Compensate for soldering effect\n    t-= ENS210_TRAW_SOLDERCORRECTION;\n\n    //We must compute and return m*C\n    //where m is the multiplier, R the raw value and K, C, F temperature in various units.\n    //We use C=K-273.15 and K=R/64 (since raw has format 10.6).\n    //m*C = m*(K-273.15) = m*K - 27315*m/100 = m*R/64 - 27315*m/100\n\n    return IDIV(t*multiplier, 64) - IDIV(27315L*multiplier, 100);\n}\n\n//Convert raw temperature to Fahrenheit\n//The output value is in Fahrenheit multiplied by parameter \"multiplier\"\nstatic int32_t ENS210_ConvertRawToFahrenheit(uint32_t traw, int multiplier)\n{\n    int32_t t;\n\n    assert((1 <= multiplier) && (multiplier <= 1024));\n\n    //Get the raw temperature\n    t = traw & ENS210_T_H_MASK;\n\n    //Compensate for soldering effect\n    t-= ENS210_TRAW_SOLDERCORRECTION;\n\n    //We must compute and return m*F\n    //where m is the multiplier, R the raw value and K, C, F temperature in various units.\n    //We use F=1.8*(K-273.15)+32 and K=R/64 (since raw has format 10.6).\n\n    //m*F = m*(1.8*(K-273.15)+32) = m*(1.8*K-273.15*1.8+32) = 1.8*m*K-459.67*m = 9*m*K/5 - 45967*m/100 = 9*m*R/320 - 45967*m/100\n    return IDIV(9*multiplier*t, 320) - IDIV(45967L*multiplier, 100);\n\n    //The first multiplication stays below 32 bits (tRaw:16, multiplier:11, 9:4)\n    //The second  multiplication stays below 32 bits (multiplier:10, 45967:16)\n}\n\n//Convert raw relative humidity to readable format\n//The output value is in % multiplied by parameter \"multiplier\"\nstatic int32_t ENS210_ConvertRawToPercentageH(uint32_t hraw, int multiplier)\n{\n    int32_t h;\n\n    assert((1 <= multiplier) && (multiplier <= 1024));\n\n    //Get the raw relative humidity\n    h = hraw & ENS210_T_H_MASK;\n\n    //As raw format is 7.9, to obtain the relative humidity, it must be divided by 2^9\n    return IDIV(h*multiplier, 512);\n}\n\n/*****************************************************************************\n * Public functions\n ****************************************************************************/\n\n// wrap the low level function (I2C write, I2C read, WaitMsec) required by ENS210 driver\n// this function does not initialize the HW\nvoid ENS210_Init_Driver(ens210_IoFunc_t* pIoFunc){\n    assert((pIoFunc != NULL) &&\n            (pIoFunc->I2C_Read != NULL) &&\n            (pIoFunc->I2C_Write != NULL) &&\n            (pIoFunc->WaitMsec != NULL));\n    sENS210_Func = *pIoFunc;\n    initDriverDone = true;\n}\n\n// De-initialize the driver\nvoid ENS210_Deinit_Driver(){\n    if (initHwDone)\n    {\n        /* Deinit HW */\n        ENS210_SysCtrl_Set(ENS210_SYSCTRL_LOWPOWER_ENABLE); // skip error management\n    }\n\n    /* Deinit driver */\n    initDriverDone = false;\n    initHwDone = false;\n}\n\n// Initialize ENS210 hardware\nens210_status_t ENS210_Init_Hw(void)\n{\n    ens210_status_t status = ens210_success;\n\n    if (!initDriverDone) return ens210_noinit;\n\n    /* trick to allow calling internal public functions */\n    initHwDone = true;\n\n    //Reset the sensor\n    status = ENS210_SysCtrl_Set(ENS210_SYSCTRL_RESET_ENABLE | ENS210_SYSCTRL_LOWPOWER_ENABLE);\n    if (status != ens210_success) goto return_status;\n\n    //Wait for ENS210 to complete reset\n    sENS210_Func.WaitMsec(ENS210_RESET_WAIT_TIME_MS);\n\n    //Set the run mode of sensors\n    status = ENS210_SensRun_Set(ENS210_SENSRUN_T_MODE_SINGLE_SHOT | ENS210_SENSRUN_H_MODE_SINGLE_SHOT);\n    if (status != ens210_success) goto return_status;\n\n    return_status:\n    if (status != ens210_success) initHwDone = false;\n    return status;\n}\n\n//Set ENS210 SysCtrl register; enabling reset and/or low power\nens210_status_t ENS210_SysCtrl_Set(uint8_t sysCtrl)\n{\n    uint8_t wBuf[] = {ENS210_REG_SYS_CTRL, sysCtrl};\n\n    if (!initHwDone) return ens210_noinit;\n    assert((sysCtrl & ~(ENS210_SYSCTRL_LOWPOWER_ENABLE | ENS210_SYSCTRL_RESET_ENABLE)) == 0);\n\n    return (ens210_status_t)sENS210_Func.I2C_Write(wBuf, sizeof (wBuf));\n}\n\n//Get ENS210 SysCtrl register\nens210_status_t ENS210_SysCtrl_Get(uint8_t *sysCtrl)\n{\n    uint8_t wBuf[] = {ENS210_REG_SYS_CTRL};\n\n    if (!initHwDone) return ens210_noinit;\n    assert(sysCtrl != NULL);\n\n    return (ens210_status_t)sENS210_Func.I2C_Read(wBuf, sizeof (wBuf), sysCtrl, sizeof (*sysCtrl));\n}\n\n//Get ENS210 SysStat register.\nens210_status_t ENS210_SysStat_Get(uint8_t *sysStat)\n{\n    uint8_t wBuf[] = {ENS210_REG_SYS_STAT};\n\n    if (!initHwDone) return ens210_noinit;\n    assert(sysStat != NULL);\n\n    return (ens210_status_t)sENS210_Func.I2C_Read(wBuf, sizeof (wBuf), sysStat, sizeof (*sysStat));\n}\n\n//Set ENS210 SensRun register; set the run mode single shot/continuous for T and H sensors.\nens210_status_t ENS210_SensRun_Set(uint8_t sensRun)\n{\n    uint8_t wBuf[] = {ENS210_REG_SENS_RUN, sensRun};\n\n    if (!initHwDone) return ens210_noinit;\n    assert((sensRun & ~(ENS210_SENSRUN_T_MODE_CONTINUOUS | ENS210_SENSRUN_H_MODE_CONTINUOUS)) == 0);\n\n    return (ens210_status_t)sENS210_Func.I2C_Write(wBuf, sizeof wBuf);\n}\n\n//Get ENS210 SensRun register\nens210_status_t ENS210_SensRun_Get(uint8_t *sensRun)\n{\n    uint8_t wBuf[] = {ENS210_REG_SENS_RUN};\n\n    if (!initHwDone) return ens210_noinit;\n    assert(sensRun != NULL);\n\n    return (ens210_status_t)sENS210_Func.I2C_Read(wBuf, sizeof wBuf, sensRun, sizeof *sensRun);\n}\n\n//Set ENS210 SensStart register; starts the measurement for T and/or H sensors.\nens210_status_t ENS210_SensStart_Set(uint8_t sensStart)\n{\n    uint8_t wBuf[] = {ENS210_REG_SENS_START, sensStart};\n\n    if (!initHwDone) return ens210_noinit;\n    assert((sensStart & ~(ENS210_SENSSTART_T_START | ENS210_SENSSTART_H_START)) == 0);\n\n    return (ens210_status_t)sENS210_Func.I2C_Write(wBuf, sizeof wBuf);\n}\n\n//Set ENS210 SensStop register; stops the measurement for T and/or H sensors.\nens210_status_t ENS210_SensStop_Set(uint8_t sensStop)\n{\n    uint8_t wBuf[] = {ENS210_REG_SENS_STOP, sensStop};\n\n    if (!initHwDone) return ens210_noinit;\n    assert((sensStop & ~(ENS210_SENSSTOP_T_STOP | ENS210_SENSSTOP_H_STOP)) == 0);\n\n    return (ens210_status_t)sENS210_Func.I2C_Write(wBuf, sizeof wBuf);\n}\n\n//Get ENS210 SensStat register.\nens210_status_t ENS210_SensStat_Get(uint8_t *sensStat)\n{\n    uint8_t wBuf[] = {ENS210_REG_SENS_STAT};\n\n    if (!initHwDone) return ens210_noinit;\n    assert(sensStat != NULL);\n\n    return (ens210_status_t)sENS210_Func.I2C_Read(wBuf, sizeof wBuf, sensStat, sizeof *sensStat);\n}\n\n//Get ENS210 TVal register; raw measurement data as well as CRC and valid indication\nens210_status_t ENS210_TVal_Get(uint32_t *traw)\n{\n    uint8_t rBuf[3];\n    uint8_t wBuf[] = {ENS210_REG_T_VAL};\n    ens210_status_t status;\n\n    if (!initHwDone) return ens210_noinit;\n    assert(traw != NULL);\n\n    status = (ens210_status_t)sENS210_Func.I2C_Read(wBuf, sizeof wBuf, rBuf, sizeof rBuf);\n\n    *traw = ((uint32_t)rBuf[2]) << 16 | ((uint32_t)rBuf[1]) << 8 | (uint32_t)rBuf[0];\n\n    return status;\n}\n\n//Get ENS210 HVal register; raw measurement data as well as CRC and valid indication\nens210_status_t ENS210_HVal_Get(uint32_t *hraw)\n{\n    uint8_t rBuf[3];\n    uint8_t wBuf[] = {ENS210_REG_H_VAL};\n    ens210_status_t status;\n\n    if (!initHwDone) return ens210_noinit;\n    assert(hraw != NULL);\n\n    status = (ens210_status_t)sENS210_Func.I2C_Read(wBuf, sizeof wBuf, rBuf, sizeof rBuf);\n\n    *hraw = ((uint32_t)rBuf[2]) << 16 | ((uint32_t)rBuf[1]) << 8 | ((uint32_t)rBuf[0]) << 0;\n\n    return status;\n}\n\n//Get ENS210 TVal and Hval registers; raw measurement data as well as CRC and valid indication\nens210_status_t ENS210_THVal_Get(uint32_t *traw, uint32_t *hraw)\n{\n    uint8_t rBuf[6];\n    uint8_t wBuf[] = {ENS210_REG_T_VAL};\n    ens210_status_t status;\n\n    if (!initHwDone) return ens210_noinit;\n    assert((traw != NULL) && (hraw != NULL));\n\n    // Read 6 bytes starting from ENS210_REG_T_VAL\n    status = (ens210_status_t)sENS210_Func.I2C_Read(wBuf, sizeof wBuf, rBuf, sizeof rBuf);\n\n    *traw = ((uint32_t)rBuf[2]) << 16 | ((uint32_t)rBuf[1]) << 8 | (uint32_t)rBuf[0];\n    *hraw = ((uint32_t)rBuf[5]) << 16 | ((uint32_t)rBuf[4]) << 8 | (uint32_t)rBuf[3];\n\n    return status;\n}\n\n// Get ENS210 Part ID and UID.\nens210_status_t ENS210_Ids_Get(ENS210_Ids_t *ids)\n{\n    uint8_t rBuf[12];\n    uint8_t wBuf[] = {ENS210_REG_PART_ID};\n    ens210_status_t status;\n\n    if (!initHwDone) return ens210_noinit;\n    assert(ids != NULL);\n\n    // Special procedure needed to read ID's: put device in high power (see datasheet)\n    // Set the system in Active mode\n    status = ENS210_SysCtrl_Set(ENS210_SYSCTRL_LOWPOWER_DISABLE);\n    if (status != ens210_success) goto return_error_status;\n\n    // Wait for sensor to go to active mode\n    sENS210_Func.WaitMsec(ENS210_BOOTING_TIME_MS);\n\n    // Get the id's\n    status = (ens210_status_t)sENS210_Func.I2C_Read(wBuf, sizeof wBuf, rBuf, sizeof rBuf);\n    if (status != ens210_success) goto return_error_status;\n\n    // Copy id's (hw gives partid in little-endian format)\n    ids->partId = ((uint32_t)rBuf[1]) << 8 | ((uint32_t)rBuf[0]) << 0;\n    memcpy(&ids->uId[0], &rBuf[4], 8);\n\n    // Go back to low power mode\n    status = ENS210_SysCtrl_Set(ENS210_SYSCTRL_LOWPOWER_ENABLE);\n    if (status != ens210_success) goto return_error_status;\n\n    // Signal success\n    return status;\n\n    return_error_status:\n    // Make an attempt to restore low-power\n    ENS210_SysCtrl_Set(ENS210_SYSCTRL_LOWPOWER_ENABLE);\n    // Return original I2C error\n    return status;\n}\n\nens210_status_t ENS210_Measure(uint8_t meas_mode, ens210_meas_data_t *results){\n    ens210_status_t status;\n    uint8_t meas_status;\n    uint32_t T_Raw = 0, H_Raw = 0;\n    uint32_t conversion_time_ms = 0;\n    uint8_t start_meas = 0;\n\n    if (!initHwDone) return ens210_noinit;\n    assert(results != NULL);\n\n    switch (meas_mode){\n    case mode_TH :\n        conversion_time_ms = ENS210_T_H_CONVERSION_TIME_MS;\n        start_meas = ENS210_SENSSTART_T_START | ENS210_SENSSTART_H_START;\n        break;\n    case mode_Tonly :\n        conversion_time_ms = ENS210_T_CONVERSION_TIME_MS;\n        start_meas = ENS210_SENSSTART_T_START;\n        break;\n    case mode_Honly :\n        conversion_time_ms = ENS210_T_H_CONVERSION_TIME_MS;\n        start_meas = ENS210_SENSSTART_H_START;\n        break;\n    default :\n        return ens210_wrong_parameter;\n        break;\n    }\n\n    //check that the previous measurement is completed\n    status = ENS210_SensStat_Get(&meas_status);\n    if (status != ens210_success){\n        return status;\n    }\n    if(meas_status != 0){\n        // trying to start a measurement too early!\n        sENS210_Func.WaitMsec(conversion_time_ms);\n    }\n\n    //Start the measurement\n    status = ENS210_SensStart_Set(start_meas);\n    if(status != ens210_success){\n        //Start of measurement failed.\n        return status;\n    }\n\n    // wait for the measurement to be completed\n    sENS210_Func.WaitMsec(conversion_time_ms);\n\n    if (meas_mode == mode_TH){\n        //Get the temperature and humidity raw value\n        status = ENS210_THVal_Get(&T_Raw, &H_Raw);\n    }\n    else if (meas_mode == mode_Tonly){\n        status = ENS210_TVal_Get(&T_Raw);\n    }\n    else if (meas_mode == mode_Honly){\n        status = ENS210_HVal_Get(&H_Raw);\n    }\n    if(status != ens210_success){\n        //Getting T and/or H values failed\n        return status;\n    }\n\n    if ((meas_mode == mode_TH) || (meas_mode == mode_Tonly)){\n        // Verify the temperature raw value\n        if(!ENS210_IsCrcOk(T_Raw))    {\n            return ens210_Tdata_CRC_error;\n        }\n        else if(!ENS210_IsDataValid(T_Raw)){\n            return ens210_T_invalid_data;\n        }\n        else {\n            //Convert the raw temperature value to Kelvin\n            results->T_Kelvin = ENS210_ConvertRawToKelvin(T_Raw, 1);\n            //Convert the raw temperature value to Celsius\n            results->T_Celsius = ENS210_ConvertRawToCelsius(T_Raw, 1);\n            //Convert the raw temperature value to Fahrenheit\n            results->T_Fahrenheit = ENS210_ConvertRawToFahrenheit(T_Raw, 1);\n            //Convert the raw temperature value to milli Kelvin\n            results->T_mKelvin = ENS210_ConvertRawToKelvin(T_Raw, 1000);\n            //Convert the raw temperature value to milli Celsius\n            results->T_mCelsius = ENS210_ConvertRawToCelsius(T_Raw, 1000);\n            //Convert the raw temperature value to milli Fahrenheit\n            results->T_mFahrenheit = ENS210_ConvertRawToFahrenheit(T_Raw, 1000);\n        }\n    }\n\n    if ((meas_mode == mode_TH) || (meas_mode == mode_Honly)){\n        //Verify the relative humidity raw value\n        if(!ENS210_IsCrcOk(H_Raw)){\n            return ens210_Hdata_CRC_error;\n        }\n        else if(!ENS210_IsDataValid(H_Raw)){\n            return ens210_H_invalid_data;\n        }\n        else {\n            //Convert the raw relative humidity to %\n            results->H_Percent = ENS210_ConvertRawToPercentageH(H_Raw, 1);\n            //Convert the raw relative humidity to milli%\n            results->H_mPercent = ENS210_ConvertRawToPercentageH(H_Raw, 1000);\n        }\n    }\n    return ens210_success;\n}\n"
              }
            }
          },
          "md5": "ddb08b9cef8306f60f33663cbbdf3846"
        },
        "ccs811": {
          "libName": "ccs811",
          "manufacturer": "AMS",
          "description": "Indoor Air Quality (IAQ) Sensor",
          "type": "Digital Gas Sensor",
          "icon": "",
          "image": "ccs811.jpg",
          "version": "",
          "eelVersion": "3",
          "shoppingCartLinks": {
            "digikey": {
              "links": {
                "info": "https://www.digikey.com/short/j21j7h"
              },
              "cartData": {
                "part": "CCS811-LG_EK_ST-ND",
                "partid": "6568935",
                "source": "dkstudio",
                "qty": "1"
              }
            }
          },
          "requires": [
            "embedded",
            "i2c",
            "fpmath"
          ],
          "elements": [
            {
              "name": "CCS811AirQuality",
              "type": "EmbeddedCCS811",
              "icon": "EmbeddedAirQuality.svg",
              "defaultAbility": "readTVOC",
              "defaultTrigger": "TVOCRead",
              "helpPageHref": "https://developer.atmosphereiot.com/documents/elements/amsccs811element.html",
              "hidden": false,
              "abilities": [
                {
                  "name": "setup",
                  "hidden": true,
                  "code": "\tATMO_CCS811_Config_t config;\n\tconfig.operatingMode = ATMO_PROPERTY(undefined, operatingMode);\n\tconfig.address = ATMO_PROPERTY(undefined, i2cAddress);\n\tconfig.i2cDriverInstance = ATMO_PROPERTY(undefined, i2cInstance);\n\n\treturn ( ATMO_CCS811_Init(&config) == ATMO_CCS811_Status_Success ) ? ATMO_Status_Success : ATMO_Status_Fail;\n"
                },
                {
                  "name": "setEnabled",
                  "triggers": [],
                  "code": "ATMO_CCS811_SetEnabled(true);\nreturn ATMO_Status_Success;"
                },
                {
                  "name": "setDisabled",
                  "triggers": [],
                  "code": "ATMO_CCS811_SetEnabled(false);\nreturn ATMO_Status_Success;"
                },
                {
                  "name": "setEnabledDisabled",
                  "triggers": [],
                  "code": "bool enabled = false;\nATMO_GetBool(in, &enabled);\nATMO_CCS811_SetEnabled(enabled);\nreturn ATMO_Status_Success;"
                },
                {
                  "name": "readTVOC",
                  "triggers": [
                    "TVOCRead"
                  ],
                  "code": "    uint16_t tvoc;\n\n    if(ATMO_CCS811_GetTVOC(&tvoc) == ATMO_CCS811_Status_Success)\n    {\n        ATMO_CreateValueUnsignedInt(out, (unsigned int)tvoc);\n    }\n    else\n    {\n        ATMO_CreateValueVoid(out);\n    }\n    \n    return ATMO_Status_Success;"
                },
                {
                  "name": "readCO2",
                  "triggers": [
                    "CO2Read"
                  ],
                  "code": "    uint16_t co2;\n    \n    if(ATMO_CCS811_GetCO2(&co2) == ATMO_CCS811_Status_Success)\n    {\n        ATMO_CreateValueInt(out, (int)co2);\n    }\n    else\n    {\n        ATMO_CreateValueVoid(out);\n    }\n  \n    return ATMO_Status_Success;"
                }
              ],
              "properties": [
                {
                  "name": "i2cInstance",
                  "input": "driverInstance",
                  "driverType": "i2c"
                },
                {
                  "name": "i2cAddress",
                  "input": "select",
                  "inputOptions": [
                    "0x5A",
                    "0x5B"
                  ],
                  "value": "0x5A"
                },
                {
                  "name": "operatingMode",
                  "input": "select",
                  "inputOptions": [
                    "ATMO_CCS811_OperatingMode_0",
                    "ATMO_CCS811_OperatingMode_1",
                    "ATMO_CCS811_OperatingMode_2",
                    "ATMO_CCS811_OperatingMode_3",
                    "ATMO_CCS811_OperatingMode_4"
                  ],
                  "value": "ATMO_CCS811_OperatingMode_1"
                }
              ],
              "triggers": [],
              "variables": [],
              "language": {
                "en-US": {
                  "EmbeddedCCS811": "AMS CCS811",
                  "i2cInstance": "I2C Driver Instance",
                  "i2cAddress": "I2C Address",
                  "operatingMode": "Operating Mode",
                  "setEnabled": "Set Enabled",
                  "setDisabled": "Set Disabled",
                  "setEnabledDisabled": "Set Enabled State",
                  "readTVOC": "Read TVOC (ppb)",
                  "readCO2": "Read CO2 (ppm)",
                  "TVOCRead": "TVOC Read",
                  "CO2Read": "CO2 Read",
                  "ATMO_CCS811_OperatingMode_0": "Mode 0 (Idle)",
                  "ATMO_CCS811_OperatingMode_1": "Mode 1 (1s Read)",
                  "ATMO_CCS811_OperatingMode_2": "Mode 2 (10s Read)",
                  "ATMO_CCS811_OperatingMode_3": "Mode 3 (60s Read)",
                  "ATMO_CCS811_OperatingMode_4": "Mode 4 (Raw)"
                }
              }
            }
          ],
          "files": {
            "common": {
              "headers": {
                "ccs811.h": "#ifndef _ATMO_CCS811_H_\r\n#define _ATMO_CCS811_H_\r\n\r\n#include \"../app_src/atmosphere_platform.h\"\r\n#include \"../i2c/i2c.h\"\r\n\r\n\r\ntypedef enum {\r\n    ATMO_CCS811_Status_Success              = 0x00u,  // Common - Operation was successful\r\n    ATMO_CCS811_Status_Fail                 = 0x01u,  // Common - Operation failed\r\n    ATMO_CCS811_Status_Initialized          = 0x02u,  // Common - Peripheral already initialized\r\n    ATMO_CCS811_Status_Invalid              = 0x03u,  // Common - Invalid operation or result\r\n    ATMO_CCS811_Status_NotSupported         = 0x04u,  // Common - Feature not supported by platform\r\n} ATMO_CCS811_Status_t;\r\n\r\ntypedef enum {\r\n    ATMO_CCS811_OperatingMode_0 = 0,\r\n    ATMO_CCS811_OperatingMode_1 = 1,\r\n    ATMO_CCS811_OperatingMode_2 = 2,\r\n    ATMO_CCS811_OperatingMode_3 = 3,\r\n    ATMO_CCS811_OperatingMode_4 = 4\r\n} ATMO_CCS811_OperatingMode_t;\r\n\r\ntypedef struct {\r\n\t//Mode 0 = Idle\r\n\t//Mode 1 = read every 1s\r\n\t//Mode 2 = every 10s\r\n\t//Mode 3 = every 60s\r\n\t//Mode 4 = RAW mode\r\n\tuint8_t operatingMode;\r\n    uint16_t address;\r\n    ATMO_DriverInstanceHandle_t i2cDriverInstance;\r\n} ATMO_CCS811_Config_t;\r\n\r\n\r\n/**\r\n * Initialize CCS811 Driver\r\n *\r\n * @param[in] config - Device configuration (optional)\r\n */\r\nATMO_CCS811_Status_t ATMO_CCS811_Init(ATMO_CCS811_Config_t *config);\r\n\r\n/**\r\n * Enable/Disable CCS811 Driver\r\n *\r\n * @param[in] enabled\r\n */\r\nATMO_CCS811_Status_t ATMO_CCS811_SetEnabled(bool enabled);\r\n\r\n/**\r\n * Get enabled/disabled status of CCS811 driver\r\n *\r\n * @param[out] enabled\r\n */\r\nATMO_CCS811_Status_t ATMO_CCS811_GetEnabled(bool *enabled);\r\n\r\n/**\r\n * Set basic device configuration\r\n *\r\n * @param[in] config\r\n */\r\nATMO_CCS811_Status_t ATMO_CCS811_SetConfiguration(const ATMO_CCS811_Config_t *config);\r\n\r\n/**\r\n * Get device configuration\r\n *\r\n * @param[out] config\r\n */\r\nATMO_CCS811_Status_t ATMO_CCS811_GetConfiguration(ATMO_CCS811_Config_t *config);\r\n\r\n/**\r\n * Set environmental data for more accurate readings\r\n *\r\n * @param[in] humidity - Pct from 0.0 to 100.0\r\n * @param[in] temperature - Degrees C\r\n */\r\nATMO_CCS811_Status_t ATMO_CCS811_SetEnvironmentalData(float humidity, float temperature);\r\n\r\n/**\r\n * Get Total Volatile Organic Compounds (TVOC) Reading\r\n *\r\n * @param[out] tvoc - TVOC reading in PPB\r\n */\r\nATMO_CCS811_Status_t ATMO_CCS811_GetTVOC(uint16_t *tvoc);\r\n\r\n/**\r\n * Get total CO2 Reading in ppm\r\n *\r\n * @param[out] CO2\r\n */\r\nATMO_CCS811_Status_t ATMO_CCS811_GetCO2(uint16_t *co2);\r\n\r\n/**\r\n * Get air quality in percentage based on TVOC reading\r\n *\r\n * @param[out] airQuality\r\n */\r\nATMO_CCS811_Status_t ATMO_CCS811_GetAirQuality(float *airQuality);\r\n\r\n\r\n#endif\r\n",
                "ccs811_internal.h": "/******************************************************************************\r\nDerivative Work of\r\nSparkFunCCS811.cpp\r\nCCS811 Arduino library\r\nMarshall Taylor @ SparkFun Electronics\r\nNathan Seidle @ SparkFun Electronics\r\nApril 4, 2017\r\nhttps://github.com/sparkfun/CCS811_Air_Quality_Breakout\r\nhttps://github.com/sparkfun/SparkFun_CCS811_Arduino_Library\r\nThis code is released under the [MIT License](http://opensource.org/licenses/MIT).\r\nPlease review the LICENSE.md file included with this example https://github.com/sparkfun/SparkFun_CCS811_Arduino_Library/blob/master/LICENSE.md .\r\nIf you have any questions or concerns with licensing, please contact techsupport@sparkfun.com.\r\nThe MIT License (MIT)\r\nCopyright (c) 2015 SparkFun Electronics\r\nCopyright (c) 2018 NXP\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"),\r\nto deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\nand/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\nDistributed as-is; no warranty is given.\r\n******************************************************************************/\r\n\r\n#ifndef CCS811_H_\r\n#define CCS811_H_\r\n\r\n/*!\r\n * @addtogroup ccs811 CCS811 air quality sensor\r\n * This module provides the API to control and monitor the CCS811 air quality sensor through an I2C interface.\r\n *\r\n * The basic steps to operate the CCS811 are as follows:\r\n * -# Initialize the driver with callback functions (#CCS811_Init_Driver)\r\n * -# Initialize the hardware (#CCS811_Init_Hw)\r\n * -# Check data availability (#CCS811_dataAvailable)\r\n * -# Trigger all data acquisition (#CCS811_readAlgorithmResults)\r\n * -# Read the relevant data (for example #CCS811_getCO2)\r\n * -# If the CCS811 is not needed anymore, de-initialize the driver (#CCS811_Deinit_Driver). The CCS811 will\r\n * be switched off. It allows to eventually release shared resources.\r\n *\r\n * Example - Sample application code to set CCS811 without error management\r\n * ------------------------------------------------------------------------\r\n * @code\r\n * \\#include \"CCS811.h\"\r\n *\r\n * CCS811_fct_t ccs811_fct;\r\n * uint8_t ready;\r\n * uint16_t uCO2;\r\n *\r\n * ccs811_fct.connect_hw = Ccs811_Connect;       // callback function to activate CCS811 hardware resource\r\n * ccs811_fct.disconnect_hw = Ccs811_Disconnect; // callback function to deactivate CCS811 hardware resource\r\n * ccs811_fct.I2C_Read = I2c_Read;               // callback function for I2C read\r\n * ccs811_fct.I2C_Write = I2c_Write;             // callback function for I2C write\r\n * ccs811_fct.WaitMsec = WaitMs;                 // wait callback function (in ms)\r\n *\r\n * CCS811_Init_Driver(&ccs811_fct);\r\n * CCS811_Init_Hw();\r\n * // check new data availability\r\n * CCS811_dataAvailable(&ready);\r\n * if (ready == 1) {\r\n *     CCS811_readAlgorithmResults();\r\n *     uCO2 = CCS811_getCO2();\r\n *     printf(\"The current CO2 value is: %d\\n\", uCO2);\r\n * }\r\n * [..]\r\n * // if the CCS811 is not needed anymore, the driver can be de-initialized\r\n * printf(\"Deinitialize CCS811 (it will be turned off)\\n\");\r\n * CCS811_Deinit_Driver();\r\n *\r\n * @endcode\r\n * @{\r\n */\r\n\r\n#include \"../app_src/atmosphere_platform.h\"\r\n#include <stdbool.h>\r\n\r\n#define CCS811_I2C_ADDRESS              0x5A\r\n\r\n/* Register addresses */\r\n#define CCS811_STATUS                   0x00\r\n#define CCS811_MEAS_MODE                0x01\r\n#define CCS811_ALG_RESULT_DATA          0x02\r\n#define CCS811_RAW_DATA                 0x03\r\n#define CCS811_ENV_DATA                 0x05\r\n#define CCS811_NTC                      0x06\r\n#define CCS811_THRESHOLDS               0x10\r\n#define CCS811_BASELINE                 0x11\r\n#define CCS811_HW_ID                    0x20\r\n#define CCS811_HW_VERSION               0x21\r\n#define CCS811_FW_BOOT_VERSION          0x23\r\n#define CCS811_FW_APP_VERSION           0x24\r\n#define CCS811_ERROR_ID                 0xE0\r\n#define CCS811_APP_START                0xF4\r\n#define CCS811_SW_RESET                 0xFF\r\n#define CCS811_INTERRUPT_DRIVEN         0x8\r\n#define CCS811_THRESHOLDS_ENABLED       0x4\r\n\r\n/*! @brief Status return codes. */\r\ntypedef enum _CCS811_status\r\n{\r\n    CCS811_SUCCESS,        /*!< Success */\r\n    CCS811_ID_ERROR,       /*!< Bad hardware identifier */\r\n    CCS811_I2C_ERROR,      /*!< I2C read/write error */\r\n    CCS811_INTERNAL_ERROR, /*!< Internal hardware error */\r\n    CCS811_NOINIT_ERROR,   /*!< Hardware or driver not initialized */\r\n    CCS811_GENERIC_ERROR   /*!< Generic error (settings not allowed) */\r\n} CCS811_status;\r\n\r\n/*! @brief Structure of external functions or values. */\r\ntypedef struct _CCS811_fct_t\r\n{\r\n    uint8_t (*I2C_Read)(uint8_t *writeBuf, uint32_t writeSize, uint8_t *readBuf, uint32_t readSize); /*!< External I2C read function */\r\n    uint8_t (*I2C_Write)(uint8_t *writeBuf, uint32_t writeSize); /*!< External I2C write function */\r\n    void (*WaitMsec)(uint32_t tms); /*!< Wait function in milliseconds */\r\n} CCS811_fct_t, *ptCCS811_fct_t;\r\n\r\n/*!\r\n * @brief Initialize CCS811 driver.\r\n *\r\n * @param FCT Pointer to a structure of external functions or values\r\n */\r\nvoid CCS811_Init_Driver(ptCCS811_fct_t FCT);\r\n\r\n/*!\r\n * @brief De-initialize CCS811 driver.\r\n *\r\n */\r\nvoid CCS811_Deinit_Driver();\r\n\r\n/*!\r\n * @brief Initialize CCS811 hardware.\r\n *\r\n * @return Status value (0 for success)\r\n */\r\nCCS811_status CCS811_Init_Hw(void);\r\n\r\n/*!\r\n * @brief Read algorithm results.\r\n * @note Update the total volatile organic compounds (TVOC) in parts per billion (PPB) and the CO2 value.\r\n *\r\n * @return Status value (0 for success)\r\n */\r\nCCS811_status CCS811_readAlgorithmResults(void);\r\n\r\n/*!\r\n * @brief Check if error bit is set.\r\n *\r\n * @param  StatusError Pointer to error status bit value\r\n * @return Status value (0 for success)\r\n */\r\nCCS811_status CCS811_checkForStatusError(uint8_t* StatusError);\r\n\r\n/*!\r\n * @brief Check if data is available.\r\n * @note Based on DATA_READ flag in the status register.\r\n *\r\n * @param  value Pointer to available data bit value\r\n * @return Status value (0 for success)\r\n */\r\nCCS811_status CCS811_dataAvailable(uint8_t* value);\r\n\r\n/*!\r\n * @brief Check if APP_VALID is set.\r\n * @note Based on APP_VALID flag in the status register.\r\n *\r\n * @param  value Pointer to APP_VALID bit value\r\n * @return Status value (0 for success)\r\n */\r\nCCS811_status CCS811_appValid(uint8_t* value);\r\n\r\n/*!\r\n * @brief Get the error register value.\r\n * @note Based on ERROR_ID register.\r\n *\r\n * @param  value Pointer to error value\r\n * @return Status value (0 for success)\r\n */\r\nCCS811_status CCS811_getErrorRegister(uint8_t* value);\r\n\r\n/*!\r\n * @brief Get the baseline value.\r\n * @note It is used for telling sensor what 'clean' air is.\r\n * @note Put the sensor in clean air and record this value.\r\n *\r\n * @param  baseline Pointer to baseline value\r\n * @return Status value (0 for success)\r\n */\r\nCCS811_status CCS811_getBaseline(unsigned int* baseline);\r\n\r\n/*!\r\n * @brief Set the baseline value.\r\n * @note It is used for telling sensor what 'clean' air is.\r\n * @note Put the sensor in clean air and record this value.\r\n *\r\n * @param  input Baseline value\r\n * @return Status value (0 for success)\r\n */\r\nCCS811_status CCS811_setBaseline(uint16_t input);\r\n\r\n/*!\r\n * @brief Enable or disable the interrupts.\r\n * @note It clears/sets the nINT signal.\r\n *\r\n * @param  fct Interrupt mode (0 for disable, 1 for enable)\r\n * @return Status value (0 for success)\r\n */\r\nCCS811_status CCS811_setInterrupts(uint8_t fct);\r\n\r\n/*!\r\n * @brief Enable or disable the interrupt thresholds.\r\n *\r\n * @param  fct Threshold mode (0 for disable, 1 for enable)\r\n * @return Status value (0 for success)\r\n */\r\nCCS811_status CCS811_setThresholds(uint8_t fct);\r\n\r\n/*!\r\n * @brief Set the drive mode.\r\n * @note\r\n * Mode 0 = Idle\\n\r\n * Mode 1 = read every 1s\\n\r\n * Mode 2 = every 10s\\n\r\n * Mode 3 = every 60s\\n\r\n * Mode 4 = RAW mode\r\n *\r\n * @param  mode Drive mode\r\n * @return Status value (0 for success)\r\n */\r\nCCS811_status CCS811_setDriveMode(uint8_t mode);\r\n\r\n/*!\r\n * @brief Set environmental data.\r\n * @note\r\n * Given a temperature and humidity, use these data for better compensation.\r\n *\r\n * @param  relativeHumidity Relative humidity, value within [0,100]\r\n * @param  temperature Temperature (Celsius), value within [-25,+50]\r\n * @return Status value (0 for success)\r\n */\r\nCCS811_status CCS811_setEnvironmentalData(float relativeHumidity, float temperature);\r\n\r\n/*!\r\n * @brief Set ref resistance.\r\n *\r\n * @param  input Ref resistance\r\n */\r\nvoid CCS811_setRefResistance(float input);\r\n\r\n/*!\r\n * @brief Read NTC.\r\n *\r\n * @return Status value (0 for success)\r\n */\r\nCCS811_status CCS811_readNTC(void);\r\n\r\n/*!\r\n * @brief Get Total Volatile Organic Compound (TVOC) value.\r\n *\r\n * @return TVOC value (0ppb to 1187ppb)\r\n */\r\nuint16_t CCS811_getTVOC(void);\r\n\r\n/*!\r\n * @brief Get the equivalent CO2 value.\r\n *\r\n * @return eCO2 value (400ppm to 8192ppm)\r\n */\r\nuint16_t CCS811_getCO2(void);\r\n\r\n/*!\r\n * @brief Get resistance value.\r\n *\r\n * @return Resistance value\r\n */\r\nfloat CCS811_getResistance(void);\r\n\r\n/*!\r\n * @brief Get temperature value.\r\n *\r\n * @return Temperature value (Celsius)\r\n */\r\nfloat CCS811_getTemperature(void);\r\n\r\n/*! @}*/\r\n\r\n#endif /* CCS811_H_ */\r\n"
              },
              "objects": {
                "ccs811.c": "#include \"ccs811.h\"\r\n#include \"ccs811_internal.h\"\r\n#include \"../app_src/atmosphere_platform.h\"\r\n\r\n#define CCS811_TVOC_MAX_PPB (1187)\r\n\r\n\r\ntypedef struct {\r\n    ATMO_CCS811_Config_t config;\r\n    bool configured;\r\n} ATMO_CCS811_Priv_Config;\r\n\r\nstatic ATMO_CCS811_Priv_Config _ATMO_CCS811_config;\r\n\r\nstatic ATMO_I2C_Peripheral_t i2cConfig = {\r\n    .operatingMode = ATMO_I2C_OperatingMode_Master,\r\n    .baudRate = ATMO_I2C_BaudRate_Standard_Mode\r\n};\r\n\r\nstatic bool _ATMO_CCS811_Enabled = true;\r\n\r\nstatic uint8_t ATMO_CCS811_I2CRead_Simple(uint8_t *writeBuf, uint32_t writeSize, uint8_t *readBuf, uint32_t readSize)\r\n{\r\n\tATMO_I2C_Status_t status = ATMO_I2C_MasterRead(_ATMO_CCS811_config.config.i2cDriverInstance, _ATMO_CCS811_config.config.address, writeBuf, writeSize, readBuf, readSize, 1000);\r\n\treturn (status == ATMO_I2C_Status_Success) ? 0 : 1;\r\n}\r\n\r\nstatic uint8_t ATMO_CCS811_I2CWrite_Simple(uint8_t *writeBuf, uint32_t writeSize)\r\n{\r\n\tATMO_I2C_Status_t status = ATMO_I2C_MasterWrite(_ATMO_CCS811_config.config.i2cDriverInstance, _ATMO_CCS811_config.config.address, NULL, 0, writeBuf, writeSize, 1000);\r\n\treturn (status == ATMO_I2C_Status_Success) ? 0 : 1;\r\n}\r\n\r\nATMO_CCS811_Status_t ATMO_CCS811_Init(ATMO_CCS811_Config_t *config)\r\n{\r\n\r\n    CCS811_fct_t io;\r\n    io.I2C_Read = ATMO_CCS811_I2CRead_Simple;\r\n    io.I2C_Write = ATMO_CCS811_I2CWrite_Simple;\r\n    io.WaitMsec = ATMO_PLATFORM_DelayMilliseconds;\r\n    CCS811_Init_Driver(&io);\r\n\r\n    // Did the user supply a configuration?\r\n    if( config )\r\n    {\r\n        ATMO_CCS811_SetConfiguration(config);\r\n    }\r\n    else\r\n    {\r\n        _ATMO_CCS811_config.configured = false;\r\n    }\r\n\r\n    if( CCS811_Init_Hw() != CCS811_SUCCESS )\r\n    {\r\n    \treturn ATMO_CCS811_Status_Fail;\r\n    }\r\n\r\n    // The configuration has to be set before the Init_HW routine is called\r\n    // But the Init_HW routine resets the device\r\n    // So, we need to just set the configuration one more time after this reset\r\n    if( config )\r\n    {\r\n        ATMO_CCS811_SetConfiguration(config);\r\n    }\r\n\r\n    return ATMO_CCS811_Status_Success;\r\n}\r\n\r\nATMO_CCS811_Status_t ATMO_CCS811_SetEnabled(bool enabled)\r\n{\r\n    _ATMO_CCS811_Enabled = enabled;\r\n    return ATMO_CCS811_Status_Success;\r\n}\r\n\r\nATMO_CCS811_Status_t ATMO_CCS811_GetEnabled(bool *enabled)\r\n{\r\n    *enabled = _ATMO_CCS811_Enabled;\r\n    return ATMO_CCS811_Status_Success;\r\n}\r\n\r\nATMO_CCS811_Status_t ATMO_CCS811_SetConfiguration(const ATMO_CCS811_Config_t *config)\r\n{\r\n    if( config == NULL )\r\n    {\r\n        return ATMO_CCS811_Status_Fail;\r\n    }\r\n\r\n    if( ATMO_I2C_SetConfiguration(config->i2cDriverInstance, &i2cConfig) != ATMO_I2C_Status_Success )\r\n    {\r\n        return ATMO_CCS811_Status_Fail;\r\n    }\r\n    memcpy( &_ATMO_CCS811_config.config, config, sizeof(ATMO_CCS811_Config_t) );\r\n    _ATMO_CCS811_config.configured = true;\r\n\r\n    if( CCS811_setDriveMode(config->operatingMode) != CCS811_SUCCESS )\r\n    {\r\n    \treturn ATMO_CCS811_Status_Fail;\r\n    }\r\n\r\n    return ATMO_CCS811_Status_Success;\r\n}\r\n\r\nATMO_CCS811_Status_t ATMO_CCS811_GetConfiguration(ATMO_CCS811_Config_t *config)\r\n{\r\n    if( config == NULL || !_ATMO_CCS811_config.configured )\r\n    {\r\n        return ATMO_CCS811_Status_Fail;\r\n    }\r\n\r\n    memcpy(config, &_ATMO_CCS811_config.config, sizeof(ATMO_CCS811_Config_t));\r\n\r\n    return ATMO_CCS811_Status_Success;\r\n}\r\n\r\n\r\nATMO_CCS811_Status_t ATMO_CCS811_GetTVOC(uint16_t *tvoc)\r\n{\r\n    if(!_ATMO_CCS811_Enabled)\r\n    {\r\n        return ATMO_CCS811_Status_Fail;\r\n    }\r\n\r\n\tif( CCS811_readAlgorithmResults() != CCS811_SUCCESS )\r\n\t{\r\n\t\treturn ATMO_CCS811_Status_Fail;\r\n\t}\r\n\r\n\t*tvoc = CCS811_getTVOC();\r\n\r\n\treturn ATMO_CCS811_Status_Success;\r\n}\r\n\r\nATMO_CCS811_Status_t ATMO_CCS811_GetCO2(uint16_t *co2)\r\n{\r\n    if(!_ATMO_CCS811_Enabled)\r\n    {\r\n        return ATMO_CCS811_Status_Fail;\r\n    }\r\n\r\n\tif( CCS811_readAlgorithmResults() != CCS811_SUCCESS )\r\n\t{\r\n\t\treturn ATMO_CCS811_Status_Fail;\r\n\t}\r\n\r\n\t*co2 = CCS811_getCO2();\r\n\r\n\treturn ATMO_CCS811_Status_Success;\r\n}\r\n\r\n/**\r\n * Get air quality in percentage based on TVOC reading\r\n *\r\n * @param[out] airQuality\r\n */\r\nATMO_CCS811_Status_t ATMO_CCS811_GetAirQuality(float *airQuality)\r\n{\r\n    if(!_ATMO_CCS811_Enabled)\r\n    {\r\n        return ATMO_CCS811_Status_Fail;\r\n    }\r\n    \r\n\tif( CCS811_readAlgorithmResults() != CCS811_SUCCESS )\r\n\t{\r\n\t\treturn ATMO_CCS811_Status_Fail;\r\n\t}\r\n\r\n\t*airQuality = (CCS811_getTVOC() * 100.0) / CCS811_TVOC_MAX_PPB;\r\n\r\n\treturn ATMO_CCS811_Status_Success;\r\n}\r\n",
                "ccs811_internal.c": "/******************************************************************************\r\nDerivative Work of\r\nSparkFunCCS811.cpp\r\nCCS811 Arduino library\r\nMarshall Taylor @ SparkFun Electronics\r\nNathan Seidle @ SparkFun Electronics\r\n\r\nApril 4, 2017\r\n\r\nhttps://github.com/sparkfun/CCS811_Air_Quality_Breakout\r\nhttps://github.com/sparkfun/SparkFun_CCS811_Arduino_Library\r\n\r\nThis code is released under the [MIT License](http://opensource.org/licenses/MIT).\r\n\r\nPlease review the LICENSE.md file included with this example https://github.com/sparkfun/SparkFun_CCS811_Arduino_Library/blob/master/LICENSE.md .\r\nIf you have any questions or concerns with licensing, please contact techsupport@sparkfun.com.\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2015 SparkFun Electronics\r\nCopyright (c) 2018 NXP\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"),\r\nto deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\nand/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n\r\nDistributed as-is; no warranty is given.\r\n******************************************************************************/\r\n\r\n//CCS811.h for additional topology notes.\r\n\r\n#include \"ccs811_internal.h\"\r\n#include <math.h>\r\n#include <stdbool.h>\r\n#include <assert.h>\r\n\r\n/*****************************************************************************\r\n * Variables\r\n ****************************************************************************/\r\nstatic CCS811_fct_t FCT_CCS811;\r\nstatic bool initDriverDone = false;\r\nstatic bool initHwDone = false;\r\n\r\n/* air quality values obtained from the sensor */\r\nstatic float refResistance;\r\nstatic float resistance = 10000;\r\nstatic uint16_t tVOC = 0;\r\nstatic uint16_t CO2 = 0;\r\nstatic uint16_t vrefCounts = 0;\r\nstatic uint16_t ntcCounts = 0;\r\nstatic float temperature = 0;\r\n\r\n/*****************************************************************************\r\n * Static functions\r\n ****************************************************************************/\r\n\r\n/*\r\n * @brief Read a CCS811 register.\r\n *\r\n * @param  Address of the register to read\r\n * @param  Pointer to the read value\r\n * @return Status value of I2C read function (0 for success)\r\n */\r\nstatic uint8_t CCS811_readRegister(uint8_t offset, uint8_t* outputPointer)\r\n{\r\n    uint8_t cmd[2];\r\n\r\n    cmd[0] = offset;\r\n    return FCT_CCS811.I2C_Read(cmd, 1, outputPointer, 1);\r\n}\r\n\r\n/*\r\n * @brief Read several CCS811 registers.\r\n *\r\n * @param  Start address of the registers to read\r\n * @param  Pointer to the read values\r\n * @param  Number of consecutive registers to read\r\n * @return Status value of I2C read function (0 for success)\r\n */\r\nstatic uint8_t CCS811_multiReadRegister(uint8_t offset, uint8_t *outputPointer, uint8_t length)\r\n{\r\n    uint8_t cmd[2];\r\n\r\n    cmd[0] = offset;\r\n    return FCT_CCS811.I2C_Read(cmd, 1, outputPointer, length);\r\n}\r\n\r\n/*\r\n * @brief Write to a CCS811 register.\r\n *\r\n * @param  Address of the register to write to\r\n * @param  Value to write\r\n * @return Status value of I2C read function (0 for success)\r\n */\r\nstatic uint8_t CCS811_writeRegister(uint8_t offset, uint8_t dataToWrite)\r\n{\r\n\r\n    uint8_t cmd[2];\r\n\r\n    cmd[0] = offset;\r\n    cmd[1] = dataToWrite;\r\n\r\n    return FCT_CCS811.I2C_Write(cmd, 2);\r\n}\r\n\r\n/*\r\n * @brief Write to several CCS811 registers.\r\n *\r\n * @param  Start address of the registers to write to\r\n * @param  Pointer to the values to be written\r\n * @param  Number of consecutive registers to write to\r\n * @return Status value of I2C read function (0 for success)\r\n */\r\nstatic uint8_t CCS811_multiWriteRegister(uint8_t offset, uint8_t *inputPointer, uint8_t length)\r\n{\r\n    uint8_t cmd[length+1];\r\n    cmd[0] = offset;\r\n    for( uint32_t i = 0; i < length; i++ ) //This waits > 1ms @ 80MHz clock\r\n    {\r\n        cmd[1+i] = inputPointer[i];\r\n    }\r\n    return FCT_CCS811.I2C_Write(cmd, length+1);\r\n}\r\n\r\n\r\n/*****************************************************************************\r\n * Public functions\r\n ****************************************************************************/\r\n\r\nvoid CCS811_Init_Driver(ptCCS811_fct_t FCT)\r\n{\r\n    assert((FCT != NULL) &&\r\n            (FCT->I2C_Read != NULL) &&\r\n            (FCT->I2C_Write != NULL) &&\r\n            (FCT->WaitMsec != NULL));\r\n    FCT_CCS811 = *FCT;\r\n    initDriverDone = true;\r\n}\r\n\r\nvoid CCS811_Deinit_Driver()\r\n{\r\n    /* Deinit driver */\r\n    initDriverDone = false;\r\n    initHwDone = false;\r\n}\r\n\r\nCCS811_status CCS811_Init_Hw(void)\r\n{\r\n    uint8_t data[4] = {0x11,0xE5,0x72,0x8A}; /* reset key */\r\n    uint8_t status;\r\n    uint8_t val = 0;\r\n    CCS811_status error_status = CCS811_SUCCESS;\r\n\r\n    if (!initDriverDone) return CCS811_NOINIT_ERROR;\r\n\r\n    /* trick to allow calling internal public functions */\r\n    initHwDone = true;\r\n\r\n    /* check HW ID */\r\n    if (CCS811_readRegister( CCS811_HW_ID,  &val) != 0)\r\n    {\r\n        error_status = CCS811_I2C_ERROR;\r\n        goto return_status;\r\n    }\r\n    if (val != 0x81)\r\n    {\r\n        error_status = CCS811_INTERNAL_ERROR;\r\n        goto return_status;\r\n    }\r\n\r\n    /* reset the device */\r\n    if (CCS811_multiWriteRegister(CCS811_SW_RESET, data, 4)!=0)\r\n    {\r\n        error_status =  CCS811_I2C_ERROR;\r\n        goto return_status;\r\n    }\r\n\r\n    FCT_CCS811.WaitMsec(10);\r\n\r\n    if (CCS811_checkForStatusError(&status) == CCS811_I2C_ERROR)\r\n    {\r\n        error_status = CCS811_I2C_ERROR;\r\n        goto return_status;\r\n    }\r\n    if (status == true) return CCS811_INTERNAL_ERROR;\r\n\r\n    error_status = CCS811_appValid(&val);\r\n    if (error_status != CCS811_SUCCESS) goto return_status;\r\n    if (val == 0)\r\n    {\r\n        error_status =  CCS811_INTERNAL_ERROR;\r\n        goto return_status;\r\n    }\r\n\r\n    /* write 0 byte to this register to start app */\r\n    //if (CCS811_writeRegister(CCS811_APP_START, 0)!=0) return CCS811_I2C_ERROR;\r\n    val = CCS811_APP_START;\r\n    if (FCT_CCS811.I2C_Write(&val, 1))\r\n    {\r\n        error_status = CCS811_I2C_ERROR;\r\n        goto return_status;\r\n    }\r\n\r\n    /* read every second */\r\n    if (CCS811_setDriveMode(1))\r\n    {\r\n        error_status = CCS811_I2C_ERROR;\r\n        goto return_status;\r\n    }\r\n\r\n    return_status:\r\n    if (error_status != CCS811_SUCCESS) initHwDone = false;\r\n    return error_status;\r\n}\r\n\r\nCCS811_status CCS811_readAlgorithmResults(void)\r\n{\r\n    if (!initHwDone) return CCS811_NOINIT_ERROR;\r\n\r\n    uint8_t data[4];\r\n    if (CCS811_multiReadRegister(CCS811_ALG_RESULT_DATA, data, 4)!=0) return CCS811_I2C_ERROR;\r\n\r\n    /* data ordered: co2MSB, co2LSB, tvocMSB, tvocLSB */\r\n    CO2 = ((uint16_t)data[0] << 8) | data[1];\r\n    tVOC = ((uint16_t)data[2] << 8) | data[3];\r\n    return CCS811_SUCCESS;\r\n}\r\n\r\nCCS811_status CCS811_checkForStatusError(uint8_t* StatusError)\r\n{\r\n    if (!initHwDone) return CCS811_NOINIT_ERROR;\r\n    assert(StatusError != NULL);\r\n\r\n    /* read the status bit */\r\n    if (CCS811_readRegister(CCS811_STATUS, StatusError )!=0) return CCS811_I2C_ERROR;\r\n    *StatusError = *StatusError & 1 << 0; // bit ERROR\r\n    return CCS811_SUCCESS;\r\n}\r\n\r\nCCS811_status CCS811_dataAvailable(uint8_t* value)\r\n{\r\n    if (!initHwDone) return CCS811_NOINIT_ERROR;\r\n    assert(value != NULL);\r\n\r\n    if (CCS811_readRegister(CCS811_STATUS, value )!=0) return CCS811_I2C_ERROR;\r\n    *value = (*value &  1 << 3)>>3; // bit DATA_READY\r\n    return CCS811_SUCCESS;\r\n}\r\n\r\nCCS811_status CCS811_appValid(uint8_t* value)\r\n{\r\n    if (!initHwDone) return CCS811_NOINIT_ERROR;\r\n    assert(value != NULL);\r\n\r\n    if (CCS811_readRegister(CCS811_STATUS, value )!=0) return CCS811_I2C_ERROR;\r\n    *value = (*value &  1 << 4)>>4; // bit APP_VALID\r\n    return CCS811_SUCCESS;\r\n}\r\n\r\nCCS811_status CCS811_getErrorRegister(uint8_t* value)\r\n{\r\n    if (!initHwDone) return CCS811_NOINIT_ERROR;\r\n    assert(value != NULL);\r\n\r\n    *value=0xFF;\r\n    if (CCS811_readRegister(CCS811_ERROR_ID, value )!=0) return CCS811_I2C_ERROR;\r\n    return CCS811_SUCCESS;\r\n}\r\n\r\nCCS811_status CCS811_getBaseline(unsigned int* baseline)\r\n{\r\n    if (!initHwDone) return CCS811_NOINIT_ERROR;\r\n    assert(baseline != NULL);\r\n\r\n    uint8_t data[2];\r\n    if (CCS811_multiReadRegister(CCS811_BASELINE,data, 2)!=0) return CCS811_I2C_ERROR;\r\n\r\n    *baseline = ((uint16_t)data[0] << 8) | data[1];\r\n    return CCS811_SUCCESS;\r\n}\r\n\r\nCCS811_status CCS811_setBaseline(uint16_t input)\r\n{\r\n    if (!initHwDone) return CCS811_NOINIT_ERROR;\r\n\r\n    uint8_t data[2];\r\n    data[0] = (input >> 8) & 0x00FF;\r\n    data[1] = input & 0x00FF;\r\n\r\n    if (CCS811_multiWriteRegister(CCS811_BASELINE, data, 2)!=0) return CCS811_I2C_ERROR;\r\n    return CCS811_SUCCESS;\r\n}\r\n\r\nCCS811_status CCS811_setInterrupts(uint8_t fct)\r\n{\r\n    if (!initHwDone) return CCS811_NOINIT_ERROR;\r\n\r\n    uint8_t value;\r\n    if (CCS811_readRegister(CCS811_MEAS_MODE, &value )!=0) return CCS811_I2C_ERROR;\r\n    if (fct == 0)\r\n    {\r\n        value &= ~(CCS811_INTERRUPT_DRIVEN); /* clear INTERRUPT bit */\r\n    }\r\n    else\r\n    {\r\n        value |= (CCS811_INTERRUPT_DRIVEN); /* set INTERRUPT bit */\r\n    }\r\n\r\n    if (CCS811_writeRegister(CCS811_MEAS_MODE, value)!=0) return CCS811_I2C_ERROR;\r\n    return CCS811_SUCCESS;\r\n}\r\n\r\nCCS811_status CCS811_setThresholds(uint8_t fct)\r\n{\r\n    if (!initHwDone) return CCS811_NOINIT_ERROR;\r\n\r\n    uint8_t value;\r\n    if (CCS811_readRegister(CCS811_MEAS_MODE, &value )!=0) return CCS811_I2C_ERROR;\r\n    if (fct == 0)\r\n    {\r\n        value &= ~(CCS811_THRESHOLDS_ENABLED); /* clear THRESHOLDS bit */\r\n    }\r\n    else\r\n    {\r\n        value |= (CCS811_THRESHOLDS_ENABLED); /* set THRESHOLDS bit */\r\n    }\r\n\r\n    if (CCS811_writeRegister(CCS811_MEAS_MODE, value)!=0) return CCS811_I2C_ERROR;\r\n    return CCS811_SUCCESS;\r\n}\r\n\r\nCCS811_status CCS811_setDriveMode(uint8_t mode)\r\n{\r\n    if (!initHwDone) return CCS811_NOINIT_ERROR;\r\n\r\n    if (mode > 4) mode = 4; /* sanitize input */\r\n\r\n    uint8_t value;\r\n    if (CCS811_readRegister(CCS811_MEAS_MODE, &value)!=0) return CCS811_I2C_ERROR;\r\n    value &= ~(0b00000111 << 4); /* clear DRIVE_MODE bits */\r\n    value |= (mode << 4); /* mask in mode */\r\n    if (CCS811_writeRegister(CCS811_MEAS_MODE, value)!=0) return CCS811_I2C_ERROR;\r\n    return CCS811_SUCCESS;\r\n}\r\n\r\nCCS811_status CCS811_setEnvironmentalData(float relativeHumidity, float temperature)\r\n{\r\n    if (!initHwDone) return CCS811_NOINIT_ERROR;\r\n\r\n    /* check for invalid temperatures */\r\n    if ((temperature < -25) || (temperature > 50)) return CCS811_GENERIC_ERROR;\r\n\r\n    /* check for invalid humidity */\r\n    if ((relativeHumidity < 0) || (relativeHumidity > 100)) return CCS811_GENERIC_ERROR;\r\n\r\n    uint32_t rH = relativeHumidity * 1000; /* 42.348 becomes 42348 */\r\n    uint32_t temp = temperature * 1000; /* 23.2 becomes 23200 */\r\n\r\n    uint8_t envData[4];\r\n\r\n    /* split value into 7-bit integer and 9-bit fractional */\r\n    envData[0] = ((rH % 1000) / 100) > 7 ? (rH / 1000 + 1) << 1 : (rH / 1000) << 1;\r\n    envData[1] = 0; /* support only increments of 0.5 so bits 7-0 will always be zero */\r\n    if (((rH % 1000) / 100) > 2 && (((rH % 1000) / 100) < 8))\r\n    {\r\n        envData[0] |= 1; /* set 9th bit of fractional to indicate 0.5% */\r\n    }\r\n\r\n    temp += 25000; /* add the 25C offset */\r\n    /* split value into 7-bit integer and 9-bit fractional */\r\n    envData[2] = ((temp % 1000) / 100) > 7 ? (temp / 1000 + 1) << 1 : (temp / 1000) << 1;\r\n    envData[3] = 0;\r\n    if (((temp % 1000) / 100) > 2 && (((temp % 1000) / 100) < 8))\r\n    {\r\n        envData[2] |= 1;  /* set 9th bit of fractional to indicate 0.5C */\r\n    }\r\n    if (CCS811_multiWriteRegister(CCS811_ENV_DATA, envData, 4)!=0) return CCS811_I2C_ERROR;\r\n    return CCS811_SUCCESS;\r\n}\r\n\r\nvoid CCS811_setRefResistance(float input)\r\n{\r\n    refResistance = input;\r\n}\r\n\r\nCCS811_status CCS811_readNTC(void)\r\n{\r\n    if (!initHwDone) return CCS811_NOINIT_ERROR;\r\n\r\n    uint8_t data[4];\r\n    if (CCS811_multiReadRegister(CCS811_NTC, data, 4)!=0) return CCS811_I2C_ERROR;\r\n\r\n    vrefCounts = ((uint16_t)data[0] << 8) | data[1];\r\n    ntcCounts = ((uint16_t)data[2] << 8) | data[3];\r\n    resistance = ((float)ntcCounts * refResistance / (float)vrefCounts);\r\n\r\n    temperature = log((long)resistance);\r\n    temperature = 1 / (0.001129148 + (0.000234125 * temperature) + (0.0000000876741 * temperature * temperature * temperature));\r\n    temperature = temperature - 273.15;  /* convert from Kelvin to Celsius */\r\n\r\n    return CCS811_SUCCESS;\r\n}\r\n\r\nuint16_t CCS811_getTVOC(void)\r\n{\r\n    return tVOC;\r\n}\r\n\r\nuint16_t CCS811_getCO2(void)\r\n{\r\n    return CO2;\r\n}\r\n\r\nfloat CCS811_getResistance(void)\r\n{\r\n    return resistance;\r\n}\r\n\r\nfloat CCS811_getTemperature(void)\r\n{\r\n    return temperature;\r\n}\r\n\r\n"
              }
            }
          },
          "md5": "613fa1458b6a4b5ddb43549fa56f421c"
        },
        "fxos8700": {
          "libName": "fxos8700",
          "manufacturer": "NXP Semiconductors",
          "description": "FXOS8700 Accelerometer/Magnetometer",
          "type": "Accelerometer + Magnetometer",
          "icon": "",
          "image": "",
          "version": "",
          "eelVersion": "3",
          "shoppingCartLinks": {
            "digikey": {
              "links": {
                "info": "https://www.digikey.com/product-detail/en/adafruit-industries-llc/3463/1528-2130-ND/7064490"
              },
              "cartData": {
                "part": " 1528-2130-ND",
                "partid": "3463",
                "source": "dkstudio",
                "qty": "1"
              }
            }
          },
          "requires": [
            "embedded",
            "i2c",
            "gpio"
          ],
          "elements": [
            {
              "name": "FXOS8700AccelerometerMagnetometer",
              "type": "EmbeddedFXOS8700",
              "icon": "EmbeddedAccelerometerMagnetometer.svg",
              "defaultAbility": "getAccelData",
              "defaultTrigger": "accelDataRead",
              "helpPageHref": "https://developer.atmosphereiot.com/documents/elements/nxpfxos8700element.html",
              "hidden": false,
              "abilities": [
                {
                  "name": "setup",
                  "triggers": [],
                  "hidden": true,
                  "code": "\tATMO_FXOS8700_Config_t config;\n\tconfig.address = ATMO_PROPERTY(undefined, i2cAddress);\n\tconfig.i2cDriverInstance = ATMO_PROPERTY(undefined, i2cInstance);\n\tconfig.gpioDriverInstance = ATMO_PROPERTY(undefined, gpioInstance);\n\tconfig.int1En = ATMO_PROPERTY(undefined, interrupt1Enabled);\n    config.int2En = ATMO_PROPERTY(undefined, interrupt2Enabled);\n    config.int1Pin = ATMO_PROPERTY(undefined, interrupt1Gpio);\n    config.int2Pin = ATMO_PROPERTY(undefined, interrupt2Gpio);\n\n    switch(ATMO_PROPERTY(undefined, motionDetectType))\n    {\n        case FXOS8700_NoDetect:\n        {\n            config.freefallEnabled = false;\n            config.motionEnabled = false;\n            config.tapDetectionEnabled = false;\n            break;\n        }\n        case FXOS8700_FreefallDetect:\n        {\n            config.freefallEnabled = true;\n            config.motionEnabled = false;\n            config.tapDetectionEnabled = false;\n            break;\n        }\n        case FXOS8700_MotionDetect:\n        {\n            config.freefallEnabled = false;\n            config.motionEnabled = true;\n            config.tapDetectionEnabled = false;\n            break;\n        }\n        case FXOS8700_TapDetect:\n        {\n            config.freefallEnabled = false;\n            config.motionEnabled = false;\n            config.tapDetectionEnabled = true;\n            break; \n        }\n        default:\n        {\n            config.freefallEnabled = false;\n            config.motionEnabled = false;  \n            config.tapDetectionEnabled = false;\n            break;\n        }\n    }\n\n    ATMO_FXOS8700_SetMotionDetectedAbilityHandle(ATMO_ABILITY(undefined, detectMotion));\n    ATMO_FXOS8700_SetFreefallDetectedAbilityHandle(ATMO_ABILITY(undefined, detectFreefall));\n    ATMO_FXOS8700_SetTapDetectedAbilityHandle(ATMO_ABILITY(undefined, detectTap));\n\tATMO_FXOS8700_Init(&config);\n\n    return ATMO_Status_Success;\n\t"
                },
                {
                  "name": "setEnabled",
                  "triggers": [],
                  "code": "ATMO_FXOS8700_SetEnabled(true);\nreturn ATMO_Status_Success;"
                },
                {
                  "name": "setDisabled",
                  "triggers": [],
                  "code": "ATMO_FXOS8700_SetEnabled(false);\nreturn ATMO_Status_Success;"
                },
                {
                  "name": "setEnabledDisabled",
                  "triggers": [],
                  "code": "bool enabled = false;\nATMO_GetBool(in, &enabled);\nATMO_FXOS8700_SetEnabled(enabled);\nreturn ATMO_Status_Success;"
                },
                {
                  "name": "getAccelData",
                  "triggers": [
                    "accelDataRead"
                  ],
                  "code": "    ATMO_3dFloatVector_t data;\r\n\r\n    if( ATMO_FXOS8700_GetAccelData(&data) != ATMO_FXOS8700_Status_Success )\r\n    {\r\n        ATMO_CreateValueVoid(out);\r\n        return ATMO_Status_Fail;\r\n    }\r\n\r\n    ATMO_CreateValue3dVectorFloat(out, &data);\r\n\r\n    return ATMO_Status_Success;"
                },
                {
                  "name": "getAccelX",
                  "triggers": [
                    "accelXRead"
                  ],
                  "code": "\tATMO_3dFloatVector_t data;\n\n\tif(ATMO_FXOS8700_GetAccelData(&data) != ATMO_FXOS8700_Status_Success)\n\t{\n\t\tATMO_CreateValueVoid(out);\n\t\treturn ATMO_Status_Fail;\n\t}\n\n\tATMO_CreateValueFloat(out, data.x);\n\treturn ATMO_Status_Success;\n"
                },
                {
                  "name": "getAccelY",
                  "triggers": [
                    "accelYRead"
                  ],
                  "code": "\tATMO_3dFloatVector_t data;\n\n\tif(ATMO_FXOS8700_GetAccelData(&data) != ATMO_FXOS8700_Status_Success)\n\t{\n\t\tATMO_CreateValueVoid(out);\n\t\treturn ATMO_Status_Fail;\n\t}\n\n\tATMO_CreateValueFloat(out, data.y);\n\treturn ATMO_Status_Success;\n"
                },
                {
                  "name": "getAccelZ",
                  "triggers": [
                    "accelZRead"
                  ],
                  "code": "\tATMO_3dFloatVector_t data;\n\n\tif(ATMO_FXOS8700_GetAccelData(&data) != ATMO_FXOS8700_Status_Success)\n\t{\n\t\tATMO_CreateValueVoid(out);\n\t\treturn ATMO_Status_Fail;\n\t}\n\n\tATMO_CreateValueFloat(out, data.z);\n\treturn ATMO_Status_Success;\n"
                },
                {
                  "name": "getMagData",
                  "triggers": [
                    "magDataRead"
                  ],
                  "code": "    ATMO_3dFloatVector_t data;\r\n\r\n    if( ATMO_FXOS8700_GetMagData(&data) != ATMO_FXOS8700_Status_Success )\r\n    {\r\n        ATMO_CreateValueVoid(out);\r\n        return ATMO_Status_Fail;\r\n    }\r\n\r\n    ATMO_CreateValue3dVectorFloat(out, &data);\r\n\r\n    return ATMO_Status_Success;"
                },
                {
                  "name": "getMagX",
                  "triggers": [
                    "magXRead"
                  ],
                  "code": "\tATMO_3dFloatVector_t data;\n\n\tif(ATMO_FXOS8700_GetMagData(&data) != ATMO_FXOS8700_Status_Success)\n\t{\n\t\tATMO_CreateValueVoid(out);\n\t\treturn ATMO_Status_Fail;\n\t}\n\n\tATMO_CreateValueFloat(out, data.x);\n\treturn ATMO_Status_Success;\n"
                },
                {
                  "name": "getMagY",
                  "triggers": [
                    "magYRead"
                  ],
                  "code": "\tATMO_3dFloatVector_t data;\n\n\tif(ATMO_FXOS8700_GetMagData(&data) != ATMO_FXOS8700_Status_Success)\n\t{\n\t\tATMO_CreateValueVoid(out);\n\t\treturn ATMO_Status_Fail;\n\t}\n\n\tATMO_CreateValueFloat(out, data.y);\n\treturn ATMO_Status_Success;\n"
                },
                {
                  "name": "getMagZ",
                  "triggers": [
                    "magZRead"
                  ],
                  "code": "\tATMO_3dFloatVector_t data;\n\n\tif(ATMO_FXOS8700_GetMagData(&data) != ATMO_FXOS8700_Status_Success)\n\t{\n\t\tATMO_CreateValueVoid(out);\n\t\treturn ATMO_Status_Fail;\n\t}\n\n\tATMO_CreateValueFloat(out, data.z);\n\treturn ATMO_Status_Success;\n"
                },
                {
                  "name": "detectTap",
                  "triggers": [
                    "tapDetected"
                  ],
                  "hidden": true,
                  "code": "\treturn ATMO_Status_Success;\n"
                },
                {
                  "name": "detectMotion",
                  "triggers": [
                    "motionDetected"
                  ],
                  "hidden": true,
                  "code": "\treturn ATMO_Status_Success;\n"
                },
                {
                  "name": "detectFreefall",
                  "triggers": [
                    "freefallDetected"
                  ],
                  "hidden": true,
                  "code": "\treturn ATMO_Status_Success;\n"
                },
                {
                  "name": "enableFreefallDetection",
                  "triggers": [],
                  "code": "if(ATMO_FXOS8700_EnableFreefallDetection() == ATMO_FXOS8700_Status_Success)\n{\n    return ATMO_Status_Success;\n}\n\nreturn ATMO_Status_Fail;"
                },
                {
                  "name": "enableMotionDetection",
                  "triggers": [],
                  "code": "if(ATMO_FXOS8700_EnableMotionDetection() == ATMO_FXOS8700_Status_Success)\n{\n    return ATMO_Status_Success;\n}\n\nreturn ATMO_Status_Fail;"
                },
                {
                  "name": "enableTapDetection",
                  "triggers": [],
                  "code": "if(ATMO_FXOS8700_EnableTapDetection() == ATMO_FXOS8700_Status_Success)\n{\n    return ATMO_Status_Success;\n}\n\nreturn ATMO_Status_Fail;"
                },
                {
                  "name": "disableDetection",
                  "triggers": [],
                  "code": "if(ATMO_FXOS8700_DisableAllDetection() == ATMO_FXOS8700_Status_Success)\n{\n    return ATMO_Status_Success;\n}\n\nreturn ATMO_Status_Fail;"
                }
              ],
              "properties": [
                {
                  "name": "i2cInstance",
                  "input": "driverInstance",
                  "driverType": "i2c"
                },
                {
                  "name": "gpioInstance",
                  "input": "driverInstance",
                  "driverType": "gpio"
                },
                {
                  "name": "interrupt1Enabled",
                  "input": "checkbox",
                  "value": false
                },
                {
                  "name": "interrupt2Enabled",
                  "input": "checkbox",
                  "value": true
                },
                {
                  "name": "interrupt1Gpio",
                  "input": "number",
                  "value": "ATMO_DEFAULT_GPIO"
                },
                {
                  "name": "interrupt2Gpio",
                  "input": "number",
                  "value": "ATMO_DEFAULT_GPIO"
                },
                {
                  "name": "motionDetectType",
                  "input": "select",
                  "inputOptions": [
                    "FXOS8700_NoDetect",
                    "FXOS8700_FreefallDetect",
                    "FXOS8700_MotionDetect",
                    "FXOS8700_TapDetect"
                  ],
                  "value": "FXOS8700_NoDetect"
                },
                {
                  "name": "i2cAddress",
                  "input": "number",
                  "value": "0x1E"
                }
              ],
              "triggers": [],
              "variables": [],
              "language": {
                "en-US": {
                  "EmbeddedFXOS8700": "NXP FXOS8700",
                  "FXOS8700_NoDetect": "No Detection",
                  "FXOS8700_FreefallDetect": "Detect Freefall",
                  "FXOS8700_MotionDetect": "Detect Motion",
                  "FXOS8700_TapDetect": "Detect Tap",
                  "motionDetectType": "Motion Detection Type",
                  "i2cInstance": "I2C Driver Instance",
                  "gpioInstance": "GPIO Driver Instance",
                  "interrupt1Enabled": "Interrupt 1 Enabled",
                  "interrupt1Gpio": "Interrupt 1 GPIO Pin",
                  "interrupt2Enabled": "Interrupt 2 Enabled",
                  "interrupt2Gpio": "Interrupt 2 GPIO Pin",
                  "tapDetectEnabled": "Tap Detection Enabled",
                  "i2cAddress": "I2C Address",
                  "setEnabled": "Set Enabled",
                  "setDisabled": "Set Disabled",
                  "setEnabledDisabled": "Set Enabled State",
                  "getAccelData": "Get Accelerometer Data",
                  "accelDataRead": "Accelerometer Data Read",
                  "getMagData": "Get Magnetometer Data",
                  "magDataRead": "Magnetometer Data Read",
                  "detectTap": "Detect Tap",
                  "detectMotionFreefall": "Detect Motion/Freefall",
                  "tapDetected": "Tap Detected",
                  "motionDetected": "Motion Detected",
                  "freefallDetected": "Freefall Detected",
                  "EmbeddedAccelerometerMagnetometer": "Accelerometer Magnetometer",
                  "getAccelX": "Get Accelerometer X Value",
                  "getAccelY": "Get Accelerometer Y Value",
                  "getAccelZ": "Get Accelerometer Z Value",
                  "getMagX": "Get Magnetometer X Value",
                  "getMagY": "Get Magnetometer Y Value",
                  "getMagZ": "Get Magnetometer Z Value",
                  "accelXRead": "Accelerometer X Value Read",
                  "accelYRead": "Accelerometer Y Value Read",
                  "accelZRead": "Accelerometer Z Value Read",
                  "magXRead": "Magnetometer X Value Read",
                  "magYRead": "Magnetometer Y Value Read",
                  "magZRead": "Magnetometer Z Value Read",
                  "disableDetection": "Disable All Detection",
                  "enableFreefallDetection": "Enable Freefall Detection",
                  "enableMotionDetection": "Enable Motion Detection",
                  "enableTapDetection": "Enable Tap Detection"
                }
              }
            }
          ],
          "files": {
            "common": {
              "headers": {
                "fxos8700.h": "#ifndef _ATMO_FXOS8700_H_\n#define _ATMO_FXOS8700_H_\n\n#include \"../app_src/atmosphere_platform.h\"\n#include \"../i2c/i2c.h\"\n#include \"../gpio/gpio.h\"\n\ntypedef enum {\n    ATMO_FXOS8700_Status_Success              = 0x00u,  // Common - Operation was successful\n    ATMO_FXOS8700_Status_Fail                 = 0x01u,  // Common - Operation failed\n    ATMO_FXOS8700_Status_Initialized          = 0x02u,  // Common - Peripheral already initialized\n    ATMO_FXOS8700_Status_Invalid              = 0x03u,  // Common - Invalid operation or result\n    ATMO_FXOS8700_Status_NotSupported         = 0x04u,  // Common - Feature not supported by platform\n} ATMO_FXOS8700_Status_t;\n\ntypedef struct {\n    uint16_t address;\n    ATMO_DriverInstanceHandle_t i2cDriverInstance;\n    ATMO_DriverInstanceHandle_t gpioDriverInstance;\n    bool int1En;\n    ATMO_GPIO_Device_Pin_t int1Pin;\n    bool int2En;\n    ATMO_GPIO_Device_Pin_t int2Pin;\n    bool motionEnabled;\n    bool freefallEnabled;\n    bool tapDetectionEnabled;\n\n} ATMO_FXOS8700_Config_t;\n\ntypedef enum {\n\tFXOS8700_NoDetect,\n\tFXOS8700_FreefallDetect,\n\tFXOS8700_MotionDetect,\n    FXOS8700_TapDetect,\n} FXOS8700_Detect_t;\n\n/**\n * Initialize FXOS8700 Driver\n *\n * @param[in] config - Device configuration (optional)\n */\nATMO_FXOS8700_Status_t ATMO_FXOS8700_Init(ATMO_FXOS8700_Config_t *config);\n\n/**\n * Set basic device configuration\n *\n * @param[in] config\n */\nATMO_FXOS8700_Status_t ATMO_FXOS8700_SetConfiguration(const ATMO_FXOS8700_Config_t *config);\n\n/**\n * Enable/Disable FXOS8700 Driver\n *\n * @param[in] enabled\n */\nATMO_FXOS8700_Status_t ATMO_FXOS8700_SetEnabled(bool enabled);\n\n/**\n * Get enabled/disabled status of FXOS8700 driver\n *\n * @param[out] enabled\n */\nATMO_FXOS8700_Status_t ATMO_FXOS8700_GetEnabled(bool *enabled);\n\n/**\n * Get device configuration\n *\n * @param[out] config\n */\nATMO_FXOS8700_Status_t ATMO_FXOS8700_GetConfiguration(ATMO_FXOS8700_Config_t *config);\n\nATMO_FXOS8700_Status_t ATMO_FXOS8700_GetAccelData(ATMO_3dFloatVector_t *data);\n\nATMO_FXOS8700_Status_t ATMO_FXOS8700_GetMagData(ATMO_3dFloatVector_t *data);\n\n/**\n * Motion/Freefall detection\n */\nATMO_FXOS8700_Status_t ATMO_FXOS8700_SetFreefallDetectedAbilityHandle(unsigned int abilityHandle);\nATMO_FXOS8700_Status_t ATMO_FXOS8700_SetFreefallDetectedCallback(ATMO_Callback_t cb);\nATMO_FXOS8700_Status_t ATMO_FXOS8700_SetMotionDetectedAbilityHandle(unsigned int abilityHandle);\nATMO_FXOS8700_Status_t ATMO_FXOS8700_SetMotionDetectedCallback(ATMO_Callback_t cb);\n\n/**\n * Tap detection\n */\nATMO_FXOS8700_Status_t ATMO_FXOS8700_IsTapDetected(bool *isTapDetected, bool *isDoubleTap);\nATMO_FXOS8700_Status_t ATMO_FXOS8700_SetTapDetectedAbilityHandle(unsigned int abilityHandle);\nATMO_FXOS8700_Status_t ATMO_FXOS8700_SetTapDetectedCallback(ATMO_Callback_t cb);\nATMO_FXOS8700_Status_t ATMO_FXOS8700_SetDoubleTapDetectedAbilityHandle(unsigned int abilityHandle);\nATMO_FXOS8700_Status_t ATMO_FXOS8700_SetDoubleTapDetectedCallback(ATMO_Callback_t cb);\n\nATMO_FXOS8700_Status_t ATMO_FXOS8700_EnableFreefallDetection();\nATMO_FXOS8700_Status_t ATMO_FXOS8700_EnableMotionDetection();\nATMO_FXOS8700_Status_t ATMO_FXOS8700_EnableTapDetection();\nATMO_FXOS8700_Status_t ATMO_FXOS8700_DisableAllDetection();\n\n#endif\n",
                "fxos8700_internal.h": "/*\n * The Clear BSD License\n * Copyright (c) 2015, Freescale Semiconductor, Inc.\n * Copyright 2016-2017 NXP\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted (subject to the limitations in the disclaimer below) provided\n * that the following conditions are met:\n *\n * o Redistributions of source code must retain the above copyright notice, this list\n *   of conditions and the following disclaimer.\n *\n * o Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n *\n * o Neither the name of the copyright holder nor the names of its\n *   contributors may be used to endorse or promote products derived from this\n *   software without specific prior written permission.\n *\n * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n#ifndef _FSL_FXOS_H_\n#define _FSL_FXOS_H_\n\n#include \"../app_src/atmosphere_platform.h\"\n\n#define EN_FFMT_INTERRUPT\n#define EN_TAP_INTERRUPT\n\n\n#define SINGLE_TAP 1\n#define DOUBLE_TAP 1\n/*\n *  STATUS Register\n */\n#define FXOS8700_STATUS_00_REG 0x00\n            \n#define FXOS8700_ZYXOW_MASK 0x80\n#define FXOS8700_ZOW_MASK 0x40\n#define FXOS8700_YOW_MASK 0x20\n#define FXOS8700_XOW_MASK 0x10\n#define FXOS8700_ZYXDR_MASK 0x08\n#define FXOS8700_ZDR_MASK 0x04\n#define FXOS8700_YDR_MASK 0x02\n#define FXOS8700_XDR_MASK 0x01\n            \n/*          \n *  F_STATUS FIFO Status Register\n */         \n#define FXOS8700_F_STATUS_REG 0x00\n            \n#define FXOS8700_F_OVF_MASK 0x80\n#define FXOS8700_F_WMRK_FLAG_MASK 0x40\n#define FXOS8700_F_CNT5_MASK 0x20\n#define FXOS8700_F_CNT4_MASK 0x10\n#define FXOS8700_F_CNT3_MASK 0x08\n#define FXOS8700_F_CNT2_MASK 0x04\n#define FXOS8700_F_CNT1_MASK 0x02\n#define FXOS8700_F_CNT0_MASK 0x01\n#define FXOS8700_F_CNT_MASK 0x3F\n            \n/*          \n *  XYZ Data Registers\n */         \n#define FXOS8700_OUT_X_MSB_REG 0x01\n#define FXOS8700_OUT_X_LSB_REG 0x02\n#define FXOS8700_OUT_Y_MSB_REG 0x03\n#define FXOS8700_OUT_Y_LSB_REG 0x04\n#define FXOS8700_OUT_Z_MSB_REG 0x05\n#define FXOS8700_OUT_Z_LSB_REG 0x06\n            \n/*          \n *  F_SETUP FIFO Setup Register\n */         \n#define FXOS8700_F_SETUP_REG 0x09\n            \n#define FXOS8700_F_MODE1_MASK 0x80\n#define FXOS8700_F_MODE0_MASK 0x40\n#define FXOS8700_F_WMRK5_MASK 0x20\n#define FXOS8700_F_WMRK4_MASK 0x10\n#define FXOS8700_F_WMRK3_MASK 0x08\n#define FXOS8700_F_WMRK2_MASK 0x04\n#define FXOS8700_F_WMRK1_MASK 0x02\n#define FXOS8700_F_WMRK0_MASK 0x01\n#define FXOS8700_F_MODE_MASK 0xC0\n#define FXOS8700_F_WMRK_MASK 0x3F\n            \n#define FXOS8700_F_MODE_DISABLED 0x00\n#define FXOS8700_F_MODE_CIRCULAR (F_MODE0_MASK)\n#define FXOS8700_F_MODE_FILL (F_MODE1_MASK)\n#define FXOS8700_F_MODE_TRIGGER (F_MODE1_MASK + F_MODE0_MASK)\n            \n/*          \n *  TRIG_CFG FIFO Trigger Configuration Register\n */         \n#define FXOS8700_TRIG_CFG_REG 0x0A\n            \n#define FXOS8700_TRIG_TRANS_MASK 0x20\n#define FXOS8700_TRIG_LNDPRT_MASK 0x10\n#define FXOS8700_TRIG_PULSE_MASK 0x08\n#define FXOS8700_TRIG_FF_MT_MASK 0x04\n            \n/*          \n *  SYSMOD System Mode Register\n */         \n#define FXOS8700_SYSMOD_REG 0x0B\n            \n#define FXOS8700_FGERR_MASK 0x80 /* MMA8451 only */\n#define FXOS8700_FGT_4_MASK 0x40 /* MMA8451 only */\n#define FXOS8700_FGT_3_MASK 0x20 /* MMA8451 only */\n#define FXOS8700_FGT_2_MASK 0x10 /* MMA8451 only */\n#define FXOS8700_FGT_1_MASK 0x08 /* MMA8451 only */\n#define FXOS8700_FGT_0_MASK 0x04 /* MMA8451 only */\n#define FXOS8700_FGT_MASK 0x7C   /* MMA8451 only */\n#define FXOS8700_SYSMOD1_MASK 0x02\n#define FXOS8700_SYSMOD0_MASK 0x01\n#define FXOS8700_SYSMOD_MASK 0x03\n            \n#define FXOS8700_SYSMOD_STANDBY 0x00\n#define FXOS8700_SYSMOD_WAKE (SYSMOD0_MASK)\n#define FXOS8700_SYSMOD_SLEEP (SYSMOD1_MASK)\n            \n/*          \n *  INT_SOURCE System Interrupt Status Register\n */         \n#define FXOS8700_INT_SOURCE_REG 0x0C\n            \n#define FXOS8700_SRC_ASLP_MASK 0x80\n#define FXOS8700_SRC_FIFO_MASK 0x40\n#define FXOS8700_SRC_TRANS_MASK 0x20\n#define FXOS8700_SRC_LNDPRT_MASK 0x10\n#define FXOS8700_SRC_PULSE_MASK 0x08\n#define FXOS8700_SRC_FF_MT_MASK 0x04\n#define FXOS8700_SRC_DRDY_MASK 0x01\n            \n/*          \n *  WHO_AM_I Device ID Register\n */         \n#define FXOS8700_WHO_AM_I_REG 0x0D\n            \n/* Content */\n#define FXOS8700_kFXOS_WHO_AM_I_Device_ID 0xC7\n            \n/* XYZ_DATA_CFG Sensor Data Configuration Register */\n#define FXOS8700_XYZ_DATA_CFG_REG 0x0E\n            \n#define FXOS8700_HPF_OUT_MASK 0x10\n#define FXOS8700_FS1_MASK 0x02\n#define FXOS8700_FS0_MASK 0x01\n#define FXOS8700_FS_MASK 0x03\n            \n#define FXOS8700_FULL_SCALE_2G 0x00\n#define FXOS8700_FULL_SCALE_4G (FXOS8700_FS0_MASK)\n#define FXOS8700_FULL_SCALE_8G (FXOS8700_FS1_MASK)\n            \n/* HP_FILTER_CUTOFF High Pass Filter Register */\n#define FXOS8700_HP_FILTER_CUTOFF_REG 0x0F\n            \n#define FXOS8700_PULSE_HPF_BYP_MASK 0x20\n#define FXOS8700_PULSE_LPF_EN_MASK 0x10\n#define FXOS8700_SEL1_MASK 0x02\n#define FXOS8700_SEL0_MASK 0x01\n#define FXOS8700_SEL_MASK 0x03\n            \n/*          \n *  PL_STATUS Portrait/Landscape Status Register\n */         \n#define FXOS8700_PL_STATUS_REG 0x10\n            \n#define FXOS8700_NEWLP_MASK 0x80\n#define FXOS8700_LO_MASK 0x40\n#define FXOS8700_LAPO1_MASK 0x04\n#define FXOS8700_LAPO0_MASK 0x02\n#define FXOS8700_BAFRO_MASK 0x01\n#define FXOS8700_LAPO_MASK 0x06\n            \n/*          \n *  PL_CFG Portrait/Landscape Configuration Register\n */         \n#define FXOS8700_PL_CFG_REG 0x11\n            \n#define FXOS8700_DBCNTM_MASK 0x80\n#define FXOS8700_PL_EN_MASK 0x40\n            \n/*          \n *  PL_COUNT Portrait/Landscape Debounce Register\n */         \n#define FXOS8700_PL_COUNT_REG 0x12\n            \n/*          \n *  PL_BF_ZCMP Back/Front and Z Compensation Register\n */         \n#define FXOS8700_PL_BF_ZCOMP_REG 0x13\n            \n#define FXOS8700_BKFR1_MASK 0x80\n#define FXOS8700_BKFR0_MASK 0x40\n#define FXOS8700_ZLOCK2_MASK 0x04\n#define FXOS8700_ZLOCK1_MASK 0x02\n#define FXOS8700_ZLOCK0_MASK 0x01\n#define FXOS8700_BKFR_MASK 0xC0\n#define FXOS8700_ZLOCK_MASK 0x07\n            \n/*          \n *  PL_P_L_THS Portrait to Landscape Threshold Register\n */         \n#define FXOS8700_PL_P_L_THS_REG 0x14\n            \n#define FXOS8700_P_L_THS4_MASK 0x80\n#define FXOS8700_P_L_THS3_MASK 0x40\n#define FXOS8700_P_L_THS2_MASK 0x20\n#define FXOS8700_P_L_THS1_MASK 0x10\n#define FXOS8700_P_L_THS0_MASK 0x08\n#define FXOS8700_HYS2_MASK 0x04\n#define FXOS8700_HYS1_MASK 0x02\n#define FXOS8700_HYS0_MASK 0x01\n#define FXOS8700_P_L_THS_MASK 0xF8\n#define FXOS8700_HYS_MASK 0x07\n            \n/*          \n *  FF_MT_CFG Freefall and Motion Configuration Register\n */         \n#define FXOS8700_FF_MT_CFG_REG 0x15\n            \n#define FXOS8700_ELE_MASK 0x80\n#define FXOS8700_OAE_MASK 0x40\n#define FXOS8700_ZEFE_MASK 0x20\n#define FXOS8700_YEFE_MASK 0x10\n#define FXOS8700_XEFE_MASK 0x08\n            \n/*          \n *  FF_MT_SRC Freefall and Motion Source Registers\n */         \n#define FXOS8700_FF_MT_SRC_REG 0x16\n            \n#define FXOS8700_EA_MASK 0x80\n#define FXOS8700_ZHE_MASK 0x20\n#define FXOS8700_ZHP_MASK 0x10\n#define FXOS8700_YHE_MASK 0x08\n#define FXOS8700_YHP_MASK 0x04\n#define FXOS8700_XHE_MASK 0x02\n#define FXOS8700_XHP_MASK 0x01\n            \n/*          \n *  FF_MT_THS Freefall and Motion Threshold Registers\n *  TRANSIENT_THS Transient Threshold Register\n */         \n#define FXOS8700_FT_MT_THS_REG 0x17\n#define FXOS8700_TRANSIENT_THS_REG 0x1F\n            \n#define FXOS8700_DBCNTM_MASK 0x80\n#define FXOS8700_THS6_MASK 0x40\n#define FXOS8700_THS5_MASK 0x20\n#define FXOS8700_THS4_MASK 0x10\n#define FXOS8700_THS3_MASK 0x08\n#define FXOS8700_THS2_MASK 0x04\n#define FXOS8700_TXS1_MASK 0x02\n#define FXOS8700_THS0_MASK 0x01\n#define FXOS8700_THS_MASK 0x7F\n            \n/* FF_MT_COUNT Freefall Motion Count Registers */\n#define FXOS8700_FF_MT_COUNT_REG 0x18\n            \n/* TRANSIENT_CFG Transient Configuration Register */\n#define FXOS8700_TRANSIENT_CFG_REG 0x1D\n            \n#define FXOS8700_TELE_MASK 0x10\n#define FXOS8700_ZTEFE_MASK 0x08\n#define FXOS8700_YTEFE_MASK 0x04\n#define FXOS8700_XTEFE_MASK 0x02\n#define FXOS8700_HPF_BYP_MASK 0x01\n            \n/* TRANSIENT_SRC Transient Source Register */\n#define FXOS8700_TRANSIENT_SRC_REG 0x1E\n            \n#define FXOS8700_TEA_MASK 0x40\n#define FXOS8700_ZTRANSE_MASK 0x20\n#define FXOS8700_Z_TRANS_POL_MASK 0x10\n#define FXOS8700_YTRANSE_MASK 0x08\n#define FXOS8700_Y_TRANS_POL_MASK 0x04\n#define FXOS8700_XTRANSE_MASK 0x02\n#define FXOS8700_X_TRANS_POL_MASK 0x01\n            \n/* TRANSIENT_COUNT Transient Debounce Register */\n#define FXOS8700_TRANSIENT_COUNT_REG 0x20\n            \n/* PULSE_CFG Pulse Configuration Register */\n#define FXOS8700_PULSE_CFG_REG 0x21\n            \n#define FXOS8700_DPA_MASK 0x80\n#define FXOS8700_PELE_MASK 0x40\n#define FXOS8700_ZDPEFE_MASK 0x20\n#define FXOS8700_ZSPEFE_MASK 0x10\n#define FXOS8700_YDPEFE_MASK 0x08\n#define FXOS8700_YSPEFE_MASK 0x04\n#define FXOS8700_XDPEFE_MASK 0x02\n#define FXOS8700_XSPEFE_MASK 0x01\n            \n/* PULSE_SRC Pulse Source Register */\n#define FXOS8700_PULSE_SRC_REG 0x22\n            \n#define FXOS8700_PEA_MASK 0x80\n#define FXOS8700_AXZ_MASK 0x40\n#define FXOS8700_AXY_MASK 0x20\n#define FXOS8700_AXX_MASK 0x10\n#define FXOS8700_DPE_MASK 0x08\n#define FXOS8700_POLZ_MASK 0x04\n#define FXOS8700_POLY_MASK 0x02\n#define FXOS8700_POLX_MASK 0x01\n            \n/* PULSE_THS XYZ Pulse Threshold Registers */\n#define FXOS8700_PULSE_THSX_REG 0x23\n#define FXOS8700_PULSE_THSY_REG 0x24\n#define FXOS8700_PULSE_THSZ_REG 0x25\n            \n#define FXOS8700_PTHS_MASK 0x7F\n            \n/* PULSE_TMLT Pulse Time Window Register */\n#define FXOS8700_PULSE_TMLT_REG 0x26\n            \n/* PULSE_LTCY Pulse Latency Timer Register */\n#define FXOS8700_PULSE_LTCY_REG 0x27\n            \n/* PULSE_WIND Second Pulse Time Window Register */\n#define FXOS8700_PULSE_WIND_REG 0x28\n            \n/* ASLP_COUNT Auto Sleep Inactivity Timer Register */\n#define FXOS8700_ASLP_COUNT_REG 0x29\n            \n/* CTRL_REG1 System Control 1 Register */\n#define FXOS8700_CTRL_REG1 0x2A\n            \n#define FXOS8700_ASLP_RATE1_MASK 0x80\n#define FXOS8700_ASLP_RATE0_MASK 0x40\n#define FXOS8700_DR2_MASK 0x20\n#define FXOS8700_DR1_MASK 0x10\n#define FXOS8700_DR0_MASK 0x08\n#define FXOS8700_LNOISE_MASK 0x04\n#define FXOS8700_FREAD_MASK 0x02\n#define FXOS8700_ACTIVE_MASK 0x01\n#define FXOS8700_ASLP_RATE_MASK 0xC0\n#define FXOS8700_DR_MASK 0x38\n            \n#define FXOS8700_ASLP_RATE_20MS 0x00\n#define FXOS8700_ASLP_RATE_80MS (FXOS8700_ASLP_RATE0_MASK)\n#define FXOS8700_ASLP_RATE_160MS (FXOS8700_ASLP_RATE1_MASK)\n#define FXOS8700_ASLP_RATE_640MS (FXOS8700_ASLP_RATE1_MASK + FXOS8700_ASLP_RATE0_MASK)\n            \n#define FXOS8700_ASLP_RATE_50HZ (FXOS8700_ASLP_RATE_20MS)\n#define FXOS8700_ASLP_RATE_12_5HZ (FXOS8700_ASLP_RATE_80MS)\n#define FXOS8700_ASLP_RATE_6_25HZ (FXOS8700_ASLP_RATE_160MS)\n#define FXOS8700_ASLP_RATE_1_56HZ (FXOS8700_ASLP_RATE_640MS)\n            \n#define FXOS8700_HYB_ASLP_RATE_25HZ (FXOS8700_ASLP_RATE_20MS)\n#define FXOS8700_HYB_ASLP_RATE_6_25HZ (FXOS8700_ASLP_RATE_80MS)\n#define FXOS8700_HYB_ASLP_RATE_1_56HZ (FXOS8700_ASLP_RATE_160MS)\n#define FXOS8700_HYB_ASLP_RATE_0_8HZ (FXOS8700_ASLP_RATE_640MS)\n            \n#define FXOS8700_DATA_RATE_1250US 0x00\n#define FXOS8700_DATA_RATE_2500US (FXOS8700_DR0_MASK)\n#define FXOS8700_DATA_RATE_5MS (FXOS8700_DR1_MASK)\n#define FXOS8700_DATA_RATE_10MS (FXOS8700_DR1_MASK + FXOS8700_DR0_MASK)\n#define FXOS8700_DATA_RATE_20MS (FXOS8700_DR2_MASK)\n#define FXOS8700_DATA_RATE_80MS (FXOS8700_DR2_MASK + FXOS8700_DR0_MASK)\n#define FXOS8700_DATA_RATE_160MS (FXOS8700_DR2_MASK + FXOS8700_DR1_MASK)\n#define FXOS8700_DATA_RATE_640MS (FXOS8700_DR2_MASK + FXOS8700_DR1_MASK + FXOS8700_DR0_MASK)\n            \n#define FXOS8700_DATA_RATE_800HZ (FXOS8700_DATA_RATE_1250US)\n#define FXOS8700_DATA_RATE_400HZ (FXOS8700_DATA_RATE_2500US)\n#define FXOS8700_DATA_RATE_200HZ (FXOS8700_DATA_RATE_5MS)\n#define FXOS8700_DATA_RATE_100HZ (FXOS8700_DATA_RATE_10MS)\n#define FXOS8700_DATA_RATE_50HZ (FXOS8700_DATA_RATE_20MS)\n#define FXOS8700_DATA_RATE_12_5HZ (FXOS8700_DATA_RATE_80MS)\n#define FXOS8700_DATA_RATE_6_25HZ (FXOS8700_DATA_RATE_160MS)\n#define FXOS8700_DATA_RATE_1_56HZ (FXOS8700_DATA_RATE_640MS)\n            \n/* for hybrid (TO, Aug 2012) */\n#define FXOS8700_HYB_DATA_RATE_400HZ (FXOS8700_DATA_RATE_1250US)\n#define FXOS8700_HYB_DATA_RATE_200HZ (FXOS8700_DATA_RATE_2500US)\n#define FXOS8700_HYB_DATA_RATE_100HZ (FXOS8700_DATA_RATE_5MS)\n#define FXOS8700_HYB_DATA_RATE_50HZ (FXOS8700_DATA_RATE_10MS)\n#define FXOS8700_HYB_DATA_RATE_25HZ (FXOS8700_DATA_RATE_20MS)\n#define FXOS8700_HYB_DATA_RATE_6_25HZ (FXOS8700_DATA_RATE_80MS)\n#define FXOS8700_HYB_DATA_RATE_3_15HZ (FXOS8700_DATA_RATE_160MS)\n#define FXOS8700_HYB_DATA_RATE_0_8HZ (FXOS8700_DATA_RATE_640MS)\n            \n#define FXOS8700_ACTIVE (FXOS8700_ACTIVE_MASK)\n#define FXOS8700_STANDBY 0x00\n            \n/* CTRL_REG2 System Control 2 Register */\n#define FXOS8700_CTRL_REG2 0x2B\n            \n#define FXOS8700_ST_MASK 0x80\n#define FXOS8700_RST_MASK 0x40\n#define FXOS8700_SMODS1_MASK 0x10\n#define FXOS8700_SMODS0_MASK 0x08\n#define FXOS8700_SLPE_MASK 0x04\n#define FXOS8700_MODS1_MASK 0x02\n#define FXOS8700_MODS0_MASK 0x01\n#define FXOS8700_SMODS_MASK 0x18\n#define FXOS8700_MODS_MASK 0x03\n            \n#define FXOS8700_SMOD_NORMAL 0x00\n#define FXOS8700_SMOD_LOW_NOISE (FXOS8700_SMODS0_MASK)\n#define FXOS8700_SMOD_HIGH_RES (FXOS8700_SMODS1_MASK)\n#define FXOS8700_SMOD_LOW_POWER (FXOS8700_SMODS1_MASK + FXOS8700_SMODS0_MASK)\n            \n#define FXOS8700_MOD_NORMAL 0x00\n#define FXOS8700_MOD_LOW_NOISE (FXOS8700_MODS0_MASK)\n#define FXOS8700_MOD_HIGH_RES (FXOS8700_MODS1_MASK)\n#define FXOS8700_MOD_LOW_POWER (FXOS8700_MODS1_MASK + FXOS8700_MODS0_MASK)\n            \n/* CTRL_REG3 Interrupt Control Register */\n#define FXOS8700_CTRL_REG3 0x2C\n            \n#define FXOS8700_FIFO_GATE_MASK 0x80\n#define FXOS8700_WAKE_TRANS_MASK 0x40\n#define FXOS8700_WAKE_LNDPRT_MASK 0x20\n#define FXOS8700_WAKE_PULSE_MASK 0x10\n#define FXOS8700_WAKE_FF_MT_MASK 0x08\n#define FXOS8700_IPOL_MASK 0x02\n#define FXOS8700_PP_OD_MASK 0x01\n            \n/* CTRL_REG4 Interrupt Enable Register */\n#define FXOS8700_CTRL_REG4 0x2D\n            \n#define FXOS8700_INT_EN_ASLP_MASK 0x80\n#define FXOS8700_INT_EN_FIFO_MASK 0x40\n#define FXOS8700_INT_EN_TRANS_MASK 0x20\n#define FXOS8700_INT_EN_LNDPRT_MASK 0x10\n#define FXOS8700_INT_EN_PULSE_MASK 0x08\n#define FXOS8700_INT_EN_FF_MT_MASK 0x04\n#define FXOS8700_INT_EN_DRDY_MASK 0x01\n            \n/* CTRL_REG5 Interrupt Configuration Register */\n#define FXOS8700_CTRL_REG5 0x2E\n            \n#define FXOS8700_INT_CFG_ASLP_MASK 0x80\n#define FXOS8700_INT_CFG_FIFO_MASK 0x40\n#define FXOS8700_INT_CFG_TRANS_MASK 0x20\n#define FXOS8700_INT_CFG_LNDPRT_MASK 0x10\n#define FXOS8700_INT_CFG_PULSE_MASK 0x08\n#define FXOS8700_INT_CFG_FF_MT_MASK 0x04\n#define FXOS8700_INT_CFG_DRDY_MASK 0x01\n            \n/* XYZ Offset Correction Registers */\n#define FXOS8700_OFF_X_REG 0x2F\n#define FXOS8700_OFF_Y_REG 0x30\n#define FXOS8700_OFF_Z_REG 0x31\n            \n/* M_DR_STATUS Register */\n#define FXOS8700_M_DR_STATUS_REG 0x32\n            \n#define FXOS8700_ZYXOW_MASK 0x80\n#define FXOS8700_ZOW_MASK 0x40\n#define FXOS8700_YOW_MASK 0x20\n#define FXOS8700_XOW_MASK 0x10\n#define FXOS8700_ZYXDR_MASK 0x08\n#define FXOS8700_ZDR_MASK 0x04\n#define FXOS8700_YDR_MASK 0x02\n#define FXOS8700_XDR_MASK 0x01\n            \n/* MAG XYZ Data Registers */\n#define FXOS8700_M_OUT_X_MSB_REG 0x33\n#define FXOS8700_M_OUT_X_LSB_REG 0x34\n#define FXOS8700_M_OUT_Y_MSB_REG 0x35\n#define FXOS8700_M_OUT_Y_LSB_REG 0x36\n#define FXOS8700_M_OUT_Z_MSB_REG 0x37\n#define FXOS8700_M_OUT_Z_LSB_REG 0x38\n            \n/* MAG CMP Data Registers */\n#define FXOS8700_CMP_X_MSB_REG 0x39\n#define FXOS8700_CMP_X_LSB_REG 0x3A\n#define FXOS8700_CMP_Y_MSB_REG 0x3B\n#define FXOS8700_CMP_Y_LSB_REG 0x3C\n#define FXOS8700_CMP_Z_MSB_REG 0x3D\n#define FXOS8700_CMP_Z_LSB_REG 0x3E\n            \n/* MAG XYZ Offset Correction Registers */\n#define FXOS8700_M_OFF_X_MSB_REG 0x3F\n#define FXOS8700_M_OFF_X_LSB_REG 0x40\n#define FXOS8700_M_OFF_Y_MSB_REG 0x41\n#define FXOS8700_M_OFF_Y_LSB_REG 0x42\n#define FXOS8700_M_OFF_Z_MSB_REG 0x43\n#define FXOS8700_M_OFF_Z_LSB_REG 0x44\n            \n/* MAG MAX XYZ Registers */\n#define FXOS8700_MAX_X_MSB_REG 0x45\n#define FXOS8700_MAX_X_LSB_REG 0x46\n#define FXOS8700_MAX_Y_MSB_REG 0x47\n#define FXOS8700_MAX_Y_LSB_REG 0x48\n#define FXOS8700_MAX_Z_MSB_REG 0x49\n#define FXOS8700_MAX_Z_LSB_REG 0x4A\n            \n/* MAG MIN XYZ Registers */\n#define FXOS8700_MIN_X_MSB_REG 0x4B\n#define FXOS8700_MIN_X_LSB_REG 0x4C\n#define FXOS8700_MIN_Y_MSB_REG 0x4D\n#define FXOS8700_MIN_Y_LSB_REG 0x4E\n#define FXOS8700_MIN_Z_MSB_REG 0x4F\n#define FXOS8700_MIN_Z_LSB_REG 0x50\n            \n/* TEMP Registers */\n#define FXOS8700_TEMP_REG 0x51\n            \n/* M_THS CONFIG Registers */\n#define FXOS8700_M_THS_CFG_REG 0x52\n            \n/* M_THS SRC Registers */\n#define FXOS8700_M_THS_SRC_REG 0x53\n            \n/* MAG THRESHOLD XYZ Registers */\n#define FXOS8700_M_THS_X_MSB_REG 0x54\n#define FXOS8700_M_THS_X_LSB_REG 0x55\n#define FXOS8700_M_THS_Y_MSB_REG 0x56\n#define FXOS8700_M_THS_Y_LSB_REG 0x57\n#define FXOS8700_M_THS_Z_MSB_REG 0x58\n#define FXOS8700_M_THS_Z_LSB_REG 0x59\n            \n/* M_THS COUNT Registers */\n#define FXOS8700_M_THS_COUNT 0x5A\n            \n/* MAG CTRL_REG1 System Control 1 Register */\n#define FXOS8700_M_CTRL_REG1 0x5B\n            \n#define FXOS8700_M_ACAL_MASK 0x80\n#define FXOS8700_M_RST_MASK 0x40\n#define FXOS8700_M_OST_MASK 0x20\n#define FXOS8700_M_OSR2_MASK 0x10\n#define FXOS8700_M_OSR1_MASK 0x08\n#define FXOS8700_M_OSR0_MASK 0x04\n#define FXOS8700_M_HMS1_MASK 0x02\n#define FXOS8700_M_HMS0_MASK 0x01\n#define FXOS8700_M_OSR_MASK 0x1C\n#define FXOS8700_M_HMS_MASK 0x03\n            \n/* OSR Selections */\n#define FXOS8700_M_OSR_1_56_HZ 0x00\n#define FXOS8700_M_OSR_6_25_HZ FXOS8700_M_OSR0_MASK\n#define FXOS8700_M_OSR_12_5_HZ FXOS8700_M_OSR1_MASK\n#define FXOS8700_M_OSR_50_HZ   FXOS8700_M_OSR1_MASK + FXOS8700_M_OSR0_MASK\n#define FXOS8700_M_OSR_100_HZ  FXOS8700_M_OSR2_MASK\n#define FXOS8700_M_OSR_200_HZ  FXOS8700_M_OSR2_MASK + FXOS8700_M_OSR0_MASK\n#define FXOS8700_M_OSR_400_HZ  FXOS8700_M_OSR2_MASK + FXOS8700_M_OSR1_MASK\n#define FXOS8700_M_OSR_800_HZ  FXOS8700_M_OSR2_MASK + FXOS8700_M_OSR1_MASK + M_OSR0_MASK\n            \n/* Hybrid Mode Selection */\n#define FXOS8700_ACCEL_ACTIVE 0x00\n#define FXOS8700_MAG_ACTIVE FXOS8700_M_HMS0_MASK\n#define FXOS8700_HYBRID_ACTIVE (FXOS8700_M_HMS1_MASK | FXOS8700_M_HMS0_MASK)\n            \n/* MAG CTRL_REG2 System Control 2 Register */\n#define FXOS8700_M_CTRL_REG2 0x5C\n            \n#define FXOS8700_M_HYB_AUTOINC_MASK 0x20\n#define FXOS8700_M_MAXMIN_DIS_MASK 0x10\n#define FXOS8700_M_MAXMIN_DIS_THS_MASK 0x08\n#define FXOS8700_M_MAXMIN_RST_MASK 0x04\n#define FXOS8700_M_RST_CNT1_MASK 0x02\n#define FXOS8700_M_RST_CNT0_MASK 0x01\n            \n/* Mag Auto-Reset De-Gauss Frequency */\n#define FXOS8700_RST_ODR_CYCLE 0x00\n#define FXOS8700_RST_16_ODR_CYCLE FXOS8700_M_RST_CNT0_MASK\n#define FXOS8700_RST_512_ODR_CYCLE FXOS8700_M_RST_CNT1_MASK\n#define FXOS8700_RST_DISABLED FXOS8700_M_RST_CNT1_MASK + FXOS8700_M_RST_CNT0_MASK\n            \n/* MAG CTRL_REG3 System Control 3 Register */\n#define FXOS8700_M_CTRL_REG3 0x5D\n            \n#define FXOS8700_M_RAW_MASK 0x80\n#define FXOS8700_M_ASLP_OS_2_MASK 0x40\n#define FXOS8700_M_ASLP_OS_1_MASK 0x20\n#define FXOS8700_M_ASLP_OS_0_MASK 0x10\n#define FXOS8700_M_THS_XYZ_MASK 0x08\n#define FXOS8700_M_ST_Z_MASK 0x04\n#define FXOS8700_M_ST_XY1_MASK 0x02\n#define FXOS8700_M_ST_XY0_MASK 0x01\n#define FXOS8700_M_ASLP_OSR_MASK 0x70\n#define FXOS8700_M_ST_XY_MASK 0x03\n            \n/* OSR Selections */\n#define FXOS8700_M_ASLP_OSR_1_56_HZ 0x00\n#define FXOS8700_M_ASLP_OSR_6_25_HZ FXOS8700_M_ASLP_OS_0_MASK\n#define FXOS8700_M_ASLP_OSR_12_5_HZ FXOS8700_M_ASLP_OS_1_MASK\n#define FXOS8700_M_ASLP_OSR_50_HZ  FXOS8700_M_ASLP_OS_1_MASK + FXOS8700_M_ASLP_OS_0_MASK\n#define FXOS8700_M_ASLP_OSR_100_HZ FXOS8700_M_ASLP_OS_2_MASK\n#define FXOS8700_M_ASLP_OSR_200_HZ FXOS8700_M_ASLP_OS_2_MASK + FXOS8700_M_ASLP_OS_0_MASK\n#define FXOS8700_M_ASLP_OSR_400_HZ FXOS8700_M_ASLP_OS_2_MASK + FXOS8700_M_ASLP_OS_1_MASK\n#define FXOS8700_M_ASLP_OSR_800_HZ FXOS8700_M_ASLP_OS_2_MASK + FXOS8700_M_ASLP_OS_1_MASK + FXOS8700_M_ASLP_OS_0_MASK\n            \n/* MAG INT SOURCE Register */\n#define FXOS8700_M_INT_SOURCE 0x5E\n            \n#define FXOS8700_SRC_M_DRDY_MASK 0x04\n#define FXOS8700_SRC_M_VECM_MASK 0x02\n#define FXOS8700_SRC_M_THS_MASK 0x01\n            \n/* ACCEL VECTOR CONFIG Register */\n#define FXOS8700_A_VECM_CFG 0x5F\n            \n#define FXOS8700_A_VECM_INIT_CFG_MASK 0x40\n#define FXOS8700_A_VECM_INIT_EN_MASK 0x20\n#define FXOS8700_A_VECM_WAKE_EN_MASK 0x10\n#define FXOS8700_A_VECM_EN_MASK 0x08\n#define FXOS8700_A_VECM_UPDM_MASK 0x04\n#define FXOS8700_A_VECM_INITM_MASK 0x02\n#define FXOS8700_A_VECM_ELE_MASK 0x01\n            \n/* ACCEL VECTOR THS MSB AND LSB Register */\n#define FXOS8700_A_VECM_THS_MSB 0x60\n            \n#define FXOS8700_A_VECM_DBCNTM_MASK 0x80\n            \n#define FXOS8700_A_VECM_THS_LSB 0x61\n            \n/* ACCEL VECTOR CNT Register */\n#define FXOS8700_A_VECM_CNT 0x62\n            \n/* ACCEL INI8700TIAL XYZ VECTORS Register */\n#define FXOS8700_A_VECM_INITX_MSB 0x63\n#define FXOS8700_A_VECM_INITX_LSB 0x64\n#define FXOS8700_A_VECM_INITY_MSB 0x65\n#define FXOS8700_A_VECM_INITY_LSB 0x66\n#define FXOS8700_A_VECM_INITZ_MSB 0x67\n#define FXOS8700_A_VECM_INITZ_LSB 0x68\n            \n/* MAG VECTOR CONFIG Register */\n#define FXOS8700_M_VECM_CFG 0x69\n            \n#define FXOS8700_M_VECM_INIT_CFG_MASK 0x40\n#define FXOS8700_M_VECM_INIT_EN_MASK 0x20\n#define FXOS8700_M_VECM_WAKE_EN_MASK 0x10\n#define FXOS8700_M_VECM_EN_MASK 0x08\n#define FXOS8700_M_VECM_UPDM_MASK 0x04\n#define FXOS8700_M_VECM_INITM_MASK 0x02\n#define FXOS8700_M_VECM_ELE_MASK 0x01\n            \n/* MAG VECTOR THS MSB AND LSB Register */\n#define FXOS8700_M_VECM_THS_MSB 0x6A\n            \n#define FXOS8700_M_VECM_DBCNTM_MASK 0x80\n            \n#define FXOS8700_M_VECM_THS_LSB 0x6B\n            \n/* MAG VECTOR CNT Register */\n#define FXOS8700_M_VECM_CNT 0x6C\n            \n/* MAG INITIAL XYZ VECTORS Register */\n#define FXOS8700_M_VECM_INITX_MSB 0x6D\n#define FXOS8700_M_VECM_INITX_LSB 0x6E\n#define FXOS8700_M_VECM_INITY_MSB 0x6F\n#define FXOS8700_M_VECM_INITY_LSB 0x70\n#define FXOS8700_M_VECM_INITZ_MSB 0x71\n#define FXOS8700_M_VECM_INITZ_LSB 0x72\n            \n/* ACCEL FFMT THS X MSB AND LSB Register */\n#define FXOS8700_A_FFMT_THS_X_MSB 0x73\n            \n#define FXOS8700_A_FFMT_THS_XYZ_EN_MASK 0x80\n            \n#define FXOS8700_A_FFMT_THS_X_LSB 0x74\n            \n#define FXOS8700_A_FFMT_THS_X_LSB_MASK 0xFC\n            \n/* ACCEL FFMT THS Y MSB AND LSB Register */\n#define FXOS8700_A_FFMT_THS_Y_MSB 0x75\n            \n#define FXOS8700_A_FFMT_THS_Y_EN_MASK 0x80\n            \n#define FXOS8700_A_FFMT_THS_Y_LSB 0x76\n            \n#define FXOS8700_A_FFMT_THS_Y_LSB_MASK 0xFC\n            \n/* ACCEL FFMT THS Z MSB AND LSB Register */\n#define FXOS8700_A_FFMT_THS_Z_MSB 0x77\n            \n#define FXOS8700_A_FFMT_THS_Z_EN_MASK 0x80\n            \n#define FXOS8700_A_FFMT_THS_Z_LSB 0x78\n            \n#define FXOS8700_A_FFMT_THS_Z_LSB_MASK 0xFC\n            \n/* ACCEL TRANSIENT INIT Register */\n#define FXOS8700_A_TRAN_INIT_XYZ_MSB 0x79\n#define FXOS8700_A_TRAN_INIT_X_LSB 0x7A\n#define FXOS8700_A_TRAN_INIT_Y_LSB 0x7B\n#define FXOS8700_A_TRAN_INIT_Z_LSB 0x7C\n\n/*! @brief fxos8700cq configure definition. This structure should be global.*/\ntypedef struct _fxos8700_handle\n{\n\t  uint8_t   (*I2C_Read)(uint8_t *writeBuf, uint32_t writeSize, uint8_t *readBuf, uint32_t readSize);\n\t  uint8_t   (*I2C_Write)(uint8_t *writeBuf, uint32_t writeSize);\n\t  void      (*WaitMsec)(uint32_t millisec);\n} fxos8700_handle_t;\n\ntypedef struct _fxos8700cq_data\n{\n    uint8_t accelXMSB;\n    uint8_t accelXLSB;\n    uint8_t accelYMSB;\n    uint8_t accelYLSB;\n    uint8_t accelZMSB;\n    uint8_t accelZLSB;\n    uint8_t magXMSB;\n    uint8_t magXLSB;\n    uint8_t magYMSB;\n    uint8_t magYLSB;\n    uint8_t magZMSB;\n    uint8_t magZLSB;\n} fxos8700_data_t;\n\n/*!\n * @addtogroup fxos8700_common\n * @{\n */\n\ntypedef int32_t fxos8700_status_t;\n#define FXOS8700_Status_Success (0)\n#define FXOS8700_Status_Fail (1)\n\n#if defined(__cplusplus)\nextern \"C\" {\n#endif\n\n/*!\n * @brief Verify and initialize fxos8700_handle ice: Hybrid mode with ODR=200Hz, Mag OSR=32, Acc OSR=Normal.\n * Interrupt for data ready can be set using #define EN_FXOS_DATAREADY_INTERRUPT\n *\n * @param fxos8700_handle The pointer to accel driver handle.\n *\n * @return FXOS8700_Status_Success if success or FXOS8700_Status_Fail if error.\n */\nfxos8700_status_t FXOS8700_Init(fxos8700_handle_t *fxos8700_handle);\n\n/*!\n * @brief De-initialize the fxos8700_handle ice.\n *\n * @param fxos8700_handle The pointer to accel driver handle.\n *\n * @return FXOS8700_Status_Success if success or FXOS8700_Status_Fail if error.\n */\nfxos8700_status_t FXOS8700_MotionDetectFreefall_DeInit(fxos8700_handle_t *fxos8700_handle);\n\n/*!\n * @brief Read data from sensors, assumes hyb_autoinc_mode is set in M_CTRL_REG2\n *\n * @param fxos8700_handle The pointer to accel driver handle.\n * @param sensorData The pointer to the buffer to hold sensor data\n *\n * @return FXOS8700_Status_Success if success or FXOS8700_Status_Fail if error.\n */\nfxos8700_status_t FXOS8700_ReadSensorData(fxos8700_handle_t *fxos8700_handle, fxos8700_data_t *sensorData);\n\n/*!\n * @brief Write value to register of sensor.\n *\n * @param handle The pointer to fxos8700cq driver handle.\n * @param reg Register address.\n * @param val Data want to write.\n *\n * @return FXOS8700_Status_Success if success or FXOS8700_Status_Fail if error.\n */\nfxos8700_status_t FXOS8700_WriteReg(fxos8700_handle_t *handle, uint8_t reg, uint8_t val);\n\n/*!\n * @brief Read n bytes start at register from sensor.\n *\n * @param handle The pointer to fxos8700cq driver handle.\n * @param reg Register address.\n * @param val The pointer to address which store data.\n * @param bytesNumber Number of bytes receiver.\n *\n * @return FXOS8700_Status_Success if success or FXOS8700_Status_Fail if error.\n */\nfxos8700_status_t FXOS8700_ReadReg(fxos8700_handle_t *handle, uint8_t reg, uint8_t *val, uint8_t bytesNumber);\n\n/*!\n * @brief Puts the FXOS8700CQ into Standby Mode\n *\n * @param handle The pointer to fxos8700cq driver handle.\n *\n * @return FXOS8700_Status_Success if success or FXOS8700_Status_Fail if error.\n */\nfxos8700_status_t FXOS8700_SetStandby(fxos8700_handle_t *fxos8700_handle);\n\n/*!\n * @brief Puts the FXOS8700CQ int Active Mode\n *\n * @param handle The pointer to fxos8700cq driver handle.\n *\n * @return FXOS8700_Status_Success if success or FXOS8700_Status_Fail if error.\n */\nfxos8700_status_t FXOS8700_SetActive(fxos8700_handle_t *fxos8700_handle);\n\n/*!\n * @brief Sets up Motion Detection on x and y axis with 0.5g Threshold. \n * NOTE: Motion Detect and FreeFall Detect shares the same hardware block so only one function can be initialized/used at a time. \n * Please refer to NXP Application Note AN4070: Motion and Freefall Detection Using the MMA8451, 2, 3Q\n * on how to configure the Motion Detection parameters. FXOS8700CQ shares the same registers and hardware blocks\n * as the MMA8451 so AN4070 is applicable for this sensor.\n *\n * Interrupts can be set with #define EN_FFMT_INTERRUPT. \n *\n * @param handle The pointer to fxos8700cq driver handle.\n *\n * @return FXOS8700_Status_Success if success or FXOS8700_Status_Fail if error.\n */\nfxos8700_status_t FXOS8700_MotionDetect_Init(fxos8700_handle_t *fxos8700_handle);\n\n/*!\n * @brief Sets up Freefall Detection on z axis with 0.25g Threshold. \n * NOTE: Motion Detect and FreeFall Detect shares the same hardware block so only one function can be initialized/used at a time. \n * Please refer to NXP Application Note AN4070: Motion and Freefall Detection Using the MMA8451, 2, 3Q\n * on how to configure the Freefall Detection parameters. FXOS8700CQ shares the same registers and hardware blocks\n * as the MMA8451 so AN4070 is applicable for this sensor.\n *\n * Interrupts can be set with #define EN_FFMT_INTERRUPT. \n *\n * @param handle The pointer to fxos8700cq driver handle.\n *\n * @return FXOS8700_Status_Success if success or FXOS8700_Status_Fail if error.\n */\nfxos8700_status_t FXOS8700_FreefallDetect_Init(fxos8700_handle_t *fxos8700_handle);\n\n/*!\n * @brief Sets up Tap Detection (also called Pulse Detection) \n * Pulse Thresholds: X:2g Y:2g Z:3g \n * Pulse Time Window: 6 counts\n * Pulse Latency Timer: 40 counts\n * Pulse 2nd Time Window: 15 counts\n *\n * Please refer to NXP Application Note AN4072: MMA8451, 2, 3Q Single/Double and Directional Tap Detection\n * on how to configure the Tap Detection parameters. FXOS8700CQ shares the same registers and hardware blocks\n * as the MMA8451 so AN4072 is applicable for this sensor.\n *\n * Interrupts can be set with #define EN_TAP_INTERRUPT. \n *\n * @param handle The pointer to fxos8700cq driver handle.\n *\n * @return FXOS8700_Status_Success if success or FXOS8700_Status_Fail if error.\n */\nfxos8700_status_t FXOS8700_TapDetect_Init(fxos8700_handle_t *fxos8700_handle);\n\n/*!\n * @brief Disables either freefall or motion detection. \n * Disables the associated interrupts if enabled\n *\n * @param handle The pointer to fxos8700cq driver handle.\n *\n * @return FXOS8700_Status_Success if success or FXOS8700_Status_Fail if error.\n */\nfxos8700_status_t FXOS8700_FreefallMotion_DeInit(fxos8700_handle_t *fxos8700_handle);\n\n/*!\n * @brief Disables Tap Detection. \n * Disables the associated interrupts if enabled\n *\n * @param handle The pointer to fxos8700cq driver handle.\n *\n * @return FXOS8700_Status_Success if success or FXOS8700_Status_Fail if error.\n */\nfxos8700_status_t FXOS8700_TapDetect_DeInit(fxos8700_handle_t *fxos8700_handle);\n\n/*!\n * @brief Sets up Transient Detection on x,y,z axis with 0.25g Threshold and High-Pass Filter to 2 Hz (OSR= 200Hz,High Res)\n * Transient Detection is similar to Motion Detection except it only detects dynamic acceleration. It will not register\n * static acceleration such as gravity.\n *\n * Please refer to NXP Application Note AN4071: High-Pass Filtered Data and Transient Detection Using the MMA8451, 2, 3Q\n * on how to configure the Transient Detection parameters. It also lists when to use transient detection and when to use motion detection.\n * FXOS8700CQ shares the same registers and hardware blocks as the MMA8451 so AN4071 is applicable for this sensor.\n *\n * Interrupts can be set with \\#define EN_TRANS_INTERRUPT.\n * Interrupts when enabled goes to INT2 pin, set to INT1 pin using \\#define EN_TRANS_INT1_PIN\n *\n * @param fxos8700_handle The pointer to fxos8700cq driver handle.\n *\n * @return kStatus_Success if success or kStatus_Fail if error.\n */\nfxos8700_status_t FXOS8700_TransientDetect_Init(fxos8700_handle_t *fxos8700_handle);\n\n/*!\n * @brief Disables Transient detection.\n * Disables the associated interrupts if enabled\n *\n * @param fxos8700_handle The pointer to fxos8700cq driver handle.\n *\n * @return kStatus_Success if success or kStatus_Fail if error.\n */\nfxos8700_status_t FXOS8700_TransientDetect_DeInit(fxos8700_handle_t *fxos8700_handle);\n\n\n\n#if defined(__cplusplus)\n}\n#endif /* __cplusplus */\n\n#endif /* _FSL_FXOS_H_ */\n"
              },
              "objects": {
                "fxos8700.c": "#include \"fxos8700.h\"\n#include \"fxos8700_internal.h\"\n\ntypedef struct {\n    ATMO_FXOS8700_Config_t config;\n\n    unsigned int motionDetectedAbilityHandle;\n    ATMO_Callback_t motionDetectedCallback;\n    bool motionDetectedAbilityHandleRegistered;\n\n\tunsigned int freefallDetectedAbilityHandle;\n    ATMO_Callback_t freefallDetectedCallback;\n    bool freefallDetectedAbilityHandleRegistered;\n\n    unsigned int tapDetectedAbilityHandle;\n    ATMO_Callback_t tapDetectedCallback;\n    bool tapDetectedAbilityHandleRegistered;\n\n    unsigned int doubleTapDetectedAbilityHandle;\n    ATMO_Callback_t doubleTapDetectedCallback;\n    bool doubleTapDetectedAbilityHandleRegistered;\n\n    bool configured;\n} ATMO_FXOS8700_Priv_Config;\n\nstatic bool fxos8700Enabled = true;\n\nstatic ATMO_FXOS8700_Priv_Config _ATMO_FXOS8700_config = {0};\n\nstatic ATMO_I2C_Peripheral_t _ATMO_FXOS8700_i2cConfig = {\n    .operatingMode = ATMO_I2C_OperatingMode_Master,\n    .baudRate = ATMO_I2C_BaudRate_Standard_Mode\n};\n\nstatic fxos8700_handle_t handle;\n\nstatic uint8_t ATMO_FXOS8700_I2CRead_Simple(uint8_t *writeBuf, uint32_t writeSize, uint8_t *readBuf, uint32_t readSize)\n{\n\tATMO_I2C_Status_t status = ATMO_I2C_MasterRead(_ATMO_FXOS8700_config.config.i2cDriverInstance, _ATMO_FXOS8700_config.config.address, writeBuf, writeSize, readBuf, readSize, 1000);\n\treturn (status == ATMO_I2C_Status_Success) ? 0 : 1;\n}\n\nstatic uint8_t ATMO_FXOS8700_I2CWrite_Simple(uint8_t *writeBuf, uint32_t writeSize)\n{\n\tATMO_I2C_Status_t status = ATMO_I2C_MasterWrite(_ATMO_FXOS8700_config.config.i2cDriverInstance, _ATMO_FXOS8700_config.config.address, NULL, 0, writeBuf, writeSize, 1000);\n\treturn (status == ATMO_I2C_Status_Success) ? 0 : 1;\n}\n\nstatic void ATMO_FXOS8700_INT_DoAbilityOrCallback(bool abilityRegistered, unsigned int abilityHandle, ATMO_Callback_t cb, void *data, uint32_t dataLen)\n{\n\tif(!fxos8700Enabled)\n\t{\n\t\treturn;\n\t}\n\n\tATMO_Value_t value;\n\tATMO_InitValue(&value);\n\tif(data != NULL)\n\t{\n\t\tATMO_CreateValueBinary(&value, data, dataLen);\n\t}\n\n\tif(abilityRegistered)\n\t{\n\t\tATMO_AddAbilityExecute(abilityHandle, &value);\n\t}\n\n\tif(cb != NULL)\n\t{\n\t\tATMO_AddCallbackExecute(cb, &value);\n\t}\n\n\tATMO_FreeValue(&value);\n}\n\nstatic void ATMO_FXOS8700_INT_Callback(void *data)\n{\n\t// Read int src\n\tuint8_t src;\n\tif( FXOS8700_ReadReg(&handle, FXOS8700_INT_SOURCE_REG, &src, 1) == FXOS8700_Status_Success )\n\t{\n\t\tuint8_t tmp;\n\t\tif(src & FXOS8700_SRC_DRDY_MASK)\n\t\t{\n\t\t\t// Clear it by reading accelerometer data\n\t\t\tfxos8700_data_t sensorData;\n\t\t\tFXOS8700_ReadSensorData(&handle, &sensorData);\n\t\t\t//ATMO_FXOS8700_INT_DoAbilityOrCallback(_src, &sensorData, sizeof(sensorData));\n\t\t}\n\n\t\tif(src & FXOS8700_SRC_FF_MT_MASK)\n\t\t{\n\t\t\t// Clear it by reading ffmt register\n\t\t\tFXOS8700_ReadReg(&handle, FXOS8700_FF_MT_SRC_REG, &tmp, 1);\n\t\t\tATMO_FXOS8700_INT_DoAbilityOrCallback(_ATMO_FXOS8700_config.freefallDetectedAbilityHandleRegistered,\n\t\t\t\t\t_ATMO_FXOS8700_config.freefallDetectedAbilityHandle, _ATMO_FXOS8700_config.freefallDetectedCallback, NULL, 0);\n\t\t}\n\n\t\tif(src & FXOS8700_SRC_TRANS_MASK)\n\t\t{\n\t\t\t// Clear it by reading trans register\n\t\t\tFXOS8700_ReadReg(&handle, FXOS8700_TRANSIENT_SRC_REG, &tmp, 1);\n\t\t\tATMO_FXOS8700_INT_DoAbilityOrCallback(_ATMO_FXOS8700_config.motionDetectedAbilityHandleRegistered,\n\t\t\t_ATMO_FXOS8700_config.motionDetectedAbilityHandle, _ATMO_FXOS8700_config.motionDetectedCallback, NULL, 0);\t\n\t\t}\n\n\t\tif(src & FXOS8700_SRC_PULSE_MASK)\n\t\t{\n\t\t\t// Clear it by reading PULSE_SRC reg\n\t\t\tbool tapDetected, doubleTap = false;\n\t\t\tATMO_FXOS8700_IsTapDetected(&tapDetected, &doubleTap);\n\n\t\t\tATMO_FXOS8700_INT_DoAbilityOrCallback(_ATMO_FXOS8700_config.tapDetectedAbilityHandleRegistered,\n\t\t\t\t\t_ATMO_FXOS8700_config.tapDetectedAbilityHandle, _ATMO_FXOS8700_config.tapDetectedCallback, NULL, 0);\n\n\t\t\tif(doubleTap)\n\t\t\t{\n\t\t\t\tATMO_FXOS8700_INT_DoAbilityOrCallback(_ATMO_FXOS8700_config.doubleTapDetectedAbilityHandleRegistered,\n\t\t\t\t\t\t_ATMO_FXOS8700_config.doubleTapDetectedAbilityHandle, _ATMO_FXOS8700_config.doubleTapDetectedCallback, NULL, 0);\n\t\t\t}\n\t\t}\n\t}\n}\n\nstatic ATMO_FXOS8700_Status_t ATMO_FXOS8700_EnableInterrupts()\n{\n\t// Cannot enable both motion and freefall detection\n\tif(_ATMO_FXOS8700_config.config.freefallEnabled && _ATMO_FXOS8700_config.config.motionEnabled)\n\t{\n\t\treturn ATMO_FXOS8700_Status_Fail;\n\t}\n\n\tfxos8700_status_t status = FXOS8700_Status_Success;\n\n\tif(_ATMO_FXOS8700_config.config.freefallEnabled)\n\t{\n\t\tstatus = FXOS8700_FreefallDetect_Init(&handle);\n\t}\n\telse\n\t{\n\t\tstatus = FXOS8700_MotionDetectFreefall_DeInit(&handle);\n\t}\n\n\tif(_ATMO_FXOS8700_config.config.motionEnabled && status == FXOS8700_Status_Success)\n\t{\n\t\tstatus = FXOS8700_TransientDetect_Init(&handle);\n\t}\n\telse\n\t{\n\t\tstatus = FXOS8700_TransientDetect_DeInit(&handle);\n\t}\n\n\tif(_ATMO_FXOS8700_config.config.tapDetectionEnabled && status == FXOS8700_Status_Success)\n\t{\n\t\tstatus = FXOS8700_TapDetect_Init(&handle);\n\t}\n\telse\n\t{\n\t\tstatus = FXOS8700_TapDetect_DeInit(&handle);\n\t}\n\n\treturn status == FXOS8700_Status_Success ? ATMO_FXOS8700_Status_Success : ATMO_FXOS8700_Status_Fail;\n}\n\nATMO_FXOS8700_Status_t ATMO_FXOS8700_Init(ATMO_FXOS8700_Config_t *config)\n{\n\thandle.I2C_Read = ATMO_FXOS8700_I2CRead_Simple;\n\thandle.I2C_Write = ATMO_FXOS8700_I2CWrite_Simple;\n\thandle.WaitMsec = ATMO_PLATFORM_DelayMilliseconds;\n\n    // Did the user supply a configuration?\n    if( config )\n    {\n        ATMO_FXOS8700_SetConfiguration(config);\n    }\n    else\n    {\n    \t_ATMO_FXOS8700_config.configured = false;\n    }\n\n\treturn ATMO_FXOS8700_Status_Success;\n}\n\nATMO_FXOS8700_Status_t ATMO_FXOS8700_SetEnabled(bool enabled)\n{\n\tfxos8700Enabled = enabled;\n\treturn ATMO_FXOS8700_Status_Success;\n}\n\nATMO_FXOS8700_Status_t ATMO_FXOS8700_GetEnabled(bool *enabled)\n{\n\t*enabled = fxos8700Enabled;\n\treturn ATMO_FXOS8700_Status_Success;\n}\n\nATMO_FXOS8700_Status_t ATMO_FXOS8700_SetConfiguration(const ATMO_FXOS8700_Config_t *config)\n{\n    if( config == NULL || !fxos8700Enabled)\n    {\n        return ATMO_FXOS8700_Status_Fail;\n    }\n\n    if( ATMO_I2C_SetConfiguration(config->i2cDriverInstance, &_ATMO_FXOS8700_i2cConfig) != ATMO_I2C_Status_Success )\n    {\n        return ATMO_FXOS8700_Status_Fail;\n    }\n\n    memcpy( &_ATMO_FXOS8700_config.config, config, sizeof(ATMO_FXOS8700_Config_t) );\n    _ATMO_FXOS8700_config.configured = true;\n\n\tfxos8700_status_t status = FXOS8700_Init(&handle);\n\n\tif(status != FXOS8700_Status_Success)\n\t{\n\t\treturn ATMO_FXOS8700_Status_Fail;\n\t}\n\n    // Register interrupt\n    if(config->int1En)\n    {\n    \tATMO_GPIO_RegisterInterruptCallback(config->gpioDriverInstance, config->int1Pin, ATMO_GPIO_InterruptTrigger_FallingEdge, ATMO_FXOS8700_INT_Callback);\n    }\n    if(config->int2En)\n    {\n    \tATMO_GPIO_RegisterInterruptCallback(config->gpioDriverInstance, config->int2Pin, ATMO_GPIO_InterruptTrigger_FallingEdge, ATMO_FXOS8700_INT_Callback);\n    }\n\n\n    return ATMO_FXOS8700_EnableInterrupts();\n}\n\nATMO_FXOS8700_Status_t ATMO_FXOS8700_GetConfiguration(ATMO_FXOS8700_Config_t *config)\n{\n    if( config == NULL || !_ATMO_FXOS8700_config.configured )\n    {\n        return ATMO_FXOS8700_Status_Fail;\n    }\n\n    memcpy(config, &_ATMO_FXOS8700_config.config, sizeof(ATMO_FXOS8700_Config_t));\n\n    return ATMO_FXOS8700_Status_Success;\n}\n\nATMO_FXOS8700_Status_t ATMO_FXOS8700_GetAccelData(ATMO_3dFloatVector_t *data)\n{\n\tif(!fxos8700Enabled)\n\t{\n\t\treturn ATMO_FXOS8700_Status_Fail;\n\t}\n\n\tfxos8700_data_t rawData;\n\tif(FXOS8700_ReadSensorData(&handle, &rawData) != FXOS8700_Status_Success)\n\t{\n\t\treturn ATMO_FXOS8700_Status_Fail;\n\t}\n\n\tfloat dataScale = 0;\n\tuint8_t sensorRange = 0;\n\n\t    /* Get sensor range */\n    if (FXOS8700_ReadReg(&handle, FXOS8700_XYZ_DATA_CFG_REG, &sensorRange, 1) != FXOS8700_Status_Success)\n    {\n        return ATMO_FXOS8700_Status_Fail;\n    }\n    if(sensorRange == 0x00)\n    {\n    \t/* 0.244 mg/LSB */\n        dataScale = 0.000244;\n    }\n    else if(sensorRange == 0x01)\n    {\n    \t/* 0.488 mg/LSB */\n        dataScale = 0.000488;\n    }\n    else if(sensorRange == 0x10)\n    {\n    \t/* 0.976 mg/LSB */\n        dataScale = 0.000976;\n    }\n\n\tdata->x =  ((float)((int16_t)(((rawData.accelXMSB*256) + (rawData.accelXLSB)))>> 2));\n\tdata->y =  ((float)((int16_t)(((rawData.accelYMSB*256) + (rawData.accelYLSB)))>> 2));\n\tdata->z =  ((float)((int16_t)(((rawData.accelZMSB*256) + (rawData.accelZLSB)))>> 2));\n\tdata->x *= dataScale;\n\tdata->y *= dataScale;\n\tdata->z *= dataScale;\n\n\treturn ATMO_FXOS8700_Status_Success;\n}\n\nATMO_FXOS8700_Status_t ATMO_FXOS8700_GetMagData(ATMO_3dFloatVector_t *data)\n{\n\tif(!fxos8700Enabled)\n\t{\n\t\treturn ATMO_FXOS8700_Status_Fail;\n\t}\n\n\tfxos8700_data_t rawData;\n\tif(FXOS8700_ReadSensorData(&handle, &rawData) != FXOS8700_Status_Success)\n\t{\n\t\treturn ATMO_FXOS8700_Status_Fail;\n\t}\n\n\tfloat dataScale = 0;\n\tuint8_t sensorRange = 0;\n\n\t    /* Get sensor range */\n    if (FXOS8700_ReadReg(&handle, FXOS8700_XYZ_DATA_CFG_REG, &sensorRange, 1) != FXOS8700_Status_Success)\n    {\n        return ATMO_FXOS8700_Status_Fail;\n    }\n\n\tdata->x =  (float)((int16_t)((rawData.magXMSB*256) + (rawData.magXLSB))) * 0.1;\n\tdata->y =  (float)((int16_t)((rawData.magYMSB*256) + (rawData.magYLSB))) * 0.1;\n\tdata->z =  (float)((int16_t)((rawData.magZMSB*256) + (rawData.magZLSB))) * 0.1;\n\n\treturn ATMO_FXOS8700_Status_Success;\n}\n\nATMO_FXOS8700_Status_t ATMO_FXOS8700_SetFreefallDetectedAbilityHandle(unsigned int abilityHandle)\n{\n\tif(!fxos8700Enabled)\n\t{\n\t\treturn ATMO_FXOS8700_Status_Fail;\n\t}\n\n\t_ATMO_FXOS8700_config.freefallDetectedAbilityHandle = abilityHandle;\n\t_ATMO_FXOS8700_config.freefallDetectedAbilityHandleRegistered = true;\n\treturn ATMO_FXOS8700_Status_Success;\n\n}\nATMO_FXOS8700_Status_t ATMO_FXOS8700_SetFreefallDetectedCallback(ATMO_Callback_t cb)\n{\n\tif(!fxos8700Enabled)\n\t{\n\t\treturn ATMO_FXOS8700_Status_Fail;\n\t}\n\t_ATMO_FXOS8700_config.freefallDetectedCallback = cb;\n\treturn ATMO_FXOS8700_Status_Success;\n}\n\nATMO_FXOS8700_Status_t ATMO_FXOS8700_SetMotionDetectedAbilityHandle(unsigned int abilityHandle)\n{\n\tif(!fxos8700Enabled)\n\t{\n\t\treturn ATMO_FXOS8700_Status_Fail;\n\t}\n\n\t_ATMO_FXOS8700_config.motionDetectedAbilityHandle = abilityHandle;\n\t_ATMO_FXOS8700_config.motionDetectedAbilityHandleRegistered = true;\n\treturn ATMO_FXOS8700_Status_Success;\n\n}\nATMO_FXOS8700_Status_t ATMO_FXOS8700_SetMotionDetectedCallback(ATMO_Callback_t cb)\n{\n\tif(!fxos8700Enabled)\n\t{\n\t\treturn ATMO_FXOS8700_Status_Fail;\n\t}\n\t_ATMO_FXOS8700_config.motionDetectedCallback = cb;\n\treturn ATMO_FXOS8700_Status_Success;\n}\n\n/**\n * Tap detection\n */\nATMO_FXOS8700_Status_t ATMO_FXOS8700_IsTapDetected(bool *isTapDetected, bool *isDoubleTap)\n{\n\tif(!fxos8700Enabled)\n\t{\n\t\treturn ATMO_FXOS8700_Status_Fail;\n\t}\n    uint8_t tmp[1];\n    *isDoubleTap = false;\n\n    if(FXOS8700_ReadReg(&handle, FXOS8700_PULSE_SRC_REG, tmp, 1) != FXOS8700_Status_Success)\n    {\n        return ATMO_FXOS8700_Status_Fail;\n    }\n\n\n    if ((tmp[0] & FXOS8700_PEA_MASK) == FXOS8700_PEA_MASK)\n    {\n        /* Check to see if it was a double tap */\n        if ((tmp[0] & FXOS8700_DPE_MASK) == FXOS8700_DPE_MASK)\n        {\n            *isDoubleTap = true;\n        }\n\n        *isTapDetected = true;\n    }\n    else\n    {\n    \t*isTapDetected = false;\n    }\n\n    return ATMO_FXOS8700_Status_Success;\n}\n\nATMO_FXOS8700_Status_t ATMO_FXOS8700_SetTapDetectedAbilityHandle(unsigned int abilityHandle)\n{\n\tif(!fxos8700Enabled)\n\t{\n\t\treturn ATMO_FXOS8700_Status_Fail;\n\t}\n\t_ATMO_FXOS8700_config.tapDetectedAbilityHandle = abilityHandle;\n\t_ATMO_FXOS8700_config.tapDetectedAbilityHandleRegistered = true;\n\treturn ATMO_FXOS8700_Status_Success;\n}\n\nATMO_FXOS8700_Status_t ATMO_FXOS8700_SetTapDetectedCallback(ATMO_Callback_t cb)\n{\n\tif(!fxos8700Enabled)\n\t{\n\t\treturn ATMO_FXOS8700_Status_Fail;\n\t}\n\t_ATMO_FXOS8700_config.tapDetectedCallback = cb;\n\treturn ATMO_FXOS8700_Status_Success;\n}\n\nATMO_FXOS8700_Status_t ATMO_FXOS8700_SetDoubleTapDetectedAbilityHandle(unsigned int abilityHandle)\n{\n\tif(!fxos8700Enabled)\n\t{\n\t\treturn ATMO_FXOS8700_Status_Fail;\n\t}\n\t_ATMO_FXOS8700_config.doubleTapDetectedAbilityHandle = abilityHandle;\n\t_ATMO_FXOS8700_config.doubleTapDetectedAbilityHandleRegistered = true;\n\treturn ATMO_FXOS8700_Status_Success;\n}\n\nATMO_FXOS8700_Status_t ATMO_FXOS8700_SetDoubleTapDetectedCallback(ATMO_Callback_t cb)\n{\n\tif(!fxos8700Enabled)\n\t{\n\t\treturn ATMO_FXOS8700_Status_Fail;\n\t}\n\t_ATMO_FXOS8700_config.doubleTapDetectedCallback = cb;\n\treturn ATMO_FXOS8700_Status_Success;\n}\n\nATMO_FXOS8700_Status_t ATMO_FXOS8700_EnableFreefallDetection()\n{\n\t_ATMO_FXOS8700_config.config.freefallEnabled = true;\n\t_ATMO_FXOS8700_config.config.motionEnabled = false;\n\t_ATMO_FXOS8700_config.config.tapDetectionEnabled = false;\n\tATMO_FXOS8700_EnableInterrupts();\n\treturn ATMO_FXOS8700_Status_Success;\n}\n\nATMO_FXOS8700_Status_t ATMO_FXOS8700_EnableMotionDetection()\n{\n\t_ATMO_FXOS8700_config.config.freefallEnabled = false;\n\t_ATMO_FXOS8700_config.config.motionEnabled = true;\n\t_ATMO_FXOS8700_config.config.tapDetectionEnabled = false;\n\tATMO_FXOS8700_EnableInterrupts();\n\treturn ATMO_FXOS8700_Status_Success;\n}\n\nATMO_FXOS8700_Status_t ATMO_FXOS8700_EnableTapDetection()\n{\n\t_ATMO_FXOS8700_config.config.freefallEnabled = false;\n\t_ATMO_FXOS8700_config.config.motionEnabled = false;\n\t_ATMO_FXOS8700_config.config.tapDetectionEnabled = true;\n\tATMO_FXOS8700_EnableInterrupts();\n\treturn ATMO_FXOS8700_Status_Success;\n}\n\nATMO_FXOS8700_Status_t ATMO_FXOS8700_DisableAllDetection()\n{\n\t_ATMO_FXOS8700_config.config.freefallEnabled = false;\n\t_ATMO_FXOS8700_config.config.motionEnabled = false;\n\t_ATMO_FXOS8700_config.config.tapDetectionEnabled = false;\n\tATMO_FXOS8700_EnableInterrupts();\n\treturn ATMO_FXOS8700_Status_Success;\n}\n\n\n",
                "fxos8700_internal.c": "/*\n * The Clear BSD License\n * Copyright (c) 2015, Freescale Semiconductor, Inc.\n * Copyright 2016-2017 NXP\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted (subject to the limitations in the disclaimer below) provided\n * that the following conditions are met:\n *\n * o Redistributions of source code must retain the above copyright notice, this list\n *   of conditions and the following disclaimer.\n *\n * o Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n *\n * o Neither the name of the copyright holder nor the names of its\n *   contributors may be used to endorse or promote products derived from this\n *   software without specific prior written permission.\n *\n * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n#include \"fxos8700_internal.h\"\n\n#define EN_FFMT_INTERRUPT 1\n\n/******************************************************************************\n * Code\n ******************************************************************************/\n\nfxos8700_status_t FXOS8700_SetStandby(fxos8700_handle_t *fxos8700_handle)\n{\n\tuint8_t tmp[1];\n\n    if(FXOS8700_ReadReg(fxos8700_handle, FXOS8700_CTRL_REG1, tmp, 1) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_CTRL_REG1, tmp[0] & (uint8_t)~FXOS8700_ACTIVE_MASK) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* Read again to make sure we are in standby mode. */\n    if(FXOS8700_ReadReg(fxos8700_handle, FXOS8700_CTRL_REG1, tmp, 1) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n    if ((tmp[0] & FXOS8700_ACTIVE_MASK) == FXOS8700_ACTIVE_MASK)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    return FXOS8700_Status_Success;\n}\n\nfxos8700_status_t FXOS8700_SetActive(fxos8700_handle_t *fxos8700_handle)\n{\n\tuint8_t tmp[1];\n\n    /* Set Active Mode*/ \n    if(FXOS8700_ReadReg(fxos8700_handle, FXOS8700_CTRL_REG1, tmp, 1) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_CTRL_REG1, tmp[0] | (uint8_t)FXOS8700_ACTIVE_MASK) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n     /* Read Control register again to ensure we are in active mode */\n    if(FXOS8700_ReadReg(fxos8700_handle, FXOS8700_CTRL_REG1, tmp, 1) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    if ((tmp[0] & FXOS8700_ACTIVE_MASK) != FXOS8700_ACTIVE_MASK)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    return FXOS8700_Status_Success;\n\n}\n\nfxos8700_status_t FXOS8700_Init(fxos8700_handle_t *fxos8700_handle)\n{\n    uint8_t tmp[1] = {0};\n\n    if(FXOS8700_ReadReg(fxos8700_handle, FXOS8700_WHO_AM_I_REG, tmp, 1) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    if (tmp[0] != FXOS8700_kFXOS_WHO_AM_I_Device_ID)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* go to standby */\n    FXOS8700_SetStandby(fxos8700_handle);\n\n    /* Disable the FIFO */\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_F_SETUP_REG, FXOS8700_F_MODE_DISABLED) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n#ifdef LPSLEEP_HIRES\n    /* enable auto-sleep, low power in sleep, high res in wake */\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_CTRL_REG2, FXOS8700_SLPE_MASK | FXOS8700_SMOD_LOW_POWER | FXOS8700_MOD_HIGH_RES) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n#else\n\n    /* Accel OSR mode: High Resolution*/\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_CTRL_REG2, FXOS8700_MOD_HIGH_RES) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n#endif\n\n    /* set MSR OSR=7 ,set FXOS8700 to hybrid mode (both accel and mag on), One-shot magnetic reset is enabled*/\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_M_CTRL_REG1, (FXOS8700_M_RST_MASK | FXOS8700_M_OSR_MASK | FXOS8700_M_HMS_MASK)) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* Enable hyrid mode auto increment using M_CTRL_REG2 */\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_M_CTRL_REG2, (FXOS8700_M_HYB_AUTOINC_MASK)) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n#ifdef EN_AUTO_SLEEP\n    /* set auto-sleep wait period to 5s (=5/0.64=~8) */\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_ASLP_COUNT_REG, 8) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n#endif\n\n#ifdef EN_FXOS_DATAREADY_INTERRUPT\n\n    if(FXOS8700_ReadReg(fxos8700_handle, FXOS8700_CTRL_REG4, tmp, 1) != FXOS8700_Status_Success)\n     {\n         return FXOS8700_Status_Fail;\n     }\n\n     if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_CTRL_REG4, tmp[0] | FXOS8700_INT_EN_DRDY_MASK) != FXOS8700_Status_Success)\n     {\n         return FXOS8700_Status_Fail;\n     }\n\n     /* Set Data Ready Interrupt to route to INT1 */\n     if(FXOS8700_ReadReg(fxos8700_handle, FXOS8700_CTRL_REG5, tmp, 1) != FXOS8700_Status_Success)\n     {\n         return FXOS8700_Status_Fail;\n     }\n     if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_CTRL_REG5, tmp[0]|FXOS8700_INT_CFG_DRDY_MASK) != FXOS8700_Status_Success)\n     {\n         return FXOS8700_Status_Fail;\n     }\n\n#endif\n\n    /* default set to 4g mode */\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_XYZ_DATA_CFG_REG, FXOS8700_FULL_SCALE_4G) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n\n    /* Setup the ODR for 200 Hz (Hybrid) and activate the accelerometer */\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_CTRL_REG1, (FXOS8700_HYB_DATA_RATE_200HZ | FXOS8700_ACTIVE_MASK)) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* Read Control register again to ensure we are in active mode */\n    if(FXOS8700_ReadReg(fxos8700_handle, FXOS8700_CTRL_REG1, tmp, 1) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    if ((tmp[0] & FXOS8700_ACTIVE_MASK) != FXOS8700_ACTIVE_MASK)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    return FXOS8700_Status_Success;\n}\n\nfxos8700_status_t FXOS8700_ReadSensorData(fxos8700_handle_t *fxos8700_handle, fxos8700_data_t *sensorData)\n{\n    fxos8700_status_t status = FXOS8700_Status_Success;\n    uint8_t tmp_buff[6] = {0};\n    uint8_t i = 0;\n\n    if (!FXOS8700_ReadReg(fxos8700_handle, FXOS8700_OUT_X_MSB_REG, tmp_buff, 6) == FXOS8700_Status_Success)\n    {\n        status = FXOS8700_Status_Fail;\n    }\n\n    for (i = 0; i < 6; i++)\n    {\n        ((int8_t *)sensorData)[i] = tmp_buff[i];\n    }\n\n    if (!FXOS8700_ReadReg(fxos8700_handle, FXOS8700_M_OUT_X_MSB_REG, tmp_buff, 6) == FXOS8700_Status_Success)\n    {\n        status = FXOS8700_Status_Fail;\n    }\n\n    for (i = 0; i < 6; i++)\n    {\n        ((int8_t *)sensorData)[i + 6] = tmp_buff[i];\n    }\n\n    return status;\n}\n\nfxos8700_status_t FXOS8700_ReadReg(fxos8700_handle_t *handle, uint8_t reg, uint8_t *val, uint8_t bytesNumber)\n{\n    /* Configure I2C xfer */\n    return handle->I2C_Read(&reg, 1, val, bytesNumber) == 0 ? FXOS8700_Status_Success : FXOS8700_Status_Fail;\n}\n\nfxos8700_status_t FXOS8700_WriteReg(fxos8700_handle_t *handle, uint8_t reg, uint8_t val)\n{\n    uint8_t buff[2];\n    buff[0] = reg;\n    buff[1] = val;\n    return handle->I2C_Write(buff, 2) == 0 ? FXOS8700_Status_Success : FXOS8700_Status_Fail;\n}\n\nfxos8700_status_t FXOS8700_MotionDetect_Init(fxos8700_handle_t *fxos8700_handle)\n{\n\n    uint8_t tmp[1];\n\n    /* go to standby */\n    if (FXOS8700_SetStandby(fxos8700_handle)!= FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* enable FFMT for motion detect for X and Y axes, latch enable.\n    If Z axis were included in this motion detect setup and the threshold is less than 1G, it will cause motion detect to be triggered.\n    (assuming Z-axis is experiencing gravity)*/\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_FF_MT_CFG_REG, (FXOS8700_XEFE_MASK | FXOS8700_YEFE_MASK | FXOS8700_OAE_MASK|FXOS8700_ELE_MASK)) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* set threshold to about 0.5g (0.5g/0.063 g/count = 8)*/\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_FT_MT_THS_REG, 0x08) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* set debounce to zero */\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_FF_MT_COUNT_REG, 0x00) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n#ifdef EN_FFMT_INTERRUPT\n    /*Enable Motion Detect Interrupt*/\n    if(FXOS8700_ReadReg(fxos8700_handle, FXOS8700_CTRL_REG4, tmp, 1) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_CTRL_REG4, tmp[0] | FXOS8700_INT_EN_FF_MT_MASK) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* Default behavior for CTRL_REG5 is that FFMT Interrupt will go to INT2 pin. */\n    /* To route FFMT interrupt to INT1 pin define below */\n    #ifdef EN_FFMT_INT1_PIN\n\n    if(FXOS8700_ReadReg(fxos8700_handle, FXOS8700_CTRL_REG5, tmp, 1) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_CTRL_REG5, tmp[0]|FXOS8700_INT_CFG_FF_MT_MASK) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n    #endif\n#endif \n\n    /* Set Active Mode*/ \n    if (FXOS8700_SetActive(fxos8700_handle)!= FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n    \n    return FXOS8700_Status_Success;\n\n}\n\nfxos8700_status_t FXOS8700_MotionDetectFreefall_DeInit(fxos8700_handle_t *fxos8700_handle)\n{\n    uint8_t tmp[1];\n    \n    /* go to standby */\n    if (FXOS8700_SetStandby(fxos8700_handle)!= FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* Reset Freefall/Motion Config Register to 0. Disables FF and Motion Detection*/ \n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_FF_MT_CFG_REG, 0x0 != FXOS8700_Status_Success))\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n\n#ifdef EN_FFMT_INTERRUPT\n    /*Disable Motion Detect Interrupt*/\n    if(FXOS8700_ReadReg(fxos8700_handle, FXOS8700_CTRL_REG4, tmp, 1) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_CTRL_REG4, tmp[0] & (uint8_t)~FXOS8700_INT_EN_FF_MT_MASK) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    #ifdef EN_FFMT_INT1_PIN\n    /* Reset to default behavior */\n    if(FXOS8700_ReadReg(fxos8700_handle, FXOS8700_CTRL_REG5, tmp, 1) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_CTRL_REG5, tmp[0]|(uint8_t)~FXOS8700_INT_CFG_FF_MT_MASK) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n    #endif \n\n#endif \n\n    /* Set Active Mode*/ \n    if (FXOS8700_SetActive(fxos8700_handle)!= FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    return FXOS8700_Status_Success;\n}\n\n\n\nfxos8700_status_t FXOS8700_FreefallDetect_Init(fxos8700_handle_t *fxos8700_handle)\n{\n    uint8_t tmp[1] = {0};\n\n    /* go to standby */\n    if (FXOS8700_SetStandby(fxos8700_handle)!= FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* Freefall detect is triggered when combined X,Y,Z magnitude is less than the threshold. Latch also enabled. */\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_FF_MT_CFG_REG, FXOS8700_ZEFE_MASK|FXOS8700_YEFE_MASK|FXOS8700_XEFE_MASK|FXOS8700_ELE_MASK)  != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* set threshold to about 0.25g (0.25g/0.063 g/count = 4)*/\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_FT_MT_THS_REG, 0x04) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* set debounce to zero */\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_FF_MT_COUNT_REG, 0x00) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n#ifdef EN_FFMT_INTERRUPT\n    /*Enable Motion Detect Interrupt*/\n    if(FXOS8700_ReadReg(fxos8700_handle, FXOS8700_CTRL_REG4, tmp, 1) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_CTRL_REG4, tmp[0] | FXOS8700_INT_EN_FF_MT_MASK) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* Default behavior for CTRL_REG5 is that FFMT Interrupt will go to INT2 pin. */\n    /* To route FFMT interrupt to INT1 pin define below */\n    #ifdef EN_FFMT_INT1_PIN\n\n    if(FXOS8700_ReadReg(fxos8700_handle, FXOS8700_CTRL_REG5, tmp, 1) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_CTRL_REG5, tmp[0]|FXOS8700_INT_CFG_FF_MT_MASK) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n    #endif\n\n#endif \n\n    /* Set Active Mode*/ \n    if (FXOS8700_SetActive(fxos8700_handle)!= FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    return FXOS8700_Status_Success;\n}\n\n\n\nfxos8700_status_t FXOS8700_TapDetect_Init(fxos8700_handle_t *fxos8700_handle)\n{\n\tuint8_t tmp[1];\n\n    /* go to standby */\n    if (FXOS8700_SetStandby(fxos8700_handle)!= FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* enable PULSE_CFG for only single tap  */\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_PULSE_CFG_REG, FXOS8700_PELE_MASK|FXOS8700_ZSPEFE_MASK|FXOS8700_YSPEFE_MASK|FXOS8700_XSPEFE_MASK ) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* enable PULSE_CFG for only double tap  */\n    #if DOUBLE_TAP && !SINGLE_TAP\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_PULSE_CFG_REG, FXOS8700_PELE_MASK|FXOS8700_ZDPEFE_MASK|FXOS8700_YDPEFE_MASK|FXOS8700_XDPEFE_MASK ) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n    #endif \n\n\t#if DOUBLE_TAP && SINGLE_TAP\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_PULSE_CFG_REG, FXOS8700_PELE_MASK|FXOS8700_ZDPEFE_MASK|FXOS8700_ZSPEFE_MASK|FXOS8700_YDPEFE_MASK|FXOS8700_YSPEFE_MASK|FXOS8700_XDPEFE_MASK|FXOS8700_XSPEFE_MASK ) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\t#endif\n\n    /* set PULSE_THSX to about 2g */\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_PULSE_THSX_REG, 0x20) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* set PULSE_THSY to about 2g */\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_PULSE_THSY_REG, 0x20) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* set PULSE_THSZ to about 3g */\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_PULSE_THSZ_REG, 0x0C) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* set the Pulse Time Window (PULSE_TMLT) to 6 counts */\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_PULSE_TMLT_REG, 0x06) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* set the Pulse Latency Timer to 40 counts */\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_PULSE_LTCY_REG, 0x28) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* set the Second Pulse Time Window to 15 counts */\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_PULSE_WIND_REG, 0x0F) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n#ifdef EN_TAP_INTERRUPT\n\n    /*Enable Tap/Pulse Detect Interrupt*/\n    if(FXOS8700_ReadReg(fxos8700_handle, FXOS8700_CTRL_REG4, tmp, 1) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_CTRL_REG4, tmp[0] | FXOS8700_INT_EN_PULSE_MASK) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* Default behavior for CTRL_REG5 is that Pulse Interrupt will go to INT2 pin. */\n    /* To route Pulse interrupt to INT1 pin define below */\n    #ifdef EN_PULSE_INT1_PIN\n\n    if(FXOS8700_ReadReg(fxos8700_handle, FXOS8700_CTRL_REG5, tmp, 1) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_CTRL_REG5, tmp[0]|FXOS8700_INT_CFG_PULSE_MASK) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    #endif\n#endif\n\n    /* Set Active Mode*/ \n    if (FXOS8700_SetActive(fxos8700_handle)!= FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n   \n    return FXOS8700_Status_Success;\n}\n\n\n\nfxos8700_status_t FXOS8700_TapDetect_DeInit(fxos8700_handle_t *fxos8700_handle)\n{\n\n\tuint8_t tmp[1];\n\n    /* go to standby */\n    if (FXOS8700_SetStandby(fxos8700_handle)!= FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* enable PULSE_CFG for only single tap  */\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_PULSE_CFG_REG, 0x0 ) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n\n#ifdef EN_TAP_INTERRUPT\n\n    /*Disable Pulse Detect Interrupt*/\n    if(FXOS8700_ReadReg(fxos8700_handle, FXOS8700_CTRL_REG4, tmp, 1) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_CTRL_REG4, tmp[0] & (uint8_t)~FXOS8700_INT_EN_PULSE_MASK) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* Default behavior for CTRL_REG5 is that Pulse Interrupt will go to INT2 pin. */\n    /* To route Pulse interrupt to INT1 pin define below */\n    #ifdef EN_PULSE_INT1_PIN\n\n    if(FXOS8700_ReadReg(fxos8700_handle, FXOS8700_CTRL_REG5, tmp, 1) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_CTRL_REG5, tmp[0]|(uint8_t)~FXOS8700_INT_CFG_PULSE_MASK) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n    \n    #endif\n#endif \n\n    /* Set Active Mode*/ \n    if (FXOS8700_SetActive(fxos8700_handle)!= FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n   \n    return FXOS8700_Status_Success;\n}\n\n\nfxos8700_status_t FXOS8700_TransientDetect_Init(fxos8700_handle_t *fxos8700_handle)\n{\n    uint8_t tmp[1] = {0};\n\n    /* go to standby */\n    if (FXOS8700_SetStandby(fxos8700_handle)!= FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* enable TRANSIENT CFG REG for Transient detect for X,Y,Z axis.latch enabled */\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_TRANSIENT_CFG_REG, FXOS8700_TELE_MASK |FXOS8700_ZTEFE_MASK|FXOS8700_YTEFE_MASK|FXOS8700_XTEFE_MASK) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* set threshold to about 0.25g (0.25g/0.063 g/count = 4)*/\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_TRANSIENT_THS_REG, 0x04) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* set debounce to zero */\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_TRANSIENT_COUNT_REG, 0x00) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* set High-Pass Filter to 2Hz (Sampling Rate = 200Hz, Oversample Mode = High Res) Check APP note AN4071 */\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_HP_FILTER_CUTOFF_REG, 0x03) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /*Enable Transient Detect Interrupt*/\n    if(FXOS8700_ReadReg(fxos8700_handle, FXOS8700_CTRL_REG4, tmp, 1) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_CTRL_REG4, tmp[0] | FXOS8700_INT_EN_TRANS_MASK) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* Default behavior for CTRL_REG5 is that FFMT Interrupt will go to INT2 pin. */\n    /* To route TRANS interrupt to INT1 pin define below */\n#ifdef EN_TRANS_INT1_PIN\n\n    if(FXOS8700_ReadReg(fxos8700_handle, FXOS8700_CTRL_REG5, tmp, 1) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_CTRL_REG5, tmp[0]|FXOS8700_INT_CFG_TRANS_MASK) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n#endif\n\n    /* Set Active Mode*/\n    if (FXOS8700_SetActive(fxos8700_handle)!= FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    return FXOS8700_Status_Success;\n}\n\nfxos8700_status_t FXOS8700_TransientDetect_DeInit(fxos8700_handle_t *fxos8700_handle)\n{\n\n    uint8_t tmp[1];\n\n    /* go to standby */\n    if (FXOS8700_SetStandby(fxos8700_handle)!= FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /* Reset Transient Config Register to 0. Disables Transient Detection*/\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_TRANSIENT_CFG_REG, 0x0 != FXOS8700_Status_Success))\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    /*Disable Motion Detect Interrupt*/\n    if(FXOS8700_ReadReg(fxos8700_handle, FXOS8700_CTRL_REG4, tmp, 1) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_CTRL_REG4, tmp[0] & (uint8_t)~FXOS8700_INT_EN_TRANS_MASK) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n#ifdef EN_TRANS_INT1_PIN\n    /* Reset to default behavior */\n    if(FXOS8700_ReadReg(fxos8700_handle, FXOS8700_CTRL_REG5, tmp, 1) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n    if(FXOS8700_WriteReg(fxos8700_handle, FXOS8700_CTRL_REG5, tmp[0]|(uint8_t)~FXOS8700_INT_CFG_TRANS_MASK) != FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n#endif\n\n    /* Set Active Mode*/\n    if (FXOS8700_SetActive(fxos8700_handle)!= FXOS8700_Status_Success)\n    {\n        return FXOS8700_Status_Fail;\n    }\n\n    return FXOS8700_Status_Success;\n}\n"
              }
            }
          },
          "md5": "10958769c7240d57be1d5423e53211e0"
        },
        "fxas21002": {
          "libName": "fxas21002",
          "manufacturer": "NXP Semiconductors",
          "description": "Gyroscope",
          "type": "Gyroscope",
          "icon": "",
          "image": "",
          "version": "",
          "eelVersion": "3",
          "shoppingCartLinks": {
            "digikey": {
              "links": {
                "info": "https://www.digikey.com/product-detail/en/adafruit-industries-llc/3463/1528-2130-ND/7064490"
              },
              "cartData": {
                "part": " 1528-2130-ND",
                "partid": "3463",
                "source": "dkstudio",
                "qty": "1"
              }
            }
          },
          "requires": [
            "embedded",
            "i2c"
          ],
          "elements": [
            {
              "name": "FXAS21002Gyroscope",
              "type": "EmbeddedFXAS21002",
              "icon": "EmbeddedGyroscope.svg",
              "defaultAbility": "getSensorData",
              "defaultTrigger": "sensorDataRead",
              "helpPageHref": "https://developer.atmosphereiot.com/documents/elements/nxpfxas21002element.html",
              "hidden": false,
              "abilities": [
                {
                  "name": "setup",
                  "triggers": [],
                  "hidden": true,
                  "code": "\tATMO_FXAS21002_Config_t config;\n\tconfig.address = ATMO_PROPERTY(undefined, i2cAddress);\n\tconfig.i2cDriverInstance = ATMO_PROPERTY(undefined, i2cInstance);\n\tconfig.samplingRate = ATMO_PROPERTY(undefined, samplingRate);\n\tATMO_FXAS21002_Init(&config);\n\treturn ATMO_Status_Success;"
                },
                {
                  "name": "setEnabled",
                  "triggers": [],
                  "code": "ATMO_FXAS21002_SetEnabled(true);\nreturn ATMO_Status_Success;"
                },
                {
                  "name": "setDisabled",
                  "triggers": [],
                  "code": "ATMO_FXAS21002_SetEnabled(false);\nreturn ATMO_Status_Success;"
                },
                {
                  "name": "setEnabledDisabled",
                  "triggers": [],
                  "code": "bool enabled = false;\nATMO_GetBool(in, &enabled);\nATMO_FXAS21002_SetEnabled(enabled);\nreturn ATMO_Status_Success;"
                },
                {
                  "name": "getSensorData",
                  "triggers": [
                    "sensorDataRead"
                  ],
                  "code": "\tATMO_FXAS21002_SensorData_t data;\n\tATMO_3dFloatVector_t atmoVec;\n\n\tif(ATMO_FXAS21002_GetSensorData(&data) != ATMO_FXAS21002_Status_Success)\n\t{\n\t\tATMO_CreateValueVoid(out);\n\t\treturn ATMO_Status_Fail;\n\t}\n\n\tatmoVec.x = data.X;\n\tatmoVec.y = data.Y;\n\tatmoVec.z = data.Z;\n\n\tATMO_CreateValue3dVectorFloat(out, &atmoVec);\n\treturn ATMO_Status_Success;\n"
                },
                {
                  "name": "getDpsX",
                  "triggers": [
                    "dpsXRead"
                  ],
                  "code": "\tATMO_FXAS21002_SensorData_t data;\n\n\tif(ATMO_FXAS21002_GetSensorData(&data) != ATMO_FXAS21002_Status_Success)\n\t{\n\t\tATMO_CreateValueVoid(out);\n\t\treturn ATMO_Status_Fail;\n\t}\n\n\tATMO_CreateValueFloat(out, data.X);\n\treturn ATMO_Status_Success;\n"
                },
                {
                  "name": "getDpsY",
                  "triggers": [
                    "dpsYRead"
                  ],
                  "code": "\tATMO_FXAS21002_SensorData_t data;\n\n\tif(ATMO_FXAS21002_GetSensorData(&data) != ATMO_FXAS21002_Status_Success)\n\t{\n\t\tATMO_CreateValueVoid(out);\n\t\treturn ATMO_Status_Fail;\n\t}\n\n\tATMO_CreateValueFloat(out, data.Y);\n\treturn ATMO_Status_Success;\n"
                },
                {
                  "name": "getDpsZ",
                  "triggers": [
                    "dpsZRead"
                  ],
                  "code": "\tATMO_FXAS21002_SensorData_t data;\n\n\tif(ATMO_FXAS21002_GetSensorData(&data) != ATMO_FXAS21002_Status_Success)\n\t{\n\t\tATMO_CreateValueVoid(out);\n\t\treturn ATMO_Status_Fail;\n\t}\n\n\tATMO_CreateValueFloat(out, data.Z);\n\treturn ATMO_Status_Success;\n"
                }
              ],
              "properties": [
                {
                  "name": "i2cInstance",
                  "input": "driverInstance",
                  "driverType": "i2c"
                },
                {
                  "name": "i2cAddress",
                  "input": "number",
                  "value": "0x20"
                },
                {
                  "name": "samplingRate",
                  "input": "select",
                  "inputOptions": [
                    "FXAS21002_CTRL_REG1_DR_12_5HZ",
                    "FXAS21002_CTRL_REG1_DR_25HZ",
                    "FXAS21002_CTRL_REG1_DR_50HZ",
                    "FXAS21002_CTRL_REG1_DR_100HZ",
                    "FXAS21002_CTRL_REG1_DR_200HZ",
                    "FXAS21002_CTRL_REG1_DR_400HZ",
                    "FXAS21002_CTRL_REG1_DR_800HZ"
                  ],
                  "value": "FXAS21002_CTRL_REG1_DR_12_5HZ"
                }
              ],
              "triggers": [],
              "variables": [],
              "language": {
                "en-US": {
                  "EmbeddedFXAS21002": "FXAS21002 Gyroscope",
                  "FXAS21002_CTRL_REG1_DR_12_5HZ": "12.5 Hz",
                  "FXAS21002_CTRL_REG1_DR_25HZ": "25 Hz",
                  "FXAS21002_CTRL_REG1_DR_50HZ": "50 Hz",
                  "FXAS21002_CTRL_REG1_DR_100HZ": "100 Hz",
                  "FXAS21002_CTRL_REG1_DR_200HZ": "200 Hz",
                  "FXAS21002_CTRL_REG1_DR_400HZ": "400 Hz",
                  "FXAS21002_CTRL_REG1_DR_800HZ": "800 Hz",
                  "samplingRate": "Sample Rate",
                  "i2cInstance": "I2C Driver Instance",
                  "i2cAddress": "I2C Address",
                  "setEnabled": "Set Enabled",
                  "setDisabled": "Set Disabled",
                  "setEnabledDisabled": "Set Enabled State",
                  "getSensorData": "Get Sensor Data",
                  "sensorDataRead": "Sensor Data Read",
                  "getDpsX": "Get X Rotation Speed (DPS)",
                  "getDpsY": "Get Y Rotation Speed (DPS)",
                  "getDpsZ": "Get Z Rotation Speed (DPS)",
                  "dpsXRead": "Read X Rotation Speed (DPS)",
                  "dpsYRead": "Read Y Rotation Speed (DPS)",
                  "dpsZRead": "Read Z Rotation Speed (DPS)"
                }
              }
            }
          ],
          "files": {
            "common": {
              "headers": {
                "fxas21002.h": "#ifndef _ATMO_FXAS21002_H_\n#define _ATMO_FXAS21002_H_\n\n#include \"../i2c/i2c.h\"\n#include \"fxas21002_internal.h\"\n\ntypedef enum {\n    ATMO_FXAS21002_Status_Success              = 0x00u,  // Common - Operation was successful\n    ATMO_FXAS21002_Status_Fail                 = 0x01u,  // Common - Operation failed\n    ATMO_FXAS21002_Status_Initialized          = 0x02u,  // Common - Peripheral already initialized\n    ATMO_FXAS21002_Status_Invalid              = 0x03u,  // Common - Invalid operation or result\n    ATMO_FXAS21002_Status_NotSupported         = 0x04u,  // Common - Feature not supported by platform\n} ATMO_FXAS21002_Status_t;\n\ntypedef struct {\n    uint16_t address;\n    ATMO_DriverInstanceHandle_t i2cDriverInstance;\n    uint8_t samplingRate;\n} ATMO_FXAS21002_Config_t;\n\n// X Y Z values in DPS\ntypedef struct {\n\tfloat X;\n\tfloat Y;\n\tfloat Z;\n} ATMO_FXAS21002_SensorData_t;\n\n/**\n * Initialize FXAS21002 Driver\n *\n * @param[in] config - Device configuration (optional)\n */\nATMO_FXAS21002_Status_t ATMO_FXAS21002_Init(ATMO_FXAS21002_Config_t *config);\n\n/**\n * Enable/Disable FXAS21002 Driver\n *\n * @param[in] enabled\n */\nATMO_FXAS21002_Status_t ATMO_FXAS21002_SetEnabled(bool enabled);\n\n/**\n * Get enabled/disabled status of FXAS21002 driver\n *\n * @param[out] enabled\n */\nATMO_FXAS21002_Status_t ATMO_FXAS21002_GetEnabled(bool *enabled);\n\n/**\n * Set basic device configuration\n *\n * @param[in] config\n */\nATMO_FXAS21002_Status_t ATMO_FXAS21002_SetConfiguration(const ATMO_FXAS21002_Config_t *config);\n\n/**\n * Get device configuration\n *\n * @param[out] config\n */\nATMO_FXAS21002_Status_t ATMO_FXAS21002_GetConfiguration(ATMO_FXAS21002_Config_t *config);\n\n/**\n * Get XYZ data from sensor\n *\n * @param[out] data\n */\nATMO_FXAS21002_Status_t ATMO_FXAS21002_GetSensorData(ATMO_FXAS21002_SensorData_t *data);\n\n#endif\n",
                "fxas21002_internal.h": "/*\n * The Clear BSD License\n * Copyright (c) 2015, Freescale Semiconductor, Inc.\n * Copyright 2016-2017 NXP\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted (subject to the limitations in the disclaimer below) provided\n * that the following conditions are met:\n *\n * o Redistributions of source code must retain the above copyright notice, this list\n *   of conditions and the following disclaimer.\n *\n * o Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n *\n * o Neither the name of the copyright holder nor the names of its\n *   contributors may be used to endorse or promote products derived from this\n *   software without specific prior written permission.\n *\n * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE.\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @file fxas21002.h\n * @brief The fxas21002.h contains the fxas21002 sensor register definitions and its bit mask.\n*/\n\n#ifndef FXAS21002_H_\n#define FXAS21002_H_\n\n#include \"../app_src/atmosphere_platform.h\"\n\n/**\n **  FXAS21002 I2C Address\n */\n#define   FXAS21002_I2C_ADDRESS     0x20\n\n/**\n **\n ** @brief The FXAS21002 Sensor Register  Map.\n */\nenum {\n     FXAS21002_STATUS             = 0x00,\n     FXAS21002_OUT_X_MSB          = 0x01,\n     FXAS21002_OUT_X_LSB          = 0x02,\n     FXAS21002_OUT_Y_MSB          = 0x03,\n     FXAS21002_OUT_Y_LSB          = 0x04,\n     FXAS21002_OUT_Z_MSB          = 0x05,\n     FXAS21002_OUT_Z_LSB          = 0x06,\n     FXAS21002_DR_STATUS          = 0x07,\n     FXAS21002_F_STATUS           = 0x08,\n     FXAS21002_F_SETUP            = 0x09,\n     FXAS21002_F_EVENT            = 0x0A,\n     FXAS21002_INT_SRC_FLAG       = 0x0B,\n     FXAS21002_WHO_AM_I           = 0x0C,\n     FXAS21002_CTRL_REG0          = 0x0D,\n     FXAS21002_RT_CFG             = 0x0E,\n     FXAS21002_RT_SRC             = 0x0F,\n     FXAS21002_RT_THS             = 0x10,\n     FXAS21002_RT_COUNT           = 0x11,\n     FXAS21002_TEMP               = 0x12,\n     FXAS21002_CTRL_REG1          = 0x13,\n     FXAS21002_CTRL_REG2          = 0x14,\n     FXAS21002_CTRL_REG3          = 0x15,\n};\n\n\n/*--------------------------------\n** Register: STATUS\n** Enum: FXAS21002_STATUS\n** --\n** Offset : 0x00 - Alias for DR_STATUS or F_STATUS.\n** ------------------------------*/\ntypedef uint8_t FXAS21002_STATUS_t;\n\n\n\n/*--------------------------------\n** Register: OUT_X_MSB\n** Enum: FXAS21002_OUT_X_MSB\n** --\n** Offset : 0x01 - 8 MSBs of 16 bit X-axis data sample\n** ------------------------------*/\ntypedef uint8_t FXAS21002_OUT_X_MSB_t;\n\n\n/*--------------------------------\n** Register: OUT_X_LSB\n** Enum: FXAS21002_OUT_X_LSB\n** --\n** Offset : 0x02 - 8 LSBs of 16 bit X-axis data sample\n** ------------------------------*/\ntypedef uint8_t FXAS21002_OUT_X_LSB_t;\n\n\n\n/*--------------------------------\n** Register: OUT_Y_MSB\n** Enum: FXAS21002_OUT_Y_MSB\n** --\n** Offset : 0x03 - 8 MSBs of 16 bit Y-axis data sample\n** ------------------------------*/\ntypedef uint8_t FXAS21002_OUT_Y_MSB_t;\n\n\n/*--------------------------------\n** Register: OUT_Y_LSB\n** Enum: FXAS21002_OUT_Y_LSB\n** --\n** Offset : 0x04 - 8 LSBs of 16 bit Y-axis data sample\n** ------------------------------*/\ntypedef uint8_t FXAS21002_OUT_Y_LSB_t;\n\n\n\n/*--------------------------------\n** Register: OUT_Z_MSB\n** Enum: FXAS21002_OUT_Z_MSB\n** --\n** Offset : 0x05 - 8 MSBs of 16 bit Z-axis data sample\n** ------------------------------*/\ntypedef uint8_t FXAS21002_OUT_Z_MSB_t;\n\n\n/*--------------------------------\n** Register: OUT_Z_LSB\n** Enum: FXAS21002_OUT_Z_LSB\n** --\n** Offset : 0x06 - 8 LSBs of 16 bit Z-axis data sample\n** ------------------------------*/\ntypedef uint8_t FXAS21002_OUT_Z_LSB_t;\n\n\n\n/*--------------------------------\n** Register: DR_STATUS\n** Enum: FXAS21002_DR_STATUS\n** --\n** Offset : 0x07 - Data-ready status information (FIFO disabled by setting F_SETUP :: F_MODE = 0)\n** ------------------------------*/\ntypedef union {\n    struct {\n        uint8_t                   xdr : 1; /*  X-axis new data available.                                                 */\n\n        uint8_t                   ydr : 1; /*  Y-axis new data available.                                                 */\n\n        uint8_t                   zdr : 1; /*  Z-axis new data available.                                                 */\n\n        uint8_t                 zyxdr : 1; /*  X-, Y-, and Z-axis data available.                                         */\n\n        uint8_t                   xow : 1; /*  X-axis data overwrite.                                                     */\n\n        uint8_t                   yow : 1; /*  Y-axis data overwrite.                                                     */\n\n        uint8_t                   zow : 1; /*  Z-axis data overwrite.                                                     */\n\n        uint8_t                 zyxow : 1; /*  X-, Y-, Z-axis data overwrite.                                             */\n\n    } b;\n    uint8_t w;\n} FXAS21002_DR_STATUS_t;\n\n\n/*\n** DR_STATUS - Bit field mask definitions\n*/\n#define FXAS21002_DR_STATUS_XDR_MASK     ((uint8_t) 0x01)\n#define FXAS21002_DR_STATUS_XDR_SHIFT    ((uint8_t)    0)\n\n#define FXAS21002_DR_STATUS_YDR_MASK     ((uint8_t) 0x02)\n#define FXAS21002_DR_STATUS_YDR_SHIFT    ((uint8_t)    1)\n\n#define FXAS21002_DR_STATUS_ZDR_MASK     ((uint8_t) 0x04)\n#define FXAS21002_DR_STATUS_ZDR_SHIFT    ((uint8_t)    2)\n\n#define FXAS21002_DR_STATUS_ZYXDR_MASK   ((uint8_t) 0x08)\n#define FXAS21002_DR_STATUS_ZYXDR_SHIFT  ((uint8_t)    3)\n\n#define FXAS21002_DR_STATUS_XOW_MASK     ((uint8_t) 0x10)\n#define FXAS21002_DR_STATUS_XOW_SHIFT    ((uint8_t)    4)\n\n#define FXAS21002_DR_STATUS_YOW_MASK     ((uint8_t) 0x20)\n#define FXAS21002_DR_STATUS_YOW_SHIFT    ((uint8_t)    5)\n\n#define FXAS21002_DR_STATUS_ZOW_MASK     ((uint8_t) 0x40)\n#define FXAS21002_DR_STATUS_ZOW_SHIFT    ((uint8_t)    6)\n\n#define FXAS21002_DR_STATUS_ZYXOW_MASK   ((uint8_t) 0x80)\n#define FXAS21002_DR_STATUS_ZYXOW_SHIFT  ((uint8_t)    7)\n\n\n/*\n** DR_STATUS - Bit field value definitions\n*/\n#define FXAS21002_DR_STATUS_XDR_DRDY              ((uint8_t) 0x01)  /*  Set to 1 whenever a new X-axis data acquisition   */\n                                                                    /*  is completed. Cleared anytime the OUT_X_MSB       */\n                                                                    /*  register is read.                                 */\n#define FXAS21002_DR_STATUS_YDR_DRDY              ((uint8_t) 0x02)  /*  Set to 1 whenever a new Y-axis data acquisition   */\n                                                                    /*  is completed. Cleared anytime the OUT_Y_MSB       */\n                                                                    /*  register is read.                                 */\n#define FXAS21002_DR_STATUS_ZDR_DRDY              ((uint8_t) 0x04)  /*  Set to 1 whenever a new Z-axis data acquisition   */\n                                                                    /*  is completed. Cleared anytime the OUT_Z_MSB       */\n                                                                    /*  register is read.                                 */\n#define FXAS21002_DR_STATUS_ZYXDR_DRDY            ((uint8_t) 0x08)  /*  Cleared when the high-bytes of the acceleration   */\n                                                                    /*  data (OUT_X_MSB, OUT_Y_MSB, OUT_Z_MSB) are read.  */\n#define FXAS21002_DR_STATUS_XOW_OWR               ((uint8_t) 0x10)  /*  Asserted whenever a new X-axis acquisition is     */\n                                                                    /*  completed before the retrieval of the previous    */\n                                                                    /*  data.                                             */\n#define FXAS21002_DR_STATUS_YOW_OWR               ((uint8_t) 0x20)  /*  Asserted whenever a new Y-axis acquisition is     */\n                                                                    /*  completed before the retrieval of the previous    */\n                                                                    /*  data.                                             */\n#define FXAS21002_DR_STATUS_ZOW_OWR               ((uint8_t) 0x40)  /*  Asserted whenever a new Z-axis acquisition is     */\n                                                                    /*  completed before the retrieval of the previous    */\n                                                                    /*  data.                                             */\n#define FXAS21002_DR_STATUS_ZYXOW_OWR             ((uint8_t) 0x80)  /*  Asserted whenever new X-, Y-, and Z-axis data is  */\n                                                                    /*  acquired before completing the retrieval of the   */\n                                                                    /*  previous set.                                     */\n/*------------------------------*/\n\n\n\n/*--------------------------------\n** Register: F_STATUS\n** Enum: FXAS21002_F_STATUS\n** --\n** Offset : 0x08 - FIFO status information (FIFO enabled by setting F_SETUP :: F_MODE > 0)\n** ------------------------------*/\ntypedef union {\n    struct {\n        uint8_t                 f_cnt : 6; /*  FIFO sample counter; indicates the number of samples currently stored in   */\n                                           /*  the FIFO.                                                                  */\n\n        uint8_t                f_wmkf : 1; /*  FIFO sample count greater than or equal to the watermark count (F_SETUP :: */\n                                           /*  F_WMRK) has been detected.                                                 */\n\n        uint8_t                 f_ovf : 1; /*  FIFO overflow event, such as when F_CNT = 32 and a new sample arrives,     */\n                                           /*  asserts the F_OVF flag.                                                    */\n\n    } b;\n    uint8_t w;\n} FXAS21002_F_STATUS_t;\n\n\n/*\n** F_STATUS - Bit field mask definitions\n*/\n#define FXAS21002_F_STATUS_F_CNT_MASK    ((uint8_t) 0x3F)\n#define FXAS21002_F_STATUS_F_CNT_SHIFT   ((uint8_t)    0)\n\n#define FXAS21002_F_STATUS_F_WMKF_MASK   ((uint8_t) 0x40)\n#define FXAS21002_F_STATUS_F_WMKF_SHIFT  ((uint8_t)    6)\n\n#define FXAS21002_F_STATUS_F_OVF_MASK    ((uint8_t) 0x80)\n#define FXAS21002_F_STATUS_F_OVF_SHIFT   ((uint8_t)    7)\n\n\n/*\n** F_STATUS - Bit field value definitions\n*/\n#define FXAS21002_F_STATUS_F_WMKF_DETECT         ((uint8_t) 0x40)  /*  FIFO Watermark event has been detected.            */\n#define FXAS21002_F_STATUS_F_OVF_DETECT          ((uint8_t) 0x80)  /*  FIFO Overflow event has been detected.             */\n/*------------------------------*/\n\n\n\n/*--------------------------------\n** Register: F_SETUP\n** Enum: FXAS21002_F_SETUP\n** --\n** Offset : 0x09 - FIFO configuration\n** ------------------------------*/\ntypedef union {\n    struct {\n        uint8_t                f_wmrk : 6; /*  FIFO operating mode selection.                                             */\n\n        uint8_t                f_mode : 2; /*  FIFO sample count watermark setting.                                       */\n\n    } b;\n    uint8_t w;\n} FXAS21002_F_SETUP_t;\n\n\n/*\n** F_SETUP - Bit field mask definitions\n*/\n#define FXAS21002_F_SETUP_F_WMRK_MASK   ((uint8_t) 0x3F)\n#define FXAS21002_F_SETUP_F_WMRK_SHIFT  ((uint8_t)    0)\n\n#define FXAS21002_F_SETUP_F_MODE_MASK   ((uint8_t) 0xC0)\n#define FXAS21002_F_SETUP_F_MODE_SHIFT  ((uint8_t)    6)\n\n\n/*\n** F_SETUP - Bit field value definitions\n*/\n#define FXAS21002_F_SETUP_F_MODE_FIFO_OFF       ((uint8_t) 0x00)  /*  FIFO is disabled.                                   */\n#define FXAS21002_F_SETUP_F_MODE_CIR_MODE       ((uint8_t) 0x40)  /*  FIFO is in Circular Buffer mode.                    */\n#define FXAS21002_F_SETUP_F_MODE_STOP_MODE      ((uint8_t) 0x80)  /*  FIFO is in Stop mode.                               */\n/*------------------------------*/\n\n\n\n/*--------------------------------\n** Register: F_EVENT\n** Enum: FXAS21002_F_EVENT\n** --\n** Offset : 0x0A - FIFO event status\n** ------------------------------*/\ntypedef union {\n    struct {\n        uint8_t               fe_time : 5; /*  Number of ODR periods elapsed since F_EVENT was set.                       */\n\n        uint8_t               f_event : 1; /*  FIFO Event: Indicates if either F_WMKF or F_OVF flags are set (logical     */\n                                           /*  OR).                                                                       */\n\n    } b;\n    uint8_t w;\n} FXAS21002_F_EVENT_t;\n\n\n/*\n** F_EVENT - Bit field mask definitions\n*/\n#define FXAS21002_F_EVENT_FE_TIME_MASK   ((uint8_t) 0x1F)\n#define FXAS21002_F_EVENT_FE_TIME_SHIFT  ((uint8_t)    0)\n\n#define FXAS21002_F_EVENT_F_EVENT_MASK   ((uint8_t) 0x20)\n#define FXAS21002_F_EVENT_F_EVENT_SHIFT  ((uint8_t)    5)\n\n\n/*\n** F_EVENT - Bit field value definitions\n*/\n#define FXAS21002_F_EVENT_F_EVENT_DETECTED      ((uint8_t) 0x20)  /*  FIFO event was detected                             */\n/*------------------------------*/\n\n\n\n/*--------------------------------\n** Register: INT_SRC_FLAG\n** Enum: FXAS21002_INT_SRC_FLAG\n** --\n** Offset : 0x0B - Interrupt source status\n** ------------------------------*/\ntypedef union {\n    struct {\n        uint8_t              src_drdy : 1; /*  Data ready event source flag.                                              */\n\n        uint8_t                src_rt : 1; /*  Rate threshold event source flag.                                          */\n\n        uint8_t              src_fifo : 1; /*  FIFO event source flag.                                                    */\n\n        uint8_t               bootend : 1; /*  Boot sequence complete event flag.                                         */\n\n    } b;\n    uint8_t w;\n} FXAS21002_INT_SRC_FLAG_t;\n\n\n/*\n** INT_SRC_FLAG - Bit field mask definitions\n*/\n#define FXAS21002_INT_SRC_FLAG_SRC_DRDY_MASK   ((uint8_t) 0x01)\n#define FXAS21002_INT_SRC_FLAG_SRC_DRDY_SHIFT  ((uint8_t)    0)\n\n#define FXAS21002_INT_SRC_FLAG_SRC_RT_MASK     ((uint8_t) 0x02)\n#define FXAS21002_INT_SRC_FLAG_SRC_RT_SHIFT    ((uint8_t)    1)\n\n#define FXAS21002_INT_SRC_FLAG_SRC_FIFO_MASK   ((uint8_t) 0x04)\n#define FXAS21002_INT_SRC_FLAG_SRC_FIFO_SHIFT  ((uint8_t)    2)\n\n#define FXAS21002_INT_SRC_FLAG_BOOTEND_MASK    ((uint8_t) 0x08)\n#define FXAS21002_INT_SRC_FLAG_BOOTEND_SHIFT   ((uint8_t)    3)\n\n\n/*\n** INT_SRC_FLAG - Bit field value definitions\n*/\n#define FXAS21002_INT_SRC_FLAG_SRC_DRDY_READY        ((uint8_t) 0x01)  /*  Asserted whenever a data-ready event triggers  */\n                                                                       /*  the interrupt.                                 */\n#define FXAS21002_INT_SRC_FLAG_SRC_RT_THRESH         ((uint8_t) 0x02)  /*  Indicates that the rate threshold event flag   */\n                                                                       /*  triggered the interrupt.                       */\n#define FXAS21002_INT_SRC_FLAG_SRC_FIFO_EVENT        ((uint8_t) 0x04)  /*  F_OVF or F_WMKF are set, provided the FIFO     */\n                                                                       /*  interrupt is enabled.                          */\n#define FXAS21002_INT_SRC_FLAG_BOOTEND_BOOT_DONE     ((uint8_t) 0x08)  /*  Boot sequence is complete.                     */\n/*------------------------------*/\n\n\n\n/*--------------------------------\n** Register: WHO_AM_I\n** Enum: FXAS21002_WHO_AM_I\n** --\n** Offset : 0x0C - The WHO_AM_I register contains the device idenifier.\n** ------------------------------*/\ntypedef union {\n    struct {\n        uint8_t                whoami; /*  The WHO_AM_I register contains the device identifier which is factory          */\n                                       /*  programmed.                                                                    */\n\n    } b;\n    uint8_t w;\n} FXAS21002_WHO_AM_I_t;\n\n\n/*\n** WHO_AM_I - Bit field mask definitions\n*/\n#define FXAS21002_WHO_AM_I_WHOAMI_MASK   ((uint8_t) 0xFF)\n#define FXAS21002_WHO_AM_I_WHOAMI_SHIFT  ((uint8_t)    0)\n\n\n/*\n** WHO_AM_I - Bit field value definitions\n*/\n#define FXAS21002_WHO_AM_I_WHOAMI_OLD_VALUE     ((uint8_t) 0xd1)  /*  FXAS21000                       */\n#define FXAS21002_WHO_AM_I_WHOAMI_PRE_VALUE     ((uint8_t) 0xd6)  /*  Engineering Samples             */\n#define FXAS21002_WHO_AM_I_WHOAMI_PROD_VALUE    ((uint8_t) 0xd7)  /*  FXAS21002 Rev 2.1 (production)  */\n/*------------------------------*/\n\n\n\n/*--------------------------------\n** Register: CTRL_REG0\n** --\n** Offset : 0x0D - Used for general control and configuration.\n** ------------------------------*/\ntypedef union {\n    struct {\n        uint8_t                    fs : 2; /*  Full-scale range selection.                                                */\n\n        uint8_t                hpf_en : 1; /*  High-pass filter enable. The high-pass filter is initialized on operating  */\n                                           /*  mode and ODR change. When enabled, the HPF is applied to the angular rate  */\n                                           /*  data supplied to the output registers/FIFO and the embedded rate threshold */\n                                           /*  algorithm.                                                                 */\n\n        uint8_t                   sel : 2; /*  High-pass filter cutoff frequency selection.                               */\n\n        uint8_t                  spiw : 1; /*  SPI interface mode selection.                                              */\n\n        uint8_t                    bw : 2; /*  Bandwidth selects the cut-off frequency of the digital low-pass filter.    */\n\n    } b;\n    uint8_t w;\n} FXAS21002_CTRL_REG0_t;\n\n\n/*\n** CTRL_REG0 - Bit field mask definitions\n*/\n#define FXAS21002_CTRL_REG0_FS_MASK       ((uint8_t) 0x03)\n#define FXAS21002_CTRL_REG0_FS_SHIFT      ((uint8_t)    0)\n\n#define FXAS21002_CTRL_REG0_HPF_EN_MASK   ((uint8_t) 0x04)\n#define FXAS21002_CTRL_REG0_HPF_EN_SHIFT  ((uint8_t)    2)\n\n#define FXAS21002_CTRL_REG0_SEL_MASK      ((uint8_t) 0x18)\n#define FXAS21002_CTRL_REG0_SEL_SHIFT     ((uint8_t)    3)\n\n#define FXAS21002_CTRL_REG0_SPIW_MASK     ((uint8_t) 0x20)\n#define FXAS21002_CTRL_REG0_SPIW_SHIFT    ((uint8_t)    5)\n\n#define FXAS21002_CTRL_REG0_BW_MASK       ((uint8_t) 0xC0)\n#define FXAS21002_CTRL_REG0_BW_SHIFT      ((uint8_t)    6)\n\n\n/*\n** CTRL_REG0 - Bit field value definitions\n*/\n#define FXAS21002_CTRL_REG0_FS_DPS2000            ((uint8_t) 0x00)  /*  2000 degrees per second (4000 dps if CTRL_REG3 :  */\n                                                                    /*  FS_DOUBLE = 1).                                   */\n#define FXAS21002_CTRL_REG0_FS_DPS1000            ((uint8_t) 0x01)  /*  1000 degrees per second (2000 dps if CTRL_REG3 :  */\n                                                                    /*  FS_DOUBLE = 1).                                   */\n#define FXAS21002_CTRL_REG0_FS_DPS500             ((uint8_t) 0x02)  /*  500 degrees per second (1000 dps if CTRL_REG3 :   */\n                                                                    /*  FS_DOUBLE = 1).                                   */\n#define FXAS21002_CTRL_REG0_FS_DPS250             ((uint8_t) 0x03)  /*  250 degrees per second (500 dps if CTRL_REG3 :    */\n                                                                    /*  FS_DOUBLE = 1).                                   */\n#define FXAS21002_CTRL_REG0_HPF_EN_ENABLE         ((uint8_t) 0x04)\n#define FXAS21002_CTRL_REG0_HPF_EN_DISABLE        ((uint8_t) 0x00)\n#define FXAS21002_CTRL_REG0_SPIW_4WIRE            ((uint8_t) 0x00)  /*  SPI 4-wire mode (default).                        */\n#define FXAS21002_CTRL_REG0_SPIW_3WIRE            ((uint8_t) 0x20)  /*  SPI 3-wire mode (MOSI pin is used for SPI input   */\n                                                                    /*  and output signals).                              */\n/*------------------------------*/\n\n\n\n/*--------------------------------\n** Register: RT_CFG\n** Enum: FXAS21002_RT_CFG\n** --\n** Offset : 0x0E - Used to enable the Rate Threshold interrupt generation.\n** ------------------------------*/\ntypedef union {\n    struct {\n        uint8_t                 xtefe : 1; /*  Event flag enable on X rate.                                               */\n\n        uint8_t                 ytefe : 1; /*  Event flag enable on Y rate.                                               */\n\n        uint8_t                 ztefe : 1; /*  Event flag enable on Z rate.                                               */\n\n        uint8_t                   ele : 1; /*  Event latch enable.                                                        */\n\n    } b;\n    uint8_t w;\n} FXAS21002_RT_CFG_t;\n\n\n/*\n** RT_CFG - Bit field mask definitions\n*/\n#define FXAS21002_RT_CFG_XTEFE_MASK   ((uint8_t) 0x01)\n#define FXAS21002_RT_CFG_XTEFE_SHIFT  ((uint8_t)    0)\n\n#define FXAS21002_RT_CFG_YTEFE_MASK   ((uint8_t) 0x02)\n#define FXAS21002_RT_CFG_YTEFE_SHIFT  ((uint8_t)    1)\n\n#define FXAS21002_RT_CFG_ZTEFE_MASK   ((uint8_t) 0x04)\n#define FXAS21002_RT_CFG_ZTEFE_SHIFT  ((uint8_t)    2)\n\n#define FXAS21002_RT_CFG_ELE_MASK     ((uint8_t) 0x08)\n#define FXAS21002_RT_CFG_ELE_SHIFT    ((uint8_t)    3)\n\n\n/*\n** RT_CFG - Bit field value definitions\n*/\n#define FXAS21002_RT_CFG_XTEFE_ENABLE          ((uint8_t) 0x01)  /*  X event detection enabled.                           */\n#define FXAS21002_RT_CFG_XTEFE_DISABLE         ((uint8_t) 0x00)  /*  X event detection disabled.                          */\n#define FXAS21002_RT_CFG_YTEFE_ENABLE          ((uint8_t) 0x02)  /*  Y event detection enabled.                           */\n#define FXAS21002_RT_CFG_YTEFE_DISABLE         ((uint8_t) 0x00)  /*  Y event detection disabled.                          */\n#define FXAS21002_RT_CFG_ZTEFE_ENABLE          ((uint8_t) 0x04)  /*  Z event detection enabled.                           */\n#define FXAS21002_RT_CFG_ZTEFE_DISABLE         ((uint8_t) 0x00)  /*  Z event detection disabled.                          */\n#define FXAS21002_RT_CFG_ELE_ENABLE            ((uint8_t) 0x08)  /*  Event flag latch enabled.                            */\n#define FXAS21002_RT_CFG_ELE_DISABLE           ((uint8_t) 0x00)  /*  Event flag latch disabled.                           */\n/*------------------------------*/\n\n\n\n/*--------------------------------\n** Register: RT_SRC\n** Enum: FXAS21002_RT_SRC\n** --\n** Offset : 0x0F - Indicates the source of the Rate Threshold event. It also clears the RT_SRC flag in the INT_SOURCE_FLAG register.\n** ------------------------------*/\ntypedef union {\n    struct {\n        uint8_t              x_rt_pol : 1; /*  Polarity of X event.                                                       */\n\n        uint8_t                   xrt : 1; /*  X rate Event.                                                              */\n\n        uint8_t              y_rt_pol : 1; /*  Polarity of Y event.                                                       */\n\n        uint8_t                   yrt : 1; /*  Y rate event.                                                              */\n\n        uint8_t              z_rt_pol : 1; /*  Polarity of Z event.                                                       */\n\n        uint8_t                   zrt : 1; /*  Z rate event.                                                              */\n\n        uint8_t                    ea : 1; /*  Event active flag.                                                         */\n\n    } b;\n    uint8_t w;\n} FXAS21002_RT_SRC_t;\n\n\n/*\n** RT_SRC - Bit field mask definitions\n*/\n#define FXAS21002_RT_SRC_X_RT_POL_MASK   ((uint8_t) 0x01)\n#define FXAS21002_RT_SRC_X_RT_POL_SHIFT  ((uint8_t)    0)\n\n#define FXAS21002_RT_SRC_XRT_MASK        ((uint8_t) 0x02)\n#define FXAS21002_RT_SRC_XRT_SHIFT       ((uint8_t)    1)\n\n#define FXAS21002_RT_SRC_Y_RT_POL_MASK   ((uint8_t) 0x04)\n#define FXAS21002_RT_SRC_Y_RT_POL_SHIFT  ((uint8_t)    2)\n\n#define FXAS21002_RT_SRC_YRT_MASK        ((uint8_t) 0x08)\n#define FXAS21002_RT_SRC_YRT_SHIFT       ((uint8_t)    3)\n\n#define FXAS21002_RT_SRC_Z_RT_POL_MASK   ((uint8_t) 0x10)\n#define FXAS21002_RT_SRC_Z_RT_POL_SHIFT  ((uint8_t)    4)\n\n#define FXAS21002_RT_SRC_ZRT_MASK        ((uint8_t) 0x20)\n#define FXAS21002_RT_SRC_ZRT_SHIFT       ((uint8_t)    5)\n\n#define FXAS21002_RT_SRC_EA_MASK         ((uint8_t) 0x40)\n#define FXAS21002_RT_SRC_EA_SHIFT        ((uint8_t)    6)\n\n\n/*\n** RT_SRC - Bit field value definitions\n*/\n#define FXAS21002_RT_SRC_X_RT_POL_POS          ((uint8_t) 0x00)  /*  Rate Event was Positive.                             */\n#define FXAS21002_RT_SRC_X_RT_POL_NEG          ((uint8_t) 0x01)  /*  Rate Event was Negative.                             */\n#define FXAS21002_RT_SRC_XRT_LOWER             ((uint8_t) 0x00)  /*  Rate lower than RT_THS value.                        */\n#define FXAS21002_RT_SRC_XRT_GREATER           ((uint8_t) 0x02)  /*  Rate greater than RT_THS value. Event has occured.   */\n#define FXAS21002_RT_SRC_Y_RT_POL_POS          ((uint8_t) 0x00)  /*  Rate Event was Positive.                             */\n#define FXAS21002_RT_SRC_Y_RT_POL_NEG          ((uint8_t) 0x04)  /*  Rate Event was Negative.                             */\n#define FXAS21002_RT_SRC_YRT_LOWER             ((uint8_t) 0x00)  /*  Rate lower than RT_THS value.                        */\n#define FXAS21002_RT_SRC_YRT_GREATER           ((uint8_t) 0x08)  /*  Rate greater than RT_THS value. Event has occured.   */\n#define FXAS21002_RT_SRC_Z_RT_POL_POS          ((uint8_t) 0x00)  /*  Rate Event was Positive.                             */\n#define FXAS21002_RT_SRC_Z_RT_POL_NEG          ((uint8_t) 0x10)  /*  Rate Event was Negative.                             */\n#define FXAS21002_RT_SRC_ZRT_LOWER             ((uint8_t) 0x00)  /*  Rate lower than RT_THS value.                        */\n#define FXAS21002_RT_SRC_ZRT_GREATER           ((uint8_t) 0x20)  /*  Rate greater than RT_THS value. Event has occured.   */\n#define FXAS21002_RT_SRC_EA_NOEVENT            ((uint8_t) 0x00)  /*  No event flags have been asserted.                   */\n#define FXAS21002_RT_SRC_EA_EVENT              ((uint8_t) 0x40)  /*  One or more event flags have been asserted.          */\n/*------------------------------*/\n\n\n\n/*--------------------------------\n** Register: RT_THS\n** Enum: FXAS21002_RT_THS\n** --\n** Offset : 0x10 - The RT_THS register sets the threshold limit for the detection of the rate and the debounce counter mode.\n** ------------------------------*/\ntypedef union {\n    struct {\n        uint8_t                   ths : 7; /*  Unsigned 7-bit rate threshold value; The contents should only be modified  */\n                                           /*  when the device is in Standby mode; The internal state of the Rate         */\n                                           /*  Threshold function is reset when a transition from Standby to Active or    */\n                                           /*  Ready to Active modes occurs.                                              */\n\n        uint8_t                dbcntm : 1; /*  Debounce counter mode selection.                                           */\n\n    } b;\n    uint8_t w;\n} FXAS21002_RT_THS_t;\n\n\n/*\n** RT_THS - Bit field mask definitions\n*/\n#define FXAS21002_RT_THS_THS_MASK      ((uint8_t) 0x7F)\n#define FXAS21002_RT_THS_THS_SHIFT     ((uint8_t)    0)\n\n#define FXAS21002_RT_THS_DBCNTM_MASK   ((uint8_t) 0x80)\n#define FXAS21002_RT_THS_DBCNTM_SHIFT  ((uint8_t)    7)\n\n\n/*\n** RT_THS - Bit field value definitions\n*/\n#define FXAS21002_RT_THS_DBCNTM_CLEAR          ((uint8_t) 0x80)  /*  Clear counter when angular rate is below the         */\n                                                                 /*  threshold value.                                     */\n#define FXAS21002_RT_THS_DBCNTM_DECREMENT      ((uint8_t) 0x00)  /*  Decrement counter on every ODR cycle that the        */\n                                                                 /*  angular rate is below the threshold value.           */\n/*------------------------------*/\n\n\n\n/*--------------------------------\n** Register: RT_COUNT\n** Enum: FXAS21002_RT_COUNT\n** --\n** Offset : 0x11 - Sets the number of debounce counts.\n** ------------------------------*/\ntypedef uint8_t FXAS21002_RT_COUNT_t;\n\n\n\n/*--------------------------------\n** Register: TEMP\n** Enum: FXAS21002_TEMP\n** --\n** Offset : 0x12 - The TEMP register contains an 8-bit 2's complement temperature value with a range of �128 �C to +127 �C and a scaling of 1 �C/LSB.\n** ------------------------------*/\ntypedef uint8_t FXAS21002_TEMP_t;\n\n\n\n/*--------------------------------\n** Register: CTRL_REG1\n** Enum: FXAS21002_CTRL_REG1\n** --\n** Offset : 0x13 - The CTRL_REG1 register is used to configure the device ODR, set the operating mode, soft-reset the device, and exercise the Self-Test function.\n** ------------------------------*/\ntypedef union {\n    struct {\n        uint8_t                  mode : 2; /*  Operational Mode.                                                          */\n\n        uint8_t                    dr : 3; /*  Output Data Rate selection.                                                */\n\n        uint8_t                    st : 1; /*  Self-Test Enable.                                                          */\n\n        uint8_t                   rst : 1; /*  Software Reset.                                                            */\n\n    } b;\n    uint8_t w;\n} FXAS21002_CTRL_REG1_t;\n\n\n/*\n** CTRL_REG1 - Bit field mask definitions\n*/\n#define FXAS21002_CTRL_REG1_MODE_MASK   ((uint8_t) 0x03)\n#define FXAS21002_CTRL_REG1_MODE_SHIFT  ((uint8_t)    0)\n\n#define FXAS21002_CTRL_REG1_DR_MASK     ((uint8_t) 0x1C)\n#define FXAS21002_CTRL_REG1_DR_SHIFT    ((uint8_t)    2)\n\n#define FXAS21002_CTRL_REG1_ST_MASK     ((uint8_t) 0x20)\n#define FXAS21002_CTRL_REG1_ST_SHIFT    ((uint8_t)    5)\n\n#define FXAS21002_CTRL_REG1_RST_MASK    ((uint8_t) 0x40)\n#define FXAS21002_CTRL_REG1_RST_SHIFT   ((uint8_t)    6)\n\n\n/*\n** CTRL_REG1 - Bit field value definitions\n*/\n#define FXAS21002_CTRL_REG1_MODE_STANDBY          ((uint8_t) 0x00)  /*  Standby Mode. Register setting allowed. Lowest    */\n                                                                    /*  power.                                            */\n#define FXAS21002_CTRL_REG1_MODE_READY            ((uint8_t) 0x01)  /*  Ready Mode. The device is ready to measure        */\n                                                                    /*  angular rate but no data acquisitions are being   */\n                                                                    /*  made. Register reads only. Reduced power.         */\n#define FXAS21002_CTRL_REG1_MODE_ACTIVE           ((uint8_t) 0x02)  /*  Active Mode. The device is fully functional.      */\n                                                                    /*  Register reads only. Maximum power.               */\n#define FXAS21002_CTRL_REG1_DR_800HZ              ((uint8_t) 0x00)\n#define FXAS21002_CTRL_REG1_DR_400HZ              ((uint8_t) 0x04)\n#define FXAS21002_CTRL_REG1_DR_200HZ              ((uint8_t) 0x08)\n#define FXAS21002_CTRL_REG1_DR_100HZ              ((uint8_t) 0x0c)\n#define FXAS21002_CTRL_REG1_DR_50HZ               ((uint8_t) 0x10)\n#define FXAS21002_CTRL_REG1_DR_25HZ               ((uint8_t) 0x14)\n#define FXAS21002_CTRL_REG1_DR_12_5HZ             ((uint8_t) 0x18)\n#define FXAS21002_CTRL_REG1_ST_ENABLE             ((uint8_t) 0x20)\n#define FXAS21002_CTRL_REG1_ST_DISABLE            ((uint8_t) 0x00)\n#define FXAS21002_CTRL_REG1_RST_TRIGGER           ((uint8_t) 0x40)\n#define FXAS21002_CTRL_REG1_RST_NOTTRIGGERED      ((uint8_t) 0x00)\n/*------------------------------*/\n\n\n\n/*--------------------------------\n** Register: CTRL_REG2\n** Enum: FXAS21002_CTRL_REG2\n** --\n** Offset : 0x14 - This register enables and assigns the output pin(s) and logic polarities for the various interrupt sources available on the device.\n** ------------------------------*/\ntypedef union {\n    struct {\n        uint8_t                 pp_od : 1; /*  INT1 and INT2 pin output driver configuration.                             */\n\n        uint8_t                  ipol : 1; /*  Interrupt logic polarity.                                                  */\n\n        uint8_t           int_en_drdy : 1; /*  Data ready interrupt enable.                                               */\n\n        uint8_t          int_cfg_drdy : 1; /*  Data-ready interrupt pin routing.                                          */\n\n        uint8_t             int_en_rt : 1; /*  Rate threshold interrupt enable.                                           */\n\n        uint8_t            int_cfg_rt : 1; /*  Rate threshold interrupt pin routing.                                      */\n\n        uint8_t           int_en_fifo : 1; /*  FIFO Interrupt Enable.                                                     */\n\n        uint8_t          int_cfg_fifo : 1; /*  FIFO interrupt pin routing.                                                */\n\n    } b;\n    uint8_t w;\n} FXAS21002_CTRL_REG2_t;\n\n\n/*\n** CTRL_REG2 - Bit field mask definitions\n*/\n#define FXAS21002_CTRL_REG2_PP_OD_MASK          ((uint8_t) 0x01)\n#define FXAS21002_CTRL_REG2_PP_OD_SHIFT         ((uint8_t)    0)\n\n#define FXAS21002_CTRL_REG2_IPOL_MASK           ((uint8_t) 0x02)\n#define FXAS21002_CTRL_REG2_IPOL_SHIFT          ((uint8_t)    1)\n\n#define FXAS21002_CTRL_REG2_INT_EN_DRDY_MASK    ((uint8_t) 0x04)\n#define FXAS21002_CTRL_REG2_INT_EN_DRDY_SHIFT   ((uint8_t)    2)\n\n#define FXAS21002_CTRL_REG2_INT_CFG_DRDY_MASK   ((uint8_t) 0x08)\n#define FXAS21002_CTRL_REG2_INT_CFG_DRDY_SHIFT  ((uint8_t)    3)\n\n#define FXAS21002_CTRL_REG2_INT_EN_RT_MASK      ((uint8_t) 0x10)\n#define FXAS21002_CTRL_REG2_INT_EN_RT_SHIFT     ((uint8_t)    4)\n\n#define FXAS21002_CTRL_REG2_INT_CFG_RT_MASK     ((uint8_t) 0x20)\n#define FXAS21002_CTRL_REG2_INT_CFG_RT_SHIFT    ((uint8_t)    5)\n\n#define FXAS21002_CTRL_REG2_INT_EN_FIFO_MASK    ((uint8_t) 0x40)\n#define FXAS21002_CTRL_REG2_INT_EN_FIFO_SHIFT   ((uint8_t)    6)\n\n#define FXAS21002_CTRL_REG2_INT_CFG_FIFO_MASK   ((uint8_t) 0x80)\n#define FXAS21002_CTRL_REG2_INT_CFG_FIFO_SHIFT  ((uint8_t)    7)\n\n\n/*\n** CTRL_REG2 - Bit field value definitions\n*/\n#define FXAS21002_CTRL_REG2_PP_OD_PUSHPULL        ((uint8_t) 0x00)  /*  Push-pull output driver.                          */\n#define FXAS21002_CTRL_REG2_PP_OD_OPENDRAIN       ((uint8_t) 0x01)  /*  Open-drain output driver.                         */\n#define FXAS21002_CTRL_REG2_IPOL_ACTIVE_LOW       ((uint8_t) 0x00)\n#define FXAS21002_CTRL_REG2_IPOL_ACTIVE_HIGH      ((uint8_t) 0x02)\n#define FXAS21002_CTRL_REG2_INT_EN_DRDY_ENABLE    ((uint8_t) 0x04)\n#define FXAS21002_CTRL_REG2_INT_EN_DRDY_DISABLE   ((uint8_t) 0x00)\n#define FXAS21002_CTRL_REG2_INT_CFG_DRDY_INT2     ((uint8_t) 0x00)  /*  Interrupt is routed to INT2 pin.                  */\n#define FXAS21002_CTRL_REG2_INT_CFG_DRDY_INT1     ((uint8_t) 0x08)  /*  Interrupt is routed to INT1 pin.                  */\n#define FXAS21002_CTRL_REG2_INT_EN_RT_ENABLE      ((uint8_t) 0x10)\n#define FXAS21002_CTRL_REG2_INT_EN_RT_DISABLE     ((uint8_t) 0x00)\n#define FXAS21002_CTRL_REG2_INT_CFG_RT_INT2       ((uint8_t) 0x00)  /*  Interrupt is routed to INT2 pin.                  */\n#define FXAS21002_CTRL_REG2_INT_CFG_RT_INT1       ((uint8_t) 0x20)  /*  Interrupt is routed to INT1 pin.                  */\n#define FXAS21002_CTRL_REG2_INT_EN_FIFO_ENABLE    ((uint8_t) 0x40)\n#define FXAS21002_CTRL_REG2_INT_EN_FIFO_DISABLE   ((uint8_t) 0x00)\n#define FXAS21002_CTRL_REG2_INT_CFG_FIFO_INT2     ((uint8_t) 0x00)  /*  Interrupt is routed to INT2 pin.                  */\n#define FXAS21002_CTRL_REG2_INT_CFG_FIFO_INT1     ((uint8_t) 0x80)  /*  Interrupt is routed to INT1 pin.                  */\n/*------------------------------*/\n\n\n\n/*--------------------------------\n** Register: CTRL_REG3\n** Enum: FXAS21002_CTRL_REG3\n** --\n** Offset : 0x15 - Auto-increment address configuration, external power control, Full Scale Range (FSR) expansion\n** ------------------------------*/\ntypedef union {\n    struct {\n        uint8_t             fs_double : 1; /*  Increases the dynamic range for each CTRL_REG0 : FS selection by a factor  */\n                                           /*  of two.                                                                    */\n\n        uint8_t _reserved_            : 1;\n        uint8_t             extctrlen : 1; /*  External power mode control input.                                         */\n\n        uint8_t             wraptoone : 1; /*  Auto-increment read address pointer roll-over behavior.                    */\n\n    } b;\n    uint8_t w;\n} FXAS21002_CTRL_REG3_t;\n\n\n/*\n** CTRL_REG3 - Bit field mask definitions\n*/\n#define FXAS21002_CTRL_REG3_FS_DOUBLE_MASK   ((uint8_t) 0x01)\n#define FXAS21002_CTRL_REG3_FS_DOUBLE_SHIFT  ((uint8_t)    0)\n\n#define FXAS21002_CTRL_REG3_EXTCTRLEN_MASK   ((uint8_t) 0x04)\n#define FXAS21002_CTRL_REG3_EXTCTRLEN_SHIFT  ((uint8_t)    2)\n\n#define FXAS21002_CTRL_REG3_WRAPTOONE_MASK   ((uint8_t) 0x08)\n#define FXAS21002_CTRL_REG3_WRAPTOONE_SHIFT  ((uint8_t)    3)\n\n\n/*\n** CTRL_REG3 - Bit field value definitions\n*/\n#define FXAS21002_CTRL_REG3_FS_DOUBLE_ENABLE      ((uint8_t) 0x01)  /*  Maximum full-scale range selections are doubled   */\n                                                                    /*  (4000, 2000, 1000, 500 dps).                      */\n#define FXAS21002_CTRL_REG3_FS_DOUBLE_DISABLE     ((uint8_t) 0x00)  /*  Maximum full-scale range selections are as per    */\n                                                                    /*  selectable full-scale ranges (2000, 1000, 500,    */\n                                                                    /*  250 dps).                                         */\n#define FXAS21002_CTRL_REG3_EXTCTRLEN_INT2        ((uint8_t) 0x00)  /*  INT2 pin is used as an interrupt output           */\n                                                                    /*  (default).                                        */\n#define FXAS21002_CTRL_REG3_EXTCTRLEN_POWER_CONTROL ((uint8_t) 0x04)  /*  INT2 pin becomes an input pin that may be used  */\n                                                                      /*  to control the power mode.                      */\n#define FXAS21002_CTRL_REG3_WRAPTOONE_ROLL_STATUS ((uint8_t) 0x00)  /*  The auto-increment read address pointer rolls     */\n                                                                    /*  over to address 0x00 (STATUS) after the Z-axis    */\n                                                                    /*  LSB is read (default).                            */\n#define FXAS21002_CTRL_REG3_WRAPTOONE_ROLL_DATA   ((uint8_t) 0x08)  /*  The auto-increment pointer rolls over to address  */\n                                                                    /*  0x01 (X-axis MSB) in order to facilitate the      */\n                                                                    /*  faster read out of the FIFO data in a single      */\n                                                                    /*  burst read operation.                             */\n/*------------------------------*/\n\n\n#endif /* FXAS21002_H_ */\n"
              },
              "objects": {
                "fxas21002.c": "#include \"fxas21002.h\"\n\ntypedef struct {\n    ATMO_FXAS21002_Config_t config;\n    bool configured;\n} ATMO_FXAS21002_Priv_Config;\n\nstatic ATMO_FXAS21002_Priv_Config _ATMO_FXAS21002_config = {0};\n\nstatic bool _ATMO_FXAS21002_Enabled = true;\n\nstatic ATMO_I2C_Status_t ATMO_FXAS21002_ReadReg(uint8_t regId, uint8_t *data, uint8_t len)\n{\n\treturn ATMO_I2C_MasterRead(_ATMO_FXAS21002_config.config.i2cDriverInstance, _ATMO_FXAS21002_config.config.address, &regId, 1, data, len, 1000);\n}\n\nstatic ATMO_I2C_Status_t ATMO_FXAS21002_WriteReg(uint8_t regId, uint8_t data, uint8_t mask)\n{\n\tuint8_t writeByte = data;\n\n\tif(mask)\n\t{\n\t\tif(ATMO_FXAS21002_ReadReg(regId, &writeByte, 1) != ATMO_I2C_Status_Success)\n\t\t{\n\t\t\treturn ATMO_I2C_Status_Fail;\n\t\t}\n\n\t\t// Zero out mask\n\t\twriteByte = (writeByte & (~mask)) | data;\n\t}\n\n\treturn ATMO_I2C_MasterWrite(_ATMO_FXAS21002_config.config.i2cDriverInstance, _ATMO_FXAS21002_config.config.address, &regId, 1, &writeByte, 1, 1000);\n}\n\n\nATMO_FXAS21002_Status_t ATMO_FXAS21002_Init(ATMO_FXAS21002_Config_t *config)\n{\n    // Did the user supply a configuration?\n    if( config )\n    {\n        ATMO_FXAS21002_SetConfiguration(config);\n    }\n    else\n    {\n    \t_ATMO_FXAS21002_config.configured = false;\n    }\n\n\treturn ATMO_FXAS21002_Status_Success;\n}\n\nATMO_FXAS21002_Status_t ATMO_FXAS21002_SetEnabled(bool enabled)\n{\n\t_ATMO_FXAS21002_Enabled = enabled;\n\treturn ATMO_FXAS21002_Status_Success;\n}\n\nATMO_FXAS21002_Status_t ATMO_FXAS21002_GetEnabled(bool *enabled)\n{\n\t*enabled = _ATMO_FXAS21002_Enabled;\n\treturn ATMO_FXAS21002_Status_Success;\n}\n\nATMO_FXAS21002_Status_t ATMO_FXAS21002_SetConfiguration(const ATMO_FXAS21002_Config_t *config)\n{\n    if( config == NULL || !_ATMO_FXAS21002_Enabled)\n    {\n        return ATMO_FXAS21002_Status_Fail;\n    }\n\n    memcpy( &_ATMO_FXAS21002_config.config, config, sizeof(ATMO_FXAS21002_Config_t) );\n    _ATMO_FXAS21002_config.configured = true;\n\n    // Check the whoami register\n    uint8_t whoAmI = 0;\n\n    if(ATMO_FXAS21002_ReadReg(FXAS21002_WHO_AM_I, &whoAmI, 1) != ATMO_I2C_Status_Success || whoAmI != FXAS21002_WHO_AM_I_WHOAMI_PROD_VALUE)\n    {\n    \treturn ATMO_FXAS21002_Status_Fail;\n    }\n\n    // Put into standby mode\n    if(ATMO_FXAS21002_WriteReg(FXAS21002_CTRL_REG1, FXAS21002_CTRL_REG1_MODE_STANDBY, FXAS21002_CTRL_REG1_MODE_MASK) != ATMO_I2C_Status_Success)\n    {\n    \treturn ATMO_FXAS21002_Status_Fail;\n    }\n\n\n    // Set to 12.5hz sampling rate\n    if(ATMO_FXAS21002_WriteReg(FXAS21002_CTRL_REG1, _ATMO_FXAS21002_config.config.samplingRate, FXAS21002_CTRL_REG1_DR_MASK) != ATMO_I2C_Status_Success)\n    {\n    \treturn ATMO_FXAS21002_Status_Fail;\n    }\n\n    // Put into active mode\n    if(ATMO_FXAS21002_WriteReg(FXAS21002_CTRL_REG1, FXAS21002_CTRL_REG1_MODE_ACTIVE, FXAS21002_CTRL_REG1_MODE_MASK) != ATMO_I2C_Status_Success)\n    {\n    \treturn ATMO_FXAS21002_Status_Fail;\n    }\n\n\n    return ATMO_FXAS21002_Status_Success;\n}\n\nATMO_FXAS21002_Status_t ATMO_FXAS21002_GetConfiguration(ATMO_FXAS21002_Config_t *config)\n{\n    if( config == NULL || !_ATMO_FXAS21002_config.configured )\n    {\n        return ATMO_FXAS21002_Status_Fail;\n    }\n\n    memcpy(config, &_ATMO_FXAS21002_config.config, sizeof(ATMO_FXAS21002_Config_t));\n\n    return ATMO_FXAS21002_Status_Success;\n}\n\nATMO_FXAS21002_Status_t ATMO_FXAS21002_GetSensorData(ATMO_FXAS21002_SensorData_t *data)\n{\n    if( !_ATMO_FXAS21002_config.configured || !_ATMO_FXAS21002_Enabled)\n    {\n        return ATMO_FXAS21002_Status_Fail;\n    }\n\n\n\tuint8_t rawData[6] = {0};\n\n\tif(ATMO_FXAS21002_ReadReg(FXAS21002_OUT_X_MSB, rawData, 6) != ATMO_I2C_Status_Success)\n\t{\n\t\treturn ATMO_FXAS21002_Status_Fail;\n\t}\n\n\t// Get scale for conversion\n\tuint8_t fs = 0;\n\tif(ATMO_FXAS21002_ReadReg(FXAS21002_CTRL_REG0, &fs, 1) != ATMO_I2C_Status_Success)\n\t{\n\t\treturn ATMO_FXAS21002_Status_Fail;\n\t}\n\n\tfs &= FXAS21002_CTRL_REG0_FS_MASK;\n\n\t// Multiplier for dps/LSB\n\tfloat multiplier = 0.0;\n\n\tswitch(fs)\n\t{\n\t\tcase FXAS21002_CTRL_REG0_FS_DPS2000:\n\t\t{\n\t\t\tmultiplier = .0625;\n\t\t\tbreak;\n\t\t}\n\t\tcase FXAS21002_CTRL_REG0_FS_DPS1000:\n\t\t{\n\t\t\tmultiplier = .03125;\n\t\t\tbreak;\n\t\t}\n\t\tcase FXAS21002_CTRL_REG0_FS_DPS500:\n\t\t{\n\t\t\tmultiplier = .015625;\n\t\t\tbreak;\n\t\t}\n\t\tcase FXAS21002_CTRL_REG0_FS_DPS250:\n\t\t{\n\t\t\tmultiplier = .0078125;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tint16_t dataCounts[3] = {0};\n\tdataCounts[0] = ((int16_t)rawData[0] << 8) | rawData[1];\n\tdataCounts[1] = ((int16_t)rawData[2] << 8) | rawData[3];\n\tdataCounts[2] = ((int16_t)rawData[4] << 8) | rawData[5];\n\n\tdata->X = multiplier * dataCounts[0];\n\tdata->Y = multiplier * dataCounts[1];\n\tdata->Z = multiplier * dataCounts[2];\n\n\treturn ATMO_FXAS21002_Status_Success;\n}\n"
              }
            }
          },
          "md5": "f4e064a04fca447d60335506ba31504b"
        },
        "mpl3115": {
          "libName": "mpl3115",
          "description": "NXP MPL3115 Pressure and Altitude Sensor",
          "type": "Pressure + Altitute Sensor",
          "icon": "",
          "manufacturer": "NXP Semiconductors",
          "image": "",
          "version": "",
          "eelVersion": "3",
          "shoppingCartLinks": {
            "digikey": {
              "links": {
                "info": "https://www.digikey.com/product-detail/en/adafruit-industries-llc/1893/1528-1034-ND/4990783"
              },
              "cartData": {
                "part": "1528-1034-ND",
                "partid": "4990783",
                "source": "dkstudio",
                "qty": "1"
              }
            }
          },
          "requires": [
            "embedded",
            "i2c",
            "fpmath"
          ],
          "elements": [
            {
              "name": "MPL3115Pressure",
              "type": "EmbeddedMPL3115",
              "icon": "EmbeddedPressure.svg",
              "defaultAbility": "readPressure",
              "defaultTrigger": "pressureRead",
              "hidden": false,
              "helpPageHref": "https://developer.atmosphereiot.com/documents/elements/nxpmpl3115element.html",
              "abilities": [
                {
                  "name": "setup",
                  "hidden": true,
                  "code": "\tATMO_MPL3115_Config_t config;\n\tconfig.address = ATMO_PROPERTY(undefined, i2cAddress);\n\tconfig.i2cDriverInstance = ATMO_PROPERTY(undefined, i2cInstance);\n\tconfig.MPLsettings.mode = MPL_MODE_PRESSURE;\n\tconfig.MPLsettings.oversample = MPL_OS_0;\t\t\t// oversampling = 1\n\tconfig.MPLsettings.autoAcquisitionTime = MPL_ST_0;\t// Auto acquisition time = 1s\n\tconfig.MPLsettings.pressureOffset = ATMO_PROPERTY(undefined, pressureOffset);\t// Offset pressure correction = 4*-128 = -512Pa (8 bits signed integer)\n\tconfig.MPLsettings.altitudeOffset = ATMO_PROPERTY(undefined, altitudeOffset);\t// Offset altitude correction = 128m (signed 8 bits integer)\n\tconfig.MPLsettings.tempOffset = ATMO_PROPERTY(undefined, tempOffset);\t\t\t// Offset temperature correction -8°C (0.0625°C/LSB)\n\tconfig.MPLsettings.fifoMode = FIFO_DISABLED;\t\t// FIFO mode disabled\n\tconfig.MPLsettings.fifoWatermark = 5;\t\t\t\t// 6 bits to set the number of FIFO samples required to trigger a watermark interrupt.\n\tconfig.MPLsettings.fifoINTpin = FIFO_INT1;\t\t\t// set pin INT1 as output for FIFO interrupt\n\n\treturn ( ATMO_MPL3115_Init(&config) == ATMO_MPL3115_Status_Success ) ? ATMO_Status_Success : ATMO_Status_Fail;\n"
                },
                {
                  "name": "setEnabled",
                  "triggers": [],
                  "code": "ATMO_MPL3115_SetEnabled(true);\nreturn ATMO_Status_Success;"
                },
                {
                  "name": "setDisabled",
                  "triggers": [],
                  "code": "ATMO_MPL3115_SetEnabled(false);\nreturn ATMO_Status_Success;"
                },
                {
                  "name": "setEnabledDisabled",
                  "triggers": [],
                  "code": "bool enabled = false;\nATMO_GetBool(in, &enabled);\nATMO_MPL3115_SetEnabled(enabled);\nreturn ATMO_Status_Success;"
                },
                {
                  "name": "readAltitude",
                  "triggers": [
                    "altitudeRead"
                  ],
                  "code": "    uint32_t altitudeMeters;\n    if(ATMO_MPL3115_GetAltitude(&altitudeMeters) != ATMO_MPL3115_Status_Success)\n    {\n        ATMO_CreateValueVoid(out);\n        return ATMO_Status_Fail;\n    }\n    ATMO_CreateValueInt(out, (int)altitudeMeters);\n    return ATMO_Status_Success;"
                },
                {
                  "name": "readPressure",
                  "triggers": [
                    "pressureRead"
                  ],
                  "code": "    uint32_t pressurePa;\n    if(ATMO_MPL3115_GetPressure(&pressurePa) != ATMO_MPL3115_Status_Success)\n    {\n        ATMO_CreateValueVoid(out);\n        return ATMO_Status_Fail;\n    }\n    ATMO_CreateValueInt(out, (int)pressurePa);\n    return ATMO_Status_Success;"
                },
                {
                  "name": "readPressureKpa",
                  "triggers": [
                    "pressureReadKpa"
                  ],
                  "code": "    uint32_t pressurePa;\n    if(ATMO_MPL3115_GetPressure(&pressurePa) != ATMO_MPL3115_Status_Success)\n    {\n        ATMO_CreateValueVoid(out);\n        return ATMO_Status_Fail;\n    }\n    ATMO_CreateValueInt(out, (int)(pressurePa/1000));\n    return ATMO_Status_Success;"
                }
              ],
              "properties": [
                {
                  "name": "i2cInstance",
                  "input": "driverInstance",
                  "driverType": "i2c"
                },
                {
                  "name": "i2cAddress",
                  "input": "number",
                  "value": "0x60"
                },
                {
                  "name": "pressureOffset",
                  "input": "number",
                  "value": "0"
                },
                {
                  "name": "altitudeOffset",
                  "input": "number",
                  "value": "0"
                },
                {
                  "name": "tempOffset",
                  "input": "number",
                  "value": "0"
                }
              ],
              "triggers": [],
              "variables": [],
              "language": {
                "en-US": {
                  "EmbeddedMPL3115": "NXP MPL3115",
                  "i2cInstance": "I2C Driver Instance",
                  "i2cAddress": "I2C Address",
                  "setEnabled": "Set Enabled",
                  "setDisabled": "Set Disabled",
                  "setEnabledDisabled": "Set Enabled State",
                  "readAltitude": "Read Altitude",
                  "readPressure": "Read Pressure",
                  "readPressureKpa": "Read Pressure (kPa)",
                  "pressureRead": "Pressure Read",
                  "altitudeRead": "Altitude Read",
                  "pressureReadKpa": "Pressure Read (kPa)",
                  "pressureOffset": "Pressure Offset",
                  "altitudeOffset": "Altitude Offset",
                  "tempOffset": "Temperature Offset"
                }
              }
            }
          ],
          "files": {
            "common": {
              "headers": {
                "mpl3115.h": "#ifndef __ATMO_MPL3115_H_\n#define __ATMO_MPL3115_H_\n\n#include \"mpl3115_internal.h\"\n#include \"../i2c/i2c.h\"\n\ntypedef enum {\n    ATMO_MPL3115_Status_Success              = 0x00u,  // Common - Operation was successful\n    ATMO_MPL3115_Status_Fail                 = 0x01u,  // Common - Operation failed\n    ATMO_MPL3115_Status_Initialized          = 0x02u,  // Common - Peripheral already initialized\n    ATMO_MPL3115_Status_Invalid              = 0x03u,  // Common - Invalid operation or result\n    ATMO_MPL3115_Status_NotSupported         = 0x04u,  // Common - Feature not supported by platform\n} ATMO_MPL3115_Status_t;\n\ntypedef struct {\n    uint16_t address;\n    ATMO_DriverInstanceHandle_t i2cDriverInstance;\n\tsettingsMPL_t MPLsettings;\n} ATMO_MPL3115_Config_t;\n\n\n/**\n * Initialize MPL3115 Driver\n *\n * @param[in] config - Device configuration (optional)\n */\nATMO_MPL3115_Status_t ATMO_MPL3115_Init(ATMO_MPL3115_Config_t *config);\n\n/**\n * Enable/Disable MPL3115 Driver\n *\n * @param[in] enabled\n */\nATMO_MPL3115_Status_t ATMO_MPL3115_SetEnabled(bool enabled);\n\n/**\n * Get enabled/disabled status of MPL3115 driver\n *\n * @param[out] enabled\n */\nATMO_MPL3115_Status_t ATMO_MPL3115_GetEnabled(bool *enabled);\n\n/**\n * Set basic device configuration\n *\n * @param[in] config\n */\nATMO_MPL3115_Status_t ATMO_MPL3115_SetConfiguration(const ATMO_MPL3115_Config_t *config);\n\n/**\n * Get device configuration\n * \n * @param[out] config\n */\nATMO_MPL3115_Status_t ATMO_MPL3115_GetConfiguration(ATMO_MPL3115_Config_t *config);\n\n/**\n * Get Barometeric Pressure in Pascals\n * \n * @param[out] pressurePascals\n */\nATMO_MPL3115_Status_t ATMO_MPL3115_GetPressure(uint32_t *pressurePascals);\n\n/**\n * Get Temperature in degrees celsius\n * \n * @param[out] temperature\n */\nATMO_MPL3115_Status_t ATMO_MPL3115_GetTemperature(int32_t *temperatureCelsius);\n\n/**\n * Get Altitude in meters\n * \n * @param[out] altitudeMeters\n */\nATMO_MPL3115_Status_t ATMO_MPL3115_GetAltitude(uint32_t *altitudeMeters);\n\n#endif\n",
                "mpl3115_internal.h": "/*\n * Copyright (c) 2018 NXP\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *\n * o Redistributions of source code must retain the above copyright notice, this list\n *   of conditions and the following disclaimer.\n *\n * o Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n *\n * o Neither the name of the copyright holder nor the names of its\n *   contributors may be used to endorse or promote products derived from this\n *   software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*!\n * @file\n * This is the header file for the atmospheric pressure sensor MPL3115 driver.\n */\n\n#ifndef MPL3115_H_\n#define MPL3115_H_\n\n#include \"../app_src/atmosphere_platform.h\"\n\n/*!\n * @addtogroup mpl3115 MPL3115 atmospheric pressure sensor\n * This module provides the API to operate the MPL3115 atmospheric pressure sensor through an I2C interface.\n *\n * The MPL3115A2 is a compact, piezoresistive, absolute pressure sensor with an I2C\n * digital interface. MPL3115A2 has a wide operating range of 20 kPa to 110 kPa, a range\n * that covers all surface elevations on earth. The MEMS is temperature compensated\n * utilizing an on-chip temperature sensor. The pressure and temperature data is fed into\n * a high resolution ADC to provide fully compensated and digitized outputs for pressure\n * in Pascals and temperature in °C.\n *\n * Usage\n *-----------------------------------------------------------------------------------------------------------\n *\n * Initialization:\n * @code\n *\n *  #include \"mpl3115.h\"\n *\n *  mpl3115_IoFunc_t MPL3115_sensor;\n *  MPL3115_sensor.I2C_Read = App_I2C1_Read;\n *  MPL3115_sensor.I2C_Write = App_I2C1_Write;\n *  MPL3115_sensor.WaitMsec = App_WaitMsec;\n *\n *  MPL3115_Init_Driver(&MPL3115_sensor);\n *  MPL3115_Init_Hw();\n * @endcode\n *\n * Basic Operation:\n * @code\n *\n *  int32_t data;\n *\n *  if (MPL_ReadRawData (MPL_MODE_PRESSURE, &data) == 0)\n *  {\n *        data /= 400; // in HPa (LSB = 0.25Pa)\n *  }\n *\n * @endcode\n *\n * @{\n */\n\n/*! @brief Structure of external functions or values. */\ntypedef struct _mpl3115_IoFunc_t\n{\n    uint8_t   (*I2C_Read)(uint8_t *writeBuf, uint32_t writeSize, uint8_t *readBuf, uint32_t readSize);     /*!< Function pointer to I2C Read function. */\n    uint8_t   (*I2C_Write)(uint8_t *writeBuf, uint32_t writeSize);                                         /*!< Function pointer to I2C Write function. */\n    void      (*WaitMsec)(uint32_t millisec);                                                                                   /*!< Function pointer to waitMsec function  */\n} mpl3115_IoFunc_t, *pmpl3115_IoFunc_t;\n\ntypedef int16_t mE_t;\n\n/*! @brief Status return codes. */\ntypedef enum\n{\n    MPL_SUCCESS,            /*!< Function ran successfully. */\n    MPL_ERROR,              /*!< Error in running function. */\n    MPL_PROTOCOL_ERROR,     /*!< Protocol error has occurred. */\n    MPL_INIT_ERROR,         /*!< Initialization error has occurred. */\n    MPL_TIMEOUT,            /*!< MPL function has timed out */\n    MPL_NOT_SUPPORTED       /*!< Not Supported */\n} mpl_status_t;\n\n/*! @brief Oversampling factor */\ntypedef enum {\n    MPL_OS_0,               /*!< Oversample Ratio = 1    */\n    MPL_OS_1,               /*!< Oversample Ratio = 2    */\n    MPL_OS_2,               /*!< Oversample Ratio = 4    */\n    MPL_OS_3,               /*!< Oversample Ratio = 8    */\n    MPL_OS_4,               /*!< Oversample Ratio = 16   */\n    MPL_OS_5,               /*!< Oversample Ratio = 32   */\n    MPL_OS_6,               /*!< Oversample Ratio = 64   */\n    MPL_OS_7                /*!< Oversample Ratio = 128  */\n} overSampleMPL_t;\n\n/*! @brief Auto acquisition time step : power(2; MPL_ST_X) */\ntypedef enum {\n    MPL_ST_0,               /*!< Auto acquistion time step = 1 second       */\n    MPL_ST_1,               /*!< Auto acquistion time step = 2 seconds      */\n    MPL_ST_2,               /*!< Auto acquistion time step = 4 seconds      */\n    MPL_ST_3,               /*!< Auto acquistion time step = 8 seconds      */\n    MPL_ST_4,               /*!< Auto acquistion time step = 16 seconds     */\n    MPL_ST_5,               /*!< Auto acquistion time step = 32 seconds     */\n    MPL_ST_6,               /*!< Auto acquistion time step = 64 seconds     */\n    MPL_ST_7,               /*!< Auto acquistion time step = 128 seconds    */\n    MPL_ST_8,               /*!< Auto acquistion time step = 256 seconds    */\n    MPL_ST_9,               /*!< Auto acquistion time step = 512 seconds    */\n    MPL_ST_10,              /*!< Auto acquistion time step = 1024 seconds   */\n    MPL_ST_11,              /*!< Auto acquistion time step = 2048 seconds   */\n    MPL_ST_12,              /*!< Auto acquistion time step = 4096 seconds   */\n    MPL_ST_13,              /*!< Auto acquistion time step = 8192 seconds   */\n    MPL_ST_14,              /*!< Auto acquistion time step = 16384 seconds  */\n    MPL_ST_15               /*!< Auto acquistion time step = 32768 seconds  */\n} autoAcquisitionTime_t;\n\n/*! @brief Device Mode */\ntypedef enum {\n    MPL_MODE_PRESSURE    = 0,   /*!< Device is in barometer mode. It reports an absolute pressure.  */\n    MPL_MODE_ALTITUDE    = 1,   /*!< Device is in altimeter mode. The pressure data is converted to equivalent altitude based on US standard atmosphere */\n    MPL_MODE_TEMPERATURE = 2,   /*!< This mode provides temperature from a high resolution temperature sensor. */\n    MPL_MODE_CURRENT     = 0xFF\n} modeMPL_t;\n\n/*! @brief Fifo Mode */\ntypedef enum {\n    FIFO_DISABLED,        /*!< FIFO is disabled (reset value) */\n    FIFO_CIRCULAR,        /*!< FIFO contains the most recent samples when overflowed (circular buffer). Oldest sample is discarded to be replaced by new sample*/\n    FIFO_STOP_OVERFLOW    /*!< FIFO stops accepting new samples when overflowed */\n} modeFIFO_t;\n\n/*! @brief Pin to route FIFO interrupt */\ntypedef enum {\n    FIFO_INT1    = 1,   /*!< FIFO Interrupt routed to INT1 pin */\n    FIFO_INT2    = 0    /*!< FIFO Interrupt routed to INT2 pin */\n} pinINT_t;\n\n/* structure that contains MPL settings */\ntypedef struct {\n    modeMPL_t                 mode;                    /*!< device mode, altimeter or barometer */\n    overSampleMPL_t           oversample;              /*!< oversampling ratio */\n    autoAcquisitionTime_t     autoAcquisitionTime;     /*!< Auto acquisition time step */\n    int8_t                    pressureOffset;          /*!< Offset pressure correction (signed: 4 Pa/LSB) */\n    int8_t                    altitudeOffset;          /*!< Offset altitude correction (signed: 1m/LSB) */\n    int8_t                    tempOffset;              /*!< Offset temperature correction -8°C (signed: 0.0625°C/LSB) */\n    modeFIFO_t                fifoMode;                /*!< FIFO mode */\n    uint8_t                   fifoWatermark;           /*!< These (6) bits set the number of FIFO samples required to trigger a watermark interrupt. */\n    pinINT_t                  fifoINTpin;              /*!< Pin to route FIFO interrupt */\n} settingsMPL_t;\n\n/* MPL3115 I2C slave address */\n#define MPL3115_I2C_SLAVE_ADDRESS                (uint8_t)0x60\n\n/*****************************************************************************\n * Public functions\n ****************************************************************************/\n\n/*!\n * @brief Initialize MPL3115 driver.\n * @note  Wrap the low level functions (I2C write, I2C read, WaitMsec).\n * @param pIoFunc  Pointer to a structure with external functions\n */\nvoid MPL3115_Init_Driver(mpl3115_IoFunc_t* pIoFunc);\n\n/*!\n * @brief De-initialize MPL3115 driver.\n *\n */\nvoid MPL3115_Deinit_Driver();\n\n/*!\n * @brief Initialize MPL3115 hardware.\n * @return Status value (0 for success)\n */\nmpl_status_t MPL3115_Init_Hw(settingsMPL_t *MPLsettings);\n\n/*!\n * @brief Soft reset.\n * @note\n * The reset mechanism can be enabled in standby and active mode.\\n\n * When this bit is enabled, the reset mechanism resets all functional block\n * registers and loads the respective internal registers with default values\n * If the system was already in standby mode, the reboot process will\\n\n * immediately begin; else if the system was in active mode, the boot mechanism\n * will automatically transition the system from active mode to standby mode,\n * and only then can the reboot process begin.\n *\n * @return Status value (0 for success)\n */\nmpl_status_t MPL_SoftReset();\n\n/*!\n * @brief Toggle the OST bit.\n * @note Clears then sets the OST bit which causes the sensor to immediately\n * take another reading, necessary to sample faster than 1Hz.\n *\n * @return Status value (0 for success)\n */\nmpl_status_t MPL_ToggleOneShot();\n\n/*!\n * @brief Read the chip ID.\n *\n * @param sensorID Chip ID value\n * @return Status value (0 for success)\n */\nmpl_status_t MPL_GetID(uint8_t* sensorID);\n\n/*!\n * @brief Set the device mode (barometer or altimeter).\n *\n * @param mode 1 - barometer\n *             0 - altimeter\n * @return Status value (0 for success)\n */\nmpl_status_t MPL_SetMode (modeMPL_t mode);\n\n/*!\n * @brief Put the sensor in stand-by mode.\n * @note It is needed to modify major control registers.\n *\n * @return Status value (0 for success)\n */\nmpl_status_t MPL_GotoStandby ();\n\n/*!\n * @brief Put the sensor in active mode.\n *\n * @return Status value (0 for success)\n */\nmpl_status_t MPL_SetActive();\n\n/*!\n * @brief Set the over-sample rate.\n * @note\n * Datasheet calls for 128, but you can set it from 1 to 128 samples.\n * The higher the oversample rate, the greater the time between data samples.\n *\n * @param sampleRate Over-sample rate value\n * @return Status value (0 for success)\n */\nmpl_status_t MPL_SetOversampleRate (uint8_t sampleRate);\n\n/*!\n * @brief Set the auto-acquisition time step.\n * @note\n * Reset value = 0.\\n\n * Step is power(2; sampleTime).\n *\n * @param sampleTime Sample time value\n * @return Status value (0 for success)\n */\nmpl_status_t MPL_SetAutoAcquisitionTime (uint8_t sampleTime);\n\n/*!\n * @brief Enable pressure and temperature measurement event flags.\n * @note This is recommended in datasheet during setup.\n *\n * @return Status value (0 for success)\n */\nmpl_status_t MPL_EnableEventFlags();\n\n/*!\n * @brief Set the offset pressure correction.\n * @note\n * Pressure user accessible offset trim value number.\\n\n * The user offset registers may be adjusted to enhance accuracy and optimize\n * the system performance.\\n\n * Range is from −512 to +508 Pa, 4 Pa/LSB.\n *\n * @param pressOffset Pressure offset correction value.\n * @return Status value (0 for success)\n */\nmpl_status_t MPL_SetOffsetPressure (int8_t pressOffset);\n\n/*!\n * @brief Set the offset altitude correction.\n * @note\n * Altitude user accessible offset trim value number.\\n\n * The user offset register provides user adjustment to the vertical height of\n * the altitude output.\\n\n * The range of values are from −128 to +127 meters.\n *\n * @param altitudeOffset Altitude offset correction value.\n * @return Status value (0 for success)\n */\nmpl_status_t MPL_SetOffsetAltitude (int8_t altitudeOffset);\n\n/*!\n * @brief Set the offset temperature correction.\n * @note\n * Temperature user accessible offset trim value number.\\n\n * The range of values is from −8 to +7.9375 °C, 0.0625 °C/LSB.\n *\n * @param temperatureOffset Temperature offset correction value.\n * @return Status value (0 for success)\n */\nmpl_status_t MPL_SetOffsetTemperature (int8_t temperatureOffset);\n\n/*!\n * @brief Set the FIFO mode\n * @note\n * It can be configured in either circular buffer or in overflow mode.\\n\n * In circular buffer mode, a watermark can be set to trigger a flag event.\n * Exceeding the watermark, count does not stop the FIFO from accepting new\n * data, the oldest data is overwritten.\n *\n * @param fMode FIFO mode\n * @param fWmrk Watermark\n * @return Status value (0 for success)\n */\nmpl_status_t MPL_SetFifoMode (modeFIFO_t fMode, uint8_t fWmrk);\n\n/*!\n * @brief Setup the FIFO interrupt and route it to pin INT1 or INT2\n *\n * @param pinINT Interrupt pin selection (INT1 or INT2)\n * @return Status value (0 for success)\n */\nmpl_status_t MPL_SetFifoInterrupt (pinINT_t pinINT);\n\n/*!\n * @brief Disable the FIFO interrupt\n *\n * @return Status value (0 for success)\n */\nmpl_status_t MPL_DisableFifoInterrupt();\n\n/*!\n * @brief Read the FIFO status register.\n *\n * @param fifoStatus Pointer to FIFO status\n * @return Status value (0 for success)\n */\nmpl_status_t MPL_GetFifoStatus(uint8_t* fifoStatus);\n\n/*!\n * @brief Read sensor raw data\n *\n * @param  mode Sensor mode (pressure, altitude...)\n * @param  sensorData Pointer to the sensor data\n * @return Status value (0 for success)\n */\nmpl_status_t MPL_ReadRawData (modeMPL_t mode, int32_t* sensorData);\n\n/*!\n * @brief Read all the chip registers\n *\n * @param  sensorReg Pointer to the register dump\n * @return Status value (0 for success)\n */\nmpl_status_t MPL_Dump(uint8_t* sensorReg);\n\n/*! @}*/\n\n#endif /* MPL3115_H_ */\n"
              },
              "objects": {
                "mpl3115.c": "#include \"mpl3115.h\"\n#include \"../app_src/atmosphere_platform.h\"\n\ntypedef struct {\n    ATMO_MPL3115_Config_t config;\n    bool configured;\n} ATMO_MPL3115_Priv_Config;\n\nstatic ATMO_MPL3115_Priv_Config _ATMO_MPL3115_config;\n\nstatic ATMO_I2C_Peripheral_t _ATMO_MPL3115_i2cConfig = {\n    .operatingMode = ATMO_I2C_OperatingMode_Master,\n    .baudRate = ATMO_I2C_BaudRate_Standard_Mode\n};\n\nstatic bool mpl3115Enabled = true;\n\nstatic uint8_t ATMO_I2CRead_Simple(uint8_t *writeBuf, uint32_t writeSize, uint8_t *readBuf, uint32_t readSize)\n{\n\tATMO_I2C_Status_t status = ATMO_I2C_MasterRead(_ATMO_MPL3115_config.config.i2cDriverInstance, _ATMO_MPL3115_config.config.address, writeBuf, writeSize, readBuf, readSize, 1000);\n\treturn (status == ATMO_I2C_Status_Success) ? MPL_SUCCESS : MPL_ERROR;\n}\n\nstatic uint8_t ATMO_MPL3115_I2CWrite_Simple(uint8_t *writeBuf, uint32_t writeSize)\n{\n\tATMO_I2C_Status_t status = ATMO_I2C_MasterWrite(_ATMO_MPL3115_config.config.i2cDriverInstance, _ATMO_MPL3115_config.config.address, NULL, 0, writeBuf, writeSize, 1000);\n\treturn (status == ATMO_I2C_Status_Success) ? MPL_SUCCESS : MPL_ERROR;\n}\nATMO_MPL3115_Status_t ATMO_MPL3115_Init(ATMO_MPL3115_Config_t *config)\n{\n    // Did the user supply a configuration?\n    if( config )\n    {\n        ATMO_MPL3115_SetConfiguration(config);\n    }\n    else\n    {\n    \t_ATMO_MPL3115_config.configured = false;\n    }\n\n    mpl3115_IoFunc_t io;\n    io.I2C_Read = ATMO_I2CRead_Simple;\n    io.I2C_Write = ATMO_MPL3115_I2CWrite_Simple;\n    io.WaitMsec = ATMO_PLATFORM_DelayMilliseconds;\n    MPL3115_Init_Driver(&io);\n    MPL3115_Init_Hw(&config->MPLsettings);\n\n    return ATMO_MPL3115_Status_Success;\n}\n\nATMO_MPL3115_Status_t ATMO_MPL3115_SetEnabled(bool enabled)\n{\n    mpl3115Enabled = enabled;\n    return ATMO_MPL3115_Status_Success;\n}\n\nATMO_MPL3115_Status_t ATMO_MPL3115_GetEnabled(bool *enabled)\n{\n    *enabled = mpl3115Enabled;\n    return ATMO_MPL3115_Status_Success;\n}\n\nATMO_MPL3115_Status_t ATMO_MPL3115_SetConfiguration(const ATMO_MPL3115_Config_t *config)\n{\n    if( config == NULL || !mpl3115Enabled)\n    {\n        return ATMO_MPL3115_Status_Fail;\n    }\n\n    if( ATMO_I2C_SetConfiguration(config->i2cDriverInstance, &_ATMO_MPL3115_i2cConfig) != ATMO_I2C_Status_Success )\n    {\n        return ATMO_MPL3115_Status_Fail;\n    }\n\n    memcpy( &_ATMO_MPL3115_config.config, config, sizeof(ATMO_MPL3115_Config_t) );\n    _ATMO_MPL3115_config.configured = true;\n\n    return ATMO_MPL3115_Status_Success;\n}\n\nATMO_MPL3115_Status_t ATMO_MPL3115_GetConfiguration(ATMO_MPL3115_Config_t *config)\n{\n    if( config == NULL || !_ATMO_MPL3115_config.configured )\n    {\n        return ATMO_MPL3115_Status_Fail;\n    }\n\n    memcpy(config, &_ATMO_MPL3115_config.config, sizeof(ATMO_MPL3115_Config_t));\n\n    return ATMO_MPL3115_Status_Success;\n}\n\nATMO_MPL3115_Status_t ATMO_MPL3115_GetPressure(uint32_t *pressurePascals)\n{\n    if(!mpl3115Enabled)\n    {\n        return ATMO_MPL3115_Status_Fail;\n    }\n\n    if( MPL_ToggleOneShot() != MPL_SUCCESS )\n    {\n        return ATMO_MPL3115_Status_Fail;\n    }\n\n    if( MPL_ReadRawData(MPL_MODE_PRESSURE, (int32_t *)pressurePascals) != MPL_SUCCESS )\n    {\n        return ATMO_MPL3115_Status_Fail;\n    }\n\n    *pressurePascals = (*pressurePascals) / 4;\n\n    return ATMO_MPL3115_Status_Success;\n        \n}\n\nATMO_MPL3115_Status_t ATMO_MPL3115_GetTemperature(int32_t *temperatureCelsius)\n{\n    if(!mpl3115Enabled)\n    {\n        return ATMO_MPL3115_Status_Fail;\n    }\n\n    if( MPL_ToggleOneShot() != MPL_SUCCESS )\n    {\n        return ATMO_MPL3115_Status_Fail;\n    }\n\n    if( MPL_ReadRawData(MPL_MODE_TEMPERATURE, (int32_t *)temperatureCelsius) != MPL_SUCCESS )\n    {\n        return ATMO_MPL3115_Status_Fail;\n    }\n\n    *temperatureCelsius = (*temperatureCelsius) / 16;\n\n    return ATMO_MPL3115_Status_Success;\n}\n\nATMO_MPL3115_Status_t ATMO_MPL3115_GetAltitude(uint32_t *altitudeMeters)\n{\n    if(!mpl3115Enabled)\n    {\n        return ATMO_MPL3115_Status_Fail;\n    }\n    \n    if( MPL_ToggleOneShot() != MPL_SUCCESS )\n    {\n        return ATMO_MPL3115_Status_Fail;\n    }\n\n    if( MPL_ReadRawData(MPL_MODE_PRESSURE, (int32_t *)altitudeMeters) != MPL_SUCCESS )\n    {\n        return ATMO_MPL3115_Status_Fail;\n    }\n\n    *altitudeMeters = (*altitudeMeters) / 16;\n\n    return ATMO_MPL3115_Status_Success; \n}\n\n\n\n\n",
                "mpl3115_internal.c": "/*\n * Copyright (c) 2018 NXP\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *\n * o Redistributions of source code must retain the above copyright notice, this list\n *   of conditions and the following disclaimer.\n *\n * o Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n *\n * o Neither the name of the copyright holder nor the names of its\n *   contributors may be used to endorse or promote products derived from this\n *   software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*!\n * @file\n * This is the source file for the atmospheric pressure sensor MPL3115 driver.\n */\n\n#include \"mpl3115_internal.h\"\n#include <string.h>\n#include <assert.h>\n\n/* unshifted 7-bit I2C address */\n#define MPL_I2C_ADDRESS  (0x60)\n\n#define REG_STATUS      (0x00)\n#define OUT_P_MSB       (0x01)\n#define OUT_P_CSB       (0x02)\n#define OUT_P_LSB       (0x03)\n#define OUT_T_MSB       (0x04)\n#define OUT_T_LSB       (0x05)\n#define DR_STATUS       (0x06)\n#define OUT_P_DELTA_MSB (0x07)\n#define OUT_P_DELTA_CSB (0x08)\n#define OUT_P_DELTA_LSB (0x09)\n#define OUT_T_DELTA_MSB (0x0A)\n#define OUT_T_DELTA_LSB (0x0B)\n#define WHO_AM_I        (0x0C)\n#define F_STATUS        (0x0D)\n#define F_DATA          (0x0E)\n#define F_SETUP         (0x0F)\n#define TIME_DLY        (0x10)\n#define SYSMOD          (0x11)\n#define INT_SOURCE      (0x12)\n#define PT_DATA_CFG     (0x13)\n#define BAR_IN_MSB      (0x14)\n#define BAR_IN_LSB      (0x15)\n#define P_TGT_MSB       (0x16)\n#define P_TGT_LSB       (0x17)\n#define T_TGT           (0x18)\n#define P_WND_MSB       (0x19)\n#define P_WND_LSB       (0x1A)\n#define T_WND           (0x1B)\n#define P_MIN_MSB       (0x1C)\n#define P_MIN_CSB       (0x1D)\n#define P_MIN_LSB       (0x1E)\n#define T_MIN_MSB       (0x1F)\n#define T_MIN_LSB       (0x20)\n#define P_MAX_MSB       (0x21)\n#define P_MAX_CSB       (0x22)\n#define P_MAX_LSB       (0x23)\n#define T_MAX_MSB       (0x24)\n#define T_MAX_LSB       (0x25)\n#define MPL_CTRL_REG1   (0x26)\n#define MPL_CTRL_REG2   (0x27)\n#define MPL_CTRL_REG3   (0x28)\n#define MPL_CTRL_REG4   (0x29)\n#define MPL_CTRL_REG5   (0x2A)\n#define OFF_P           (0x2B)\n#define OFF_T           (0x2C)\n#define OFF_H           (0x2D)\n\n// SHIFTS\n#define MPL_OS_SHIFT    (3)\n\n#define MPL_TDR_SHIFT   (1)\n#define MPL_PDR_SHIFT   (2)\n#define MPL_PTDR_SHIFT  (3)\n\n#define MPL_SBYB_SHIFT  (0)\n#define MPL_OST_SHIFT   (1)\n#define MPL_RST_SHIFT   (2)\n\n#define INT_EN_FIFO_SHIFT   (6)\n#define INT_CFG_FIFO_SHIFT  (6)\n\n// MASKS\n#define MPL_OS_MASK         (0x7 << MPL_OS_SHIFT)\n#define MPL_F_WMRKK_MASK    0xF\n\n/* MPL3115 CTRL_REG1 register */\n#define MPL_RST             (1 << 2)\n#define MPL_OST             (1 << 1)\n#define MPL_SBYB            (1 << 0)\n\n/***********************************************************************************/\n/* variables                                                                       */\n/***********************************************************************************/\nstatic bool initDriverDone = false;\nstatic bool initHwDone = false;\nstatic mpl3115_IoFunc_t sIoFunc;\n\n/* variable which denotes the sensor working as altimeter/barometer */\nstatic modeMPL_t selectedMode = MPL_MODE_PRESSURE;\n\nstatic uint16_t\nselectedSampleRate  = 0xA5A5,\nselectedDelay       = 0xA5A5;\n\n/* oversample factor */\nstatic uint16_t overSampleFactors[] = { 1,  2,  4,  8, 16,  32,  64, 128 };\n/* min. time between data samples in [ms] */\nstatic uint16_t overSampleDelays[]  = { 6, 10, 18, 34, 66, 130, 258, 512 };\n\nstatic settingsMPL_t settings;\n\n\n/*****************************************************************************\n * Static functions\n ****************************************************************************/\n\n/*\n * @brief Initialize the internal structures.\n *\n * @param mplSettings Pointer to the internal settings structure\n * @return Status value (0 for success)\n */\nmpl_status_t MPL_Init(const settingsMPL_t* mplSettings)\n{\n    mpl_status_t status = MPL_SUCCESS;\n\n    memcpy( (void*)&settings, (void*)mplSettings, sizeof(settings) );\n\n    // reset all registers to POR values\n    if (MPL_SoftReset()!=MPL_SUCCESS) status = MPL_INIT_ERROR;\n\n    // set the mode\n    else if (MPL_SetMode(settings.mode)!=MPL_SUCCESS) status =  MPL_INIT_ERROR;\n\n    // set over-sampling\n    else if (MPL_SetOversampleRate(settings.oversample)!=MPL_SUCCESS) status =  MPL_INIT_ERROR;\n\n    // enable the flags\n    else if (MPL_EnableEventFlags()!=MPL_SUCCESS) status = MPL_INIT_ERROR;\n\n    // set auto acquisition time step\n    else if (MPL_SetAutoAcquisitionTime(settings.autoAcquisitionTime)!=MPL_SUCCESS) status = MPL_INIT_ERROR;\n\n    // set offset pressure correction\n    else if (MPL_SetOffsetPressure(settings.pressureOffset)!=MPL_SUCCESS) status = MPL_INIT_ERROR;\n\n    // set offset altitude correction\n    else if (MPL_SetOffsetAltitude(settings.altitudeOffset)!=MPL_SUCCESS) status = MPL_INIT_ERROR;\n\n    // set offset temperature correction\n    else if (MPL_SetOffsetTemperature(settings.tempOffset)!=MPL_SUCCESS) status = MPL_INIT_ERROR;\n\n    // setup FIFO register mode and event count to trigger interrupt\n    else if (MPL_SetFifoMode(settings.fifoMode, settings.fifoWatermark)!=MPL_SUCCESS) status = MPL_INIT_ERROR;\n\n    // set FIFO interrupt and output pin (INT1 or INT2)\n    else if (MPL_SetFifoInterrupt(settings.fifoINTpin)!=MPL_SUCCESS) status = MPL_INIT_ERROR;\n\n    // goto active state\n    else if (MPL_SetActive()!=MPL_SUCCESS) status = MPL_INIT_ERROR;\n\n    return status;\n}\n\n\n/*****************************************************************************\n * Public functions\n ****************************************************************************/\n\nvoid MPL3115_Init_Driver(mpl3115_IoFunc_t* pIoFunc)\n{\n    assert((pIoFunc != NULL) &&\n            (pIoFunc->I2C_Read != NULL) &&\n            (pIoFunc->I2C_Write != NULL) &&\n            (pIoFunc->WaitMsec != NULL));\n    sIoFunc = *pIoFunc;\n    initDriverDone = true;\n}\n\nvoid MPL3115_Deinit_Driver()\n{\n    if (initHwDone)\n    {\n        /* Deinit HW */\n        MPL_GotoStandby(); /* skip error management */\n    }\n\n    /* Deinit driver */\n    initDriverDone = false;\n    initHwDone = false;\n}\n\nmpl_status_t MPL3115_Init_Hw(settingsMPL_t *MPLsettings)\n{\n    mpl_status_t status = MPL_SUCCESS;\n\n    if (!initDriverDone) return MPL_INIT_ERROR;\n\n    /* trick to allow calling internal public functions */\n    initHwDone = true;\n\n    /* initialize the sensor */\n    status = MPL_Init(MPLsettings);\n    if (status != MPL_SUCCESS) initHwDone = false;\n    return status;\n\n}\n\nmpl_status_t MPL_SoftReset()\n{\n    uint8_t wBuf[2] = {MPL_CTRL_REG1, MPL_RST};\n\n    if (!initHwDone) return MPL_INIT_ERROR;\n\n    // Reset all registers to POR value\n    if (sIoFunc.I2C_Write(wBuf, 2)!= MPL_SUCCESS) return MPL_ERROR;\n    else\n    {\n        // by the end of the boot process the RST bit should be de-asserted to 0 => need to wait before next operation\n        sIoFunc.WaitMsec(10); // 10ms delay\n        return MPL_SUCCESS;\n    }\n}\n\nmpl_status_t MPL_ToggleOneShot()\n{\n    uint8_t wBuf[2] = {MPL_CTRL_REG1};\n    uint8_t rBuf;\n\n    if (!initHwDone) return MPL_INIT_ERROR;\n\n    // read current settings\n    if (sIoFunc.I2C_Read(wBuf, 1, &rBuf, 1)!=MPL_SUCCESS) return MPL_ERROR;\n\n    // clear OST bit and write it back\n    wBuf[1] = rBuf & ~(MPL_OST);\n    if (sIoFunc.I2C_Write(wBuf, 2)!=MPL_SUCCESS) return MPL_ERROR;\n\n    // read again settings, just to be safe\n    if (sIoFunc.I2C_Read(wBuf, 1, &rBuf, 1)!=MPL_SUCCESS) return MPL_ERROR;\n\n    // set OST bit and write it back\n    wBuf[1] = rBuf | MPL_OST;\n    if (sIoFunc.I2C_Write(wBuf, 2)!=MPL_SUCCESS) return MPL_ERROR;\n\n    return MPL_SUCCESS;\n}\n\nmpl_status_t MPL_GetID(uint8_t* sensorID)\n{\n    uint8_t wBuf[1] = {WHO_AM_I};\n\n    if (!initHwDone) return MPL_INIT_ERROR;\n    assert(sensorID != NULL);\n\n    // read device ID = WHO_AM_I register (address 0x0C)\n    if (sIoFunc.I2C_Read(wBuf, 1, sensorID, 1)!=MPL_SUCCESS) return MPL_ERROR;\n    return MPL_SUCCESS;\n}\n\nmpl_status_t MPL_SetMode (modeMPL_t mode)\n{\n    uint8_t wBuf[2] = {MPL_CTRL_REG1};\n    uint8_t rBuf;\n\n    if (!initHwDone) return MPL_INIT_ERROR;\n\n    // read current settings\n    if (sIoFunc.I2C_Read(wBuf, 1, &rBuf, 1)!=MPL_SUCCESS) return MPL_ERROR;\n\n    // set/clear ALT bit\n    switch (mode)\n    {\n    case MPL_MODE_PRESSURE: {\n        wBuf[1] = rBuf & ~( 1 << 7 ); // Clear ALT bit\n        break;\n    }\n    case MPL_MODE_ALTITUDE: {\n        wBuf[1] = rBuf | ( 1 << 7 ); // Set ALT bit\n        break;\n    }\n    case MPL_MODE_TEMPERATURE: {\n        break;\n    }\n    default:\n        return MPL_NOT_SUPPORTED;\n    }\n\n    if (sIoFunc.I2C_Write(wBuf, 2)!=MPL_SUCCESS) return MPL_ERROR;\n    // update the static variable\n    selectedMode = mode;\n    return MPL_SUCCESS;\n}\n\nmpl_status_t MPL_GotoStandby()\n{\n    uint8_t wBuf[2] = {MPL_CTRL_REG1};\n    uint8_t rBuf;\n\n    if (!initHwDone) return MPL_INIT_ERROR;\n\n    // read current settings\n    if (sIoFunc.I2C_Read(wBuf, 1, &rBuf, 1)!=MPL_SUCCESS) return MPL_ERROR;\n\n    // clear SBYB bit for entering stand-by mode\n    wBuf[1] = rBuf & ~MPL_SBYB;\n    if (sIoFunc.I2C_Write(wBuf, 2)!=MPL_SUCCESS) return MPL_ERROR;\n\n    return MPL_SUCCESS;\n}\n\nmpl_status_t MPL_SetActive()\n{\n    uint8_t wBuf[2] = {MPL_CTRL_REG1};\n    uint8_t rBuf;\n\n    if (!initHwDone) return MPL_INIT_ERROR;\n\n    // read current settings\n    if (sIoFunc.I2C_Read(wBuf, 1, &rBuf, 1)!=MPL_SUCCESS) return MPL_ERROR;\n\n    // set SBYB bit for entering active mode\n    wBuf[1] = rBuf | MPL_SBYB;\n    if (sIoFunc.I2C_Write(wBuf, 2)!=MPL_SUCCESS) return MPL_ERROR;\n\n    return MPL_SUCCESS;\n}\n\nmpl_status_t MPL_SetOversampleRate (uint8_t sampleRate)\n{\n    uint8_t wBuf[2] = {MPL_CTRL_REG1};\n    uint8_t rBuf;\n\n    if (!initHwDone) return MPL_INIT_ERROR;\n\n    // rate cannot be larger than 7\n    if (sampleRate > 7) sampleRate = 7;\n\n    selectedSampleRate = overSampleFactors[sampleRate];\n    selectedDelay      = overSampleDelays[sampleRate];\n\n    // read current settings\n    if (sIoFunc.I2C_Read(wBuf, 1, &rBuf, 1)!=MPL_SUCCESS) return MPL_ERROR;\n\n    // clear out old OS bits\n    wBuf[1] = rBuf & ~MPL_OS_MASK;\n    // mask in new OS bits\n    wBuf[1] |= ( sampleRate << MPL_OS_SHIFT );\n\n    if (sIoFunc.I2C_Write(wBuf, 2)!=MPL_SUCCESS) return MPL_ERROR;\n\n    return MPL_SUCCESS;\n}\n\nmpl_status_t  MPL_SetAutoAcquisitionTime (uint8_t sampleTime)\n{\n    uint8_t wBuf[2] = {MPL_CTRL_REG2};\n    uint8_t rBuf;\n\n    if (!initHwDone) return MPL_INIT_ERROR;\n\n    // read current settings\n    if (sIoFunc.I2C_Read(wBuf, 1, &rBuf, 1)!=MPL_SUCCESS) return MPL_ERROR;\n\n    // mask in new ST bits. sampleTime cannot be larger than 15 Giving a range of 1s to 9.1 hours\n    wBuf[1] |= (sampleTime > 15) ? 15 : sampleTime;\n\n    if (sIoFunc.I2C_Write(wBuf, 2)!=MPL_SUCCESS) return MPL_ERROR;\n\n    return MPL_SUCCESS;\n}\n\nmpl_status_t MPL_EnableEventFlags()\n{\n    uint8_t wBuf[] = {PT_DATA_CFG, 0x07};\n\n    if (!initHwDone) return MPL_INIT_ERROR;\n\n    // write settings\n    if (sIoFunc.I2C_Write(wBuf, 2)!=MPL_SUCCESS) return MPL_ERROR;\n\n    return MPL_SUCCESS;\n}\n\nmpl_status_t MPL_SetOffsetPressure (int8_t pressOffset)\n{\n    // Convert input to 2's complement number\n    uint8_t wBuf[] = {OFF_P, pressOffset};\n\n    if (!initHwDone) return MPL_INIT_ERROR;\n\n    // write settings\n    if (sIoFunc.I2C_Write(wBuf, 2)!=MPL_SUCCESS) return MPL_ERROR;\n\n    return MPL_SUCCESS;\n}\n\nmpl_status_t MPL_SetOffsetAltitude (int8_t altitudeOffset)\n{\n    uint8_t wBuf[] = {OFF_H, altitudeOffset};\n\n    if (!initHwDone) return MPL_INIT_ERROR;\n\n    // write settings\n    if (sIoFunc.I2C_Write(wBuf, 2)!=MPL_SUCCESS) return MPL_ERROR;\n\n    return MPL_SUCCESS;\n}\n\nmpl_status_t MPL_SetOffsetTemperature (int8_t temperatureOffset)\n{\n    // Convert input to 2's complement number\n    uint8_t wBuf[] = {OFF_T, temperatureOffset};\n\n    if (!initHwDone) return MPL_INIT_ERROR;\n\n    // write settings\n    if (sIoFunc.I2C_Write(wBuf, 2)!=MPL_SUCCESS) return MPL_ERROR;\n\n    return MPL_SUCCESS;\n}\n\nmpl_status_t MPL_SetFifoMode (modeFIFO_t fMode, uint8_t fWmrk)\n{\n    uint8_t wBuf[2] = {F_SETUP};\n    wBuf[1] = (fMode << 6) | (fWmrk & MPL_F_WMRKK_MASK);\n\n    if (!initHwDone) return MPL_INIT_ERROR;\n\n    if (sIoFunc.I2C_Write(wBuf, 2)!=MPL_SUCCESS) return MPL_ERROR;\n\n    return MPL_SUCCESS;\n}\n\nmpl_status_t MPL_SetFifoInterrupt (pinINT_t pinINT)\n{\n    uint8_t wBuf[2] = {MPL_CTRL_REG4};\n    uint8_t rBuf;\n\n    if (!initHwDone) return MPL_INIT_ERROR;\n\n    // read CTRL4 register & set INT_EN_FIFO\n    if (sIoFunc.I2C_Read(wBuf, 1, &rBuf, 1)!=MPL_SUCCESS) return MPL_ERROR;\n    wBuf[1] = rBuf | (1 << INT_EN_FIFO_SHIFT);\n\n    if (sIoFunc.I2C_Write(wBuf, 2)!=MPL_SUCCESS) return MPL_ERROR;\n\n    // read CTRL5 register & Route interrupt to either INT1 or INT2 pin\n    wBuf[0] = MPL_CTRL_REG5;\n    if (sIoFunc.I2C_Read(wBuf, 1, &rBuf, 1)!=MPL_SUCCESS) return MPL_ERROR;\n\n    wBuf[1] = (pinINT == FIFO_INT1) ? rBuf | (1 << INT_CFG_FIFO_SHIFT) : rBuf &~(1 << INT_CFG_FIFO_SHIFT);\n    if (sIoFunc.I2C_Write(wBuf, 2)!=MPL_SUCCESS) return MPL_ERROR;\n\n    return MPL_SUCCESS;\n}\n\nmpl_status_t MPL_DisableFifoInterrupt ()\n{\n    uint8_t wBuf[2] = {MPL_CTRL_REG4};\n    uint8_t rBuf;\n\n    if (!initHwDone) return MPL_INIT_ERROR;\n\n    // read CTRL4 register & disable INT_EN_FIFO\n    if (sIoFunc.I2C_Read(wBuf, 1, &rBuf, 1)!=MPL_SUCCESS) return MPL_ERROR;\n    wBuf[1] = rBuf & ~(1 << INT_EN_FIFO_SHIFT);\n\n    if (sIoFunc.I2C_Write(wBuf, 2)!=MPL_SUCCESS) return MPL_ERROR;\n\n    return MPL_SUCCESS;\n}\n\nmpl_status_t MPL_GetFifoStatus(uint8_t* fifoStatus)\n{\n    uint8_t wBuf[1] = {F_STATUS};\n\n    if (!initHwDone) return MPL_INIT_ERROR;\n    assert(fifoStatus != NULL);\n\n    // read device ID = WHO_AM_I register (address 0x0C)\n    if (sIoFunc.I2C_Read(wBuf, 1, fifoStatus, 1)!=MPL_SUCCESS) return MPL_ERROR;\n    return MPL_SUCCESS;\n}\n\nmpl_status_t MPL_ReadRawData (modeMPL_t mode, int32_t* sensorData)\n{\n    uint8_t wBuf[2] = {REG_STATUS};\n    uint8_t rBuf[5];\n    uint8_t dataReadyFlag = 0;\n    uint8_t dataReadyRegAddr = 0;\n    uint8_t bytesToRead = 0;\n    int16_t counter = 0;\n\n    if (!initHwDone) return MPL_INIT_ERROR;\n    assert(sensorData != NULL);\n\n    /* set the new working mode, if given one */\n\n    if  (( mode > MPL_MODE_TEMPERATURE ) && ( mode < MPL_MODE_CURRENT )) return MPL_INIT_ERROR;\n    else if (( MPL_MODE_CURRENT != mode ) && ( selectedMode != mode ))\n    {\n        // goto standby\n        if (MPL_GotoStandby()!=MPL_SUCCESS) return MPL_ERROR;\n        // set the mode\n        if (MPL_SetMode(mode)!=MPL_SUCCESS) return MPL_ERROR;\n        // goto active state\n        if (MPL_SetActive()!=MPL_SUCCESS) return MPL_ERROR;\n        sIoFunc.WaitMsec(10);   // Wait 10ms\n    }\n\n    /* prepare for reading data */\n\n    switch (selectedMode)\n    {\n    case MPL_MODE_PRESSURE:\n    case MPL_MODE_ALTITUDE: {\n        dataReadyFlag     = 1 << MPL_PDR_SHIFT;\n        dataReadyRegAddr  = OUT_P_MSB;\n        bytesToRead       = 3;\n        break;\n    }\n\n    case MPL_MODE_TEMPERATURE: {\n        dataReadyFlag     = 1 << MPL_TDR_SHIFT;\n        dataReadyRegAddr  = OUT_T_MSB;\n        bytesToRead       = 2;\n        break;\n    }\n\n    default:  {}\n    }\n\n    if (sIoFunc.I2C_Read(wBuf, 1, rBuf, 1)!=MPL_SUCCESS) return MPL_ERROR;\n\n    // check PDR/PTR bit; if it's not set, toggle OST\n    if (0 == (rBuf[0] & dataReadyFlag))\n    {\n        // toggle the OST bit, causing the sensor to immediately take another reading\n        if (MPL_ToggleOneShot()!=MPL_SUCCESS) return MPL_ERROR;\n        sIoFunc.WaitMsec(10);   // Wait 10ms\n    }\n\n    // wait for PDR/PTR bit, which indicates that we have new data\n    while (1)\n    {\n        if (sIoFunc.I2C_Read(wBuf, 1, rBuf, 1)!=MPL_SUCCESS) return MPL_ERROR;\n        if ((0==(rBuf[0] & dataReadyFlag)) & ( ++counter > 5 )) return MPL_TIMEOUT;\n        else break;\n        sIoFunc.WaitMsec(100);  // Wait 100ms\n    }\n\n    /* read sensor data */\n\n    wBuf[0] = dataReadyRegAddr;\n    if (sIoFunc.I2C_Read(wBuf, 1, rBuf, bytesToRead)!=MPL_SUCCESS) return MPL_ERROR;\n\n    switch ( selectedMode )\n    {\n    // pressure value is a Q18.2 right-aligned number in [Pa]\n    case MPL_MODE_PRESSURE:\n        // altitude value is a Q16.4 right-aligned number in [m]\n    case MPL_MODE_ALTITUDE:     {\n        *sensorData = (int32_t) ((rBuf[0] << 16) | (rBuf[1] << 8) | rBuf[2]) >> 4;\n        break;\n    }\n\n    // temperature value is a Q8.4 right-aligned number in [C]\n    case MPL_MODE_TEMPERATURE:  {\n        *sensorData = (int32_t) (((rBuf[0] << 8) | rBuf[1]) >> 4);\n        break;\n    }\n    default:  {}\n    }\n\n    return MPL_SUCCESS;\n}\n\nmpl_status_t MPL_Dump(uint8_t *sensorReg)\n{\n    uint8_t wBuf= 0;\n    uint8_t rBuf;\n    uint8_t i;\n\n    if (!initHwDone) return MPL_INIT_ERROR;\n    assert(sensorReg != NULL);\n\n    // read all registers\n    for (i=0; i<45; i++)\n    {\n        if (sIoFunc.I2C_Read(&wBuf, 1, &rBuf, 1)!=MPL_SUCCESS) return MPL_ERROR;\n        *sensorReg = rBuf;\n        wBuf++;\n        sensorReg++;\n    }\n    return MPL_SUCCESS;\n}\n"
              }
            }
          },
          "md5": "cd5caffde64e600c9cd01141dbedef52"
        },
        "sx9500": {
          "libName": "sx9500",
          "manufacturer": "Semtech",
          "description": "Proximity Sensor Evaluation Board",
          "type": "Touch Sensor",
          "icon": "",
          "image": "",
          "version": "",
          "eelVersion": "3",
          "shoppingCartLinks": {
            "digikey": {
              "links": {
                "info": "https://www.digikey.com/short/j21827"
              },
              "cartData": {
                "part": "SX9500EVKA-ND",
                "partid": "4569959",
                "source": "dkstudio",
                "qty": "1"
              }
            }
          },
          "requires": [
            "embedded",
            "i2c",
            "gpio"
          ],
          "elements": [
            {
              "name": "SX9500Touch",
              "type": "EmbeddedSX9500",
              "icon": "EmbeddedTouch.svg",
              "defaultAbility": "getTouchData",
              "defaultTrigger": "touchDataRead",
              "hidden": false,
              "helpPageHref": "https://developer.atmosphereiot.com/documents/elements/semtechsx9500element.html",
              "abilities": [
                {
                  "name": "setup",
                  "triggers": [],
                  "hidden": true,
                  "code": "\tATMO_SX9500_Config_t config;\n\tconfig.address = ATMO_PROPERTY(undefined, i2cAddress);\n\tconfig.i2cDriverInstance = ATMO_PROPERTY(undefined, i2cInstance);\n\tconfig.gpioDriverInstance = ATMO_PROPERTY(undefined, gpioInstance);\n\tconfig.interruptEnabled = ATMO_PROPERTY(undefined, interruptEnabled);\n\tconfig.interruptPin = ATMO_PROPERTY(undefined, interruptGpio);\n\tATMO_SX9500_Init(&config);\n\tATMO_SX9500_RegisterTouchedAbilityHandle(SX9500_Touched_Up, ATMO_ABILITY(undefined, pressUp));\n\tATMO_SX9500_RegisterTouchedAbilityHandle(SX9500_Touched_Down, ATMO_ABILITY(undefined, pressDown));\n\tATMO_SX9500_RegisterTouchedAbilityHandle(SX9500_Touched_Left, ATMO_ABILITY(undefined, pressLeft));\n\tATMO_SX9500_RegisterTouchedAbilityHandle(SX9500_Touched_Right, ATMO_ABILITY(undefined, pressRight));\n\treturn ATMO_Status_Success;"
                },
                {
                  "name": "getTouchData",
                  "triggers": [
                    "touchDataRead"
                  ],
                  "code": ""
                },
                {
                  "name": "pressUp",
                  "triggers": [
                    "upPressed",
                    "touchDataRead"
                  ],
                  "code": "SX9500_TouchState_t touchState;\nATMO_GetBinary(in, &touchState, sizeof(touchState));\nATMO_CreateValueBinary(out, &touchState, sizeof(touchState));\nreturn ATMO_Status_Success;"
                },
                {
                  "name": "pressDown",
                  "triggers": [
                    "downPressed",
                    "touchDataRead"
                  ],
                  "code": "SX9500_TouchState_t touchState;\nATMO_GetBinary(in, &touchState, sizeof(touchState));\nATMO_CreateValueBinary(out, &touchState, sizeof(touchState));\nreturn ATMO_Status_Success;"
                },
                {
                  "name": "pressLeft",
                  "triggers": [
                    "leftPressed",
                    "touchDataRead"
                  ],
                  "code": "SX9500_TouchState_t touchState;\nATMO_GetBinary(in, &touchState, sizeof(touchState));\nATMO_CreateValueBinary(out, &touchState, sizeof(touchState));\nreturn ATMO_Status_Success;"
                },
                {
                  "name": "pressRight",
                  "triggers": [
                    "rightPressed",
                    "touchDataRead"
                  ],
                  "code": "SX9500_TouchState_t touchState;\nATMO_GetBinary(in, &touchState, sizeof(touchState));\nATMO_CreateValueBinary(out, &touchState, sizeof(touchState));\nreturn ATMO_Status_Success;"
                }
              ],
              "properties": [
                {
                  "name": "i2cInstance",
                  "input": "driverInstance",
                  "driverType": "i2c"
                },
                {
                  "name": "gpioInstance",
                  "input": "driverInstance",
                  "driverType": "gpio"
                },
                {
                  "name": "interruptEnabled",
                  "input": "checkbox",
                  "value": true
                },
                {
                  "name": "interruptGpio",
                  "input": "number",
                  "value": "ATMO_DEFAULT_GPIO"
                },
                {
                  "name": "i2cAddress",
                  "input": "number",
                  "value": "0x28"
                }
              ],
              "triggers": [],
              "variables": [],
              "language": {
                "en-US": {
                  "EmbeddedSX9500": "Semtech SX9500",
                  "i2cInstance": "I2C Driver Instance",
                  "i2cAddress": "I2C Address",
                  "interruptGpio": "Interrupt GPIO Pin",
                  "interruptEnabled": "Touch Interrupt Enabled",
                  "gpioInstance": "GPIO Driver Instance",
                  "operatingMode": "Operating Mode",
                  "setEnabled": "Set Enabled",
                  "setDisabled": "Set Disabled",
                  "setEnabledDisabled": "Set Enabled State",
                  "getTouchData": "Get Touch Data",
                  "touchDataRead": "Touch Data Read",
                  "pressUp": "Press Up",
                  "upPressed": "Up Pressed",
                  "pressDown": "Press Down",
                  "downPressed": "Down Pressed",
                  "pressLeft": "Press Left",
                  "leftPressed": "Left Pressed",
                  "pressRight": "Press Right",
                  "rightPressed": "Right Pressed"
                }
              }
            }
          ],
          "files": {
            "common": {
              "headers": {
                "sx9500.h": "#ifndef __ATMO_SX9500_H_\n#define __ATMO_SX9500_H_\n\n#include \"../app_src/atmosphere_platform.h\"\n#include \"../i2c/i2c.h\"\n#include \"../gpio/gpio.h\"\n\ntypedef enum {\n    ATMO_SX9500_Status_Success              = 0x00u,  // Common - Operation was successful\n    ATMO_SX9500_Status_Fail                 = 0x01u,  // Common - Operation failed\n    ATMO_SX9500_Status_Initialized          = 0x02u,  // Common - Peripheral already initialized\n    ATMO_SX9500_Status_Invalid              = 0x03u,  // Common - Invalid operation or result\n    ATMO_SX9500_Status_NotSupported         = 0x04u,  // Common - Feature not supported by platform\n} ATMO_SX9500_Status_t;\n\ntypedef struct {\n    uint16_t address;\n    bool interruptEnabled;\n    ATMO_GPIO_Device_Pin_t interruptPin;\n    ATMO_DriverInstanceHandle_t i2cDriverInstance;\n    ATMO_DriverInstanceHandle_t gpioDriverInstance;\n} ATMO_SX9500_Config_t;\n\ntypedef struct {\n\tbool downPressed;\n\tbool upPressed;\n\tbool leftPressed;\n\tbool rightPressed;\n} SX9500_TouchState_t;\n\ntypedef enum {\n\tSX9500_Touched_Any = 0,\n\tSX9500_Touched_Down,\n\tSX9500_Touched_Right,\n\tSX9500_Touched_Up,\n\tSX9500_Touched_Left,\n\tSX9500_Touched_NumEvents,\n} SX9500_TouchEvent_t;\n\n\n/**\n * Initialize SX9500 Driver\n *\n * @param[in] config - Device configuration (optional)\n */\nATMO_SX9500_Status_t ATMO_SX9500_Init(ATMO_SX9500_Config_t *config);\n\n/**\n * Set basic device configuration\n *\n * @param[in] config\n */\nATMO_SX9500_Status_t ATMO_SX9500_SetConfiguration(const ATMO_SX9500_Config_t *config);\n\n/**\n * Get device configuration\n *\n * @param[out] config\n */\nATMO_SX9500_Status_t ATMO_SX9500_GetConfiguration(ATMO_SX9500_Config_t *config);\n\n/**\n * Get current touch sensor state\n *\n * @param[out] touchState\n */\nATMO_SX9500_Status_t ATMO_SX9500_GetTouchState(SX9500_TouchState_t *touchState);\n\n/**\n * Register ability handle for touched event\n *\n * @param[in] abilityHandle\n */\nATMO_SX9500_Status_t ATMO_SX9500_RegisterTouchedAbilityHandle(SX9500_TouchEvent_t event, unsigned int abilityHandle);\n\n\n/**\n * Register ability handle for touched event\n *\n * @param[in] abilityHandle\n */\nATMO_SX9500_Status_t ATMO_SX9500_RegisterTouchedCallback(SX9500_TouchEvent_t event, ATMO_Callback_t cb);\n\n\n#endif\n\n",
                "sx9500_internal.h": "/*\n * Copyright (c) 2018 NXP\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *\n * o Redistributions of source code must retain the above copyright notice, this list\n *   of conditions and the following disclaimer.\n *\n * o Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n *\n * o Neither the name of the copyright holder nor the names of its\n *   contributors may be used to endorse or promote products derived from this\n *   software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*!\n * @file sx9500.h\n * This is the header file for the SX9500 touch controller driver.\n */\n\n#ifndef SX9500_INTERNAL_H_\n#define SX9500_INTERNAL_H_\n\n/*!\n * @addtogroup sx9500 SX9500 touch controller API\n * @{\n */\n\n#include \"../app_src/atmosphere_platform.h\"\n\n\n#define SX9500_I2C_ADDRESS                          0x28\n\n#define SX9500_REG_IRQSRC                           0x00\n#define SX9500_REG_STAT                             0x01\n#define SX9500_REG_IRQMSK                           0x03\n#define SX9500_REG_PROXCTRL0                        0x06\n#define SX9500_REG_PROXCTRL1                        0x07\n#define SX9500_REG_PROXCTRL2                        0x08\n#define SX9500_REG_PROXCTRL3                        0x09\n#define SX9500_REG_PROXCTRL4                        0x0A\n#define SX9500_REG_PROXCTRL5                        0x0B\n#define SX9500_REG_PROXCTRL6                        0x0C\n#define SX9500_REG_PROXCTRL7                        0x0D\n#define SX9500_REG_PROXCTRL8                        0x0E\n#define SX9500_REG_SENSORSEL                        0x20\n#define SX9500_REG_USEMSB                           0x21\n#define SX9500_REG_USELSB                           0x22\n#define SX9500_REG_AVGMSB                           0x23\n#define SX9500_REG_AVGLSB                           0x24\n#define SX9500_REG_DIFFMSB                          0x25\n#define SX9500_REG_DIFFLSB                          0x26\n#define SX9500_REG_OFFSETMSB                        0x27\n#define SX9500_REG_OFFSETLSB                        0x28\n#define SX9500_REG_RESET                            0x7F\n \n#define SX9500_RESET_CMD                            0xDE\n \n/*! @brief Status return codes. */\ntypedef enum\n{\n    SX9500_SUCCESS,\n    SX9500_I2C_ERROR,\n    SX9500_INTERNAL_ERROR,\n\tSX9500_NOINIT_ERROR\n} SX9500_status;\n\ntypedef union {\n    struct {    // sx9500 register 0x00\n        uint8_t txen_stat   : 1;    // 0\n        uint8_t reserved    : 2;    // 1,2\n        uint8_t conv_done   : 1;    // 3\n        uint8_t comp_done   : 1;    // 4\n        uint8_t far         : 1;    // 5\n        uint8_t close       : 1;    // 6\n        uint8_t reset       : 1;    // 7\n    } bits;\n    uint8_t octet;\n} RegIrqSrc_t;\n \ntypedef union {\n    struct {    // sx9500 register 0x01\n        uint8_t compstat         : 4;    // 0,1,2,3\n        uint8_t proxstat0        : 1;    // 4\n        uint8_t proxstat1        : 1;    // 5\n        uint8_t proxstat2        : 1;    // 6\n        uint8_t proxstat3        : 1;    // 7\n   } bits;\n    uint8_t octet;\n} RegStat_t;\n \ntypedef union {\n    struct {    // sx9500 register 0x06\n        uint8_t sensor_en   : 4;    // 0,1,2,3\n        uint8_t scan_period : 3;    // 4,5,6\n        uint8_t reserved    : 1;    // 7\n    } bits;\n    uint8_t octet;\n} RegProxCtrl0_t;\n \ntypedef union {\n    struct {    // sx9500 register 0x09\n        uint8_t raw_filt    : 2;    // 0,1\n        uint8_t reserved    : 2;    // 2,3\n        uint8_t doze_period : 2;    // 4,5\n        uint8_t doze_en     : 1;    // 6\n        uint8_t res7        : 1;    // 7\n    } bits;\n    uint8_t octet;\n} RegProxCtrl3_t;\n\n/*! @brief Structure of external functions or values. */\ntypedef struct _sx9500_fct_t\n{\n\t/** Read hardware function */\n    uint8_t (*I2C_Read)(uint8_t *writeBuf, uint32_t writeSize, uint8_t *readBuf, uint32_t readSize);\n    /** Write hardware register, 8bit aligned function */\n    uint8_t (*I2C_Write)(uint8_t *writeBuf, uint32_t writeSize);\n    /** Wait function **/\n    void (*WaitMs)(uint32_t tms);\n} sx9500_fct_t, *ptsx9500_fct_t;\n\n\n/*****************************************************************************\n * Public functions\n ****************************************************************************/\n\n/*!\n * @brief Initialize SX9500 driver.\n *\n * @param FCT Pointer to a structure with external functions\n */\nvoid SX9500_Init_Driver(ptsx9500_fct_t  FCT);\n\n/*!\n * @brief De-initialize SX9500 driver.\n *\n */\nvoid SX9500_Deinit_Driver();\n\n/*!\n * @brief Initialize SX9500 hardware.\n *\n * @return Status value (0 for success)\n */\nSX9500_status SX9500_Init_Hw();\n\n/*!\n * @brief Get information for selected sensor.\n *\n * @param  CSn Selected sensor (0-3)\n * @param  buf Pointer to an array with PROXUSEFUL/PROXAVG/PROXDIFF values\n * @return Status value (0 for success)\n */\nSX9500_status SX9500_GetInfo_sensor(char CSn, uint8_t* buf);\n\n/*!\n * @brief Get power mode.\n *\n * @return Power mode: active (true/1) or low power (false/0)\n */\nbool SX9500_get_active();\n\n/*!\n * @brief Set power mode.\n *\n * @param  bool Power mode: active (true/1) or low power (false/0)\n * @return Status value (0 for success)\n */\nSX9500_status SX9500_set_active(bool);\n\n/*!\n * @brief Function returning the triggered capacitive sensing interface.\n * @note Returns 0xFF if no interface has been triggered.\n *\n * @param  CSi Pointer to sensing interface index\n * @return Status value (0 for success)\n */\nSX9500_status SX9500_CSi_Detected(uint8_t* CSi);\n\n/*!\n * @brief Read IRQ Source\n * @note  Used to clear interrupts on SX9500\n *\n * @param irqReg Pointer to store value from IRQ register\n *\n * @return Status value (0 for success)\n *\n */\nSX9500_status SX9500_Read_Irq(uint8_t* irqReg);\n\n/*!\n * @brief Read Proximity Sensors\n *\n * @param data Pointer to store data from proximity sensor data\n *\n * @return Status value (0 for success)\n *\n */\nSX9500_status SX9500_Read_Proximity_Sensors(uint8_t* data);\n\n/*! @}*/\n\n#endif\n"
              },
              "objects": {
                "sx9500.c": "#include \"sx9500.h\"\n#include \"sx9500_internal.h\"\n#include \"../app_src/atmosphere_platform.h\"\n\ntypedef struct {\n    ATMO_SX9500_Config_t config;\n    unsigned int abilityHandle[SX9500_Touched_NumEvents];\n\tbool abilityHandleRegistered[SX9500_Touched_NumEvents];\n    ATMO_Callback_t callback[SX9500_Touched_NumEvents];\n    bool configured;\n} ATMO_SX9500_Priv_Config;\n\nstatic ATMO_SX9500_Priv_Config _ATMO_SX9500_config = {0};\n\nstatic ATMO_I2C_Peripheral_t _ATMO_SX9500_i2cConfig = {\n    .operatingMode = ATMO_I2C_OperatingMode_Master,\n    .baudRate = ATMO_I2C_BaudRate_Standard_Mode\n};\n\nstatic uint8_t _ATMO_SX9500_I2CRead_Simple(uint8_t *writeBuf, uint32_t writeSize, uint8_t *readBuf, uint32_t readSize)\n{\n\tATMO_I2C_Status_t status = ATMO_I2C_MasterRead(_ATMO_SX9500_config.config.i2cDriverInstance, _ATMO_SX9500_config.config.address, writeBuf, writeSize, readBuf, readSize, 1000);\n\treturn (status == ATMO_I2C_Status_Success) ? 0 : 1;\n}\n\nstatic uint8_t _ATMO_SX9500_I2CWrite_Simple(uint8_t *writeBuf, uint32_t writeSize)\n{\n\tATMO_I2C_Status_t status = ATMO_I2C_MasterWrite(_ATMO_SX9500_config.config.i2cDriverInstance, _ATMO_SX9500_config.config.address, NULL, 0, writeBuf, writeSize, 1000);\n\treturn (status == ATMO_I2C_Status_Success) ? 0 : 1;\n}\n\nstatic bool ATMO_SX9500_TouchStateToIndex(SX9500_TouchState_t *touchState, uint32_t *index)\n{\n\tbool anyPressed = false;\n\n\tif(touchState->downPressed)\n\t{\n\t\tanyPressed = true;\n\t\t*index = SX9500_Touched_Down;\n\t}\n\tif(touchState->upPressed)\n\t{\n\t\tanyPressed = true;\n\t\t*index = SX9500_Touched_Up;\n\t}\n\tif(touchState->rightPressed)\n\t{\n\t\tanyPressed = true;\n\t\t*index = SX9500_Touched_Right;\n\t}\n\tif(touchState->leftPressed)\n\t{\n\t\tanyPressed = true;\n\t\t*index = SX9500_Touched_Left;\n\t}\n\n\treturn anyPressed;\n}\n\nstatic void ATMO_SX9500_Callback(void *data)\n{\n    RegIrqSrc_t irq;\n    if (SX9500_Read_Irq(&irq.octet) == SX9500_SUCCESS)\n    {\n        if (irq.bits.close || irq.bits.far)\n        {\n        \tSX9500_TouchState_t touchState;\n        \tif(ATMO_SX9500_GetTouchState(&touchState) == ATMO_SX9500_Status_Success)\n        \t{\n        \t\tuint32_t index = 0;\n        \t\tif(ATMO_SX9500_TouchStateToIndex(&touchState, &index))\n        \t\t{\n        \t\t\tif(_ATMO_SX9500_config.abilityHandleRegistered[SX9500_Touched_Any] )\n        \t\t\t{\n        \t\t\t\tATMO_Value_t val;\n        \t\t\t\tATMO_InitValue(&val);\n        \t\t\t\tATMO_CreateValueBinary(&val, &touchState, sizeof(touchState));\n        \t\t\t\tATMO_AddAbilityExecute(_ATMO_SX9500_config.abilityHandle[SX9500_Touched_Any], &val);\n        \t\t\t}\n\n        \t\t\tif(_ATMO_SX9500_config.abilityHandleRegistered[index] )\n        \t\t\t{\n        \t\t\t\tATMO_Value_t val;\n        \t\t\t\tATMO_InitValue(&val);\n        \t\t\t\tATMO_CreateValueBinary(&val, &touchState, sizeof(touchState));\n        \t\t\t\tATMO_AddAbilityExecute(_ATMO_SX9500_config.abilityHandle[index], &val);\n        \t\t\t}\n\n        \t\t\tif(_ATMO_SX9500_config.callback[SX9500_Touched_Any] != NULL)\n        \t\t\t{\n        \t\t\t\tATMO_Value_t val;\n        \t\t\t\tATMO_InitValue(&val);\n        \t\t\t\tATMO_CreateValueBinary(&val, &touchState, sizeof(touchState));\n        \t\t\t\t_ATMO_SX9500_config.callback[SX9500_Touched_Any](&val);\n        \t\t\t\tATMO_FreeValue(&val);\n        \t\t\t}\n        \t\t\tif(_ATMO_SX9500_config.callback[index] != NULL)\n        \t\t\t{\n        \t\t\t\tATMO_Value_t val;\n        \t\t\t\tATMO_InitValue(&val);\n        \t\t\t\tATMO_CreateValueBinary(&val, &touchState, sizeof(touchState));\n        \t\t\t\t_ATMO_SX9500_config.callback[index](&val);\n        \t\t\t\tATMO_FreeValue(&val);\n        \t\t\t}\n        \t\t}\n        \t}\n        \telse\n        \t{\n        \t\treturn ATMO_SX9500_Status_Fail;\n        \t}\n        }\n    }\n    else\n    {\n    \treturn ATMO_SX9500_Status_Fail;\n    }\n\n    return ATMO_SX9500_Status_Success;\n}\n\nATMO_SX9500_Status_t ATMO_SX9500_Init(ATMO_SX9500_Config_t *config)\n{\n    // Did the user supply a configuration?\n    if( config )\n    {\n        ATMO_SX9500_SetConfiguration(config);\n    }\n    else\n    {\n    \t_ATMO_SX9500_config.configured = false;\n    }\n\n\tsx9500_fct_t fct;\n\tfct.I2C_Read = _ATMO_SX9500_I2CRead_Simple;\n\tfct.I2C_Write = _ATMO_SX9500_I2CWrite_Simple;\n\tfct.WaitMs = ATMO_PLATFORM_DelayMilliseconds;\n\tSX9500_Init_Driver(&fct);\n\tSX9500_Init_Hw();\n\n    return ATMO_SX9500_Status_Success;\n}\n\nATMO_SX9500_Status_t ATMO_SX9500_SetConfiguration(const ATMO_SX9500_Config_t *config)\n{\n    if( config == NULL )\n    {\n        return ATMO_SX9500_Status_Fail;\n    }\n\n    if( ATMO_I2C_SetConfiguration(config->i2cDriverInstance, &_ATMO_SX9500_i2cConfig) != ATMO_I2C_Status_Success )\n    {\n        return ATMO_SX9500_Status_Fail;\n    }\n\n    // Register interrupt\n    if(config->interruptEnabled)\n    {\n    \tATMO_GPIO_RegisterInterruptCallback(config->gpioDriverInstance, config->interruptPin, ATMO_GPIO_InterruptTrigger_FallingEdge, ATMO_SX9500_Callback);\n    }\n\n    memcpy( &_ATMO_SX9500_config.config, config, sizeof(ATMO_SX9500_Config_t) );\n    _ATMO_SX9500_config.configured = true;\n\n    return ATMO_SX9500_Status_Success;\n}\n\nATMO_SX9500_Status_t ATMO_SX9500_GetConfiguration(ATMO_SX9500_Config_t *config)\n{\n    if( config == NULL || !_ATMO_SX9500_config.configured )\n    {\n        return ATMO_SX9500_Status_Fail;\n    }\n\n    memcpy(config, &_ATMO_SX9500_config.config, sizeof(ATMO_SX9500_Config_t));\n\n    return ATMO_SX9500_Status_Success;\n}\n\nATMO_SX9500_Status_t ATMO_SX9500_GetTouchState(SX9500_TouchState_t *touchState)\n{\n\tmemset(touchState, 0, sizeof(SX9500_TouchState_t));\n\n\tRegStat_t dir;\n\tif( SX9500_Read_Proximity_Sensors(&dir.octet) != SX9500_SUCCESS )\n\t{\n\t\treturn ATMO_SX9500_Status_Fail;\n\t}\n\n\tif(dir.octet > 0)\n\t{\n\t\tif(dir.bits.proxstat0)\n\t\t{\n\t\t\ttouchState->downPressed = true;\n\t\t}\n\t\tif(dir.bits.proxstat1)\n\t\t{\n\t\t\ttouchState->rightPressed = true;\n\t\t}\n\t\tif(dir.bits.proxstat2)\n\t\t{\n\t\t\ttouchState->upPressed = true;\n\t\t}\n\t\tif(dir.bits.proxstat3)\n\t\t{\n\t\t\ttouchState->leftPressed = true;\n\t\t}\n\t}\n\n\treturn ATMO_SX9500_Status_Success;\n}\n\nATMO_SX9500_Status_t ATMO_SX9500_RegisterTouchedAbilityHandle(SX9500_TouchEvent_t event, unsigned int abilityHandle)\n{\n\t_ATMO_SX9500_config.abilityHandle[event] = abilityHandle;\n\t_ATMO_SX9500_config.abilityHandleRegistered[event] = true;\n\treturn ATMO_SX9500_Status_Success;\n}\n\nATMO_SX9500_Status_t ATMO_SX9500_RegisterTouchedCallback(SX9500_TouchEvent_t event, ATMO_Callback_t cb)\n{\n\t_ATMO_SX9500_config.callback[event] = cb;\n\treturn ATMO_SX9500_Status_Success;\n}\n\n\n",
                "sx9500_internal.c": "/*\n * Copyright (c) 2018 NXP\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *\n * o Redistributions of source code must retain the above copyright notice, this list\n *   of conditions and the following disclaimer.\n *\n * o Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n *\n * o Neither the name of the copyright holder nor the names of its\n *   contributors may be used to endorse or promote products derived from this\n *   software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*!\n * @file sx9500.c\n * This is the source file for the SX9500 touch controller driver.\n */\n\n#include \"sx9500_internal.h\"\n#include \"../app_src/atmosphere_platform.h\"\n\n/*****************************************************************************\n * Variables\n ****************************************************************************/\nstatic bool initDriverDone = false;\nstatic bool initHwDone = false;\nstatic sx9500_fct_t FCT_SX9500;\nstatic bool m_txen;\n\n/* Define registers that need to be initialized to values different than\n * default\n */\ntypedef struct smtc_reg_data {\n    unsigned char reg;\n    unsigned char val;\n}smtc_reg_data_t;\nstatic smtc_reg_data_t sx9500_i2c_reg_setup[] = {\n    {\n        .reg = SX9500_REG_IRQMSK,\n        .val = 0x60,  /* CLOSEIRQEN[6]=1 (close interrupt is on),            */\n                      /* FARIRQEN[5]=1 (far interrupt is on),                */\n                      /* COMPDONEIRQEN[4]=0 (compensation interrupt is off), */\n                      /* CONVDONEIRQEN[3]=0 (conversion interrupt is off)    */\n    },\n    {\n        .reg = SX9500_REG_PROXCTRL1,\n        .val = 0x03,  /* SHIELDEN[7:6]=0 (no shield),              */\n                      /* RANGE[1:0]=3 (small, +/-2.5pF Full Scale) */\n    },\n    {\n        .reg = SX9500_REG_PROXCTRL2,\n        .val = 0x27,  /* GAIN[6:5]=1 (digital gain x2),          */\n                      /* FREQ[4:3]=0 (83kHz sampling frequency), */\n                      /* RESOLUTION[2:0]=0 (finest resolution)   */\n    },\n    {\n        .reg = SX9500_REG_PROXCTRL3,\n        .val = 0x41,  /* DOZEEN[6]=1 (enables doze mode),   */\n                      /* DOZEPERIOD[5:4]=0 (2*scan period), */\n                      /* RAWFILT[1:0]=1 (Low)               */\n    },\n    {\n        .reg = SX9500_REG_PROXCTRL4,\n        .val = 0x80,  /* AVGTHRESH[7:0]=0x80 (threshold triggering compensation = +/-128*value (typ between 16384 and 24576) */\n    },\n    {\n        .reg = SX9500_REG_PROXCTRL5,\n        .val = 0x0F,  /* AVGDEB[7:6]=0 (debounce=off),               */\n                      /* AVGNEGFILT[5:3]=1 (lowest negative filter), */\n                      /* AVGPOSFILT[2:0]=7 (highest positive filter) */\n    },\n    {\n        .reg = SX9500_REG_PROXCTRL6,\n        .val = 0x06,  /* PROXTHRESH[4:0]=6 (sensitivity=120) */\n    },\n    {\n        .reg = SX9500_REG_PROXCTRL7,\n        .val = 0x00,  /* AVGCOMPDIS[7]=0 (compensation enabled),      */\n                      /* COMPMETHOD[6]=0 (separate CSx compensation), */\n                      /* HYST[5:4]=0 (hysteresis=32),                 */\n                      /* CLOSEDEB[3:2]=0 (close debouncer=off),       */\n                      /* FARDEB[1:0]=0 (far debouncer=off)            */\n    },\n    {\n        .reg = SX9500_REG_PROXCTRL8,\n        .val = 0x08,  /* STUCK[7:4]=0 (stuck timeout=off),                          */\n                      /* COMPPRD[3:0]=8 (periodic compensation every 8*128 samples) */\n    },\n    {\n        .reg = SX9500_REG_PROXCTRL0,\n        .val = 0x0F,  /* SCANPERIOD[6:4]=0 (scan every 30ms),  */\n                      /* SENSOREN[3:0]=15 (enable all sensors) */\n    },\n};\n\n/*****************************************************************************\n * Private functions\n ****************************************************************************/\n\nstatic SX9500_status SX9500_write(uint8_t addr, uint8_t data)\n{\n    uint8_t cmd[2];\n\n    cmd[0] = addr;\n    cmd[1] = data;\n\n    return (SX9500_status)FCT_SX9500.I2C_Write(cmd, 2);\n}\n\nstatic SX9500_status SX9500_read(uint8_t addr, uint8_t *dst_buf, uint32_t length)\n{\n    uint8_t cmd[2];\n\n    cmd[0] = addr;\n    return (SX9500_status)FCT_SX9500.I2C_Read(cmd, 1, dst_buf, length);\n}\n\nstatic SX9500_status SX9500_read_single(uint8_t addr, uint8_t* val)\n{\n    return (SX9500_status)FCT_SX9500.I2C_Read(&addr, 1, val, 1);\n}\n\n/*****************************************************************************\n * Public functions\n ****************************************************************************/\n\nvoid SX9500_Init_Driver(ptsx9500_fct_t  FCT)\n{\n    assert((FCT != NULL) &&\n            (FCT->I2C_Read != NULL) &&\n            (FCT->I2C_Write != NULL) &&\n            (FCT->WaitMs != NULL));\n    FCT_SX9500 = *FCT;\n    initDriverDone = true;\n}\n\nvoid SX9500_Denit_Driver()\n{\n    if (initHwDone)\n    {\n        /* Deinit HW */\n        SX9500_set_active(false); // skip error management\n    }\n\n    /* Deinit driver */\n    initDriverDone = false;\n    initHwDone = false;\n}\n\nSX9500_status SX9500_Init_Hw()\n{\n    int i = 0;\n    uint8_t val;\n    SX9500_status status;\n\n    if (!initDriverDone)\n    {\n        return SX9500_NOINIT_ERROR;\n    }\n\n    // perform a soft reset\n    status = SX9500_write(SX9500_REG_RESET, SX9500_RESET_CMD);\n    if (status != SX9500_SUCCESS)\n    {\n        return status;\n    }\n\n    FCT_SX9500.WaitMs(300); // wait until the reset has finished\n\n    // read IRQSRC to release NIRQ pin\n    status = SX9500_read(SX9500_REG_IRQSRC, &val,1);\n    if (status != SX9500_SUCCESS)\n    {\n        return status;\n    }\n\n    // init I2C registers\n    int lenRegTable = sizeof(sx9500_i2c_reg_setup) / sizeof(smtc_reg_data_t);\n    while (i < lenRegTable)\n    {\n        /* Write all registers/values contained in i2c_reg */\n        status = SX9500_write(sx9500_i2c_reg_setup[i].reg, sx9500_i2c_reg_setup[i].val);\n        if (status != SX9500_SUCCESS)\n        {\n            return status;\n        }\n\n        /* Read back value from register and verify write */\n        status = SX9500_read_single(sx9500_i2c_reg_setup[i].reg, &val);\n        if (status != SX9500_SUCCESS)\n        {\n            return status;\n        }\n\n        if (val != sx9500_i2c_reg_setup[i].val)\n        {\n            return SX9500_INTERNAL_ERROR;\n        }\n\n        i++;\n    }\n\n    initHwDone = true;\n    return SX9500_SUCCESS;\n}\n\nSX9500_status SX9500_GetInfo_sensor(char CSn, uint8_t* buf)\n{\n    SX9500_status status;\n\n    if (!initHwDone)\n    {\n        return SX9500_NOINIT_ERROR;\n    }\n    assert(buf != NULL);\n\n    status = SX9500_write(SX9500_REG_SENSORSEL, CSn);\n    if (status != SX9500_SUCCESS)\n    {\n        return status;\n    }\n\n    status = SX9500_read(SX9500_REG_USEMSB, buf, 2);\n    if (status != SX9500_SUCCESS)\n    {\n        return status;\n    }\n\n    status = SX9500_read(SX9500_REG_AVGMSB, &buf[2], 2);\n    if (status != SX9500_SUCCESS)\n    {\n        return status;\n    }\n\n    status = SX9500_read(SX9500_REG_DIFFMSB, &buf[4], 2);\n    if (status != SX9500_SUCCESS)\n    {\n        return status;\n    }\n\n    return SX9500_SUCCESS;\n}\n\n// get power mode (active or low power)\nbool SX9500_get_active()\n{\n    if (!initHwDone)\n    {\n        return SX9500_NOINIT_ERROR;\n    }\n\n    return m_txen;\n}\n\n// set active mode or low power mode\nSX9500_status SX9500_set_active(bool en)\n{\n    SX9500_status status = SX9500_SUCCESS;\n\n    if (!initHwDone)\n    {\n        return SX9500_NOINIT_ERROR;\n    }\n\n    m_txen = en;\n\n    uint8_t val = en ? sx9500_i2c_reg_setup[10].val : 0x00U;\n\n    status = SX9500_write(SX9500_REG_PROXCTRL0, val);\n\n    return status;\n}\n\n// returns the triggered capacitive sensing interface (CS0..CS3)\nSX9500_status SX9500_CSi_Detected(uint8_t* CSi)\n{\n    SX9500_status status = SX9500_SUCCESS;\n    RegIrqSrc_t regirq;\n    RegStat_t prox;\n\n    if (!initHwDone)\n    {\n        return SX9500_NOINIT_ERROR;\n    }\n    assert(CSi != NULL);\n\n    *CSi = 0xFF;\n\n    status = SX9500_read_single(SX9500_REG_IRQSRC, &regirq.octet);\n    if (status != SX9500_SUCCESS)\n    {\n        return status;\n    }\n\n    status = SX9500_read_single(SX9500_REG_STAT, &prox.octet);\n    if (status != SX9500_SUCCESS)\n    {\n        return status;\n    }\n\n    if (regirq.bits.close)\n    {\n        if (prox.bits.proxstat0)\n        {\n            *CSi = 0;\n        }\n        else if (prox.bits.proxstat1)\n        {\n            *CSi = 1;\n        }\n        else if (prox.bits.proxstat2)\n        {\n            *CSi = 2;\n        }\n        else if (prox.bits.proxstat3)\n        {\n            *CSi = 3;\n        }\n    }\n    return SX9500_SUCCESS;\n}\n\nSX9500_status SX9500_Read_Irq(uint8_t* irqReg)\n{\n    SX9500_status status = SX9500_SUCCESS;\n\n    if (!initHwDone)\n    {\n        return SX9500_NOINIT_ERROR;\n    }\n\n    if (NULL != irqReg)\n    {\n        RegIrqSrc_t regirq;\n        status = SX9500_read_single(SX9500_REG_IRQSRC, &regirq.octet);\n        if (status != SX9500_SUCCESS)\n        {\n            return status;\n        }\n        else\n        {\n            *irqReg = regirq.octet;\n            return SX9500_SUCCESS;\n        }\n    }\n    else\n    {\n        return SX9500_INTERNAL_ERROR;\n    }\n}\n\nSX9500_status SX9500_Read_Proximity_Sensors(uint8_t* data)\n{\n    SX9500_status status = SX9500_SUCCESS;\n\n    if (!initHwDone)\n    {\n        return SX9500_NOINIT_ERROR;\n    }\n\n    if (NULL != data)\n    {\n        RegStat_t prox;\n        status = SX9500_read_single(SX9500_REG_STAT, &prox.octet);\n        if (status != SX9500_SUCCESS)\n        {\n            *data = 0xFF;\n            return status;\n        }\n        else\n        {\n            *data = prox.octet;\n            return SX9500_SUCCESS;\n        }\n    }\n    else\n    {\n        return SX9500_INTERNAL_ERROR;\n    }\n}\n\n"
              }
            }
          },
          "md5": "ffcd80d8535f9ecd6e6d42a101cb9259"
        },
        "tsl2572": {
          "libName": "tsl2572",
          "manufacturer": "AMS",
          "description": "Ambient Light Sensor",
          "type": "Ambient Light Sensor",
          "icon": "",
          "image": "",
          "version": "",
          "eelVersion": "3",
          "shoppingCartLinks": {
            "digikey": {
              "links": {
                "info": "https://www.digikey.com/short/j218d3"
              },
              "cartData": {
                "part": "TSL2572EVM-ND",
                "partid": "3737697",
                "source": "dkstudio",
                "qty": "1"
              }
            }
          },
          "requires": [
            "embedded",
            "i2c",
            "fpmath"
          ],
          "elements": [
            {
              "name": "TSL2572AmbientLight",
              "type": "EmbeddedTSL2572",
              "icon": "EmbeddedAmbientLight.svg",
              "helpPageHref": "https://developer.atmosphereiot.com/documents/elements/amstsl2572element.html",
              "defaultAbility": "readAmbientLight",
              "defaultTrigger": "ambientLightRead",
              "hidden": false,
              "abilities": [
                {
                  "name": "setup",
                  "hidden": true,
                  "code": "\tATMO_TSL2572_Config_t config;\n\tconfig.address = ATMO_PROPERTY(undefined, i2cAddress);\n\tconfig.i2cDriverInstance = ATMO_PROPERTY(undefined, i2cInstance);\n\n\treturn ( ATMO_TSL2572_Init(&config) == ATMO_TSL2572_Status_Success ) ? ATMO_Status_Success : ATMO_Status_Fail;\n"
                },
                {
                  "name": "setEnabled",
                  "triggers": [],
                  "code": "ATMO_TSL2572_SetEnabled(true);\nreturn ATMO_Status_Success;"
                },
                {
                  "name": "setDisabled",
                  "triggers": [],
                  "code": "ATMO_TSL2572_SetEnabled(false);\nreturn ATMO_Status_Success;"
                },
                {
                  "name": "setEnabledDisabled",
                  "triggers": [],
                  "code": "bool enabled = false;\nATMO_GetBool(in, &enabled);\nATMO_TSL2572_SetEnabled(enabled);\nreturn ATMO_Status_Success;"
                },
                {
                  "name": "readAmbientLight",
                  "triggers": [
                    "ambientLightRead"
                  ],
                  "code": "    float lightLux;\n    if(ATMO_TSL2572_GetAmbientLight(&lightLux) != ATMO_TSL2572_Status_Success)\n    {\n        ATMO_CreateValueVoid(out);\n        return ATMO_Status_Fail;\n    }\n    ATMO_CreateValueInt(out, (int)lightLux);\n    return ATMO_Status_Success;"
                }
              ],
              "properties": [
                {
                  "name": "i2cInstance",
                  "input": "driverInstance",
                  "driverType": "i2c"
                },
                {
                  "name": "i2cAddress",
                  "input": "number",
                  "value": "0x39"
                }
              ],
              "triggers": [],
              "variables": [],
              "language": {
                "en-US": {
                  "EmbeddedTSL2572": "AMS TSL2572",
                  "i2cInstance": "I2C Driver Instance",
                  "i2cAddress": "I2C Address",
                  "setEnabled": "Set Enabled",
                  "setDisabled": "Set Disabled",
                  "setEnabledDisabled": "Set Enabled State",
                  "readAmbientLight": "Read Ambient Light (lux)",
                  "ambientLightRead": "Ambient Light Read"
                }
              }
            }
          ],
          "files": {
            "common": {
              "headers": {
                "tsl2572.h": "#ifndef __ATMO_TSL2572_H_\r\n#define __ATMO_TSL2572_H_\r\n\r\n\r\n#include \"../app_src/atmosphere_platform.h\"\r\n#include \"../i2c/i2c.h\"\r\n\r\ntypedef enum {\r\n    ATMO_TSL2572_Status_Success              = 0x00u,  // Common - Operation was successful\r\n    ATMO_TSL2572_Status_Fail                 = 0x01u,  // Common - Operation failed\r\n    ATMO_TSL2572_Status_Initialized          = 0x02u,  // Common - Peripheral already initialized\r\n    ATMO_TSL2572_Status_Invalid              = 0x03u,  // Common - Invalid operation or result\r\n    ATMO_TSL2572_Status_NotSupported         = 0x04u,  // Common - Feature not supported by platform\r\n} ATMO_TSL2572_Status_t;\r\n\r\ntypedef struct {\r\n    uint16_t address;\r\n    ATMO_DriverInstanceHandle_t i2cDriverInstance;\r\n} ATMO_TSL2572_Config_t;\r\n\r\n\r\n/**\r\n * Initialize TSL2572 Driver\r\n *\r\n * @param[in] config - Device configuration (optional)\r\n */\r\nATMO_TSL2572_Status_t ATMO_TSL2572_Init(ATMO_TSL2572_Config_t *config);\r\n\r\n/**\r\n * Enable/Disable TSL2572 Driver\r\n *\r\n * @param[in] enabled\r\n */\r\nATMO_TSL2572_Status_t ATMO_TSL2572_SetEnabled(bool enabled);\r\n\r\n/**\r\n * Get enabled/disabled status of TSL2572 driver\r\n *\r\n * @param[out] enabled\r\n */\r\nATMO_TSL2572_Status_t ATMO_TSL2572_GetEnabled(bool *enabled);\r\n\r\n/**\r\n * Set basic device configuration\r\n *\r\n * @param[in] config\r\n */\r\nATMO_TSL2572_Status_t ATMO_TSL2572_SetConfiguration(const ATMO_TSL2572_Config_t *config);\r\n\r\n/**\r\n * Get device configuration\r\n *\r\n * @param[out] config\r\n */\r\nATMO_TSL2572_Status_t ATMO_TSL2572_GetConfiguration(ATMO_TSL2572_Config_t *config);\r\n\r\n/**\r\n * Get ambient light intensity in lux\r\n *\r\n * @param[out] lightLux\r\n */\r\nATMO_TSL2572_Status_t ATMO_TSL2572_GetAmbientLight(float *lightLux);\r\n\r\n\r\n#endif\r\n",
                "tsl2572_internal.h": "/*\r\n * Copyright (c) 2018 NXP\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *\r\n * o Redistributions of source code must retain the above copyright notice, this list\r\n *   of conditions and the following disclaimer.\r\n *\r\n * o Redistributions in binary form must reproduce the above copyright notice, this\r\n *   list of conditions and the following disclaimer in the documentation and/or\r\n *   other materials provided with the distribution.\r\n *\r\n * o Neither the name of the copyright holder nor the names of its\r\n *   contributors may be used to endorse or promote products derived from this\r\n *   software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\r\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\r\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n#ifndef TSL2572_H_\r\n#define TSL2572_H_\r\n\r\n#include \"../app_src/atmosphere_platform.h\"\r\n\r\n//enum tsl2572_status {\r\n//    sensor_success = 0,\r\n//    sensor_I2C_error = 1,\r\n//    sensor_invalid_ID = 2,\r\n//    sensor_wrong_parameter = 3\r\n//};\r\n\r\ntypedef struct _tsl2572_IoFunc_t\r\n{\r\n  uint8_t   (*I2C_Read)(uint8_t *writeBuf, uint32_t writeSize, uint8_t *readBuf, uint32_t readSize);\r\n  uint8_t   (*I2C_Write)(uint8_t *writeBuf, uint32_t writeSize);\r\n  void         (*WaitMsec)(uint32_t millisec);\r\n} tsl2572_IoFunc_t, *ptsl2572_IoFunc_t;\r\n\r\n/**\r\n * struct tsl2x7x_default_settings - power on defaults unless\r\n *                                   overridden by platform data.\r\n *  @als_time:              ALS Integration time - multiple of 50mS\r\n *  @als_gain:              Index into the ALS gain table.\r\n *  @als_gain_level:        ALS gain level (When asserted, the 1× and 8× ALS gain (AGAIN) modes are scaled by 0.16)\r\n *  @wait_time:             Time between PRX and ALS cycles\r\n *                          in 2.7 periods\r\n *  @wlong:                 When asserted, the wait cycles are increased by a factor 12× from that programmed in the WTIME register\r\n *  @interrupts_enable:     Enable/Disable als interrupts\r\n *  @persistence:           H/W Filters, Number of 'out of limits'\r\n *                          ADC readings ALS.\r\n *  @als_thresh_low:        CH0 'low' count to trigger interrupt.\r\n *  @als_thresh_high:       CH0 'high' count to trigger interrupt.\r\n *  @als_enable:            This bit actives the two channel ADC\r\n *  @wait_enable:           This bit activates the wait feature.\r\n *  @power_on:              This bit activates the internal oscillator to permit the timers and ADC channels to operate\r\n *  @glass_attenuation:     scaling factor referred to as glass attenuation (GA) can be used to compensate for attenuation\r\n */\r\nstruct tsl2x7x_settings {\r\n    uint8_t als_time;\r\n    uint8_t als_gain;\r\n    bool als_gain_level;\r\n    uint8_t wait_time;\r\n    bool wlong;\r\n    bool  interrupts_enable;\r\n    uint8_t  persistence;\r\n    uint16_t als_thresh_low;\r\n    uint16_t als_thresh_high;\r\n    bool als_enable;\r\n    bool wait_enable;\r\n    bool power_on;\r\n    float glass_attenuation;\r\n};\r\n\r\n/****************************************************************************\r\n * Function Prototypes\r\n ****************************************************************************/\r\nvoid TSL2572_Init_Driver(tsl2572_IoFunc_t* pIoFunc);\r\nuint8_t TSL2572_Init_HW(void);\r\nuint8_t TSL2572_ReadAmbientLight(float *lux);\r\nuint8_t TSL2572_SetALSThresholds(uint16_t ALS_interrupt_Low_Threshold, uint16_t ALS_interrupt_High_Threshold);\r\nuint8_t TSL2572_GetALSThresholds(uint16_t *ALS_interrupt_Low_Threshold, uint16_t *ALS_interrupt_High_Threshold);\r\nuint8_t TSL2572_EnableALSInterrupts(bool AIEN);\r\nuint8_t TSL2572_ClearALSInterrupt(void);\r\nuint8_t TSL2572_SetALSPersistence(uint8_t APERS);\r\nuint8_t TSL2572_Enable_ALS(bool AEN);\r\nuint8_t TSL2572_Power_ON(bool PON);\r\nuint8_t TSL2572_Enable_Wait(bool WEN);\r\nuint8_t TSL2572_ReadAllRegisters(uint8_t *RegData);\r\nuint8_t TSL2572_ReadCH0(uint8_t *RegData);\r\nuint8_t TSL2572_SetWaitTime(uint8_t WTIME, bool WLONG);\r\nuint8_t TSL2572_SetALSGain(uint8_t AGAIN, bool AGL);\r\nuint8_t TSL2572_SetALSTime(uint8_t ATIME);\r\n\r\n#endif /* TSL2572_H_ */\r\n"
              },
              "objects": {
                "tsl2572.c": "#include \"tsl2572.h\"\r\n#include \"tsl2572_internal.h\"\r\n#include \"../app_src/atmosphere_platform.h\"\r\n\r\ntypedef struct {\r\n    ATMO_TSL2572_Config_t config;\r\n    bool configured;\r\n} ATMO_TSL2572_Priv_Config;\r\n\r\nstatic ATMO_TSL2572_Priv_Config _ATMO_TSL2572_config;\r\n\r\nstatic ATMO_I2C_Peripheral_t _ATMO_TSL2572_i2cConfig = {\r\n    .operatingMode = ATMO_I2C_OperatingMode_Master,\r\n    .baudRate = ATMO_I2C_BaudRate_Standard_Mode\r\n};\r\n\r\nstatic bool tsl2572Enabled = true;\r\n\r\nstatic uint8_t _ATMO_TSL2572_I2CRead_Simple(uint8_t *writeBuf, uint32_t writeSize, uint8_t *readBuf, uint32_t readSize)\r\n{\r\n\tATMO_I2C_Status_t status = ATMO_I2C_MasterRead(_ATMO_TSL2572_config.config.i2cDriverInstance, _ATMO_TSL2572_config.config.address, writeBuf, writeSize, readBuf, readSize, 1000);\r\n\treturn (status == ATMO_I2C_Status_Success) ? 0 : 1;\r\n}\r\n\r\nstatic uint8_t _ATMO_TSL2572_I2CWrite_Simple(uint8_t *writeBuf, uint32_t writeSize)\r\n{\r\n\tATMO_I2C_Status_t status = ATMO_I2C_MasterWrite(_ATMO_TSL2572_config.config.i2cDriverInstance, _ATMO_TSL2572_config.config.address, NULL, 0, writeBuf, writeSize, 1000);\r\n\treturn (status == ATMO_I2C_Status_Success) ? 0 : 1;\r\n}\r\nATMO_TSL2572_Status_t ATMO_TSL2572_Init(ATMO_TSL2572_Config_t *config)\r\n{\r\n    // Did the user supply a configuration?\r\n    if( config )\r\n    {\r\n        ATMO_TSL2572_SetConfiguration(config);\r\n    }\r\n    else\r\n    {\r\n    \t_ATMO_TSL2572_config.configured = false;\r\n    }\r\n\r\n    tsl2572_IoFunc_t io;\r\n    io.I2C_Read = _ATMO_TSL2572_I2CRead_Simple;\r\n    io.I2C_Write = _ATMO_TSL2572_I2CWrite_Simple;\r\n    io.WaitMsec = ATMO_PLATFORM_DelayMilliseconds;\r\n    TSL2572_Init_Driver(&io);\r\n    TSL2572_Init_HW();\r\n\r\n    return ATMO_TSL2572_Status_Success;\r\n}\r\n\r\nATMO_TSL2572_Status_t ATMO_TSL2572_SetEnabled(bool enabled)\r\n{\r\n    tsl2572Enabled = enabled;\r\n    return ATMO_TSL2572_Status_Success;\r\n}\r\n\r\nATMO_TSL2572_Status_t ATMO_TSL2572_GetEnabled(bool *enabled)\r\n{\r\n    *enabled = tsl2572Enabled;\r\n    return ATMO_TSL2572_Status_Success;\r\n}\r\n\r\nATMO_TSL2572_Status_t ATMO_TSL2572_SetConfiguration(const ATMO_TSL2572_Config_t *config)\r\n{\r\n    if( config == NULL || !tsl2572Enabled)\r\n    {\r\n        return ATMO_TSL2572_Status_Fail;\r\n    }\r\n\r\n    if( ATMO_I2C_SetConfiguration(config->i2cDriverInstance, &_ATMO_TSL2572_i2cConfig) != ATMO_I2C_Status_Success )\r\n    {\r\n        return ATMO_TSL2572_Status_Fail;\r\n    }\r\n\r\n    memcpy( &_ATMO_TSL2572_config.config, config, sizeof(ATMO_TSL2572_Config_t) );\r\n    _ATMO_TSL2572_config.configured = true;\r\n\r\n    return ATMO_TSL2572_Status_Success;\r\n}\r\n\r\nATMO_TSL2572_Status_t ATMO_TSL2572_GetConfiguration(ATMO_TSL2572_Config_t *config)\r\n{\r\n    if( config == NULL || !_ATMO_TSL2572_config.configured )\r\n    {\r\n        return ATMO_TSL2572_Status_Fail;\r\n    }\r\n\r\n    memcpy(config, &_ATMO_TSL2572_config.config, sizeof(ATMO_TSL2572_Config_t));\r\n\r\n    return ATMO_TSL2572_Status_Success;\r\n}\r\n\r\nATMO_TSL2572_Status_t ATMO_TSL2572_GetAmbientLight(float *lightLux)\r\n{\r\n    if(!tsl2572Enabled)\r\n    {\r\n        return ATMO_TSL2572_Status_Fail;\r\n    }\r\n    \r\n\tif( TSL2572_ReadAmbientLight(lightLux) != 0 )\r\n\t{\r\n\t\treturn ATMO_TSL2572_Status_Fail;\r\n\t}\r\n\r\n\treturn ATMO_TSL2572_Status_Success;\r\n}\r\n\r\n\r\n\r\n",
                "tsl2572_internal.c": "/*\r\n * Copyright (c) 2018 NXP\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *\r\n * o Redistributions of source code must retain the above copyright notice, this list\r\n *   of conditions and the following disclaimer.\r\n *\r\n * o Redistributions in binary form must reproduce the above copyright notice, this\r\n *   list of conditions and the following disclaimer in the documentation and/or\r\n *   other materials provided with the distribution.\r\n *\r\n * o Neither the name of the copyright holder nor the names of its\r\n *   contributors may be used to endorse or promote products derived from this\r\n *   software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\r\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\r\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n#include \"tsl2572_internal.h\"\r\n\r\n/* TSL2572 Register definitions */\r\n#define TSL2572_I2C_SLAVE_ADDRESS        0x39\r\n#define TSL2572_DEVICE_ID                0x34    // TSL25721\r\n#define TSL2572_REG_ENABLE               0x00\r\n#define TSL2572_REG_ATIME                0x01\r\n#define TSL2572_REG_WTIME                0x03\r\n#define TSL2572_REG_AILTL                0x04\r\n#define TSL2572_REG_AILTH                0x05\r\n#define TSL2572_REG_AIHTL                0x06\r\n#define TSL2572_REG_AIHTH                0x07\r\n#define TSL2572_REG_PERS                 0x0C\r\n#define TSL2572_REG_CONFIG               0x0D\r\n#define TSL2572_REG_CONTROL              0x0F\r\n#define TSL2572_REG_ID                   0x12\r\n#define TSL2572_REG_STATUS               0x13\r\n#define TSL2572_REG_C0DATA               0x14\r\n#define TSL2572_REG_C0DATAH              0x15\r\n#define TSL2572_REG_C1DATA               0x16\r\n#define TSL2572_REG_C1DATAH              0x17\r\n\r\n/* tsl2572 COMMAND register masks */\r\n#define TSL2572_COMMAND_MSK              0x80\r\n#define TSL2572_TYPE_REPEAT_MSK          0x00\r\n#define TSL2572_TYPE_AUTO_INC_MSK        0x20\r\n#define TSL2572_TYPE_SPL_FN_MSK          0x60\r\n#define TSL2572_ADD_ALS_INT_CLR_MSK      0x06\r\n\r\n/* tsl2572 CONTROL register masks */\r\n#define TSL2572_AGAIN_MASK               0x03\r\n\r\n/* tsl2572 CONFIG register masks */\r\n#define TSL2572_AGL_MSK                  0x04\r\n#define TSL2572_WLONG_MSK                0x02\r\n\r\n/* tsl2572 PERS register masks */\r\n#define TSL2572_APERS_MSK                0x0F\r\n\r\n/* tsl2572 ENABLE register masks */\r\n#define TSL2572_AIEN_MSK                 0x10\r\n#define TSL2572_AEN_MSK                  0x02\r\n#define TSL2572_WEN_MSK                  0x08\r\n#define TSL2572_PON_MSK                  0x01\r\n\r\nenum tsl2572_status {\r\n    TSL2572_sensor_success = 0,\r\n    TSL2572_sensor_I2C_error = 1,\r\n    TSL2572_sensor_invalid_ID = 2,\r\n    TSL2572_sensor_wrong_parameter = 3\r\n};\r\n\r\nstatic const struct tsl2x7x_settings tsl2x7x_default_settings = {\r\n        0xDB,\r\n        0,\r\n        true,\r\n        74,\r\n        false,\r\n        true,\r\n        1,\r\n        100,\r\n        300,\r\n        true,\r\n        true,\r\n        true,\r\n        1\r\n};\r\n\r\n/***********************************************************************************/\r\n/* variables                                                                       */\r\n/***********************************************************************************/\r\nstatic tsl2572_IoFunc_t sTSL2572_Func;\r\nuint8_t gain_val = 0;\r\n\r\n/*****************************************************************************\r\n * Public functions\r\n ****************************************************************************/\r\n\r\n/********************************************************************************/\r\n/* TSL2572_Init_Driver                                                          */\r\n/* wrap the low level function (I2C write, I2C read, WaitMsec)                  */\r\n/* required by TSL2572 driver                                                   */\r\n/* Note : this function does not initialize the HW                              */\r\n/********************************************************************************/\r\nvoid TSL2572_Init_Driver(tsl2572_IoFunc_t* pIoFunc){\r\n    sTSL2572_Func = *pIoFunc;\r\n}\r\n\r\n/********************************************************************************/\r\n/* TSL2572_Init_HW                                                              */\r\n/* initialize the HW                                                            */\r\n/********************************************************************************/\r\nuint8_t TSL2572_Init_HW(void){\r\n    uint8_t wBuf[2];\r\n    uint8_t rBuf;\r\n\r\n    /* check device ID */\r\n    wBuf[0] = TSL2572_REG_ID | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf[0], 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    if (rBuf != TSL2572_DEVICE_ID){\r\n        return TSL2572_sensor_invalid_ID;\r\n    }\r\n\r\n    /* Set ALS gain */\r\n    if (TSL2572_sensor_success != TSL2572_SetALSGain(tsl2x7x_default_settings.als_gain,tsl2x7x_default_settings.als_gain_level)){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n\r\n    /* Set ALS time */\r\n    if (TSL2572_sensor_success != TSL2572_SetALSTime(tsl2x7x_default_settings.als_time)){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n\r\n    /* configure the wait time */\r\n    if (TSL2572_sensor_success != TSL2572_SetWaitTime(tsl2x7x_default_settings.wait_time,tsl2x7x_default_settings.wlong)){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n\r\n    /* set the ALS interrupt thresholds */\r\n    if (TSL2572_sensor_success != TSL2572_SetALSThresholds(tsl2x7x_default_settings.als_thresh_low,tsl2x7x_default_settings.als_thresh_high)){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n\r\n    /* set the ALS interrupt persistence */\r\n    if (TSL2572_sensor_success != TSL2572_SetALSPersistence(tsl2x7x_default_settings.persistence)){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n\r\n    /* ALS Enable */\r\n    if (TSL2572_sensor_success != TSL2572_Enable_ALS(tsl2x7x_default_settings.als_enable)){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n\r\n    /* Wait Enable */\r\n    if (TSL2572_sensor_success != TSL2572_Enable_Wait(tsl2x7x_default_settings.wait_enable)){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n\r\n    /* Power ON  */\r\n    if (TSL2572_sensor_success != TSL2572_Power_ON(tsl2x7x_default_settings.power_on)){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n\r\n    /* clear the sensor IRQ status */\r\n    if (TSL2572_sensor_success != TSL2572_ClearALSInterrupt()){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n\r\n    if (TSL2572_sensor_success != TSL2572_EnableALSInterrupts(tsl2x7x_default_settings.interrupts_enable)){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n\r\n    return TSL2572_sensor_success;\r\n}\r\n\r\n/********************************************************************************/\r\n/* TSL2572_ReadAmbientLight                                                     */\r\n/* sample CH0 and CH1 photo_diodes and compute the human eye response to        */\r\n/* light intensity (in lux)                                                     */\r\n/********************************************************************************/\r\nuint8_t TSL2572_ReadAmbientLight(float *lux){\r\n    uint8_t wBuf[2];\r\n    uint8_t rBuf[4];\r\n    int c0,c1;\r\n    float lux1,lux2,cpl;\r\n\r\n    /* Read CH0 low data register, CH0 high data register, CH1 low data register and CH1 high data register */\r\n    wBuf[0] = TSL2572_REG_C0DATA | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf[0], 1, &rBuf[0], sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n\r\n    c0 = rBuf[1]<<8 | rBuf[0];\r\n    c1 = rBuf[3]<<8 | rBuf[2];\r\n\r\n    //see TSL2572 datasheet\r\n    cpl = (2.73 * (256-tsl2x7x_default_settings.als_time)) * gain_val / (tsl2x7x_default_settings.glass_attenuation * 60);\r\n    if (tsl2x7x_default_settings.als_gain_level){\r\n        cpl /= 6;\r\n    }\r\n    lux1 = ((float)c0 - (1.87 * (float)c1)) / cpl;\r\n    lux2 = ((0.63 * (float)c0) - (float)c1) / cpl;\r\n    cpl = lux1 >= lux2 ? lux1 : lux2; //max(lux1, lux2);\r\n    *lux = ((cpl >= 0.0) ? cpl : 0.0); //max(cpl, 0.0);\r\n    return TSL2572_sensor_success;\r\n}\r\n\r\n/********************************************************************************/\r\n/* TSL2572_SetALSGain                                                           */\r\n/* AGAIN = 0     ALS Gain value = 1 * gain                                      */\r\n/* AGAIN = 1     ALS Gain value = 8 * gain                                      */\r\n/* AGAIN = 2     ALS Gain value = 16 * gain                                     */\r\n/* AGAIN = 3     ALS Gain value = 120 * gain                                    */\r\n/* AGL = 0       AGAIN = 0 or 1 or 2 or 3     -> scaling by 1                   */\r\n/* AGL = 1       AGAIN = 0 or 1               -> scaling by 0.16                */\r\n/* Do not use AGL = 1 with AGAIN = 2 or 3                                       */\r\n/********************************************************************************/\r\nuint8_t TSL2572_SetALSGain(uint8_t AGAIN, bool AGL){\r\n    uint8_t wBuf[2];\r\n    uint8_t rBuf;\r\n\r\n    if ((AGAIN > 1) && (AGL)){\r\n        return TSL2572_sensor_wrong_parameter;\r\n    }\r\n\r\n    wBuf[0] = TSL2572_REG_CONTROL | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    wBuf[1] = AGAIN & TSL2572_AGAIN_MASK;\r\n\r\n    if (sTSL2572_Func.I2C_Write(&wBuf[0], sizeof (wBuf) )){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n\r\n    /* read CONFIG register */\r\n    wBuf[0] = TSL2572_REG_CONFIG | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf[0], 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n\r\n    /* mask AGL bit */\r\n    if (AGL){\r\n        wBuf[1] = rBuf | TSL2572_AGL_MSK;\r\n    }\r\n    else {\r\n        wBuf[1] = rBuf & ~(TSL2572_AGL_MSK);\r\n    }\r\n\r\n    /* write CONFIG register */\r\n    if (sTSL2572_Func.I2C_Write(&wBuf[0], sizeof (wBuf) )){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n\r\n    if ((AGAIN & TSL2572_AGAIN_MASK) == 0) gain_val = 1;\r\n    else if ((AGAIN & TSL2572_AGAIN_MASK) == 1) gain_val = 8;\r\n    else if ((AGAIN & TSL2572_AGAIN_MASK) == 2) gain_val = 16;\r\n    else if ((AGAIN & TSL2572_AGAIN_MASK) == 3) gain_val = 120;\r\n\r\n    return TSL2572_sensor_success;\r\n}\r\n\r\n/********************************************************************************/\r\n/* TSL2572_SetALSTime                                                           */\r\n/* set ALS Time = the ALS ADC integration time                                  */\r\n/* ATIME = 0xFF     ALS integration cycles = 1,   time = 2.73ms                 */\r\n/* ATIME = 0xF6     ALS integration cycles = 10,  time = 27.3ms                 */\r\n/* ATIME = 0xDB     ALS integration cycles = 37,  time = 101ms                  */\r\n/* ATIME = 0xC0     ALS integration cycles = 64,  time = 175ms                  */\r\n/* ATIME = 0x00     ALS integration cycles = 256, time = 699ms                  */\r\n/********************************************************************************/\r\nuint8_t TSL2572_SetALSTime(uint8_t ATIME){\r\n    uint8_t wBuf[2];\r\n\r\n    wBuf[0] = TSL2572_REG_ATIME | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    wBuf[1] = ATIME;\r\n\r\n    if (sTSL2572_Func.I2C_Write(&wBuf[0], sizeof (wBuf) )){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    return TSL2572_sensor_success;\r\n}\r\n\r\n/********************************************************************************/\r\n/* TSL2572_SetALSThresholds                                                        */\r\n/* set ALS interrupt threshold low and threshold high                             */\r\n/* the thresholds refer to C0 photo_diode only                                     */\r\n/* (C1 is not used to trigger interrupts)                                        */\r\n/********************************************************************************/\r\nuint8_t TSL2572_SetALSThresholds(uint16_t ALS_interrupt_Low_Threshold, uint16_t ALS_interrupt_High_Threshold){\r\n    uint8_t wBuf[5];\r\n\r\n    wBuf[0] = TSL2572_REG_AILTL | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    wBuf[1] = (uint8_t)(ALS_interrupt_Low_Threshold & 0x00FF);\r\n    wBuf[2] = (uint8_t)((ALS_interrupt_Low_Threshold & 0xFF00) >> 8);\r\n    wBuf[3] = (uint8_t)(ALS_interrupt_High_Threshold & 0x00FF);\r\n    wBuf[4] = (uint8_t)((ALS_interrupt_High_Threshold & 0xFF00) >> 8);\r\n\r\n    if (sTSL2572_Func.I2C_Write(&wBuf[0], sizeof (wBuf) )){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    return TSL2572_sensor_success;\r\n}\r\n\r\n/********************************************************************************/\r\n/* TSL2572_SetALSThresholds                                                        */\r\n/* get ALS interrupt threshold low and threshold high                             */\r\n/********************************************************************************/\r\nuint8_t TSL2572_GetALSThresholds(uint16_t *ALS_interrupt_Low_Threshold, uint16_t *ALS_interrupt_High_Threshold){\r\n    uint8_t wBuf[2];\r\n    uint8_t rBuf[4];\r\n\r\n    /* Read CH0 low data register, CH0 high data register, CH1 low data register and CH1 high data register */\r\n    wBuf[0] = TSL2572_REG_AILTL | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf[0], 1, &rBuf[0], sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n\r\n    *ALS_interrupt_Low_Threshold = (uint16_t) (rBuf[1]<<8 | rBuf[0]);\r\n    *ALS_interrupt_High_Threshold = (uint16_t) (rBuf[3]<<8 | rBuf[2]);\r\n    return TSL2572_sensor_success;\r\n}\r\n\r\n/********************************************************************************/\r\n/* TSL2572_SetALSPersistence                                                    */\r\n/* set ALS interrupt persistence filter                                            */\r\n/* APERS = 0     every ALS cycle generates an interrupt                           */\r\n/* APERS = 1     1 value outside of threshold range generates an interrupt        */\r\n/* APERS = 2     2 consecutive values out of range generates an interrupt         */\r\n/* APERS = 3     3 consecutive values out of range generates an interrupt         */\r\n/* APERS = 4     5 consecutive values out of range generates an interrupt         */\r\n/* APERS = 5     10 consecutive values out of range generates an interrupt         */\r\n/* APERS = 6     15 consecutive values out of range generates an interrupt         */\r\n/* APERS = 7     20 consecutive values out of range generates an interrupt         */\r\n/* APERS = 8     25 consecutive values out of range generates an interrupt         */\r\n/* APERS = 9     30 consecutive values out of range generates an interrupt         */\r\n/* APERS = 10    35 consecutive values out of range generates an interrupt         */\r\n/* APERS = 11    40 consecutive values out of range generates an interrupt         */\r\n/* APERS = 12    45 consecutive values out of range generates an interrupt         */\r\n/* APERS = 13    50 consecutive values out of range generates an interrupt         */\r\n/* APERS = 14    55 consecutive values out of range generates an interrupt         */\r\n/* APERS = 15    60 consecutive values out of range generates an interrupt         */\r\n/********************************************************************************/\r\nuint8_t TSL2572_SetALSPersistence(uint8_t APERS){\r\n    uint8_t wBuf[2];\r\n\r\n    wBuf[0] = TSL2572_REG_PERS | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    wBuf[1] = APERS & TSL2572_APERS_MSK;\r\n\r\n    if (sTSL2572_Func.I2C_Write(&wBuf[0], sizeof (wBuf) )){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    return TSL2572_sensor_success;\r\n}\r\n\r\n/********************************************************************************/\r\n/* TSL2572_SetWaitTime                                                             */\r\n/* WTIME = 0xFF     Wait time = 2.73ms (WLONG = 0), 0.033s (WLONG = 1)           */\r\n/* WTIME = 0xB6     Wait time = 202ms (WLONG = 0), 2.4s (WLONG = 1)               */\r\n/* WTIME = 0x00     Wait time = 699ms (WLONG = 0), 8.4s (WLONG = 1)               */\r\n/* The Wait time register should be configured before TSL2572_Enable_ALS(true)    */\r\n/********************************************************************************/\r\nuint8_t TSL2572_SetWaitTime(uint8_t WTIME, bool WLONG){\r\n    uint8_t wBuf[2];\r\n    uint8_t rBuf;\r\n\r\n    wBuf[0] = TSL2572_REG_WTIME | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    wBuf[1] = WTIME;\r\n\r\n    if (sTSL2572_Func.I2C_Write(&wBuf[0], sizeof (wBuf) )){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n\r\n    /* read CONFIG register */\r\n    wBuf[0] = TSL2572_REG_CONFIG | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf[0], 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n\r\n    /* mask WLONG bit */\r\n    if (WLONG){\r\n        wBuf[1] = rBuf | TSL2572_WLONG_MSK;\r\n    }\r\n    else {\r\n        wBuf[1] = rBuf & ~(TSL2572_WLONG_MSK);\r\n    }\r\n\r\n    /* write CONFIG register */\r\n    if (sTSL2572_Func.I2C_Write(&wBuf[0], sizeof (wBuf) )){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    return TSL2572_sensor_success;\r\n}\r\n\r\nuint8_t TSL2572_EnableALSInterrupts(bool AIEN){\r\n    uint8_t wBuf[2];\r\n    uint8_t rBuf;\r\n\r\n    /* read ENABLE register */\r\n    wBuf[0] = TSL2572_REG_ENABLE | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf[0], 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n\r\n    /* mask AIEN bit */\r\n    if (AIEN){\r\n        wBuf[1] = rBuf | TSL2572_AIEN_MSK;\r\n    }\r\n    else {\r\n        wBuf[1] = rBuf & ~(TSL2572_AIEN_MSK);\r\n    }\r\n\r\n    /* write ENABLE register */\r\n    if (sTSL2572_Func.I2C_Write(&wBuf[0], sizeof (wBuf) )){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    return TSL2572_sensor_success;\r\n}\r\n\r\nuint8_t TSL2572_ClearALSInterrupt(void){\r\n    uint8_t wBuf;\r\n\r\n    wBuf = TSL2572_COMMAND_MSK | TSL2572_TYPE_SPL_FN_MSK | TSL2572_ADD_ALS_INT_CLR_MSK;\r\n    if (sTSL2572_Func.I2C_Write(&wBuf, sizeof (wBuf) )){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    return TSL2572_sensor_success;\r\n}\r\n\r\n/********************************************************************************/\r\n/* TSL2572_Enable_ALS                                                             */\r\n/********************************************************************************/\r\nuint8_t TSL2572_Enable_ALS(bool AEN){\r\n    uint8_t wBuf[2];\r\n    uint8_t rBuf;\r\n\r\n    /* read ENABLE register */\r\n    wBuf[0] = TSL2572_REG_ENABLE | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf[0], 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n\r\n    /* mask AEN bit */\r\n    if (AEN){\r\n        wBuf[1] = rBuf | TSL2572_AEN_MSK;\r\n    }\r\n    else {\r\n        wBuf[1] = rBuf & ~(TSL2572_AEN_MSK);\r\n    }\r\n\r\n    /* write ENABLE register */\r\n    if (sTSL2572_Func.I2C_Write(&wBuf[0], sizeof (wBuf) )){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    return TSL2572_sensor_success;\r\n}\r\n\r\n/********************************************************************************/\r\n/* TSL2572_Enable_Wait                                                             */\r\n/********************************************************************************/\r\nuint8_t TSL2572_Enable_Wait(bool WEN){\r\n    uint8_t wBuf[2];\r\n    uint8_t rBuf;\r\n\r\n    /* read ENABLE register */\r\n    wBuf[0] = TSL2572_REG_ENABLE | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf[0], 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n\r\n    /* mask WEN bit */\r\n    if (WEN){\r\n        wBuf[1] = rBuf | TSL2572_WEN_MSK;\r\n    }\r\n    else {\r\n        wBuf[1] = rBuf & ~(TSL2572_WEN_MSK);\r\n    }\r\n\r\n    /* write ENABLE register */\r\n    if (sTSL2572_Func.I2C_Write(&wBuf[0], sizeof (wBuf) )){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    return TSL2572_sensor_success;\r\n}\r\n\r\n/********************************************************************************/\r\n/* TSL2572_Power_ON                                                             */\r\n/********************************************************************************/\r\nuint8_t TSL2572_Power_ON(bool PON){\r\n    uint8_t wBuf[2];\r\n    uint8_t rBuf;\r\n\r\n    /* read ENABLE register */\r\n    wBuf[0] = TSL2572_REG_ENABLE | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf[0], 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n\r\n    /* mask PON bit */\r\n    if (PON){\r\n        wBuf[1] = rBuf | TSL2572_PON_MSK;\r\n    }\r\n    else {\r\n        wBuf[1] = rBuf & ~(TSL2572_PON_MSK);\r\n    }\r\n\r\n    /* write ENABLE register */\r\n    if (sTSL2572_Func.I2C_Write(&wBuf[0], sizeof (wBuf) )){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    return TSL2572_sensor_success;\r\n}\r\n\r\n/********************************************************************************/\r\n/* TSL2572_ReadAllRegisters                                                        */\r\n/* RegData contains 16 * uint8_t                                                */\r\n/********************************************************************************/\r\nuint8_t TSL2572_ReadAllRegisters(uint8_t *RegData){\r\n    uint8_t wBuf;\r\n    uint8_t rBuf;\r\n\r\n    /* Read ENABLE register */\r\n    wBuf = TSL2572_REG_ENABLE | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf, 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    *RegData = (uint8_t)(rBuf);\r\n\r\n    /* Read ATIME register */\r\n    wBuf = TSL2572_REG_ATIME | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf, 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    RegData++;\r\n    *RegData = (uint8_t)(rBuf);\r\n\r\n    /* Read WTIME register */\r\n    wBuf = TSL2572_REG_WTIME | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf, 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    RegData++;\r\n    *RegData = (uint8_t)(rBuf);\r\n\r\n    /* Read AILTL register */\r\n    wBuf = TSL2572_REG_AILTL | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf, 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    RegData++;\r\n    *RegData = (uint8_t)(rBuf);\r\n\r\n    /* Read AILTH register */\r\n    wBuf = TSL2572_REG_AILTH | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf, 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    RegData++;\r\n    *RegData = (uint8_t)(rBuf);\r\n\r\n    /* Read AIHTL register */\r\n    wBuf = TSL2572_REG_AIHTL | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf, 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    RegData++;\r\n    *RegData = (uint8_t)(rBuf);\r\n\r\n    /* Read AIHTH register */\r\n    wBuf = TSL2572_REG_AIHTH | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf, 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    RegData++;\r\n    *RegData = (uint8_t)(rBuf);\r\n\r\n    /* Read PERS register */\r\n    wBuf = TSL2572_REG_PERS | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf, 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    RegData++;\r\n    *RegData = (uint8_t)(rBuf);\r\n\r\n    /* Read CONFIG register */\r\n    wBuf = TSL2572_REG_CONFIG | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf, 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    RegData++;\r\n    *RegData = (uint8_t)(rBuf);\r\n\r\n    /* Read CONTROL register */\r\n    wBuf = TSL2572_REG_CONTROL | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf, 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    RegData++;\r\n    *RegData = (uint8_t)(rBuf);\r\n\r\n    /* Read ID register */\r\n    wBuf = TSL2572_REG_ID | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf, 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    RegData++;\r\n    *RegData = (uint8_t)(rBuf);\r\n\r\n    /* Read STATUS register */\r\n    wBuf = TSL2572_REG_STATUS | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf, 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    RegData++;\r\n    *RegData = (uint8_t)(rBuf);\r\n\r\n    /* Read C0DATA register */\r\n    wBuf = TSL2572_REG_C0DATA | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf, 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    RegData++;\r\n    *RegData = (uint8_t)(rBuf);\r\n\r\n    /* Read C0DATAH register */\r\n    wBuf = TSL2572_REG_C0DATAH | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf, 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    RegData++;\r\n    *RegData = (uint8_t)(rBuf);\r\n\r\n    /* Read C1DATA register */\r\n    wBuf = TSL2572_REG_C1DATA | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf, 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    RegData++;\r\n    *RegData = (uint8_t)(rBuf);\r\n\r\n    /* Read C1DATAH register */\r\n    wBuf = TSL2572_REG_C1DATAH | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf, 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    RegData++;\r\n    *RegData = (uint8_t)(rBuf);\r\n\r\n    return TSL2572_sensor_success;\r\n}\r\n\r\n/********************************************************************************/\r\n/* TSL2572_ReadCH0                                                                 */\r\n/* RegData contains 2 * uint8_t                                                    */\r\n/********************************************************************************/\r\nuint8_t TSL2572_ReadCH0(uint8_t *RegData){\r\n    uint8_t wBuf;\r\n    uint8_t rBuf;\r\n\r\n    /* Read C0DATA register */\r\n    wBuf = TSL2572_REG_C0DATA | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf, 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    *RegData = (uint8_t)(rBuf);\r\n\r\n    /* Read C0DATAH register */\r\n    wBuf = TSL2572_REG_C0DATAH | TSL2572_COMMAND_MSK | TSL2572_TYPE_AUTO_INC_MSK;\r\n    if (sTSL2572_Func.I2C_Read(&wBuf, 1, &rBuf, sizeof (rBuf))){\r\n        return TSL2572_sensor_I2C_error;\r\n    }\r\n    RegData++;\r\n    *RegData = (uint8_t)(rBuf);\r\n\r\n    return TSL2572_sensor_success;\r\n}\r\n"
              }
            }
          },
          "md5": "cce3c512cc5785b7af928cb68e9b4d1d"
        }
      },
      "drivers": {
        "adc": [
          {
            "id": 0,
            "name": "ATMO_DRIVERINSTANCE_ADC_ADC1"
          }
        ],
        "ble": [
          {
            "id": 0,
            "name": "ATMO_DRIVERINSTANCE_BLE_BLE1"
          }
        ],
        "block": [
          {
            "id": 0,
            "name": "ATMO_DRIVERINSTANCE_BLOCK_BLOCK1"
          }
        ],
        "datetime": [
          {
            "id": 0,
            "name": "ATMO_DRIVERINSTANCE_DATETIME_DATETIME1"
          }
        ],
        "filesytem": [
          {
            "id": 0,
            "name": "ATMO_DRIVERINSTANCE_FILESYSTEM_FILESYSTEM1"
          }
        ],
        "gpio": [
          {
            "id": 0,
            "name": "ATMO_DRIVERINSTANCE_GPIO_GPIO1"
          }
        ],
        "http": [],
        "i2c": [
          {
            "id": 0,
            "name": "ATMO_DRIVERINSTANCE_I2C_I2C1",
            "primary": true
          },
          {
            "id": 1,
            "name": "ATMO_DRIVERINSTANCE_I2C_I2C2"
          }
        ],
        "interval": [
          {
            "id": 0,
            "name": "ATMO_DRIVERINSTANCE_INTERVAL_INTERVAL1"
          }
        ],
        "nfc": [
          {
            "id": 0,
            "name": "ATMO_DRIVERINSTANCE_NFC_NFC1"
          }
        ],
        "pwm": [
          {
            "id": 0,
            "name": "ATMO_DRIVERINSTANCE_PWM_PWM1"
          }
        ],
        "spi": [
          {
            "id": 0,
            "name": "ATMO_DRIVERINSTANCE_SPI_SPI1"
          }
        ],
        "uart": [
          {
            "id": 0,
            "name": "ATMO_DRIVERINSTANCE_UART_UART1"
          },
          {
            "id": 1,
            "name": "ATMO_DRIVERINSTANCE_UART_UART2"
          },
          {
            "id": 2,
            "name": "ATMO_DRIVERINSTANCE_UART_UART3"
          },
          {
            "id": 3,
            "name": "ATMO_DRIVERINSTANCE_UART_UART4",
            "primary": true
          }
        ],
        "wifi": []
      },
      "static": {
        "header": "static const char _img_cool[4332] = {\n\t0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x7f, 0x00, 0x7f, 0x00, 0xf7,\n\t0xec, 0x00, 0x00, 0x00, 0x00, 0x42, 0x50, 0x56, 0xf6, 0xc8, 0x4e,\n\t0x3c, 0x90, 0xa7, 0x35, 0x5b, 0x6e, 0xf3, 0xc7, 0x4f, 0xf1, 0xc5,\n\t0x4e, 0x59, 0xad, 0xce, 0x41, 0x47, 0x50, 0x15, 0x83, 0xad, 0x55,\n\t0x66, 0x5d, 0xf3, 0xc7, 0x4f, 0xdd, 0xc8, 0x78, 0xf3, 0xc7, 0x4f,\n\t0xf3, 0xc7, 0x4f, 0xf1, 0xc5, 0x4d, 0x06, 0x71, 0xa9, 0x01, 0x81,\n\t0xc5, 0x75, 0xc3, 0xd2, 0x41, 0x48, 0x51, 0xe9, 0xbf, 0x4b, 0x05,\n\t0x6b, 0xa1, 0x05, 0x7d, 0xbd, 0x1d, 0x7b, 0xa2, 0x3d, 0x44, 0x4d,\n\t0x2c, 0x65, 0x78, 0x46, 0x4c, 0x55, 0x5b, 0x62, 0x56, 0xf1, 0xc6,\n\t0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3,\n\t0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf1, 0xcb, 0x5e, 0x06, 0x84, 0xc6,\n\t0x0a, 0x6f, 0xa3, 0x0f, 0x79, 0xaf, 0x00, 0x81, 0xc5, 0x3c, 0xac,\n\t0xa7, 0xeb, 0xf7, 0xf6, 0x40, 0x46, 0x4f, 0x40, 0x46, 0x4f, 0x3a,\n\t0x41, 0x4a, 0xf3, 0xc7, 0x50, 0xc3, 0xa0, 0x3f, 0x06, 0x6c, 0xa2,\n\t0x08, 0x88, 0xc3, 0x09, 0x6e, 0xa2, 0x3e, 0x9d, 0x95, 0xa2, 0xca,\n\t0xd1, 0x39, 0x40, 0x49, 0x3a, 0x41, 0x4a, 0x39, 0x40, 0x49, 0x00,\n\t0x00, 0x00, 0x04, 0x0f, 0x0e, 0x06, 0x10, 0x10, 0x09, 0x1b, 0x1a,\n\t0x14, 0x15, 0x18, 0x16, 0x25, 0x26, 0x2e, 0x33, 0x3a, 0x30, 0x36,\n\t0x3d, 0x32, 0x38, 0x3f, 0x24, 0x29, 0x2e, 0x46, 0x4c, 0x55, 0x39,\n\t0x40, 0x49, 0x36, 0x3c, 0x45, 0x39, 0x3e, 0x47, 0x39, 0x3f, 0x48,\n\t0x38, 0x3f, 0x49, 0x39, 0x40, 0x49, 0x46, 0x4c, 0x55, 0x04, 0x6a,\n\t0xa0, 0x39, 0x40, 0x49, 0x38, 0x43, 0x4b, 0x3a, 0x4a, 0x52, 0x34,\n\t0x46, 0x55, 0x3a, 0x52, 0x59, 0x3a, 0x53, 0x5a, 0x43, 0x4c, 0x55,\n\t0x3b, 0x5d, 0x62, 0x22, 0x5a, 0x7b, 0x2b, 0x4e, 0x65, 0x3b, 0x65,\n\t0x69, 0x3c, 0x6e, 0x71, 0x3c, 0x76, 0x78, 0x33, 0x95, 0x8f, 0x47,\n\t0x4d, 0x56, 0x40, 0x46, 0x4e, 0x47, 0x4d, 0x56, 0x48, 0x4e, 0x57,\n\t0x45, 0x4c, 0x54, 0x46, 0x54, 0x5c, 0x47, 0x55, 0x55, 0x46, 0x4d,\n\t0x56, 0x58, 0x6c, 0x61, 0xf3, 0xc7, 0x4f, 0xde, 0xb6, 0x48, 0xe5,\n\t0xb1, 0xb7, 0x74, 0x90, 0x6d, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f,\n\t0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xc2, 0x9f,\n\t0x3f, 0xc4, 0xa0, 0x3f, 0xf3, 0xc7, 0x4f, 0xc2, 0x9f, 0x3f, 0xc4,\n\t0xa0, 0x3f, 0xf3, 0xc7, 0x4f, 0xb4, 0x9d, 0x49, 0x97, 0xae, 0x76,\n\t0xbc, 0xb5, 0x67, 0xaa, 0xb1, 0x6d, 0xa7, 0xa2, 0x5c, 0xf1, 0xc6,\n\t0x50, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xc8,\n\t0xa4, 0x41, 0xd8, 0xb8, 0x52, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f,\n\t0xed, 0xc2, 0x4e, 0xc4, 0xba, 0x65, 0xd0, 0xbd, 0x60, 0xb2, 0xc2,\n\t0x73, 0x9e, 0xc1, 0x7f, 0xda, 0xc3, 0x5c, 0xf1, 0xc6, 0x4e, 0xf3,\n\t0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf5, 0xc8, 0x4f, 0xe4, 0xc3, 0x56,\n\t0xec, 0xc5, 0x52, 0xe0, 0xc4, 0x59, 0xf1, 0xc7, 0x51, 0xf6, 0xc9,\n\t0x50, 0xf0, 0xc8, 0x59, 0xcc, 0xc4, 0x65, 0xee, 0xcb, 0x67, 0x00,\n\t0x81, 0xc6, 0x00, 0x81, 0xc6, 0x05, 0x6c, 0xa1, 0x00, 0x81, 0xc6,\n\t0x00, 0x81, 0xc6, 0x00, 0x81, 0xc6, 0x00, 0x67, 0x9e, 0x05, 0x6c,\n\t0xa2, 0x00, 0x67, 0x9e, 0x01, 0x69, 0x9f, 0x05, 0x69, 0x9d, 0x14,\n\t0x6c, 0x97, 0x32, 0x7b, 0x8b, 0x00, 0x6a, 0xa2, 0x02, 0x6e, 0xa8,\n\t0x05, 0x72, 0xab, 0x00, 0x75, 0xb4, 0x00, 0x7a, 0xbb, 0x05, 0x7b,\n\t0xba, 0x08, 0x79, 0xb4, 0x41, 0x7e, 0x86, 0x00, 0x7f, 0xc4, 0x3d,\n\t0x8b, 0x8b, 0x3d, 0x83, 0x83, 0x33, 0x95, 0x8f, 0x3d, 0x90, 0x8f,\n\t0x33, 0x96, 0x90, 0x36, 0x9c, 0x96, 0x3c, 0x99, 0x95, 0x36, 0x98,\n\t0x95, 0x3d, 0xa3, 0x9e, 0x17, 0x88, 0xbb, 0x19, 0x90, 0xb6, 0x3c,\n\t0x87, 0xac, 0x36, 0x91, 0xab, 0x26, 0x8c, 0xb4, 0x2a, 0x94, 0xb0,\n\t0x3a, 0xa6, 0xa0, 0x3e, 0xab, 0xa6, 0x3f, 0xae, 0xa8, 0x33, 0xa8,\n\t0xae, 0x3f, 0xb1, 0xab, 0x40, 0xbb, 0xb4, 0x3f, 0xba, 0xb3, 0x3c,\n\t0xb5, 0xb3, 0x2f, 0xaa, 0xb7, 0x5a, 0x9b, 0x99, 0x47, 0x94, 0x92,\n\t0x66, 0x9f, 0x94, 0x76, 0xa3, 0x8c, 0x75, 0xb9, 0x94, 0x47, 0x94,\n\t0xa6, 0x41, 0xa7, 0xa2, 0x40, 0xb4, 0xae, 0x47, 0xb8, 0xad, 0x59,\n\t0xbc, 0xa5, 0x40, 0xb7, 0xb0, 0x40, 0xba, 0xb3, 0x4b, 0xbe, 0xb7,\n\t0x4b, 0xbe, 0xb8, 0x57, 0xb6, 0xaf, 0x76, 0xb7, 0xb4, 0x77, 0xb8,\n\t0xb5, 0x65, 0xb9, 0xaf, 0x68, 0xb4, 0xda, 0x00, 0x81, 0xc6, 0x00,\n\t0x82, 0xc8, 0x0a, 0x85, 0xc2, 0x4e, 0xa7, 0xd7, 0x4e, 0xa8, 0xd9,\n\t0x4e, 0xa1, 0xcd, 0xf3, 0xfa, 0xfa, 0x88, 0xac, 0x85, 0x97, 0xb5,\n\t0xb5, 0xbc, 0xb3, 0xb6, 0xb5, 0xb3, 0xb6, 0xa8, 0xb4, 0xb5, 0xd7,\n\t0xb1, 0xb6, 0xed, 0xb0, 0xb7, 0xe5, 0xb1, 0xb7, 0xf2, 0xb0, 0xb7,\n\t0xf3, 0xb2, 0xba, 0xda, 0xb8, 0x9b, 0x95, 0xc0, 0x84, 0xad, 0xc1,\n\t0xbf, 0xd8, 0xc9, 0x95, 0xec, 0xd1, 0x84, 0xf8, 0xe6, 0xb4, 0xf8,\n\t0xe0, 0x9d, 0xcb, 0xcc, 0xcb, 0xd6, 0xdc, 0xdb, 0xf5, 0xeb, 0xcf,\n\t0xd8, 0xf1, 0xf0, 0xf9, 0xfd, 0xfd, 0xff, 0xff, 0xff, 0xf9, 0xfa,\n\t0xf8, 0xf3, 0xf2, 0xec, 0xe9, 0xef, 0xe6, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x21, 0xf9, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x21, 0xff, 0x0b,\n\t0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x6b,\n\t0x0d, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x3d, 0x30, 0x2e, 0x34, 0x35,\n\t0x34, 0x35, 0x35, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00,\n\t0x7f, 0x00, 0x00, 0x08, 0xfe, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0,\n\t0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0x30, 0x21, 0x02,\n\t0x15, 0x5b, 0x8e, 0x4c, 0x68, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18,\n\t0x33, 0x22, 0x0c, 0x80, 0xe1, 0x88, 0x96, 0x2c, 0x5a, 0x80, 0x10,\n\t0xd0, 0x48, 0xb2, 0xa4, 0xc9, 0x93, 0x07, 0x03, 0x4c, 0x00, 0xb2,\n\t0xe5, 0x23, 0xc8, 0x2d, 0x13, 0x51, 0xca, 0x9c, 0x49, 0x73, 0xe3,\n\t0x04, 0x88, 0x2e, 0xb3, 0xe8, 0xd4, 0xb2, 0xa2, 0xa6, 0xcf, 0x9f,\n\t0x25, 0x03, 0x20, 0xc0, 0xc0, 0x52, 0x4b, 0x4e, 0x9d, 0x20, 0x81,\n\t0x04, 0x00, 0xca, 0xb4, 0x69, 0x42, 0xa1, 0x18, 0x54, 0x78, 0x31,\n\t0x7a, 0x14, 0x29, 0xc8, 0x27, 0x08, 0x9c, 0x6a, 0x15, 0x18, 0xa0,\n\t0xab, 0xd7, 0xaf, 0x60, 0xc3, 0x8a, 0x0d, 0x40, 0x00, 0x01, 0x82,\n\t0x09, 0x18, 0x52, 0x00, 0xb9, 0x42, 0xd5, 0xaa, 0xdb, 0x9d, 0x30,\n\t0xb7, 0x02, 0x3d, 0xbb, 0x42, 0x85, 0x8a, 0x19, 0x78, 0xf3, 0xea,\n\t0xdd, 0xcb, 0x17, 0x88, 0xdf, 0xbf, 0x40, 0x8e, 0x3c, 0xb9, 0xd2,\n\t0xb2, 0xed, 0xdb, 0xc3, 0x3a, 0x63, 0xca, 0x9d, 0x89, 0x60, 0x45,\n\t0x90, 0x22, 0x4a, 0x22, 0x4b, 0x9e, 0x4c, 0xb9, 0xb2, 0x64, 0x90,\n\t0x54, 0x33, 0x57, 0x45, 0x7c, 0x58, 0x0b, 0x86, 0xc5, 0x32, 0x39,\n\t0x1a, 0x49, 0x42, 0xba, 0xb4, 0xe9, 0xd3, 0xa8, 0x53, 0x6f, 0xe1,\n\t0x7c, 0x18, 0x4b, 0x12, 0x25, 0xab, 0x3b, 0x7f, 0x06, 0x6d, 0x92,\n\t0x40, 0x8a, 0x22, 0xa9, 0x73, 0xeb, 0x46, 0x1d, 0x9b, 0x75, 0x16,\n\t0xd7, 0xa5, 0xb1, 0x70, 0xee, 0x49, 0x9b, 0x64, 0x00, 0x15, 0xbb,\n\t0x93, 0x2b, 0xef, 0x7d, 0x78, 0x8b, 0x92, 0xd3, 0xc2, 0xdf, 0x3a,\n\t0x9f, 0x5d, 0x1c, 0x63, 0x80, 0x15, 0xca, 0xb3, 0xef, 0x86, 0x6d,\n\t0x75, 0xcb, 0x16, 0xe0, 0xbc, 0xdf, 0xfe, 0x3e, 0x4f, 0xa2, 0xb8,\n\t0xba, 0xc5, 0x09, 0xb8, 0xb5, 0xab, 0x2f, 0x2d, 0xa4, 0x07, 0x0f,\n\t0x1f, 0x43, 0x94, 0x47, 0xef, 0x3e, 0xbe, 0x48, 0x79, 0xf3, 0x0d,\n\t0x09, 0xd0, 0xc8, 0x3d, 0x44, 0x88, 0xff, 0xff, 0x00, 0x0a, 0x11,\n\t0x5f, 0x72, 0x44, 0xb8, 0xc7, 0xc3, 0x81, 0xf0, 0xe5, 0x36, 0x1f,\n\t0x52, 0xce, 0x99, 0x66, 0x44, 0x56, 0xf8, 0x55, 0x34, 0x01, 0x11,\n\t0xa8, 0x11, 0x21, 0xc4, 0x81, 0x18, 0x66, 0x98, 0xa1, 0x10, 0x04,\n\t0x1a, 0x98, 0x61, 0x0f, 0x02, 0x0e, 0xb8, 0x60, 0x16, 0xdf, 0x8d,\n\t0x67, 0xda, 0x0c, 0x4b, 0x45, 0xd8, 0xd0, 0x71, 0x26, 0xb2, 0xa7,\n\t0xe1, 0x8b, 0x18, 0xf6, 0x40, 0xe1, 0x6e, 0xed, 0x69, 0xd8, 0x03,\n\t0x88, 0x1c, 0x56, 0xa6, 0x9b, 0x12, 0xc4, 0xa9, 0xc8, 0x10, 0x02,\n\t0x41, 0xa4, 0x36, 0x04, 0x8c, 0x30, 0xca, 0xa8, 0x1c, 0x11, 0x43,\n\t0x24, 0x99, 0x24, 0x11, 0x33, 0xae, 0x67, 0x9f, 0x8f, 0x0d, 0x21,\n\t0x90, 0x1e, 0x6a, 0xed, 0xdd, 0x68, 0xe5, 0x95, 0x37, 0xfa, 0xc0,\n\t0xe1, 0x7a, 0x47, 0xea, 0x56, 0xc3, 0x48, 0x50, 0x3e, 0x45, 0x00,\n\t0x06, 0x4c, 0x30, 0x91, 0xc4, 0x80, 0xa7, 0x31, 0xa9, 0xe6, 0x9a,\n\t0x4c, 0x72, 0xa9, 0x9c, 0x10, 0x3e, 0x80, 0x98, 0x5b, 0x8f, 0x61,\n\t0x12, 0x84, 0x00, 0x09, 0x8e, 0x44, 0x22, 0x49, 0x28, 0xa0, 0x74,\n\t0x92, 0x49, 0x14, 0x4c, 0x34, 0xe9, 0xe6, 0xa0, 0xa5, 0x59, 0xb8,\n\t0x21, 0x6a, 0x4c, 0xc0, 0x40, 0x02, 0x98, 0x75, 0x22, 0xf0, 0x42,\n\t0x25, 0xcf, 0x40, 0x23, 0xe9, 0xa4, 0xd0, 0x3c, 0xd3, 0x09, 0xa0,\n\t0x82, 0x12, 0xba, 0x1e, 0x9c, 0x1a, 0x6e, 0x59, 0x68, 0x14, 0xd0,\n\t0x8c, 0x12, 0x09, 0x09, 0x29, 0xfa, 0x68, 0x81, 0x24, 0x92, 0x3e,\n\t0xa3, 0xea, 0xaa, 0xab, 0x56, 0x9a, 0x89, 0x14, 0xfe, 0x9a, 0xae,\n\t0x67, 0xa1, 0x0f, 0x2f, 0x0a, 0x21, 0x28, 0x11, 0x4c, 0x80, 0x52,\n\t0x69, 0xa8, 0x8e, 0x40, 0x18, 0xe1, 0x04, 0x95, 0x54, 0xca, 0xea,\n\t0xb0, 0xad, 0x82, 0x22, 0x45, 0xa6, 0x69, 0xb2, 0x99, 0x1b, 0x9b,\n\t0x4c, 0xf6, 0xe7, 0x9f, 0x87, 0x87, 0x9e, 0xa6, 0x44, 0x26, 0xac,\n\t0x4a, 0x1a, 0x49, 0x04, 0xbf, 0x42, 0x4a, 0xec, 0xb6, 0xaa, 0x42,\n\t0xd3, 0xc9, 0xb1, 0xa9, 0xc1, 0x89, 0x65, 0x0f, 0x5a, 0x9a, 0x26,\n\t0xee, 0xb8, 0x44, 0x22, 0xe8, 0xe9, 0xa7, 0xa3, 0x10, 0x0b, 0x4d,\n\t0x24, 0x8c, 0xd2, 0x86, 0x00, 0x24, 0x9e, 0x6c, 0x3b, 0xa9, 0xbd,\n\t0x9d, 0x98, 0x99, 0x26, 0xb4, 0x1f, 0xce, 0x58, 0x60, 0xba, 0x45,\n\t0xda, 0x5a, 0xa1, 0x14, 0x9f, 0x08, 0x3b, 0x2c, 0x34, 0x30, 0x94,\n\t0x0a, 0x9a, 0x0b, 0x9b, 0x7c, 0x42, 0x6c, 0x2b, 0xc1, 0x04, 0x03,\n\t0x4b, 0x2b, 0xdc, 0x46, 0x91, 0xe9, 0xbf, 0x45, 0xfa, 0xcb, 0x6f,\n\t0xba, 0x5a, 0x22, 0x9b, 0x04, 0x11, 0x5d, 0xf4, 0x22, 0x31, 0xc5,\n\t0x07, 0x83, 0x62, 0x41, 0x71, 0x11, 0x50, 0xb2, 0x49, 0xbb, 0xab,\n\t0xb6, 0xf2, 0x8b, 0x1f, 0x87, 0xc4, 0xdc, 0x87, 0x2f, 0xd1, 0x1c,\n\t0x9c, 0x2f, 0x95, 0x44, 0xae, 0x7b, 0x21, 0x91, 0x37, 0xfa, 0x87,\n\t0x66, 0x85, 0x5f, 0xe4, 0x11, 0xb3, 0x21, 0x71, 0xf0, 0xe2, 0xae,\n\t0x23, 0x0a, 0x6f, 0xe5, 0xc2, 0x25, 0x9c, 0xb0, 0xda, 0x8a, 0x1c,\n\t0x85, 0x14, 0x42, 0xc8, 0xd4, 0x85, 0x24, 0x62, 0x4d, 0xcd, 0xc3,\n\t0x46, 0xf1, 0x33, 0x69, 0xce, 0x02, 0xb8, 0xf5, 0x99, 0x01, 0xfa,\n\t0xec, 0xb1, 0x69, 0x14, 0x06, 0x2d, 0x35, 0xd5, 0x87, 0xfc, 0x72,\n\t0x70, 0x28, 0x27, 0x2f, 0x16, 0x00, 0x12, 0x9b, 0x34, 0xbd, 0xaa,\n\t0x35, 0x67, 0x4f, 0x8d, 0xb6, 0x2f, 0x07, 0x67, 0x12, 0xeb, 0xfe,\n\t0xa0, 0x43, 0x2c, 0x31, 0x06, 0x1f, 0x75, 0x53, 0x6d, 0x48, 0x30,\n\t0x06, 0x47, 0x9a, 0x01, 0x68, 0x04, 0x40, 0xc2, 0xf4, 0xaa, 0xb2,\n\t0x04, 0x12, 0xb8, 0xdd, 0x85, 0xf4, 0x41, 0x72, 0xb7, 0x9d, 0xb4,\n\t0xb8, 0x77, 0x72, 0x43, 0x28, 0x31, 0x85, 0x2a, 0xc5, 0x30, 0xf2,\n\t0x38, 0x21, 0x85, 0xc8, 0x81, 0x75, 0xb7, 0x8e, 0x80, 0x16, 0x41,\n\t0x25, 0x96, 0xac, 0x1c, 0x29, 0x2f, 0x76, 0xb7, 0x6e, 0xb7, 0x21,\n\t0xb0, 0x18, 0x0c, 0x0d, 0x28, 0xfa, 0x5e, 0xae, 0x1b, 0x92, 0x4a,\n\t0x40, 0x41, 0xca, 0x30, 0xc7, 0xe4, 0x02, 0x8c, 0x21, 0x8f, 0x17,\n\t0xe2, 0x47, 0x2c, 0xd5, 0x46, 0x92, 0x74, 0x53, 0x13, 0x60, 0x92,\n\t0xba, 0xc3, 0xd0, 0xfc, 0xf2, 0xb9, 0xdd, 0x87, 0x10, 0x5e, 0x2c,\n\t0x13, 0x43, 0x30, 0x6b, 0xfd, 0xf5, 0xd8, 0x2f, 0xa9, 0x84, 0x13,\n\t0x54, 0xa8, 0xc2, 0xfb, 0x31, 0xe0, 0x1f, 0x13, 0x4e, 0x22, 0xae,\n\t0x17, 0x82, 0x88, 0x2c, 0xb2, 0x1b, 0xbf, 0x18, 0x04, 0xca, 0x5b,\n\t0x52, 0x2f, 0x34, 0xbe, 0xb8, 0xee, 0x3a, 0xec, 0xb2, 0x77, 0xe2,\n\t0x44, 0x13, 0xf8, 0xe7, 0xaf, 0xff, 0xfe, 0xfc, 0xf7, 0xdf, 0x84,\n\t0x13, 0x4e, 0x98, 0x02, 0x15, 0x4a, 0xa1, 0x8a, 0x5a, 0x84, 0xef,\n\t0x80, 0xb9, 0x20, 0x86, 0xe7, 0x5a, 0x57, 0x88, 0x40, 0x10, 0xaf,\n\t0x55, 0xea, 0x93, 0x0b, 0x02, 0x28, 0x71, 0x09, 0x4b, 0x34, 0x0d,\n\t0x1a, 0xb0, 0x00, 0x9e, 0xfc, 0x40, 0x27, 0xb9, 0x61, 0xc9, 0x62,\n\t0x18, 0xb5, 0x08, 0xa1, 0x08, 0x47, 0x48, 0xc2, 0x12, 0x9a, 0x30,\n\t0x84, 0xc3, 0x30, 0xc6, 0x01, 0x57, 0x18, 0x3e, 0xdf, 0x69, 0x90,\n\t0x6a, 0xa2, 0xab, 0x56, 0xe9, 0xdc, 0x06, 0x37, 0x4b, 0x58, 0xc2,\n\t0x61, 0xd1, 0x80, 0xc3, 0xf3, 0x08, 0xa1, 0x36, 0x56, 0x45, 0x43,\n\t0x17, 0xfe, 0x2c, 0x0c, 0xa2, 0x10, 0x87, 0x48, 0xc4, 0x20, 0x02,\n\t0x02, 0x72, 0x87, 0x30, 0x5a, 0xb5, 0x5e, 0x40, 0x1b, 0x86, 0xd9,\n\t0x90, 0x13, 0xa3, 0x80, 0x46, 0x2c, 0xe2, 0x10, 0x35, 0xc8, 0x15,\n\t0x02, 0x0e, 0x93, 0x53, 0x95, 0x2b, 0x8a, 0xc8, 0xc5, 0x2e, 0x16,\n\t0x31, 0x17, 0x9d, 0x8b, 0x9a, 0xd5, 0x46, 0x17, 0x29, 0x93, 0xd1,\n\t0x06, 0x58, 0x15, 0xb4, 0x44, 0x27, 0x22, 0x15, 0x0b, 0x38, 0x20,\n\t0x02, 0x74, 0x89, 0xf0, 0x83, 0x35, 0xb2, 0xf8, 0x8c, 0x1f, 0x7a,\n\t0xf1, 0x8e, 0x78, 0x6c, 0x21, 0x30, 0x0e, 0xe1, 0x87, 0x5f, 0x90,\n\t0x31, 0x52, 0x11, 0x74, 0x1b, 0x0c, 0x36, 0x61, 0x43, 0xf7, 0x45,\n\t0x2a, 0x1a, 0xb0, 0xe0, 0x85, 0x2f, 0x78, 0xf1, 0xc0, 0x61, 0xed,\n\t0x22, 0x8f, 0x90, 0xf4, 0x62, 0x02, 0x79, 0x41, 0xc7, 0x48, 0x8d,\n\t0x82, 0x04, 0xd5, 0x89, 0x80, 0xe2, 0x0a, 0xd9, 0x89, 0x76, 0x51,\n\t0x8a, 0x58, 0xa3, 0x90, 0x45, 0x2e, 0x22, 0x49, 0x4a, 0x2e, 0xee,\n\t0xc2, 0x5e, 0x48, 0x33, 0x4f, 0xf2, 0xd2, 0x68, 0xc1, 0x7a, 0x6d,\n\t0x6b, 0x14, 0x9e, 0x70, 0x05, 0x10, 0x4b, 0x49, 0x4b, 0x21, 0xe6,\n\t0xc2, 0x15, 0x07, 0x93, 0x84, 0xaf, 0x8a, 0x13, 0x00, 0x12, 0x60,\n\t0x82, 0x95, 0xad, 0xfc, 0xc4, 0x28, 0x86, 0xf9, 0x09, 0x4f, 0x70,\n\t0x22, 0x16, 0xb3, 0xac, 0xa5, 0x32, 0x57, 0xb8, 0x8b, 0xd1, 0x41,\n\t0x43, 0x12, 0x6d, 0x8b, 0x10, 0x09, 0x20, 0xb1, 0x09, 0x60, 0x6e,\n\t0x22, 0x6e, 0xd7, 0xe4, 0x84, 0x28, 0x97, 0xc9, 0x4d, 0x04, 0xe2,\n\t0xb2, 0x52, 0x8e, 0xc0, 0x16, 0x94, 0x22, 0x00, 0x83, 0x4a, 0x00,\n\t0xd3, 0x86, 0x97, 0x70, 0x85, 0x2d, 0xba, 0xc9, 0xce, 0xf0, 0x9d,\n\t0x52, 0x12, 0x8b, 0xaa, 0x13, 0x00, 0x54, 0x02, 0x83, 0x4c, 0x5c,\n\t0xe2, 0x12, 0x9b, 0xfe, 0xe8, 0x44, 0x2c, 0x6c, 0x31, 0xca, 0x76,\n\t0xb6, 0x33, 0x17, 0x2f, 0xd8, 0xa5, 0x3c, 0x57, 0x80, 0x0a, 0x54,\n\t0xd8, 0xc2, 0x16, 0xc9, 0xf4, 0xa7, 0x3f, 0x63, 0x20, 0x4f, 0x82,\n\t0x10, 0xc0, 0x0a, 0xa8, 0x60, 0x05, 0x17, 0x69, 0xc1, 0x8a, 0x8a,\n\t0xb2, 0x42, 0x18, 0x18, 0xcd, 0x28, 0x46, 0xbf, 0xe7, 0xcf, 0x5a,\n\t0xcc, 0xc2, 0xa2, 0x19, 0x5d, 0xc5, 0x04, 0xcc, 0x82, 0x80, 0xe3,\n\t0xe1, 0x67, 0x02, 0xa6, 0x30, 0x05, 0x2d, 0x88, 0x38, 0x8c, 0x2a,\n\t0x34, 0x61, 0x09, 0x4b, 0x50, 0xc2, 0x12, 0xb8, 0x40, 0xd3, 0x9a,\n\t0xd2, 0xb4, 0x7b, 0xb3, 0xc8, 0xa9, 0x4e, 0x77, 0xca, 0xd3, 0x9e,\n\t0xfa, 0x34, 0xa7, 0xa4, 0x70, 0x02, 0x4c, 0x65, 0x6a, 0xd3, 0x2b,\n\t0x18, 0xd5, 0x0b, 0x40, 0xb8, 0x8f, 0x79, 0x8e, 0x93, 0x0a, 0x54,\n\t0xdc, 0x82, 0x88, 0xa5, 0xf8, 0x18, 0x69, 0x88, 0x30, 0x22, 0xab,\n\t0x28, 0x61, 0x07, 0x39, 0xc8, 0xaa, 0x56, 0xb7, 0xca, 0xd5, 0xae,\n\t0x7a, 0x75, 0x07, 0x4a, 0x68, 0x13, 0x11, 0x94, 0x60, 0x15, 0xcd,\n\t0x1c, 0x41, 0xa0, 0xd5, 0x41, 0xc0, 0x2a, 0x4c, 0x91, 0x0a, 0x15,\n\t0x0a, 0x71, 0x18, 0x50, 0xf8, 0x19, 0x73, 0xdc, 0xb2, 0x05, 0x1d,\n\t0xd8, 0xe0, 0xae, 0x78, 0xcd, 0xab, 0x5e, 0xf7, 0xca, 0xd7, 0x1f,\n\t0x48, 0x8b, 0x33, 0x9e, 0xf1, 0x11, 0x06, 0x50, 0x61, 0x8a, 0x59,\n\t0x10, 0xf1, 0x16, 0x4e, 0x10, 0xd4, 0x5c, 0xdd, 0x62, 0x57, 0xbe,\n\t0x3a, 0xf6, 0xb1, 0x78, 0xf5, 0xab, 0x69, 0xc8, 0x8a, 0x18, 0x9e,\n\t0xa8, 0x28, 0x00, 0x40, 0x68, 0xaa, 0x01, 0x87, 0x88, 0x58, 0x41,\n\t0x55, 0xd5, 0x2a, 0x3b, 0xb8, 0x01, 0x0e, 0x46, 0x4b, 0xda, 0xd2,\n\t0x9a, 0xf6, 0xb4, 0xa7, 0x95, 0x6c, 0x69, 0x28, 0xdb, 0x19, 0x3a,\n\t0xa5, 0x75, 0x15, 0x05, 0x7d, 0xfe, 0x2a, 0x67, 0x13, 0x3b, 0x59,\n\t0xc0, 0x96, 0x22, 0x15, 0xb8, 0xcd, 0xad, 0x6e, 0x77, 0xcb, 0xdb,\n\t0xde, 0x4e, 0x61, 0x6b, 0x80, 0x75, 0x6d, 0x71, 0x50, 0xca, 0x56,\n\t0xb7, 0x0a, 0xb1, 0xb3, 0xa7, 0x59, 0xec, 0x4e, 0x7a, 0xc1, 0x4e,\n\t0x2a, 0x6c, 0x8d, 0xb5, 0x6e, 0xb1, 0x6c, 0x84, 0x54, 0x90, 0x0a,\n\t0x53, 0x48, 0x94, 0xa5, 0x71, 0xfd, 0xeb, 0x61, 0xb8, 0x20, 0x0c,\n\t0x76, 0x56, 0xe1, 0x6b, 0xca, 0x0d, 0x2c, 0x7e, 0x1e, 0x4a, 0xd8,\n\t0x95, 0x16, 0xd1, 0xb9, 0xa8, 0x81, 0x2e, 0x52, 0xb8, 0xcb, 0x4e,\n\t0x52, 0xe4, 0x66, 0xb1, 0x71, 0xc1, 0x8f, 0x5a, 0x63, 0xcb, 0xc5,\n\t0x53, 0x58, 0x2e, 0x38, 0x6e, 0xa1, 0x82, 0x71, 0xc1, 0x17, 0xc2,\n\t0x15, 0x1a, 0x83, 0x16, 0xb2, 0x0d, 0xdf, 0x30, 0x68, 0xc1, 0x51,\n\t0xf0, 0xcd, 0x62, 0x09, 0x1e, 0x83, 0xae, 0x16, 0x8e, 0x10, 0xaf,\n\t0xe1, 0xa6, 0xd4, 0x7b, 0xb9, 0xe8, 0xe7, 0x71, 0xb3, 0x9b, 0x1b,\n\t0xc9, 0x2c, 0xe1, 0x14, 0x2b, 0x3c, 0xc5, 0xfd, 0x48, 0x11, 0x3e,\n\t0x63, 0x68, 0xe2, 0x7f, 0xaa, 0x08, 0xdf, 0x2d, 0xa8, 0xb0, 0x84,\n\t0x29, 0x98, 0x37, 0x7c, 0x55, 0x18, 0xdb, 0x6b, 0x94, 0x80, 0x05,\n\t0x1e, 0xa9, 0x28, 0x05, 0x63, 0x90, 0x43, 0x1f, 0xfe, 0x10, 0x8e,\n\t0x62, 0x48, 0x38, 0x88, 0xaa, 0x40, 0xf0, 0x6e, 0x88, 0x40, 0x85,\n\t0x02, 0xc3, 0x35, 0x49, 0x4e, 0xd8, 0xec, 0x81, 0x93, 0x34, 0x05,\n\t0xb7, 0xba, 0x17, 0x49, 0x9a, 0x58, 0x21, 0x2d, 0x9c, 0xf0, 0xb5,\n\t0xd3, 0xcc, 0x00, 0xad, 0xa0, 0xe1, 0x40, 0x1a, 0x12, 0x11, 0x35,\n\t0xa9, 0x05, 0x02, 0x18, 0x37, 0x66, 0x61, 0x29, 0xc2, 0x9a, 0x1a,\n\t0x26, 0x4d, 0x61, 0xb3, 0x22, 0xa6, 0xad, 0x12, 0x42, 0x7c, 0x0c,\n\t0xf7, 0x7e, 0xac, 0x09, 0xe6, 0xfd, 0xee, 0xfe, 0x99, 0xaa, 0xc0,\n\t0xc2, 0x1c, 0x37, 0xf9, 0x63, 0x4f, 0x50, 0x6a, 0x41, 0x54, 0xb2,\n\t0x81, 0x0f, 0x34, 0xc0, 0xa4, 0x24, 0x21, 0x00, 0x18, 0xf6, 0x10,\n\t0xbc, 0x40, 0xd8, 0x98, 0x88, 0xa4, 0x68, 0x02, 0x92, 0xd6, 0x94,\n\t0x39, 0x2a, 0x80, 0xb9, 0xc3, 0xbf, 0xfd, 0x18, 0x14, 0x4e, 0x11,\n\t0xd4, 0x26, 0x75, 0xaf, 0x14, 0x3a, 0x4e, 0x02, 0x87, 0xdb, 0x0c,\n\t0x85, 0x33, 0x11, 0x5a, 0x73, 0xab, 0x80, 0xf2, 0x40, 0xa4, 0xac,\n\t0x87, 0xa9, 0xe9, 0x81, 0x0c, 0x9a, 0xc6, 0x08, 0x02, 0xc8, 0x50,\n\t0x45, 0xf9, 0x15, 0xe2, 0x0f, 0x13, 0xad, 0x02, 0x14, 0x60, 0xba,\n\t0x04, 0xee, 0xa9, 0x62, 0xbf, 0x07, 0x24, 0xc5, 0x78, 0xc6, 0x2a,\n\t0xd5, 0x42, 0x3d, 0x87, 0x42, 0x44, 0x70, 0xc2, 0x89, 0x57, 0x78,\n\t0x0b, 0x52, 0x4c, 0xe1, 0xa5, 0x4b, 0x68, 0xc2, 0x14, 0x76, 0x87,\n\t0x0b, 0x05, 0x24, 0x84, 0x03, 0x77, 0x50, 0xc4, 0xd9, 0x0a, 0xa1,\n\t0x08, 0x3b, 0x84, 0xba, 0x22, 0x0a, 0xb0, 0x83, 0x22, 0x36, 0x48,\n\t0x35, 0x3f, 0x67, 0x39, 0x88, 0x03, 0x66, 0xc5, 0x2c, 0x0e, 0x8d,\n\t0xed, 0x29, 0x20, 0xab, 0x4d, 0x64, 0x53, 0xc2, 0xa4, 0x87, 0xf8,\n\t0x5f, 0x6d, 0xd7, 0xc2, 0xad, 0xc6, 0x90, 0x33, 0x00, 0x08, 0x20,\n\t0x6d, 0xf9, 0x29, 0x82, 0x0c, 0x78, 0xa6, 0x48, 0xb4, 0xa7, 0x4d,\n\t0xed, 0xa9, 0x19, 0xe2, 0xcf, 0xec, 0xac, 0x05, 0x15, 0x94, 0xa0,\n\t0xa4, 0x42, 0x57, 0x5a, 0x49, 0x44, 0x58, 0x42, 0x29, 0x60, 0x7d,\n\t0x47, 0xea, 0x14, 0xa4, 0x05, 0xcf, 0x2b, 0x84, 0x1e, 0x1e, 0x40,\n\t0x12, 0x04, 0xb4, 0xbb, 0xde, 0xa0, 0x43, 0x04, 0xbe, 0x83, 0x18,\n\t0xe1, 0x8a, 0x5b, 0x9c, 0x8b, 0xc3, 0x38, 0x05, 0x15, 0xa0, 0x30,\n\t0x85, 0x2a, 0xbc, 0xba, 0x16, 0xbe, 0xe6, 0x78, 0x15, 0xfe, 0xae,\n\t0xcb, 0x45, 0x8b, 0x5b, 0x3c, 0x05, 0x07, 0x41, 0x00, 0x1e, 0xe8,\n\t0xbd, 0xc1, 0x0f, 0x68, 0x24, 0x00, 0x64, 0x60, 0x79, 0xbd, 0x0b,\n\t0xc1, 0x08, 0x62, 0x5c, 0xbb, 0x77, 0xc7, 0x68, 0xc6, 0x32, 0x76,\n\t0xce, 0xf3, 0x65, 0x28, 0xe3, 0x8e, 0xc3, 0x28, 0xf0, 0x31, 0x8c,\n\t0x91, 0x42, 0x3c, 0x2a, 0xa3, 0xe7, 0x3b, 0x67, 0x86, 0x0a, 0x0c,\n\t0x42, 0x80, 0x32, 0xc8, 0x5c, 0x7e, 0x2e, 0xcf, 0x08, 0x08, 0x04,\n\t0xb1, 0xc3, 0xd6, 0x1d, 0x02, 0xcb, 0x43, 0xbc, 0x46, 0x37, 0xb8,\n\t0xc1, 0xf5, 0xae, 0x73, 0x63, 0x1b, 0xcd, 0xb8, 0xb9, 0x3f, 0x73,\n\t0xb1, 0x8c, 0x6d, 0x78, 0x9d, 0xeb, 0xdf, 0x08, 0x43, 0x41, 0x08,\n\t0x40, 0x06, 0x88, 0x17, 0x62, 0x0f, 0x0c, 0xc7, 0x08, 0xbb, 0x9f,\n\t0x6e, 0xea, 0x43, 0x84, 0x63, 0x88, 0xb9, 0x40, 0xc6, 0x36, 0xbc,\n\t0xc1, 0xf7, 0xbe, 0xf7, 0x5d, 0x1b, 0x62, 0xf7, 0x67, 0x36, 0xfc,\n\t0xde, 0xf7, 0xb4, 0x0f, 0x84, 0x00, 0x1f, 0x40, 0x43, 0xd5, 0x09,\n\t0xf1, 0xee, 0x78, 0x2b, 0x04, 0x04, 0x10, 0xaf, 0xb6, 0x35, 0x70,\n\t0x4e, 0x71, 0x64, 0x60, 0x83, 0xf0, 0x7e, 0xbf, 0x46, 0xe0, 0xdb,\n\t0x79, 0x0d, 0xcc, 0x7b, 0xe3, 0x1b, 0xe0, 0x68, 0x01, 0x18, 0xc8,\n\t0x60, 0x87, 0x41, 0xd0, 0x9d, 0x81, 0x83, 0x88, 0xfa, 0x45, 0x02,\n\t0xe0, 0xf4, 0x99, 0x1f, 0xe2, 0x0f, 0x36, 0xde, 0x7c, 0x2e, 0x9a,\n\t0xa1, 0x0d, 0x6c, 0xd8, 0xfe, 0xf6, 0xd8, 0xb8, 0x06, 0x32, 0x36,\n\t0xdf, 0xcd, 0x5c, 0x28, 0xe3, 0x1a, 0xb8, 0xbf, 0xfd, 0x38, 0x14,\n\t0x41, 0xfc, 0xd3, 0xbb, 0x4e, 0x11, 0x65, 0x70, 0x7c, 0x42, 0x16,\n\t0xb0, 0xf2, 0x7a, 0x1f, 0x02, 0x0e, 0xc3, 0xe0, 0x3d, 0xf8, 0xc4,\n\t0x1e, 0x61, 0x85, 0xda, 0xf2, 0xe6, 0xe1, 0x88, 0x7c, 0xeb, 0x14,\n\t0xfe, 0x81, 0x87, 0xb8, 0x63, 0x84, 0x03, 0x83, 0xd8, 0x61, 0x22,\n\t0xe0, 0xa0, 0x52, 0xeb, 0x9b, 0x9f, 0xe2, 0xe1, 0x58, 0x3c, 0xe4,\n\t0x08, 0xa1, 0x7a, 0x8c, 0x7c, 0x60, 0xe6, 0x7d, 0xe8, 0x85, 0x75,\n\t0xcf, 0x4f, 0xff, 0x16, 0x02, 0x42, 0xfd, 0x54, 0x03, 0x83, 0xf2,\n\t0x15, 0xf2, 0x7e, 0x6a, 0x87, 0x2e, 0xa5, 0xa9, 0xa0, 0x0b, 0x26,\n\t0x37, 0x80, 0x04, 0x58, 0x80, 0x06, 0x78, 0x80, 0x08, 0x98, 0x80,\n\t0x15, 0x77, 0x0c, 0x7f, 0x80, 0x7f, 0xc8, 0xd7, 0x60, 0x17, 0xc1,\n\t0x01, 0x82, 0xe0, 0x7f, 0x7e, 0xd0, 0x0b, 0xaa, 0xa0, 0x0a, 0xc4,\n\t0x90, 0x0c, 0xc8, 0xb0, 0x81, 0x1c, 0xd8, 0x81, 0x1e, 0xf8, 0x81,\n\t0x20, 0x18, 0x82, 0x22, 0x38, 0x82, 0x24, 0xc8, 0x81, 0xc9, 0xa0,\n\t0x0c, 0x0b, 0x34, 0x73, 0x84, 0x40, 0x06, 0x10, 0x78, 0x11, 0x0f,\n\t0xc0, 0x67, 0xf5, 0x36, 0x0e, 0xe2, 0x20, 0x0e, 0xe8, 0xa0, 0x0e,\n\t0x36, 0x78, 0x83, 0x38, 0x98, 0x83, 0x3a, 0xb8, 0x83, 0x3c, 0xd8,\n\t0x83, 0x3e, 0xf8, 0x83, 0x39, 0x88, 0x0e, 0x8d, 0x00, 0x71, 0x8a,\n\t0xb0, 0x07, 0xfa, 0x77, 0x12, 0x73, 0x57, 0x6f, 0x8b, 0x30, 0x0e,\n\t0xe7, 0x80, 0x0e, 0xec, 0xf0, 0x84, 0x50, 0x18, 0x85, 0x52, 0x38,\n\t0x85, 0x54, 0x58, 0x85, 0x56, 0x78, 0x85, 0x58, 0x28, 0x85, 0xe9,\n\t0x40, 0x3e, 0x1b, 0x34, 0x6d, 0x69, 0xd0, 0x7e, 0x26, 0x11, 0x73,\n\t0x10, 0xb7, 0x84, 0xe7, 0xd0, 0x0e, 0x59, 0x78, 0x86, 0x68, 0x98,\n\t0x86, 0x6a, 0x58, 0x0e, 0xe5, 0x43, 0x7c, 0x83, 0x60, 0x07, 0x1f,\n\t0xd0, 0x82, 0x24, 0xf1, 0x01, 0xe1, 0x37, 0x86, 0xe3, 0xe0, 0x0e,\n\t0x6a, 0x98, 0x87, 0x7a, 0xb8, 0x87, 0xe4, 0xc0, 0x6c, 0xca, 0x26,\n\t0x08, 0x7a, 0x60, 0x07, 0x60, 0x10, 0x87, 0x3e, 0x11, 0x00, 0x69,\n\t0x60, 0x7c, 0xfe, 0x76, 0x93, 0x08, 0xe4, 0x80, 0x87, 0x7b, 0xd8,\n\t0x88, 0x8e, 0x48, 0x85, 0xef, 0xa0, 0x01, 0x1f, 0x20, 0x89, 0x20,\n\t0x60, 0x67, 0x72, 0x28, 0x13, 0x74, 0x88, 0x7f, 0x8d, 0x50, 0x0e,\n\t0x8f, 0xd8, 0x89, 0x8f, 0x58, 0x0d, 0xbc, 0x04, 0x06, 0x88, 0xd8,\n\t0x3a, 0x89, 0x60, 0x0e, 0x9e, 0x78, 0x8a, 0x6a, 0xd8, 0x0e, 0x1b,\n\t0x50, 0x1d, 0x0b, 0x70, 0x88, 0xda, 0x47, 0x08, 0x89, 0xc0, 0x89,\n\t0xa8, 0x38, 0x8b, 0x57, 0xa8, 0x0d, 0x97, 0xe8, 0x14, 0x0a, 0xd0,\n\t0x7c, 0xda, 0xd7, 0x08, 0x66, 0x48, 0x8b, 0xbe, 0x28, 0x85, 0x28,\n\t0x87, 0x1f, 0x1c, 0xa0, 0x8b, 0x10, 0x97, 0x08, 0xe9, 0xf0, 0x8b,\n\t0xc8, 0xc8, 0x0e, 0xef, 0xf0, 0x6c, 0x5b, 0x31, 0x8c, 0xa3, 0x38,\n\t0x35, 0xb2, 0x98, 0x8c, 0xb4, 0x08, 0x8a, 0x3e, 0x32, 0x01, 0x0f,\n\t0x47, 0x6d, 0xc6, 0x28, 0x8d, 0xb4, 0xb8, 0x8c, 0x61, 0xb2, 0x00,\n\t0x65, 0x00, 0x3a, 0xd4, 0xd6, 0x08, 0x4e, 0xa8, 0x8d, 0xa8, 0x18,\n\t0x8c, 0x61, 0x12, 0x00, 0x2d, 0xa0, 0x07, 0x74, 0x97, 0x08, 0x4c,\n\t0xc8, 0x88, 0xe4, 0xf8, 0x89, 0xb7, 0x68, 0x1e, 0x52, 0xc6, 0x78,\n\t0xca, 0x56, 0x35, 0xe4, 0x70, 0x0e, 0xf8, 0xe8, 0x8e, 0xef, 0xa8,\n\t0x87, 0xee, 0xa0, 0x6e, 0x3e, 0x42, 0x00, 0x20, 0x40, 0x7a, 0x76,\n\t0xd0, 0x08, 0x4c, 0x88, 0x8f, 0xf9, 0xb8, 0x8f, 0x7b, 0x48, 0x8d,\n\t0x0d, 0x45, 0x10, 0x64, 0x81, 0x00, 0x40, 0xf0, 0x0a, 0x10, 0x19,\n\t0x91, 0xc1, 0x40, 0x0d, 0xd2, 0x50, 0x91, 0x16, 0x79, 0x91, 0x18,\n\t0x99, 0x91, 0x1a, 0xb9, 0x91, 0x1c, 0xb9, 0x91, 0xd3, 0xb0, 0x0a,\n\t0xf1, 0xd8, 0x28, 0x90, 0x50, 0x48, 0x85, 0xd4, 0x30, 0xc3, 0x74,\n\t0x92, 0x28, 0x99, 0x92, 0x2a, 0xb9, 0x92, 0x2c, 0xd9, 0x92, 0x2b,\n\t0x09, 0x0d, 0x95, 0xc0, 0xfe, 0x8c, 0x0d, 0x65, 0x01, 0xe6, 0x44,\n\t0x92, 0xa9, 0xe3, 0x4a, 0xdc, 0x92, 0x93, 0x3a, 0xb9, 0x93, 0x39,\n\t0x09, 0x0d, 0xa1, 0x80, 0x49, 0x0b, 0xb9, 0x10, 0x68, 0x64, 0x93,\n\t0x9b, 0x80, 0x93, 0x3c, 0x79, 0x94, 0x48, 0x59, 0x32, 0x40, 0x19,\n\t0x94, 0x0b, 0x41, 0x02, 0x35, 0x69, 0x93, 0x50, 0x94, 0x94, 0x52,\n\t0x79, 0x94, 0xd0, 0xe0, 0x09, 0x4b, 0xc9, 0x94, 0x4d, 0xf9, 0x94,\n\t0x24, 0xd9, 0x30, 0x53, 0xd9, 0x95, 0xaf, 0xc4, 0x09, 0xa4, 0x82,\n\t0x95, 0x14, 0x01, 0x2c, 0x84, 0x64, 0x93, 0x4c, 0xe3, 0x30, 0xc3,\n\t0xd2, 0x0a, 0xad, 0xf0, 0x47, 0x5e, 0x49, 0x2c, 0x9f, 0x50, 0x09,\n\t0x57, 0x29, 0x96, 0x0c, 0x31, 0x01, 0xd4, 0x64, 0x93, 0x36, 0x54,\n\t0x94, 0x2c, 0x03, 0x0b, 0xd6, 0x10, 0x07, 0x7d, 0x10, 0x07, 0xbf,\n\t0x50, 0x49, 0x6d, 0xf9, 0x09, 0x9d, 0x00, 0x09, 0xfe, 0x28, 0x97,\n\t0x08, 0x81, 0x00, 0x30, 0x60, 0x09, 0xe7, 0x74, 0x97, 0x9e, 0xc0,\n\t0x0b, 0x8e, 0x53, 0x65, 0x91, 0x03, 0x0b, 0x6d, 0xa9, 0x2a, 0xa3,\n\t0xf0, 0x09, 0x9c, 0xb0, 0x09, 0x30, 0x20, 0x4e, 0x86, 0x69, 0x11,\n\t0xbd, 0x54, 0x09, 0x65, 0x69, 0x93, 0xbd, 0x80, 0x08, 0xc1, 0x13,\n\t0x07, 0x80, 0xc9, 0x93, 0xc5, 0x74, 0x99, 0x95, 0xe0, 0x02, 0x21,\n\t0xb9, 0x99, 0x08, 0x41, 0x4e, 0x98, 0xf0, 0x99, 0x8a, 0x09, 0x35,\n\t0xd4, 0xe6, 0x0b, 0x85, 0xa3, 0x93, 0x95, 0x69, 0x4c, 0x65, 0x09,\n\t0x03, 0x85, 0xc9, 0x9a, 0x0c, 0xa1, 0x12, 0x48, 0x90, 0x3a, 0x36,\n\t0x94, 0x09, 0x7e, 0x90, 0x70, 0x72, 0xf0, 0x09, 0xc2, 0x34, 0x4c,\n\t0xab, 0x72, 0x92, 0xc6, 0x89, 0x9b, 0x65, 0x79, 0x09, 0x9a, 0xf0,\n\t0x05, 0x32, 0xc9, 0x9b, 0x0c, 0x41, 0x00, 0x24, 0x80, 0x04, 0xaf,\n\t0xa9, 0x09, 0x86, 0xe0, 0x7f, 0x71, 0xfe, 0x90, 0x09, 0xd7, 0x14,\n\t0x37, 0x9c, 0xf0, 0x9d, 0x97, 0x79, 0x4d, 0x66, 0xa9, 0x09, 0x63,\n\t0xf0, 0x06, 0x6a, 0xb0, 0x9b, 0xd2, 0x49, 0x11, 0xf4, 0x84, 0x9d,\n\t0xda, 0x99, 0x09, 0x76, 0xf9, 0x9e, 0x96, 0x90, 0x09, 0xa2, 0x30,\n\t0x07, 0x6f, 0xd0, 0x06, 0x6c, 0x80, 0x07, 0xc2, 0x95, 0x9e, 0x24,\n\t0x31, 0x01, 0x30, 0x68, 0x6a, 0xdb, 0xf9, 0x9e, 0xdd, 0x79, 0x09,\n\t0x99, 0x40, 0x9e, 0xf4, 0x69, 0x9f, 0x6c, 0x70, 0x9f, 0x60, 0xa0,\n\t0x9f, 0x32, 0x81, 0x00, 0xfd, 0x59, 0x3e, 0xdb, 0x59, 0x4d, 0xd7,\n\t0x74, 0x09, 0x98, 0x50, 0x09, 0x90, 0x00, 0x03, 0x2e, 0x90, 0x02,\n\t0x05, 0x7a, 0xa0, 0x1a, 0x8a, 0x07, 0x7c, 0x80, 0x06, 0xfb, 0xa7,\n\t0xa0, 0x0c, 0xd1, 0x00, 0x0d, 0xca, 0x40, 0x76, 0x40, 0x02, 0x26,\n\t0x6a, 0xa2, 0x13, 0x30, 0x52, 0x04, 0xb0, 0x14, 0x08, 0x90, 0x06,\n\t0x06, 0x7a, 0xa0, 0x78, 0x90, 0x07, 0x82, 0xd0, 0x6c, 0xab, 0x09,\n\t0xa2, 0x0a, 0x21, 0xa2, 0xcf, 0xa3, 0x08, 0x69, 0xe0, 0x78, 0x04,\n\t0xe0, 0xa2, 0x6c, 0xd0, 0x06, 0x31, 0x3a, 0x81, 0x8c, 0x67, 0x07,\n\t0x35, 0x6a, 0xa3, 0x08, 0x81, 0xa3, 0x5d, 0xe8, 0xa1, 0x0a, 0xd1,\n\t0xa2, 0x31, 0xca, 0x07, 0x42, 0x3a, 0x35, 0x34, 0x6a, 0xa4, 0x24,\n\t0x81, 0xa4, 0xee, 0xa6, 0xa4, 0xc7, 0x26, 0xa3, 0x5d, 0x48, 0xa4,\n\t0x52, 0xaa, 0x11, 0x54, 0x7a, 0x7c, 0x56, 0x9a, 0x12, 0x62, 0xd8,\n\t0x85, 0xf0, 0xb6, 0xa5, 0x19, 0xd1, 0xa5, 0xdb, 0xf7, 0xa5, 0x06,\n\t0x91, 0x89, 0xd4, 0xa6, 0x08, 0x09, 0x4a, 0xa6, 0x18, 0x61, 0xa6,\n\t0x76, 0xa3, 0x08, 0x68, 0x3a, 0x10, 0xe8, 0xa8, 0x07, 0x8b, 0x07,\n\t0x86, 0x6e, 0xda, 0x10, 0x70, 0x0a, 0xa5, 0x73, 0x0a, 0x00, 0x1c,\n\t0xd0, 0x76, 0x55, 0xd7, 0x6c, 0x0b, 0x90, 0xa7, 0xb9, 0x17, 0xb1,\n\t0xa7, 0x8c, 0x37, 0xa7, 0x1f, 0xa0, 0x8e, 0x91, 0xc7, 0xa6, 0x84,\n\t0x5a, 0xa8, 0x23, 0x1a, 0xa7, 0x68, 0x4a, 0x87, 0xcf, 0xc8, 0x7d,\n\t0x0d, 0xd0, 0xa8, 0x16, 0x61, 0xa8, 0x72, 0x5a, 0x2a, 0x04, 0xb0,\n\t0x06, 0xcf, 0x08, 0x3a, 0x2d, 0x60, 0xa9, 0x97, 0xfa, 0xa8, 0x7c,\n\t0x5a, 0x2a, 0x0f, 0x60, 0xa7, 0x8b, 0xca, 0x82, 0xa0, 0x5a, 0x11,\n\t0x98, 0xfa, 0xa5, 0x12, 0xb8, 0xa8, 0x76, 0x50, 0xa9, 0xa9, 0x4a,\n\t0x11, 0xab, 0x5a, 0x2a, 0x13, 0x50, 0x87, 0x6b, 0x6a, 0x07, 0xe8,\n\t0x19, 0xab, 0x03, 0x51, 0xaa, 0x39, 0xba, 0xa3, 0x87, 0x77, 0x8d,\n\t0x0c, 0xd4, 0x6c, 0xc6, 0xa6, 0xab, 0x14, 0xc1, 0x7c, 0xa7, 0x87,\n\t0x7c, 0x05, 0xf1, 0x7e, 0x8f, 0x33, 0x6d, 0x64, 0x30, 0xa8, 0xc4,\n\t0xaa, 0x9e, 0xad, 0x67, 0x6a, 0x60, 0x18, 0x00, 0x60, 0x60, 0x7a,\n\t0xc5, 0xd7, 0x6c, 0x20, 0xf0, 0xa1, 0xcf, 0xba, 0x69, 0x8a, 0xba,\n\t0x7d, 0x6b, 0x00, 0x81, 0x01, 0xf0, 0x01, 0x65, 0x60, 0x07, 0x78,\n\t0xb0, 0x06, 0x2d, 0xe0, 0xac, 0xdb, 0x6a, 0x11, 0x20, 0x90, 0x6c,\n\t0x52, 0x13, 0x35, 0x76, 0xe0, 0x7d, 0x06, 0x41, 0x16, 0x0b, 0xa0,\n\t0xad, 0xe9, 0x6a, 0x10, 0x1c, 0x50, 0x06, 0x7a, 0x30, 0x08, 0x78,\n\t0x00, 0x06, 0xd1, 0x69, 0x98, 0x01, 0x01, 0x00, 0x3b\n};\n\nstatic const int _img_cool_length = 4332;\nstatic const char _img_cry[4538] = {\n\t0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x7f, 0x00, 0x7f, 0x00, 0xf7,\n\t0xe7, 0x00, 0x00, 0x00, 0x00, 0x6d, 0xa4, 0x9a, 0x1c, 0x8d, 0xb0,\n\t0xed, 0xc2, 0x4d, 0x0c, 0x83, 0xbf, 0x86, 0xb2, 0x96, 0x03, 0x80,\n\t0xc2, 0x32, 0x9e, 0xac, 0x9f, 0xb7, 0x85, 0xdd, 0xb5, 0x48, 0xf2,\n\t0xc6, 0x4f, 0xf3, 0xc7, 0x4f, 0xd1, 0xab, 0x44, 0xf3, 0xc7, 0x4f,\n\t0xf3, 0xc7, 0x4f, 0xf5, 0xc7, 0x4e, 0x01, 0x81, 0xc5, 0x0b, 0x79,\n\t0xb3, 0x8e, 0xc5, 0xd9, 0x3c, 0xae, 0xa8, 0x3a, 0xab, 0xc3, 0xd5,\n\t0xe4, 0xe4, 0xec, 0xc1, 0x4d, 0x00, 0x81, 0xc6, 0x39, 0xa6, 0xa5,\n\t0x32, 0xa4, 0xad, 0x23, 0x87, 0x96, 0xf4, 0xc7, 0x4e, 0xd9, 0xb2,\n\t0x47, 0xc3, 0xa0, 0x40, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf1,\n\t0xc6, 0x4f, 0xd3, 0xab, 0x42, 0xf3, 0xc7, 0x4f, 0xe0, 0xc6, 0x59,\n\t0x00, 0x7f, 0xc2, 0x1d, 0x8f, 0xc9, 0x00, 0x7b, 0xbd, 0x39, 0x9c,\n\t0xce, 0x3a, 0xaa, 0xa4, 0x44, 0xa5, 0xc6, 0xba, 0xd7, 0xe0, 0x40,\n\t0xba, 0xb3, 0xee, 0xc7, 0x52, 0xd5, 0xaf, 0x45, 0x0e, 0x73, 0xa5,\n\t0x3d, 0xb1, 0xab, 0x02, 0x82, 0xc6, 0x00, 0x81, 0xc6, 0x40, 0xba,\n\t0xb3, 0x0e, 0x78, 0xa9, 0x3b, 0xab, 0xa5, 0x2c, 0x85, 0xa1, 0x9b,\n\t0xbb, 0xaf, 0x39, 0x3e, 0x47, 0x39, 0x3f, 0x48, 0x37, 0x3e, 0x46,\n\t0x33, 0x95, 0x8f, 0x39, 0x41, 0x4a, 0x39, 0x4b, 0x53, 0x3e, 0x47,\n\t0x50, 0x3a, 0x55, 0x5b, 0x3b, 0x5d, 0x62, 0x3b, 0x64, 0x68, 0x3c,\n\t0x78, 0x7a, 0x16, 0x71, 0x9c, 0x4b, 0x60, 0x68, 0xf3, 0xc7, 0x4f,\n\t0xda, 0xb3, 0x48, 0x56, 0x8b, 0x7b, 0x6e, 0x8f, 0x6e, 0x39, 0xa5,\n\t0x9f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xec, 0xc2, 0x4d, 0xc2,\n\t0x9f, 0x3f, 0xc3, 0x9f, 0x3e, 0xc2, 0x9f, 0x3f, 0xc2, 0x9f, 0x3f,\n\t0xc4, 0xa0, 0x3e, 0xca, 0xa4, 0x3f, 0xf3, 0xc7, 0x4f, 0x95, 0x9a,\n\t0x58, 0xb8, 0x9e, 0x45, 0xa7, 0x9b, 0x4f, 0x85, 0x91, 0x63, 0x97,\n\t0xad, 0x7c, 0xad, 0xb3, 0x72, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f,\n\t0xc1, 0x9f, 0x40, 0xf3, 0xc7, 0x4f, 0xc4, 0xa1, 0x41, 0xcb, 0xa6,\n\t0x42, 0xcd, 0xa8, 0x43, 0xd3, 0xad, 0x45, 0xda, 0xb3, 0x47, 0xcd,\n\t0xb2, 0x53, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xed, 0xc2, 0x4d,\n\t0xca, 0xb7, 0x63, 0xaf, 0xc2, 0x75, 0x9c, 0xc1, 0x80, 0xdb, 0xc4,\n\t0x5c, 0xf0, 0xc5, 0x4e, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf4,\n\t0xc8, 0x4f, 0xec, 0xc6, 0x53, 0xf5, 0xc9, 0x50, 0xf1, 0xc7, 0x51,\n\t0xd2, 0xc6, 0x68, 0xec, 0xcd, 0x6e, 0x02, 0x80, 0xc3, 0x0f, 0x8e,\n\t0xc1, 0x72, 0xb1, 0xcc, 0x05, 0x6b, 0xa0, 0x08, 0x81, 0xb9, 0x00,\n\t0x81, 0xc6, 0x00, 0x81, 0xc6, 0x00, 0x67, 0x9e, 0x02, 0x68, 0x9f,\n\t0x06, 0x6a, 0x9e, 0x17, 0x73, 0x97, 0x0f, 0x6f, 0x9c, 0x30, 0x7a,\n\t0x8b, 0x00, 0x81, 0xc6, 0x00, 0x6a, 0xa2, 0x03, 0x6c, 0xa4, 0x00,\n\t0x71, 0xad, 0x00, 0x75, 0xb4, 0x00, 0x7a, 0xbb, 0x01, 0x81, 0xc5,\n\t0x11, 0x79, 0xaf, 0x16, 0x76, 0xa7, 0x00, 0x7f, 0xc4, 0x00, 0x81,\n\t0xc6, 0x40, 0xba, 0xb3, 0xa5, 0xd1, 0xe1, 0x40, 0xba, 0xb3, 0x40,\n\t0xba, 0xb3, 0x3c, 0x89, 0x88, 0x33, 0x95, 0x8f, 0x3c, 0x94, 0x8e,\n\t0x33, 0x96, 0x90, 0x3e, 0x9c, 0x98, 0x38, 0x9a, 0x95, 0x2d, 0x90,\n\t0x91, 0x39, 0xa1, 0x9b, 0x3f, 0xb7, 0xb1, 0x17, 0x88, 0xbb, 0x13,\n\t0x8d, 0xbf, 0x2e, 0x8d, 0xb2, 0x40, 0xba, 0xb3, 0x3c, 0xab, 0xa5,\n\t0x3c, 0xaa, 0xa5, 0x3f, 0xb3, 0xac, 0x40, 0xba, 0xb3, 0x3e, 0xb9,\n\t0xb2, 0x3b, 0xb5, 0xb4, 0x29, 0xa5, 0xba, 0x1f, 0x8b, 0xa1, 0x52,\n\t0x98, 0x9c, 0x46, 0x92, 0x84, 0x75, 0xa3, 0x8d, 0x72, 0xb4, 0x94,\n\t0x45, 0x95, 0xb1, 0x40, 0xb4, 0xae, 0x4b, 0xbb, 0xad, 0x57, 0xbc,\n\t0xa6, 0x40, 0xba, 0xb3, 0x48, 0xbb, 0xb6, 0x52, 0xbf, 0xbb, 0x40,\n\t0xa9, 0xa5, 0x72, 0xac, 0xa9, 0x66, 0xa3, 0x9d, 0x5a, 0xc1, 0xbe,\n\t0x00, 0x81, 0xc6, 0x00, 0x82, 0xc8, 0x0b, 0x89, 0xc3, 0x13, 0x8a,\n\t0xca, 0x1b, 0x8e, 0xcb, 0x19, 0x91, 0xc7, 0x2b, 0x96, 0xcd, 0x4c,\n\t0xa6, 0xd3, 0x72, 0xb5, 0xd4, 0x4e, 0x9b, 0xc1, 0x65, 0xc4, 0xc3,\n\t0x78, 0xc9, 0xcc, 0x5d, 0xc2, 0xc0, 0xe3, 0xe8, 0xe2, 0x8a, 0xaa,\n\t0x84, 0x90, 0xac, 0xb8, 0xb6, 0xcd, 0xd6, 0xc3, 0xb7, 0x89, 0x94,\n\t0xc0, 0x84, 0xb1, 0xcb, 0x95, 0xd8, 0xcf, 0x91, 0xc7, 0xca, 0xb7,\n\t0xf2, 0xdc, 0x99, 0xa6, 0xb9, 0xc4, 0x8e, 0xb8, 0xca, 0x88, 0xc9,\n\t0xcc, 0x88, 0xcc, 0xd4, 0x8f, 0xd6, 0xd2, 0x9a, 0xd3, 0xda, 0x90,\n\t0xcf, 0xd6, 0xa2, 0xd4, 0xde, 0xab, 0xd9, 0xe1, 0xbb, 0xd7, 0xd8,\n\t0xa7, 0xcb, 0xd9, 0xa9, 0xd5, 0xe2, 0xb4, 0xd9, 0xe6, 0xb5, 0xdb,\n\t0xe8, 0xbb, 0xdd, 0xe9, 0xb3, 0xd8, 0xe5, 0xa4, 0xcf, 0xe0, 0xaa,\n\t0xd4, 0xe7, 0xcc, 0xcc, 0xcc, 0xca, 0xcb, 0xc8, 0xd6, 0xd6, 0xd6,\n\t0xc6, 0xd3, 0xc5, 0xc1, 0xdf, 0xe9, 0xc8, 0xe3, 0xed, 0xcf, 0xe7,\n\t0xf4, 0xd8, 0xec, 0xf3, 0xd0, 0xe7, 0xef, 0xe8, 0xe8, 0xe8, 0xe8,\n\t0xf4, 0xf7, 0xff, 0xff, 0xff, 0xf5, 0xf9, 0xfa, 0xf7, 0xf8, 0xf3,\n\t0xf8, 0xf2, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x21, 0xf9, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x21, 0xff, 0x0b,\n\t0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x6b,\n\t0x0d, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x3d, 0x30, 0x2e, 0x34, 0x35,\n\t0x34, 0x35, 0x35, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00,\n\t0x7f, 0x00, 0x00, 0x08, 0xfe, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0,\n\t0xa0, 0xc1, 0x83, 0x08, 0x13, 0x1e, 0x34, 0x10, 0xa1, 0xc6, 0xa2,\n\t0x46, 0x9b, 0x3e, 0x81, 0xfa, 0xb4, 0xa9, 0xd1, 0xa2, 0x1a, 0x17,\n\t0x0c, 0x28, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x02,\n\t0x30, 0x80, 0xa2, 0x46, 0xa3, 0x4f, 0xac, 0x52, 0xaa, 0x5c, 0xc9,\n\t0xea, 0x53, 0xa3, 0x1a, 0x28, 0x34, 0x8a, 0x9c, 0x49, 0xb3, 0xa6,\n\t0xcd, 0x81, 0x13, 0x4c, 0xb2, 0x6a, 0xc5, 0xb2, 0xe7, 0x4a, 0x9e,\n\t0x2f, 0x27, 0xdc, 0x1c, 0x4a, 0xb4, 0xa8, 0xc0, 0x9c, 0x9b, 0x7c,\n\t0x2a, 0x55, 0xba, 0xa9, 0x86, 0x50, 0xa3, 0x50, 0xa3, 0x6e, 0x14,\n\t0x50, 0x23, 0xe9, 0xd2, 0xab, 0x3e, 0x37, 0xc1, 0x08, 0x20, 0xb5,\n\t0xab, 0xd7, 0x0b, 0x8d, 0xb0, 0x8a, 0x55, 0xda, 0xe8, 0x82, 0xd7,\n\t0xb3, 0x07, 0x03, 0x18, 0x80, 0x00, 0xc1, 0x00, 0xd7, 0x8d, 0x01,\n\t0xaa, 0x8e, 0x9d, 0xdb, 0x53, 0xeb, 0x5b, 0x85, 0x6a, 0xd9, 0xba,\n\t0x45, 0xfb, 0xd1, 0x00, 0x89, 0x39, 0x76, 0x00, 0x09, 0x06, 0x64,\n\t0x67, 0x0e, 0x09, 0x99, 0x06, 0x0d, 0xd4, 0xa0, 0xcb, 0xb8, 0x67,\n\t0x0d, 0xc4, 0x05, 0xfd, 0x02, 0x1e, 0x4c, 0xd8, 0x30, 0x64, 0xbe,\n\t0x91, 0x61, 0xe4, 0x99, 0x45, 0xab, 0xb3, 0xe7, 0xce, 0xb3, 0xf2,\n\t0xc0, 0xb8, 0x0c, 0xb6, 0xb1, 0xe9, 0x95, 0x8d, 0x0e, 0x64, 0xde,\n\t0xfc, 0xf9, 0x73, 0xe8, 0xd1, 0x98, 0x0b, 0x92, 0xb0, 0x03, 0x7a,\n\t0x96, 0xed, 0xdb, 0xb7, 0x3b, 0xdb, 0x21, 0x31, 0xb0, 0xf4, 0xe9,\n\t0xdf, 0xac, 0xca, 0x0e, 0x9c, 0x5d, 0x1b, 0x37, 0x6e, 0xdd, 0xbc,\n\t0x63, 0x03, 0xd0, 0x60, 0x88, 0x96, 0xf1, 0xe7, 0xb7, 0x09, 0xf1,\n\t0x21, 0x11, 0xe0, 0x82, 0x23, 0xe0, 0xd8, 0x37, 0x99, 0x85, 0xd1,\n\t0x1c, 0x3a, 0x74, 0x5a, 0x80, 0x92, 0xfe, 0xf3, 0x85, 0xa1, 0xc8,\n\t0xb9, 0x77, 0xe3, 0x84, 0xf6, 0xe8, 0xe1, 0x53, 0xa3, 0x12, 0xf6,\n\t0xf7, 0x9b, 0xe6, 0x94, 0x3f, 0xff, 0x5d, 0x91, 0x06, 0xbe, 0x24,\n\t0xba, 0xd3, 0x8f, 0xae, 0xa7, 0x7f, 0x1f, 0x4e, 0xef, 0x05, 0x18,\n\t0x4a, 0x26, 0xfb, 0x7d, 0x67, 0x88, 0x78, 0x52, 0x41, 0x90, 0x87,\n\t0x79, 0xcf, 0x99, 0x67, 0x1e, 0x21, 0x81, 0xf8, 0xd7, 0x49, 0x80,\n\t0x14, 0x86, 0x82, 0x4b, 0x83, 0xb6, 0x31, 0x68, 0x1c, 0x2d, 0x79,\n\t0x40, 0xe0, 0x15, 0x0c, 0x1a, 0xe2, 0x86, 0x09, 0x29, 0xa6, 0x98,\n\t0x42, 0x0a, 0x26, 0x85, 0x44, 0xa8, 0x87, 0x1f, 0x94, 0x80, 0x42,\n\t0x61, 0x85, 0xb5, 0x88, 0x48, 0xa2, 0x89, 0x98, 0x78, 0x47, 0x0b,\n\t0x0c, 0x5d, 0x41, 0x00, 0x48, 0x88, 0xb3, 0x60, 0x62, 0x8a, 0x19,\n\t0x70, 0xb4, 0xd1, 0x06, 0x1c, 0x66, 0x18, 0xe1, 0x87, 0x1e, 0x7b,\n\t0x54, 0xe2, 0xc9, 0x8b, 0x2f, 0x86, 0x12, 0xa3, 0x8f, 0x40, 0x0a,\n\t0x49, 0xa4, 0x29, 0x04, 0x6e, 0x08, 0x88, 0x87, 0x51, 0x81, 0xf8,\n\t0x1c, 0x26, 0x57, 0xb0, 0xd1, 0x06, 0x1b, 0x60, 0xaa, 0xf1, 0xc5,\n\t0x13, 0x47, 0xf4, 0x51, 0xc9, 0x84, 0x4c, 0xbe, 0x28, 0x0a, 0x97,\n\t0x5e, 0x82, 0x09, 0xe6, 0x97, 0x57, 0xd4, 0xb8, 0xe1, 0x7d, 0x50,\n\t0x05, 0x40, 0xdb, 0x73, 0xc1, 0xb8, 0xe9, 0x26, 0x18, 0x4f, 0x3c,\n\t0x41, 0x85, 0x11, 0x2d, 0xa6, 0xf9, 0x22, 0x28, 0xa7, 0xb8, 0xf1,\n\t0xa5, 0x9e, 0x6e, 0x9a, 0xd2, 0xe0, 0x1c, 0x51, 0x19, 0xb0, 0xa3,\n\t0x71, 0x9a, 0xa4, 0x71, 0x28, 0x98, 0x61, 0xf4, 0xf9, 0xc4, 0x14,\n\t0x91, 0x2c, 0x29, 0x28, 0x85, 0xa0, 0xa8, 0x72, 0xc6, 0xa4, 0x7a,\n\t0xb6, 0x91, 0x86, 0x26, 0x1b, 0xe6, 0x71, 0xd9, 0x4d, 0x06, 0xe8,\n\t0x77, 0x9b, 0x29, 0xa0, 0x96, 0xd1, 0x45, 0x9f, 0xfe, 0x55, 0x94,\n\t0x82, 0xe6, 0xa6, 0x9c, 0xae, 0x12, 0x07, 0xa8, 0x7a, 0xc6, 0xa2,\n\t0x21, 0x78, 0x58, 0x16, 0x75, 0x81, 0x22, 0xcf, 0x5d, 0x31, 0xa9,\n\t0x1a, 0x5e, 0xf4, 0xf9, 0x27, 0x25, 0x9a, 0xd2, 0xca, 0x69, 0xa1,\n\t0x88, 0xbe, 0x19, 0xcc, 0x73, 0x8a, 0x98, 0x65, 0xd4, 0x05, 0x89,\n\t0x04, 0x3b, 0x29, 0x9f, 0x7d, 0x1e, 0x01, 0x09, 0x80, 0xca, 0xa6,\n\t0x89, 0x46, 0xb3, 0x5e, 0x5e, 0x01, 0xad, 0xb4, 0xbe, 0x02, 0x6b,\n\t0x1c, 0xab, 0x60, 0xba, 0x0a, 0x6b, 0x29, 0x81, 0x76, 0x3b, 0xa8,\n\t0xad, 0xb8, 0xb6, 0xa1, 0xa8, 0x71, 0x86, 0x90, 0x4b, 0x94, 0x8e,\n\t0x21, 0xa2, 0x62, 0xa8, 0x98, 0xc6, 0x1a, 0x21, 0x09, 0xb7, 0xee,\n\t0x0e, 0xca, 0xac, 0x9b, 0x6d, 0xb8, 0x81, 0x8a, 0x95, 0xbd, 0x12,\n\t0x65, 0x67, 0x88, 0xb5, 0x60, 0xd1, 0x46, 0xa5, 0x7d, 0x5a, 0x01,\n\t0x89, 0x25, 0x01, 0xa7, 0xe9, 0xe2, 0xa7, 0x04, 0x63, 0x11, 0xe3,\n\t0x71, 0x76, 0xdc, 0x55, 0x94, 0x96, 0x90, 0x9a, 0x11, 0xc5, 0xba,\n\t0x92, 0x24, 0x5b, 0x71, 0xad, 0x92, 0x7a, 0x69, 0x06, 0xa9, 0x1b,\n\t0xe2, 0x18, 0xd5, 0xaf, 0xd0, 0xfd, 0x31, 0x05, 0x15, 0x50, 0x68,\n\t0x4b, 0xf1, 0xc9, 0x16, 0x17, 0x33, 0x24, 0x16, 0x2c, 0x1f, 0x57,\n\t0xaf, 0x54, 0x01, 0xcc, 0x11, 0x62, 0x8a, 0x7e, 0x04, 0x71, 0x44,\n\t0x29, 0xff, 0xe2, 0x6c, 0xf1, 0x2a, 0xc1, 0x9c, 0xf8, 0xdd, 0x1c,\n\t0x1e, 0x1b, 0x95, 0x9f, 0x86, 0x83, 0xf4, 0xa7, 0xc7, 0x28, 0x90,\n\t0xb4, 0xab, 0x34, 0x93, 0xa2, 0xd8, 0x08, 0x88, 0xbd, 0x59, 0x32,\n\t0x58, 0x88, 0xd5, 0x7e, 0x40, 0xb2, 0xed, 0xd6, 0x82, 0x3a, 0xf9,\n\t0x9d, 0xcb, 0x5e, 0x09, 0x20, 0xf4, 0x2c, 0x89, 0x08, 0xd2, 0xdf,\n\t0x1e, 0x58, 0x23, 0x8b, 0xb6, 0xa0, 0x5d, 0x6f, 0x08, 0x35, 0xfe,\n\t0x5f, 0x06, 0x08, 0x3d, 0x76, 0x7f, 0x7e, 0x48, 0x02, 0xc9, 0xac,\n\t0x77, 0x37, 0xb9, 0x31, 0x67, 0xb4, 0xcc, 0x71, 0x6a, 0x57, 0x02,\n\t0xc0, 0x10, 0x88, 0x7a, 0x57, 0x43, 0x52, 0x72, 0xe1, 0x78, 0x67,\n\t0xa8, 0x08, 0x0c, 0x02, 0x28, 0x27, 0xd0, 0x05, 0x76, 0x20, 0x69,\n\t0xf6, 0xcd, 0x94, 0x33, 0xe9, 0x64, 0x22, 0xbb, 0x69, 0x4e, 0x50,\n\t0x00, 0xb3, 0x09, 0x0e, 0xf0, 0x24, 0x8f, 0x4c, 0xd2, 0x93, 0x27,\n\t0x8f, 0x3c, 0x02, 0x70, 0xc5, 0x9c, 0xc4, 0x6e, 0x72, 0x4a, 0xac,\n\t0xbb, 0xce, 0xd2, 0x28, 0xd4, 0x99, 0x5e, 0x90, 0x00, 0x3a, 0x48,\n\t0x62, 0x37, 0x2b, 0x93, 0xf0, 0x70, 0x03, 0x0f, 0xba, 0xab, 0x14,\n\t0xc4, 0x0e, 0x38, 0x00, 0x91, 0xca, 0xc9, 0xa9, 0x00, 0x81, 0xc3,\n\t0x0e, 0x41, 0xb0, 0x54, 0xfc, 0xf1, 0xc9, 0xa7, 0xd4, 0x48, 0xd4,\n\t0xbe, 0x5f, 0xf0, 0xb9, 0xf2, 0x37, 0xec, 0x70, 0x43, 0xf5, 0x2a,\n\t0x79, 0xe2, 0x03, 0x0e, 0x38, 0xf0, 0x40, 0x78, 0xb7, 0x9d, 0xf0,\n\t0x80, 0xbe, 0x0f, 0x26, 0x07, 0x11, 0xfe, 0x0d, 0x7f, 0xb0, 0xf4,\n\t0x09, 0xd8, 0xbe, 0xd7, 0x40, 0xc9, 0xd9, 0x29, 0x3d, 0x32, 0xfd,\n\t0x0d, 0xce, 0x53, 0xc9, 0x24, 0x76, 0xc0, 0x3c, 0x1e, 0xcc, 0x8e,\n\t0x7d, 0xee, 0x23, 0x60, 0xf2, 0xa2, 0x17, 0x3e, 0x1c, 0x3c, 0x82,\n\t0x25, 0xad, 0xa8, 0x81, 0xef, 0x08, 0x42, 0x80, 0x4a, 0x48, 0x62,\n\t0x72, 0xb8, 0x23, 0x20, 0x01, 0x1f, 0xe1, 0x89, 0x54, 0x74, 0xe2,\n\t0x07, 0xff, 0x0b, 0x60, 0xc5, 0x52, 0xf1, 0x83, 0x06, 0x02, 0xa1,\n\t0x13, 0xa9, 0xf0, 0xc4, 0x1f, 0x34, 0xb8, 0x83, 0xec, 0xa5, 0x64,\n\t0x13, 0x8b, 0x8b, 0x0d, 0x0a, 0x04, 0x47, 0x89, 0x95, 0x78, 0xa2,\n\t0x84, 0x1a, 0xf4, 0x01, 0x10, 0x12, 0xb8, 0x41, 0xa5, 0x3d, 0x82,\n\t0x85, 0xfe, 0x3c, 0x00, 0x82, 0x0f, 0x34, 0x08, 0xc0, 0xe7, 0xf5,\n\t0x04, 0x05, 0x13, 0x04, 0x40, 0x00, 0x84, 0x20, 0xb8, 0xf5, 0x15,\n\t0x6f, 0x7a, 0xcc, 0xbb, 0x01, 0x14, 0x01, 0x78, 0x3b, 0x77, 0x79,\n\t0x02, 0x08, 0xe1, 0x8b, 0x22, 0x14, 0xd3, 0xe7, 0x42, 0x95, 0x2c,\n\t0x82, 0x7b, 0x98, 0x99, 0x40, 0x25, 0x24, 0x57, 0xc5, 0x47, 0x18,\n\t0x0f, 0x8a, 0xe2, 0xdb, 0xc1, 0x10, 0x5e, 0x81, 0xb6, 0x4e, 0x48,\n\t0x2f, 0x8b, 0xcc, 0xcb, 0x81, 0x0f, 0x48, 0xb1, 0x94, 0x4d, 0x3c,\n\t0xc5, 0x74, 0x33, 0xcc, 0x5a, 0x15, 0x89, 0x37, 0x84, 0x21, 0x12,\n\t0x70, 0x08, 0xa6, 0x60, 0x06, 0x4f, 0xd0, 0xc6, 0x89, 0x20, 0x0c,\n\t0xa1, 0x07, 0x04, 0xf4, 0xc1, 0x10, 0x96, 0xc1, 0x0c, 0x17, 0x29,\n\t0x05, 0x89, 0xf9, 0xdb, 0x1f, 0xe8, 0x7a, 0xe2, 0x0b, 0x6a, 0x08,\n\t0xe3, 0x92, 0xd4, 0xb8, 0x46, 0x34, 0x5a, 0xe1, 0xc8, 0xad, 0xb5,\n\t0x82, 0x19, 0x97, 0x14, 0x06, 0x35, 0xb2, 0x71, 0x8d, 0x66, 0xb0,\n\t0x02, 0x14, 0xa8, 0x4c, 0xa5, 0x8b, 0x22, 0xe8, 0x3b, 0x03, 0x58,\n\t0x70, 0x70, 0x4b, 0x69, 0xc6, 0x35, 0x66, 0x79, 0x0d, 0x6b, 0x58,\n\t0x63, 0x93, 0x9d, 0x54, 0x5a, 0x2b, 0x9e, 0x41, 0xcb, 0x5a, 0x5a,\n\t0x83, 0x19, 0xaa, 0x50, 0xc5, 0x2a, 0x86, 0x39, 0xcc, 0x60, 0xb6,\n\t0xa2, 0x11, 0x31, 0xfc, 0x8a, 0xd9, 0xf8, 0xe7, 0x13, 0x68, 0xd8,\n\t0xf2, 0x99, 0xd6, 0x78, 0xc6, 0x20, 0xb7, 0x06, 0x8a, 0x56, 0x44,\n\t0xc3, 0x96, 0xd9, 0xf8, 0xc6, 0x31, 0x8e, 0x11, 0x87, 0x38, 0xa4,\n\t0xe1, 0x9b, 0xe0, 0xec, 0xe6, 0x19, 0xb0, 0xd0, 0x82, 0x0d, 0x2c,\n\t0x00, 0x8c, 0x52, 0x71, 0xc1, 0xfe, 0x30, 0xc8, 0x92, 0x6a, 0x5e,\n\t0x13, 0x9a, 0xd6, 0x30, 0xe5, 0x58, 0x52, 0xc8, 0x92, 0xdb, 0x75,\n\t0x70, 0x2e, 0xa0, 0xfe, 0xf8, 0x45, 0x36, 0xac, 0x31, 0x8d, 0x63,\n\t0xc0, 0xe1, 0x4d, 0x42, 0x0a, 0xa8, 0x40, 0x03, 0xba, 0x06, 0x31,\n\t0x38, 0x81, 0x08, 0x1b, 0xc8, 0x9c, 0x57, 0x96, 0x48, 0xc3, 0x3d,\n\t0x82, 0xa2, 0x17, 0xfb, 0x84, 0x66, 0x36, 0x7a, 0x91, 0x4b, 0xa5,\n\t0x4c, 0xe2, 0x07, 0x3f, 0x88, 0x44, 0x4a, 0x3c, 0x11, 0x04, 0x1f,\n\t0x04, 0x41, 0x53, 0x91, 0xf8, 0x01, 0x10, 0xba, 0xe8, 0x13, 0x50,\n\t0xf8, 0x82, 0x9f, 0x72, 0x00, 0x97, 0x4a, 0x01, 0xfa, 0x86, 0x37,\n\t0xac, 0x21, 0x0b, 0x44, 0x68, 0x40, 0x57, 0x0c, 0x10, 0xbc, 0xac,\n\t0x55, 0x54, 0x25, 0xcd, 0x80, 0x67, 0x34, 0x39, 0x89, 0x15, 0x06,\n\t0xde, 0xc0, 0x07, 0x00, 0xfa, 0x61, 0xf8, 0x1e, 0xc8, 0x09, 0x1f,\n\t0xdc, 0xa0, 0x88, 0x58, 0x01, 0x85, 0x2b, 0xae, 0x79, 0x8c, 0x95,\n\t0x3a, 0x95, 0x60, 0x2d, 0x15, 0x43, 0x12, 0x16, 0xf0, 0xb2, 0x65,\n\t0x4e, 0x52, 0x25, 0xf9, 0xac, 0x06, 0x3c, 0x27, 0x7a, 0xd3, 0xd7,\n\t0x9d, 0x8f, 0x80, 0x99, 0xc2, 0xa2, 0xf8, 0x9c, 0x17, 0x09, 0x02,\n\t0xe2, 0xc0, 0x07, 0x46, 0x5c, 0x8a, 0x49, 0x51, 0xfa, 0xd4, 0xb6,\n\t0xbe, 0xe9, 0x0d, 0x62, 0x20, 0x82, 0x42, 0x89, 0x92, 0xc7, 0x89,\n\t0x29, 0x25, 0xa7, 0xf0, 0x94, 0x66, 0x57, 0x7b, 0x22, 0xd6, 0x1d,\n\t0xf0, 0xe0, 0x07, 0x2c, 0xdc, 0xc1, 0x0f, 0x78, 0x40, 0x40, 0x00,\n\t0x26, 0xd5, 0x9a, 0xd7, 0xf8, 0xc6, 0x3f, 0xdd, 0xea, 0x56, 0x21,\n\t0x39, 0xc1, 0x02, 0x45, 0xd1, 0x9f, 0xd9, 0xd6, 0x77, 0x4a, 0x57,\n\t0x68, 0x15, 0x9e, 0xbe, 0xd8, 0x6b, 0x4f, 0xca, 0x3a, 0x3d, 0xf4,\n\t0x05, 0xd6, 0xb3, 0xd3, 0xd3, 0xe8, 0x55, 0x1e, 0xba, 0x4f, 0x64,\n\t0x2c, 0x96, 0xb1, 0x6e, 0x85, 0x2b, 0x08, 0x88, 0x22, 0x59, 0x58,\n\t0xb6, 0x13, 0xa2, 0x5b, 0xa5, 0xfe, 0xe8, 0x5c, 0x52, 0xb1, 0xbc,\n\t0x2d, 0x76, 0x76, 0x8b, 0xd4, 0x4b, 0xab, 0x52, 0xd6, 0x6a, 0x0d,\n\t0xc5, 0xa2, 0x16, 0xb5, 0x6f, 0x18, 0xc3, 0x07, 0x6e, 0x12, 0x80,\n\t0x9a, 0x32, 0x13, 0xab, 0x27, 0x85, 0x67, 0x35, 0x5c, 0xa1, 0xd9,\n\t0xd7, 0x3d, 0xc2, 0x8f, 0x41, 0x7c, 0xc4, 0x0e, 0x13, 0xf9, 0x08,\n\t0xdd, 0x2e, 0xc5, 0x99, 0x6c, 0xfd, 0x2d, 0x63, 0xdf, 0x40, 0x86,\n\t0xd5, 0xd6, 0xc4, 0x95, 0x82, 0x3b, 0x6e, 0x4a, 0x78, 0x0b, 0xcd,\n\t0xe5, 0x36, 0xd7, 0x27, 0x9c, 0x98, 0x44, 0x24, 0x2c, 0xf1, 0xbc,\n\t0x54, 0x58, 0x22, 0x12, 0x93, 0x38, 0xe0, 0x55, 0xb0, 0x6b, 0x8d,\n\t0xa6, 0x6a, 0x77, 0xbb, 0x62, 0x60, 0x40, 0x4d, 0xc4, 0xb8, 0x4c,\n\t0xf9, 0x92, 0xf7, 0x99, 0xe6, 0x2d, 0x1c, 0x5e, 0xb3, 0x7b, 0xdf,\n\t0xb6, 0xbe, 0x21, 0x09, 0xe8, 0xe4, 0x88, 0xf7, 0xfa, 0xdb, 0x13,\n\t0xd2, 0xc6, 0xf6, 0xbc, 0xb4, 0xfa, 0x6f, 0x3f, 0x83, 0x34, 0xd0,\n\t0x0a, 0x0b, 0xe9, 0xb7, 0x5f, 0x1a, 0xee, 0x4c, 0x16, 0x6c, 0x36,\n\t0xff, 0x5a, 0x56, 0xa7, 0x99, 0xbd, 0x9b, 0x83, 0x9f, 0x99, 0x0d,\n\t0x64, 0x18, 0xe3, 0x0c, 0x28, 0x46, 0x43, 0x31, 0x56, 0xbc, 0x62,\n\t0x34, 0x9c, 0xc1, 0x9b, 0x86, 0xba, 0xb0, 0x81, 0x9d, 0x90, 0x60,\n\t0x85, 0x70, 0xd8, 0xb5, 0x3d, 0x19, 0xf0, 0x33, 0xf5, 0x8a, 0xb6,\n\t0x6a, 0x3e, 0x03, 0x9e, 0xa5, 0xc4, 0xaa, 0x2a, 0x51, 0xc9, 0x0a,\n\t0x61, 0x9e, 0x02, 0x0d, 0x62, 0x18, 0xc3, 0x1b, 0x70, 0xd5, 0xac,\n\t0x36, 0xac, 0x41, 0xc3, 0x21, 0xd1, 0x40, 0x78, 0x71, 0xbc, 0x12,\n\t0x50, 0xc8, 0xe2, 0xb2, 0x24, 0x96, 0x6d, 0x8f, 0x93, 0x5b, 0x5e,\n\t0xe6, 0xaa, 0x35, 0x95, 0x1a, 0xd8, 0x40, 0x12, 0xd6, 0xf0, 0x86,\n\t0xa7, 0xbe, 0x81, 0x08, 0x33, 0xa9, 0xab, 0xfe, 0x5d, 0xef, 0xaa,\n\t0x53, 0x1e, 0x53, 0x73, 0x97, 0x3a, 0x65, 0xc6, 0x5c, 0x90, 0x18,\n\t0x80, 0x0f, 0x88, 0xa1, 0xcc, 0x2b, 0x7d, 0x43, 0x16, 0x6a, 0x9c,\n\t0x96, 0x1a, 0x4c, 0xf9, 0xaa, 0x58, 0x85, 0xad, 0x44, 0xb5, 0x4c,\n\t0x4d, 0x2e, 0x3f, 0x33, 0x1a, 0x5e, 0xc6, 0x0a, 0x24, 0x01, 0xb0,\n\t0x01, 0x32, 0x30, 0x99, 0x60, 0x62, 0xa0, 0x2a, 0x48, 0x3e, 0x30,\n\t0x85, 0x65, 0xda, 0xb4, 0xa4, 0x70, 0x86, 0xa7, 0x3c, 0x7b, 0x2c,\n\t0x8b, 0x88, 0x42, 0x93, 0xd0, 0xbb, 0xb5, 0x17, 0x11, 0x1e, 0xfd,\n\t0xa6, 0x35, 0x6c, 0x00, 0x24, 0x16, 0x60, 0x42, 0xa5, 0x97, 0xc9,\n\t0xce, 0x9e, 0xd0, 0x77, 0xc7, 0xd3, 0x54, 0x9a, 0x3b, 0x41, 0x7c,\n\t0xde, 0xfb, 0x11, 0xc4, 0x02, 0x63, 0x20, 0x35, 0x98, 0x4e, 0xed,\n\t0x11, 0x01, 0x38, 0x21, 0x0a, 0xab, 0x36, 0x5b, 0xab, 0x59, 0xa2,\n\t0x63, 0x5b, 0xe2, 0xf2, 0x6e, 0x99, 0x86, 0xe6, 0xa6, 0x97, 0xc2,\n\t0x09, 0x7b, 0xe1, 0x5a, 0xd7, 0x6c, 0xe0, 0x75, 0x47, 0x5a, 0xf0,\n\t0xaa, 0x2a, 0x44, 0xc2, 0xd2, 0x94, 0xc5, 0xa9, 0x4e, 0x8f, 0x8d,\n\t0xb6, 0x64, 0x3f, 0x73, 0xd9, 0x4c, 0x21, 0x00, 0x41, 0x5a, 0x00,\n\t0x6d, 0x53, 0x7b, 0x64, 0x01, 0x5b, 0x78, 0x15, 0x15, 0x90, 0x66,\n\t0xd5, 0x58, 0xb6, 0x39, 0xd6, 0x38, 0x9b, 0x35, 0x3c, 0x1b, 0x39,\n\t0xda, 0x4d, 0x74, 0x00, 0x01, 0x0b, 0x60, 0x40, 0x0b, 0x1c, 0xbd,\n\t0xd2, 0x36, 0x90, 0x41, 0xd2, 0x1c, 0x49, 0x82, 0xba, 0xfe, 0x64,\n\t0xe9, 0x92, 0x0d, 0x19, 0x95, 0xde, 0xb6, 0x65, 0x33, 0x0e, 0xce,\n\t0xf0, 0x86, 0x3b, 0xfc, 0xe1, 0xaa, 0xbc, 0xb2, 0x4e, 0x29, 0x0a,\n\t0xf1, 0x42, 0x91, 0xe1, 0xe2, 0x32, 0x56, 0xa9, 0x9e, 0xf9, 0x2c,\n\t0x10, 0x0b, 0x90, 0x41, 0x0d, 0xaf, 0xda, 0x42, 0x30, 0xfe, 0x60,\n\t0x41, 0x72, 0x92, 0x33, 0xc3, 0x19, 0x28, 0x4f, 0x39, 0xca, 0x3d,\n\t0xfd, 0x4c, 0x69, 0xa8, 0xfc, 0xe5, 0x30, 0x8f, 0xb9, 0xcc, 0x67,\n\t0xfe, 0xf2, 0x1f, 0xb7, 0x99, 0xe6, 0x28, 0x37, 0x86, 0x97, 0x32,\n\t0x9e, 0xe7, 0x24, 0x78, 0x84, 0x08, 0x6f, 0x20, 0x56, 0x9f, 0x88,\n\t0xc1, 0x8d, 0xa2, 0x17, 0xbd, 0x1c, 0xe7, 0x48, 0xba, 0xd2, 0xcf,\n\t0x31, 0x0e, 0x9d, 0x82, 0x03, 0x1d, 0x4b, 0x8f, 0xba, 0xd4, 0xa7,\n\t0x4e, 0xf5, 0xaa, 0x47, 0x3d, 0x1c, 0x3a, 0x25, 0x87, 0xd5, 0x95,\n\t0x9e, 0x0c, 0xed, 0x42, 0x59, 0x21, 0x0b, 0xb8, 0xb3, 0xd0, 0x9f,\n\t0x60, 0x06, 0xa3, 0x17, 0xdd, 0x1b, 0x50, 0x5f, 0x3a, 0x3a, 0xb0,\n\t0xa1, 0xd3, 0x71, 0x6c, 0xfd, 0xed, 0x70, 0xa7, 0xba, 0x39, 0x7c,\n\t0xf9, 0xcc, 0x6b, 0x98, 0x03, 0xee, 0x5d, 0xdf, 0x6e, 0x16, 0xe6,\n\t0xaa, 0x90, 0x0e, 0xe0, 0x19, 0x5b, 0x62, 0x40, 0x86, 0xd9, 0xb9,\n\t0x91, 0x8e, 0xa8, 0x37, 0x1d, 0x9e, 0x4f, 0x8f, 0xbb, 0xe2, 0x15,\n\t0x8f, 0x75, 0x78, 0x6a, 0xfd, 0xed, 0xe9, 0x48, 0x29, 0x6a, 0xbf,\n\t0x9e, 0x90, 0x00, 0x38, 0x01, 0xcf, 0x10, 0xeb, 0x82, 0xe0, 0xcd,\n\t0xee, 0x0d, 0xb5, 0x83, 0xa3, 0xed, 0x8b, 0x0f, 0xfd, 0xd6, 0xe7,\n\t0xae, 0xd3, 0xbb, 0xbf, 0x5d, 0x1d, 0xa7, 0x35, 0x33, 0x8d, 0x3b,\n\t0xb2, 0x81, 0x5c, 0x7b, 0xa9, 0x0c, 0x96, 0x22, 0x3a, 0xe7, 0xd3,\n\t0x7e, 0x0e, 0xd2, 0xc3, 0xd3, 0xf4, 0xa2, 0xcf, 0xbd, 0xe1, 0x75,\n\t0x8a, 0x0d, 0xda, 0x5b, 0x3d, 0xef, 0x06, 0x16, 0x03, 0x64, 0xa7,\n\t0x8d, 0x67, 0x36, 0xa8, 0x8b, 0xec, 0xdd, 0x18, 0x3c, 0xd2, 0x93,\n\t0x6e, 0x0e, 0xde, 0xfb, 0x5e, 0xf7, 0xba, 0x27, 0x07, 0xcb, 0xad,\n\t0x11, 0x0e, 0xb8, 0xa3, 0x43, 0xf2, 0x66, 0x26, 0x03, 0xe5, 0x2b,\n\t0xfe, 0x9f, 0x84, 0xe2, 0x8f, 0x5d, 0xf3, 0x83, 0x47, 0x7b, 0xd2,\n\t0x0f, 0x0f, 0xcd, 0xde, 0x43, 0xff, 0xfc, 0xe7, 0x68, 0x3c, 0x34,\n\t0xab, 0x7f, 0xfa, 0xd4, 0x6b, 0x5c, 0x0c, 0xdb, 0x4f, 0x48, 0xd8,\n\t0x41, 0x85, 0xad, 0x27, 0xc8, 0xde, 0xec, 0xcb, 0x27, 0xff, 0x33,\n\t0xcd, 0x8f, 0xfe, 0xe8, 0xeb, 0x94, 0xfd, 0x5b, 0x07, 0x7c, 0x1a,\n\t0xc7, 0x06, 0x8f, 0x05, 0x12, 0x20, 0x80, 0x28, 0x6d, 0x50, 0x06,\n\t0x50, 0xd0, 0x27, 0x81, 0x17, 0x7e, 0x50, 0xd7, 0x7c, 0x40, 0x86,\n\t0x7b, 0xfd, 0x17, 0x7a, 0xe4, 0xe0, 0x74, 0xcf, 0x27, 0x75, 0xd7,\n\t0x17, 0x50, 0xa1, 0xd2, 0x52, 0x6c, 0x90, 0x05, 0x1f, 0xc0, 0x71,\n\t0x05, 0x01, 0x74, 0x88, 0x32, 0x76, 0x5b, 0x70, 0x7f, 0x46, 0xd7,\n\t0x79, 0x6b, 0x07, 0x7a, 0x13, 0x28, 0x7a, 0x10, 0x58, 0x7e, 0x17,\n\t0x18, 0x75, 0xc0, 0x90, 0x04, 0x59, 0x40, 0x06, 0x6b, 0xd0, 0x26,\n\t0x6b, 0x40, 0x06, 0x59, 0x90, 0x04, 0x20, 0xc0, 0x77, 0x1f, 0xd1,\n\t0x7d, 0xcd, 0x52, 0x7f, 0x55, 0x90, 0x7c, 0x83, 0x57, 0x78, 0xea,\n\t0xf7, 0x4c, 0x00, 0xb8, 0x82, 0x8a, 0x97, 0x82, 0xf0, 0xe4, 0x76,\n\t0x55, 0xe7, 0x0d, 0xaa, 0x11, 0x00, 0x0b, 0xb0, 0x01, 0x1f, 0xf0,\n\t0x01, 0x20, 0xf0, 0x01, 0x0d, 0xc0, 0x83, 0x20, 0x21, 0x00, 0x59,\n\t0x50, 0x7c, 0x6f, 0xa2, 0x2e, 0x5d, 0x50, 0x04, 0xc0, 0x30, 0x78,\n\t0xdc, 0x80, 0x76, 0x2d, 0xb8, 0x7f, 0x12, 0x88, 0x84, 0x70, 0xa7,\n\t0x7f, 0xb6, 0x14, 0x0e, 0x2f, 0x98, 0x74, 0xc0, 0xe0, 0x15, 0x0b,\n\t0xc0, 0x6f, 0xcd, 0x32, 0x26, 0x5d, 0xf0, 0x01, 0x07, 0xa0, 0x0c,\n\t0x62, 0x58, 0x0e, 0xe8, 0x50, 0x84, 0xb6, 0xf4, 0x78, 0x68, 0x18,\n\t0x77, 0x4a, 0x08, 0x4d, 0x4c, 0x28, 0x75, 0x4e, 0xe8, 0x15, 0x1f,\n\t0xb0, 0x52, 0xfe, 0x95, 0xd2, 0x04, 0xa7, 0xf6, 0x02, 0x62, 0xc8,\n\t0x0d, 0xe5, 0x50, 0x86, 0xb6, 0x84, 0x0d, 0x67, 0xf8, 0x87, 0x56,\n\t0x57, 0x81, 0xf0, 0xc4, 0x86, 0x53, 0xf7, 0x86, 0x5e, 0xd1, 0x02,\n\t0x5c, 0xa8, 0x27, 0x62, 0xc2, 0x04, 0x54, 0x45, 0x00, 0xc3, 0x20,\n\t0x86, 0xde, 0x60, 0x0e, 0x6c, 0xb7, 0x84, 0x94, 0x18, 0x77, 0xb6,\n\t0x57, 0x77, 0x93, 0x38, 0x0c, 0xe2, 0xe6, 0x15, 0x22, 0xa8, 0x52,\n\t0x61, 0xe0, 0x04, 0x0a, 0xa5, 0x01, 0x42, 0xc8, 0x79, 0x9f, 0x77,\n\t0x89, 0xa9, 0x68, 0x7d, 0xa7, 0x28, 0x88, 0x51, 0x87, 0x0e, 0x18,\n\t0x80, 0x16, 0x3e, 0xa8, 0x52, 0x6d, 0x50, 0x04, 0x03, 0x11, 0x00,\n\t0xc0, 0xe0, 0x0d, 0x62, 0x38, 0x0d, 0xff, 0xb7, 0x8b, 0x70, 0xc7,\n\t0x87, 0xd9, 0xe0, 0x87, 0x6e, 0x08, 0x82, 0x34, 0x61, 0x79, 0x9d,\n\t0xa8, 0x27, 0x67, 0x46, 0x10, 0x07, 0x10, 0x0c, 0xca, 0xd0, 0x8d,\n\t0xde, 0x48, 0x0d, 0x3a, 0x75, 0x0d, 0xe2, 0x30, 0x8e, 0xe4, 0x58,\n\t0x8e, 0xe6, 0x78, 0x8e, 0xe8, 0x98, 0x8e, 0xea, 0xd8, 0x8b, 0xfb,\n\t0x57, 0x8e, 0xae, 0x88, 0x16, 0x01, 0xb0, 0x85, 0x79, 0x86, 0x66,\n\t0x04, 0x71, 0x01, 0x7e, 0x20, 0x08, 0xf8, 0x28, 0x08, 0x7e, 0xb0,\n\t0x0b, 0x74, 0x67, 0x4b, 0xd0, 0x80, 0x0b, 0xb6, 0x10, 0x90, 0x02,\n\t0x39, 0x90, 0x04, 0x59, 0x90, 0x06, 0x79, 0x90, 0x06, 0x89, 0x0b,\n\t0x36, 0x57, 0x77, 0xbb, 0x20, 0x90, 0xb5, 0x80, 0x20, 0x5d, 0x91,\n\t0x00, 0x62, 0xa0, 0x6b, 0x6f, 0xb0, 0x7d, 0x2e, 0x60, 0x35, 0x7a,\n\t0x20, 0x08, 0xcb, 0xd0, 0x8f, 0xd7, 0xb0, 0x0b, 0x05, 0xf2, 0x91,\n\t0x20, 0x69, 0x1c, 0xb8, 0xa0, 0x0d, 0x3a, 0xa5, 0x0b, 0xd5, 0x32,\n\t0x0b, 0x6c, 0x73, 0x16, 0x0d, 0x20, 0x87, 0xe0, 0xd2, 0x06, 0xde,\n\t0x75, 0x3a, 0x35, 0xa0, 0xfe, 0x22, 0x87, 0x40, 0x92, 0xf0, 0xa4,\n\t0x0b, 0x21, 0x79, 0x93, 0x1f, 0x99, 0x0b, 0xd3, 0x57, 0x0d, 0xb9,\n\t0xc0, 0x19, 0x35, 0x40, 0x8d, 0x36, 0x11, 0x87, 0xba, 0xa6, 0x06,\n\t0xf1, 0x27, 0x00, 0x33, 0x10, 0x21, 0xa8, 0xa0, 0x53, 0xda, 0xd0,\n\t0x93, 0x38, 0xd9, 0x94, 0xde, 0xc1, 0x8f, 0xd0, 0x54, 0x4a, 0x31,\n\t0xb2, 0x37, 0x98, 0x81, 0x00, 0xae, 0xd7, 0x92, 0xe6, 0xb6, 0x10,\n\t0x33, 0x70, 0x08, 0xb2, 0x14, 0x95, 0xbb, 0x40, 0x08, 0x4e, 0x19,\n\t0x96, 0xb8, 0x91, 0x0b, 0x58, 0x86, 0x4d, 0x26, 0xa9, 0x38, 0xca,\n\t0xb1, 0x01, 0x6b, 0x40, 0x6a, 0x4e, 0x26, 0x6d, 0x89, 0x41, 0x07,\n\t0xfd, 0x68, 0x0d, 0xda, 0x70, 0x08, 0x7a, 0x30, 0x08, 0x27, 0x29,\n\t0x96, 0x4d, 0x09, 0x95, 0x75, 0xd7, 0x0c, 0x85, 0x30, 0x03, 0xc9,\n\t0x24, 0x15, 0x6a, 0xd9, 0x6f, 0x63, 0x80, 0x00, 0x0a, 0x21, 0x00,\n\t0x8b, 0x30, 0x4b, 0xb6, 0xd4, 0x91, 0x90, 0x13, 0x08, 0x84, 0x70,\n\t0x97, 0x78, 0xf9, 0x91, 0x23, 0xa9, 0x53, 0xbc, 0x50, 0x03, 0x58,\n\t0x88, 0x16, 0x1b, 0xe0, 0x54, 0xfe, 0x06, 0x70, 0x08, 0x61, 0x98,\n\t0xa4, 0x64, 0x4b, 0xa8, 0x80, 0x91, 0x75, 0x59, 0x08, 0x8f, 0x09,\n\t0x92, 0xba, 0x00, 0x64, 0xd1, 0xe0, 0x02, 0x40, 0x59, 0x14, 0x97,\n\t0xd9, 0x6f, 0xff, 0xc6, 0x11, 0x01, 0x80, 0x02, 0xd4, 0x80, 0x0d,\n\t0xd5, 0xa0, 0x09, 0xa0, 0xa9, 0x07, 0x81, 0x30, 0x08, 0xa2, 0x39,\n\t0x9a, 0xf4, 0xa1, 0x97, 0xd6, 0x80, 0x0d, 0xd4, 0xa0, 0x01, 0xa9,\n\t0x59, 0x14, 0x0c, 0xc0, 0x92, 0x88, 0xa2, 0x67, 0x95, 0x79, 0x10,\n\t0x11, 0x30, 0x0c, 0xd5, 0x40, 0x97, 0xb5, 0x69, 0x9b, 0xb8, 0xa9,\n\t0x9b, 0xdf, 0x01, 0x95, 0xb3, 0x04, 0x0c, 0x11, 0x90, 0x44, 0x4a,\n\t0x74, 0x79, 0x1a, 0xe7, 0x73, 0x1f, 0xfe, 0x41, 0x00, 0x75, 0x80,\n\t0x08, 0xcd, 0x69, 0x35, 0x81, 0x20, 0x08, 0x84, 0x90, 0x9b, 0xd0,\n\t0x99, 0x08, 0x85, 0xc0, 0x8f, 0xbe, 0xb9, 0x08, 0xaf, 0x68, 0x9d,\n\t0x87, 0xc8, 0x64, 0xfe, 0xe6, 0x96, 0x1e, 0xc1, 0x39, 0x7b, 0x00,\n\t0x39, 0xdf, 0x79, 0x9b, 0xe3, 0xe9, 0x98, 0x38, 0x69, 0x9e, 0x83,\n\t0x20, 0x37, 0xfc, 0x08, 0x0c, 0x19, 0x60, 0x9d, 0xa7, 0x43, 0x04,\n\t0x6c, 0xc0, 0x85, 0x2e, 0xd5, 0x02, 0x34, 0x21, 0x00, 0x2e, 0x60,\n\t0x07, 0x2a, 0xf2, 0x9d, 0xfd, 0x11, 0x9e, 0x83, 0x30, 0x9e, 0x85,\n\t0x80, 0x9f, 0xc6, 0x91, 0x08, 0xe6, 0x49, 0x08, 0x84, 0x20, 0x08,\n\t0x0b, 0xaa, 0x07, 0x95, 0xe0, 0x02, 0xc7, 0x39, 0x41, 0x01, 0xd0,\n\t0x02, 0x62, 0x30, 0xa0, 0x65, 0xe6, 0x81, 0xa8, 0xe2, 0x02, 0x7d,\n\t0xc0, 0xa0, 0xcd, 0x19, 0x08, 0x0e, 0x3a, 0x08, 0x2c, 0xda, 0xa2,\n\t0x2c, 0x8a, 0xa1, 0x19, 0xea, 0x1f, 0x2e, 0xf0, 0x97, 0xd6, 0xb9,\n\t0x00, 0x20, 0xd0, 0x02, 0x2d, 0xf0, 0x01, 0x1d, 0x0a, 0x12, 0x0b,\n\t0x30, 0x05, 0x47, 0xf0, 0x07, 0x7b, 0x10, 0xa3, 0x28, 0x3a, 0xa4,\n\t0xe0, 0xb9, 0x07, 0x7f, 0x70, 0x04, 0x53, 0x90, 0x00, 0x00, 0xea,\n\t0x3b, 0x0b, 0xc0, 0x04, 0x50, 0x40, 0x05, 0x56, 0x50, 0x0a, 0x7d,\n\t0x10, 0xa4, 0x44, 0x3a, 0xa4, 0x8f, 0xd3, 0x07, 0x46, 0x60, 0x05,\n\t0x34, 0xc3, 0x04, 0x4a, 0xba, 0xa4, 0x9a, 0xd3, 0xa4, 0x0b, 0x08,\n\t0x05, 0x5b, 0x50, 0x05, 0x56, 0x60, 0x04, 0x7f, 0x30, 0xa5, 0x2a,\n\t0xfa, 0x38, 0x0c, 0x9a, 0xa6, 0x57, 0xfa, 0x07, 0x59, 0x5a, 0x05,\n\t0x5b, 0x10, 0xa6, 0x5c, 0xea, 0xa5, 0x5f, 0xea, 0xa4, 0x96, 0xf2,\n\t0x04, 0x50, 0xf0, 0xa4, 0x64, 0x7a, 0x04, 0x42, 0x30, 0x03, 0x76,\n\t0x60, 0x07, 0x7c, 0x10, 0xa8, 0x82, 0xca, 0x07, 0xfe, 0x7f, 0x3a,\n\t0x03, 0x42, 0x70, 0x04, 0x56, 0x50, 0x05, 0x34, 0xb3, 0x80, 0x96,\n\t0x02, 0x05, 0x73, 0x4a, 0xa7, 0xb1, 0xd1, 0xa4, 0x77, 0x3a, 0xa9,\n\t0x79, 0x7a, 0x6a, 0x79, 0xc1, 0x16, 0x98, 0xda, 0x16, 0x5c, 0xc1,\n\t0x01, 0x79, 0x3a, 0xa9, 0x77, 0xfa, 0xa8, 0x90, 0xca, 0x17, 0xe8,\n\t0x56, 0x2c, 0x9e, 0x6a, 0x29, 0xf0, 0x89, 0x10, 0x1b, 0x50, 0xaa,\n\t0x96, 0xe2, 0x05, 0x5b, 0xa0, 0x99, 0xa1, 0xea, 0x15, 0x2b, 0xa9,\n\t0x06, 0x61, 0xf0, 0x05, 0xaf, 0xe2, 0xa9, 0xa7, 0x7a, 0x10, 0xa9,\n\t0xea, 0xa9, 0x5d, 0xf0, 0x05, 0x61, 0xa0, 0x06, 0xad, 0xf9, 0xaa,\n\t0x68, 0xb1, 0x92, 0x5f, 0xa2, 0x06, 0x65, 0x10, 0x06, 0x5e, 0x50,\n\t0xab, 0x7d, 0x72, 0xab, 0x06, 0x91, 0xab, 0x7d, 0xd2, 0x05, 0x5e,\n\t0x10, 0x06, 0x65, 0xa0, 0x06, 0x03, 0xfa, 0xab, 0xc0, 0x0a, 0xab,\n\t0x72, 0x38, 0xac, 0xc5, 0x0a, 0x06, 0xc7, 0xaa, 0xac, 0x05, 0xb1,\n\t0x01, 0xce, 0x0a, 0x06, 0xd0, 0x2a, 0xad, 0x87, 0x92, 0x99, 0xd5,\n\t0xaa, 0x92, 0xc4, 0xd9, 0x26, 0x6c, 0x40, 0xac, 0xf1, 0x67, 0x10,\n\t0x20, 0x10, 0xad, 0xc4, 0x48, 0xad, 0xe5, 0x1a, 0x15, 0xc2, 0xea,\n\t0x54, 0xeb, 0x5a, 0x10, 0x87, 0xc8, 0x9a, 0xae, 0x1a, 0xaf, 0x45,\n\t0x31, 0xaf, 0x2b, 0x55, 0xaf, 0x04, 0x71, 0xaf, 0xef, 0x9a, 0xaf,\n\t0xfa, 0x3a, 0x14, 0xfc, 0xaa, 0x52, 0xfe, 0x3a, 0x10, 0x00, 0xdb,\n\t0x92, 0xf0, 0x3a, 0xb0, 0x44, 0x51, 0xb0, 0xe0, 0x72, 0xb0, 0x02,\n\t0x91, 0xb0, 0x4d, 0xb6, 0xb0, 0x0c, 0x7b, 0x13, 0x0e, 0xdb, 0x2c,\n\t0x10, 0x0b, 0x00, 0x12, 0x8b, 0x80, 0x14, 0x5b, 0xb1, 0x35, 0x71,\n\t0xb1, 0x88, 0x92, 0xb1, 0x1b, 0x1b, 0x2a, 0x1d, 0xeb, 0xb1, 0x33,\n\t0x01, 0xb2, 0x7a, 0x22, 0xb2, 0x98, 0x59, 0xb2, 0x26, 0x1b, 0x88,\n\t0x12, 0x28, 0xeb, 0x26, 0x2a, 0x8b, 0xaf, 0x2d, 0x4b, 0xb0, 0xe7,\n\t0x1a, 0xb2, 0x1d, 0x31, 0xb2, 0x04, 0xc3, 0xb2, 0x33, 0x7b, 0x6e,\n\t0x35, 0x9b, 0xb2, 0x37, 0xbb, 0xb2, 0x02, 0xbb, 0xb3, 0x1f, 0x21,\n\t0x91, 0x6c, 0x99, 0x95, 0x1b, 0xb1, 0x01, 0xd2, 0xfa, 0x7e, 0x5d,\n\t0x2a, 0xb4, 0x33, 0x61, 0x8d, 0x4a, 0xdb, 0x11, 0xf3, 0xa7, 0x71,\n\t0xab, 0xc7, 0xb4, 0x34, 0xf1, 0x01, 0xa4, 0x96, 0x8d, 0x1e, 0x31,\n\t0x8c, 0x0f, 0x4b, 0xb5, 0x35, 0x11, 0x00, 0xdd, 0x87, 0x2b, 0x7a,\n\t0x16, 0xb4, 0x07, 0xd1, 0x00, 0xf2, 0xb8, 0x81, 0x08, 0xc6, 0xb5,\n\t0x35, 0xb1, 0x00, 0x49, 0x30, 0xa0, 0x42, 0x32, 0xa2, 0xc3, 0xf7,\n\t0x11, 0x1b, 0x90, 0x05, 0x6c, 0xdb, 0x06, 0x41, 0x97, 0x04, 0x4b,\n\t0x8b, 0xb6, 0x4d, 0xfb, 0x01, 0x59, 0x30, 0x06, 0x2f, 0x45, 0x04,\n\t0x77, 0x3b, 0xb4, 0x44, 0x90, 0x05, 0x6b, 0x30, 0x06, 0x1e, 0x18,\n\t0x9c, 0x67, 0x11, 0x10, 0x00, 0x3b\n};\n\nstatic const int _img_cry_length = 4538;\nstatic const char _img_dead[4318] = {\n\t0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x7e, 0x00, 0x7f, 0x00, 0xf7,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0xc5, 0x4d, 0xb5, 0xca, 0xc9,\n\t0x9c, 0xb1, 0x89, 0x8e, 0xad, 0xac, 0xf3, 0xc7, 0x4f, 0xf2, 0xc6,\n\t0x4e, 0x00, 0x81, 0xc6, 0xcc, 0xd2, 0xd2, 0x5b, 0xae, 0xc8, 0x0c,\n\t0x7d, 0xbb, 0xb1, 0xc4, 0xc4, 0xf3, 0xc7, 0x4f, 0xf0, 0xc5, 0x4e,\n\t0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7,\n\t0x50, 0xd8, 0xb0, 0x45, 0x03, 0x7d, 0xbf, 0x00, 0x81, 0xc6, 0x71,\n\t0xb8, 0xc7, 0xd6, 0xdb, 0xdb, 0xb1, 0xc1, 0xc0, 0xd2, 0xde, 0xdd,\n\t0xeb, 0xc0, 0x4c, 0x00, 0x81, 0xc6, 0x07, 0x77, 0xb3, 0xbc, 0xbf,\n\t0xbf, 0xa8, 0xbc, 0xbb, 0x21, 0x78, 0xa0, 0xf3, 0xc7, 0x4f, 0xed,\n\t0xc2, 0x4d, 0xbf, 0x9d, 0x3e, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f,\n\t0xed, 0xc2, 0x4d, 0xc3, 0x9f, 0x3e, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7,\n\t0x4f, 0xea, 0xc0, 0x4c, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0x00,\n\t0x81, 0xc6, 0x01, 0x7f, 0xc2, 0x0b, 0x7a, 0xb5, 0x35, 0x89, 0xa9,\n\t0x98, 0xcc, 0xce, 0x81, 0xba, 0xc2, 0xd5, 0xd5, 0xd4, 0xb6, 0xb6,\n\t0xb6, 0xc4, 0xcc, 0xca, 0xe6, 0xe8, 0xe8, 0x98, 0xcc, 0xc9, 0x38,\n\t0x3e, 0x48, 0x39, 0x40, 0x49, 0x3c, 0x44, 0x4d, 0x40, 0x4a, 0x52,\n\t0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xb9, 0x9d, 0x45, 0x44, 0x51,\n\t0x58, 0x06, 0x6a, 0xa0, 0x00, 0x81, 0xc6, 0x4b, 0x5a, 0x61, 0x4b,\n\t0x5a, 0x61, 0x54, 0x67, 0x6d, 0x00, 0x81, 0xc6, 0x00, 0x67, 0x9e,\n\t0x00, 0x68, 0xa1, 0x09, 0x6c, 0xa2, 0x00, 0x6c, 0xa6, 0x0d, 0x6e,\n\t0x9e, 0x18, 0x71, 0x9a, 0x38, 0x7d, 0x91, 0x48, 0x90, 0x9f, 0x51,\n\t0x81, 0x7e, 0x95, 0xc9, 0xc6, 0xe0, 0xe0, 0xe0, 0xb9, 0xb9, 0xb9,\n\t0xbc, 0xbc, 0xbc, 0x5c, 0x73, 0x78, 0x57, 0x69, 0x71, 0x96, 0x9b,\n\t0x6a, 0x63, 0x7e, 0x81, 0x66, 0x84, 0x86, 0x6f, 0x90, 0x92, 0x5d,\n\t0x9b, 0x9b, 0x7b, 0xa4, 0xa2, 0x77, 0x9e, 0x9f, 0x6d, 0x9f, 0x94,\n\t0xb6, 0xb6, 0xb6, 0x81, 0xa2, 0xa4, 0x99, 0xaa, 0x97, 0x95, 0xa2,\n\t0x85, 0x01, 0x67, 0x9e, 0x12, 0x70, 0x9e, 0x7a, 0xa3, 0xa1, 0x8f,\n\t0x93, 0x5f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f,\n\t0xf2, 0xc8, 0x55, 0xf3, 0xc7, 0x4f, 0xc2, 0x9f, 0x3f, 0xc5, 0xa0,\n\t0x3e, 0xb6, 0x9e, 0x4b, 0xc6, 0xa2, 0x41, 0xc8, 0xa4, 0x43, 0xc4,\n\t0xa0, 0x3e, 0xb3, 0xa3, 0x5c, 0xc4, 0xa0, 0x40, 0xc4, 0x9f, 0x3e,\n\t0x9f, 0xaf, 0x78, 0x94, 0xac, 0x7d, 0x8c, 0xaf, 0xa4, 0xf3, 0xc7,\n\t0x4f, 0xd2, 0xac, 0x44, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3,\n\t0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xe1, 0xb9, 0x4a, 0xea, 0xc4, 0x52,\n\t0xf3, 0xc7, 0x4f, 0xf7, 0xc8, 0x4d, 0xba, 0xb6, 0x69, 0xc8, 0xb9,\n\t0x63, 0xba, 0xb7, 0x73, 0xe2, 0xc4, 0x5d, 0xf0, 0xc8, 0x58, 0xf4,\n\t0xce, 0x65, 0xf5, 0xcb, 0x5b, 0xf4, 0xd2, 0x74, 0xde, 0xc7, 0x6f,\n\t0xf6, 0xd6, 0x7f, 0xc6, 0xc6, 0x98, 0xda, 0xcc, 0x9e, 0xe2, 0xcf,\n\t0x8b, 0xf6, 0xd8, 0x86, 0xf7, 0xe0, 0xa2, 0xf0, 0xdd, 0xa8, 0xf3,\n\t0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xd3, 0xad, 0x45,\n\t0x00, 0x81, 0xc6, 0x00, 0x79, 0xbb, 0x00, 0x72, 0xb0, 0x00, 0x7f,\n\t0xc4, 0x00, 0x81, 0xc6, 0x1d, 0x88, 0xba, 0x00, 0x81, 0xc6, 0x0d,\n\t0x85, 0xc3, 0x1a, 0x8c, 0xc4, 0x35, 0x8e, 0xaf, 0x43, 0x9d, 0xc4,\n\t0x00, 0x81, 0xc6, 0x16, 0x8c, 0xc6, 0x16, 0x8a, 0xc4, 0x6f, 0xb4,\n\t0xc1, 0x97, 0xcb, 0xc8, 0x85, 0xb1, 0xaf, 0x8d, 0xbc, 0xbb, 0x8b,\n\t0xb4, 0xb2, 0x9e, 0xb9, 0xb6, 0x93, 0xc5, 0xc2, 0x94, 0xc6, 0xc3,\n\t0x89, 0xc5, 0xc9, 0x96, 0xc9, 0xc6, 0x98, 0xcc, 0xc9, 0x9b, 0xce,\n\t0xcc, 0xa2, 0xd0, 0xd1, 0x9e, 0xc8, 0xcd, 0xa4, 0xcd, 0xc3, 0x86,\n\t0xc2, 0xe3, 0xa7, 0xd3, 0xd8, 0xa7, 0xc9, 0xd6, 0x98, 0xcc, 0xc9,\n\t0x98, 0xcc, 0xc9, 0x83, 0xbc, 0xc0, 0x73, 0xb0, 0xcc, 0xe1, 0xe1,\n\t0xe1, 0xe3, 0xe3, 0xe3, 0xb6, 0xb6, 0xb6, 0xb7, 0xb7, 0xb7, 0xb9,\n\t0xb9, 0xb9, 0xb6, 0xce, 0xcc, 0xc5, 0xc5, 0xc5, 0xcd, 0xcd, 0xce,\n\t0xcc, 0xd6, 0xd2, 0xcd, 0xd4, 0xc2, 0xc2, 0xd6, 0xcc, 0xfa, 0xe7,\n\t0xb4, 0xfb, 0xee, 0xc9, 0xf4, 0xe6, 0xbf, 0xb2, 0xd4, 0xde, 0xc2,\n\t0xd1, 0xd7, 0xb9, 0xdc, 0xda, 0xb4, 0xd9, 0xe6, 0xb8, 0xdb, 0xe7,\n\t0xae, 0xd6, 0xde, 0xcb, 0xdc, 0xdd, 0xca, 0xe4, 0xed, 0xdb, 0xdc,\n\t0xdb, 0xe3, 0xe3, 0xe3, 0xe0, 0xe1, 0xdf, 0xfc, 0xf5, 0xdf, 0xe1,\n\t0xf0, 0xf4, 0xfe, 0xff, 0xff, 0xf7, 0xf8, 0xf5, 0xf9, 0xfc, 0xfc,\n\t0xdb, 0xd2, 0xba, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n\t0xff, 0xff, 0xff, 0xff, 0xb6, 0xb6, 0xb6, 0xca, 0xca, 0xc9, 0xe3,\n\t0xe3, 0xe3, 0xd6, 0xd6, 0xd6, 0xf7, 0xf5, 0xe6, 0xd6, 0xdf, 0xcd,\n\t0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x21, 0xf9, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x21, 0xff, 0x0b,\n\t0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x6b,\n\t0x0d, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x3d, 0x30, 0x2e, 0x34, 0x35,\n\t0x34, 0x35, 0x35, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00,\n\t0x7f, 0x00, 0x00, 0x08, 0xfe, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0,\n\t0xa0, 0xc1, 0x83, 0x08, 0x13, 0x1a, 0x1c, 0xd0, 0xe0, 0x81, 0x88,\n\t0x13, 0x63, 0xca, 0xd8, 0xd1, 0xc3, 0xa7, 0xa2, 0x45, 0x3d, 0x76,\n\t0xca, 0x8c, 0x39, 0x21, 0xe2, 0x41, 0x83, 0x01, 0x0a, 0x43, 0x8a,\n\t0x1c, 0x49, 0xb2, 0xa4, 0x49, 0x84, 0x03, 0x32, 0x40, 0xb4, 0x53,\n\t0xd1, 0x91, 0x4b, 0x97, 0x16, 0x2d, 0xbe, 0x84, 0x69, 0xc7, 0xce,\n\t0xc6, 0x07, 0x20, 0x4f, 0xea, 0xdc, 0xc9, 0x73, 0xe7, 0x83, 0x13,\n\t0x74, 0xf8, 0xbc, 0x8c, 0xd9, 0x72, 0xe6, 0x50, 0xa2, 0x43, 0xdb,\n\t0x9c, 0x78, 0xd0, 0xb3, 0xa9, 0xd3, 0xa7, 0x03, 0x4e, 0xe8, 0x81,\n\t0x59, 0xf4, 0xa8, 0x1e, 0x8c, 0x35, 0x27, 0x52, 0x14, 0x3a, 0x53,\n\t0xa6, 0x23, 0x3b, 0x27, 0x72, 0x3e, 0x1d, 0x4b, 0x56, 0xe1, 0x80,\n\t0x31, 0x54, 0x61, 0xe2, 0x29, 0xa3, 0x83, 0xe3, 0x87, 0x07, 0x1e,\n\t0x09, 0xc8, 0x6d, 0xd0, 0xf0, 0xc1, 0x87, 0x87, 0x3a, 0xca, 0x50,\n\t0x4c, 0xeb, 0x48, 0x87, 0xd8, 0xb2, 0x80, 0x01, 0x9f, 0x70, 0xd4,\n\t0x92, 0x0f, 0x9d, 0x13, 0x1f, 0x3e, 0xea, 0x64, 0xf8, 0x01, 0xa8,\n\t0xd0, 0x96, 0x27, 0x02, 0x4b, 0x26, 0xfb, 0xc0, 0x0e, 0x61, 0x3e,\n\t0x65, 0x44, 0xfc, 0x6d, 0x3a, 0x40, 0x44, 0x9b, 0x96, 0x74, 0x08,\n\t0x4c, 0x1e, 0xdd, 0x33, 0x43, 0x4b, 0x3d, 0x1f, 0x24, 0x7f, 0x38,\n\t0xcd, 0x94, 0xb4, 0x6b, 0x93, 0x0d, 0x2c, 0x57, 0x04, 0xdb, 0x80,\n\t0xf2, 0x09, 0x96, 0x42, 0xdb, 0x6c, 0x7e, 0xcd, 0x3b, 0xa1, 0x09,\n\t0x98, 0x2e, 0xf1, 0x8c, 0xe9, 0x48, 0x60, 0xb7, 0x59, 0x02, 0x0f,\n\t0x4a, 0x8c, 0x99, 0x4a, 0x98, 0xb0, 0x88, 0xde, 0xd0, 0x43, 0x46,\n\t0x7d, 0xcc, 0x95, 0xb0, 0xcd, 0xb6, 0x22, 0xde, 0xc2, 0x4d, 0x90,\n\t0x00, 0xae, 0x5d, 0xbc, 0x63, 0x58, 0xfe, 0x1e, 0x25, 0x1c, 0x36,\n\t0xba, 0x79, 0x94, 0x22, 0xe8, 0x1c, 0xad, 0x4e, 0x95, 0x8f, 0xd6,\n\t0x98, 0x46, 0xbd, 0xf2, 0x69, 0xf3, 0xfc, 0xbc, 0xfd, 0x83, 0x04,\n\t0x44, 0x2c, 0xef, 0x4a, 0xb4, 0x68, 0xff, 0xaa, 0x8e, 0xe8, 0x31,\n\t0x9c, 0x71, 0xf7, 0x15, 0x38, 0x80, 0x43, 0x79, 0xed, 0xe5, 0x48,\n\t0x24, 0x46, 0x19, 0xc5, 0x20, 0x61, 0x6b, 0xe9, 0xd0, 0x11, 0x81,\n\t0x05, 0x56, 0x38, 0x10, 0x43, 0x0e, 0x99, 0x70, 0x82, 0x0e, 0x63,\n\t0x44, 0xd4, 0x46, 0x1b, 0x1a, 0x8d, 0xd1, 0x96, 0x09, 0x6f, 0x29,\n\t0x66, 0xe1, 0x89, 0x8b, 0x0d, 0xa0, 0xa2, 0x8a, 0x28, 0xb6, 0xe8,\n\t0xe2, 0x8b, 0x27, 0x0e, 0xa0, 0x80, 0x05, 0x1a, 0x68, 0x60, 0x81,\n\t0x02, 0x14, 0xc2, 0xa8, 0xa3, 0x8c, 0x2f, 0xb8, 0x20, 0x85, 0x28,\n\t0xa8, 0xa4, 0x92, 0x8a, 0x28, 0xa2, 0x48, 0xe1, 0xc2, 0x0b, 0x07,\n\t0xe4, 0xa8, 0x63, 0x85, 0x0a, 0xbc, 0xf0, 0xa3, 0x2c, 0x50, 0x42,\n\t0x29, 0x64, 0x94, 0x50, 0x16, 0xf9, 0x82, 0x02, 0x4b, 0xba, 0xa8,\n\t0x80, 0x0c, 0xa2, 0x44, 0x29, 0xe4, 0x97, 0x60, 0x7e, 0x19, 0xa5,\n\t0x28, 0x31, 0x60, 0x99, 0xa5, 0x81, 0x2f, 0x74, 0x29, 0x4b, 0x98,\n\t0x6c, 0xb6, 0x59, 0xe5, 0x0b, 0x4a, 0x9e, 0x29, 0x99, 0x06, 0x52,\n\t0x48, 0xd9, 0xe6, 0x9d, 0x6c, 0xae, 0x29, 0x85, 0x99, 0x72, 0xee,\n\t0x34, 0x00, 0x05, 0x35, 0x6a, 0x90, 0x64, 0x42, 0x03, 0xc4, 0xd0,\n\t0x25, 0x9e, 0x88, 0xba, 0x29, 0x0a, 0x9c, 0x84, 0x1e, 0x10, 0x28,\n\t0x05, 0x71, 0x56, 0x28, 0x63, 0x0b, 0x46, 0x50, 0x82, 0xc9, 0xa5,\n\t0x94, 0xfc, 0xd0, 0x02, 0x05, 0x06, 0x29, 0x20, 0x45, 0x2a, 0x6b,\n\t0x26, 0x2a, 0x2a, 0x98, 0x7a, 0x8a, 0x56, 0x10, 0x05, 0x94, 0x5a,\n\t0x8a, 0xa9, 0x11, 0x9b, 0x2e, 0x49, 0xc1, 0x0f, 0xfe, 0x95, 0x74,\n\t0x22, 0xeb, 0xa5, 0x98, 0xc8, 0xda, 0x09, 0x25, 0x2d, 0xf0, 0xe9,\n\t0x69, 0xa8, 0xa3, 0xf6, 0x2a, 0xa6, 0x14, 0x07, 0x0c, 0xa4, 0xc0,\n\t0x0f, 0x94, 0xd8, 0x4a, 0xab, 0xad, 0x99, 0x06, 0xeb, 0xe2, 0x0a,\n\t0x96, 0x74, 0x42, 0xeb, 0xb3, 0xc7, 0x66, 0xca, 0xa9, 0x05, 0x87,\n\t0xfa, 0x6a, 0xed, 0x94, 0xa1, 0x58, 0x00, 0x80, 0x06, 0xcd, 0x3a,\n\t0x0b, 0xed, 0xb1, 0x9d, 0x58, 0xa2, 0x41, 0x8b, 0x2b, 0xc4, 0xfa,\n\t0x2d, 0xb4, 0x95, 0x20, 0xf1, 0x85, 0x11, 0x1e, 0x54, 0x7b, 0xed,\n\t0xb5, 0xb2, 0x2c, 0x5a, 0xec, 0xb9, 0xdf, 0xde, 0x3a, 0xae, 0x85,\n\t0x1a, 0xcc, 0x4b, 0xef, 0xa5, 0xe9, 0x1a, 0x61, 0x04, 0x18, 0xb5,\n\t0xf0, 0xfa, 0x2e, 0xbc, 0xb5, 0xa8, 0xba, 0xef, 0xb3, 0xb7, 0x72,\n\t0x5a, 0xe0, 0x01, 0x46, 0x78, 0xbb, 0x6f, 0xbf, 0x46, 0x24, 0x21,\n\t0xca, 0xc0, 0x14, 0x7f, 0x29, 0x8a, 0xc1, 0x07, 0x5f, 0xda, 0xc9,\n\t0x0f, 0x91, 0x4e, 0xb6, 0x82, 0xc3, 0xb4, 0x5e, 0x52, 0x85, 0x1c,\n\t0x24, 0x57, 0xe1, 0x6f, 0xc4, 0x55, 0x54, 0xac, 0xf2, 0x90, 0xaa,\n\t0x8a, 0x4c, 0xb2, 0x1c, 0x55, 0x5c, 0x52, 0xef, 0x0a, 0xf7, 0x11,\n\t0xd0, 0x2c, 0xb4, 0x4a, 0xf8, 0x11, 0x93, 0x1d, 0x52, 0x04, 0x61,\n\t0x44, 0x15, 0x13, 0xaf, 0x5c, 0x31, 0x28, 0x97, 0x6c, 0xa2, 0x73,\n\t0x4c, 0x7e, 0x6c, 0x02, 0xed, 0xc6, 0x1d, 0x03, 0xa6, 0xc1, 0xb7,\n\t0x9b, 0x04, 0xb2, 0xf3, 0x1a, 0x6d, 0x48, 0xf1, 0xa3, 0xd0, 0x2b,\n\t0x8b, 0x72, 0x34, 0x51, 0x49, 0xa3, 0xcb, 0x67, 0x74, 0x2d, 0x80,\n\t0x9c, 0xc9, 0xd6, 0xee, 0xad, 0x81, 0x06, 0x1a, 0x53, 0xc8, 0x11,\n\t0x24, 0xd6, 0x2a, 0x93, 0x1d, 0x93, 0x1c, 0x4b, 0xd3, 0x6c, 0xde,\n\t0x00, 0x3f, 0x80, 0x1c, 0x75, 0x4c, 0x6d, 0x9c, 0xed, 0x06, 0xfe,\n\t0x17, 0x41, 0xb3, 0x5d, 0xb1, 0xd6, 0xff, 0x05, 0x22, 0xf3, 0xb1,\n\t0x1c, 0x9b, 0xa7, 0x80, 0xbe, 0x98, 0x54, 0xa2, 0xc4, 0xce, 0x67,\n\t0xb7, 0x11, 0x45, 0xdf, 0x7e, 0x57, 0x0c, 0x88, 0x20, 0xff, 0x29,\n\t0x81, 0x70, 0xe1, 0xd1, 0x1d, 0xee, 0x70, 0x25, 0x55, 0x58, 0x64,\n\t0x87, 0xd9, 0x8e, 0x67, 0xb1, 0x76, 0xe4, 0x6d, 0x57, 0x8e, 0xb0,\n\t0x11, 0x4d, 0x8f, 0x45, 0xb7, 0xdd, 0xb8, 0xe5, 0x8d, 0x86, 0x1b,\n\t0x40, 0x93, 0x2e, 0x34, 0xe0, 0x31, 0x05, 0xa2, 0x34, 0xe1, 0xa9,\n\t0x8f, 0x15, 0xf6, 0xb3, 0x97, 0xe8, 0x6c, 0x47, 0xe3, 0x51, 0x88,\n\t0x2e, 0xbb, 0xd0, 0x93, 0xbf, 0x1d, 0xb7, 0x7d, 0x4f, 0xe3, 0x6c,\n\t0x87, 0xeb, 0xc1, 0x43, 0x3e, 0x7c, 0xc5, 0x5b, 0xdb, 0x8e, 0xee,\n\t0xbd, 0x86, 0xdf, 0xfc, 0x6c, 0x10, 0x1f, 0x86, 0x3e, 0xfa, 0xf3,\n\t0x7f, 0x4b, 0xed, 0x87, 0xe5, 0xa7, 0xe7, 0x4e, 0xd6, 0xee, 0xb4,\n\t0x52, 0x12, 0x71, 0x10, 0x52, 0x64, 0xe1, 0x3c, 0xf7, 0x14, 0xfb,\n\t0x11, 0xc5, 0xe0, 0x08, 0xcb, 0x6d, 0x9f, 0x02, 0xd6, 0x63, 0x82,\n\t0x84, 0xbf, 0x49, 0x54, 0x21, 0x3c, 0xfb, 0x59, 0x63, 0xac, 0xb1,\n\t0x11, 0xca, 0xba, 0x8f, 0x06, 0xcc, 0x65, 0x3e, 0x7f, 0x29, 0x41,\n\t0x7d, 0xfc, 0xc3, 0x1a, 0x28, 0x96, 0x46, 0x09, 0xea, 0x3d, 0x45,\n\t0x01, 0x31, 0x90, 0x41, 0x99, 0x4a, 0x52, 0xae, 0x4e, 0xdc, 0x0f,\n\t0x65, 0x08, 0x4c, 0x60, 0xff, 0x8e, 0x55, 0x09, 0xf9, 0x89, 0xc4,\n\t0x02, 0x11, 0x8c, 0x81, 0xa9, 0x08, 0xb2, 0x25, 0x5d, 0x30, 0x83,\n\t0x1b, 0xcc, 0xd0, 0x05, 0x14, 0x62, 0x10, 0xa9, 0x15, 0x50, 0x62,\n\t0x5d, 0x46, 0x38, 0xe0, 0xfa, 0x34, 0x38, 0xb0, 0xdb, 0xdd, 0xca,\n\t0x83, 0x09, 0x21, 0x40, 0x0c, 0xa0, 0x60, 0x42, 0x14, 0xea, 0x42,\n\t0x06, 0xfe, 0x23, 0xb4, 0x00, 0x14, 0xb8, 0x81, 0x42, 0x66, 0x9c,\n\t0xd0, 0x87, 0x32, 0xc0, 0x51, 0x48, 0x14, 0xe0, 0x03, 0x23, 0x7c,\n\t0x41, 0x7f, 0x33, 0xa4, 0xe1, 0xb5, 0x44, 0xf1, 0x89, 0x4a, 0xfc,\n\t0x40, 0x61, 0x84, 0x2a, 0xe1, 0x11, 0x8d, 0x78, 0x44, 0x28, 0x60,\n\t0x69, 0x00, 0x52, 0xc8, 0x06, 0x17, 0xc7, 0xb8, 0x45, 0x5d, 0xc4,\n\t0xc0, 0x02, 0x14, 0x1a, 0x80, 0x06, 0x82, 0x20, 0x86, 0xfd, 0x49,\n\t0xb1, 0x62, 0xb2, 0x08, 0x82, 0x06, 0xd2, 0x08, 0xc2, 0x1e, 0x16,\n\t0x91, 0x8c, 0xcc, 0xc8, 0x86, 0x14, 0x06, 0x20, 0x03, 0x5d, 0xf0,\n\t0x02, 0x8f, 0x64, 0x24, 0xa2, 0x0a, 0x27, 0x78, 0x10, 0x30, 0x8a,\n\t0x21, 0x8a, 0x6f, 0xf4, 0x95, 0x2c, 0xf6, 0x88, 0x90, 0x3a, 0x6e,\n\t0x11, 0x90, 0x5c, 0xe4, 0x85, 0x2e, 0x3c, 0xd0, 0x85, 0x6c, 0xfc,\n\t0x11, 0x92, 0x63, 0x24, 0x62, 0x0a, 0xa1, 0xd0, 0x81, 0xcd, 0x68,\n\t0x00, 0x8a, 0x89, 0x5c, 0x19, 0x2a, 0xbe, 0x06, 0x00, 0x1d, 0xf2,\n\t0x90, 0x88, 0x77, 0xc4, 0x24, 0x33, 0x78, 0xa1, 0x47, 0x5d, 0xb8,\n\t0x52, 0x95, 0x78, 0xd4, 0xe4, 0x0f, 0x95, 0x08, 0x80, 0x17, 0x84,\n\t0x61, 0x7f, 0xa8, 0xa8, 0xc2, 0xd5, 0x2c, 0x26, 0x05, 0x2a, 0x20,\n\t0x12, 0x6b, 0xb9, 0xdc, 0xa5, 0x90, 0x8a, 0xe4, 0x4b, 0x52, 0xb9,\n\t0x40, 0x20, 0x32, 0xea, 0xe3, 0x23, 0x61, 0xc9, 0x45, 0x5d, 0x64,\n\t0x83, 0x0a, 0xae, 0xf4, 0x23, 0x33, 0x63, 0xe9, 0xc3, 0x18, 0x74,\n\t0x40, 0x0a, 0x87, 0xfc, 0x52, 0x15, 0x6e, 0x60, 0x83, 0x4f, 0x7d,\n\t0x49, 0x0a, 0x36, 0xb0, 0x41, 0xca, 0xb8, 0xb7, 0xcd, 0x6e, 0x82,\n\t0x09, 0x9c, 0xe6, 0x14, 0x93, 0x28, 0x3a, 0x10, 0x03, 0x3b, 0x4e,\n\t0x93, 0x8c, 0x92, 0x74, 0x65, 0x25, 0x5f, 0xf9, 0x4e, 0x6a, 0xea,\n\t0x22, 0x0b, 0x19, 0xfe, 0x4c, 0x45, 0x10, 0xc2, 0xd9, 0x83, 0xa0,\n\t0xa1, 0x62, 0x9f, 0xe9, 0x7c, 0x1e, 0x3a, 0x83, 0xe0, 0x4f, 0x80,\n\t0x12, 0x34, 0x4c, 0xba, 0xd0, 0x64, 0x3d, 0xc9, 0xe8, 0xca, 0x6c,\n\t0x74, 0x41, 0x06, 0xd9, 0x88, 0xe6, 0x42, 0xf1, 0x28, 0x0a, 0x7c,\n\t0xf6, 0x0d, 0x9c, 0x37, 0xb8, 0xc1, 0x38, 0xb7, 0xc9, 0x4d, 0x6f,\n\t0x3e, 0xaf, 0x0a, 0x36, 0xc8, 0xe8, 0x46, 0x33, 0x1a, 0xd0, 0x2f,\n\t0x99, 0x70, 0xa2, 0x91, 0x8c, 0xe6, 0x2c, 0xe7, 0xe9, 0xca, 0x4b,\n\t0x4e, 0x34, 0x19, 0x5c, 0xc0, 0xe7, 0xe8, 0xb2, 0x40, 0xd2, 0x1b,\n\t0x58, 0x2d, 0x9c, 0x22, 0x65, 0x1f, 0x4d, 0x71, 0x7a, 0xd3, 0x90,\n\t0x6a, 0xb4, 0x4d, 0x28, 0x5d, 0x65, 0x3c, 0x9d, 0xd9, 0x05, 0x2c,\n\t0x75, 0xc0, 0x99, 0x2a, 0x95, 0x66, 0x3d, 0xef, 0x99, 0xcf, 0x54,\n\t0xa0, 0x02, 0xa3, 0xdc, 0xc4, 0x69, 0x37, 0xb7, 0x87, 0x28, 0x22,\n\t0x59, 0xf4, 0x97, 0x61, 0x82, 0x6a, 0x38, 0x43, 0x3a, 0xd5, 0x36,\n\t0x25, 0x63, 0xa1, 0x43, 0x6d, 0x28, 0x15, 0x3a, 0x30, 0x90, 0x0e,\n\t0xf0, 0x30, 0x1b, 0x11, 0x8d, 0x26, 0x2f, 0x5c, 0xaa, 0xca, 0x8a,\n\t0x36, 0x75, 0x48, 0x52, 0x88, 0x2a, 0x4f, 0xb1, 0x3a, 0xcc, 0x2a,\n\t0xec, 0x93, 0xa4, 0x41, 0x28, 0xa6, 0xa8, 0x8a, 0x24, 0xd7, 0x90,\n\t0x0a, 0x13, 0xa1, 0xd3, 0x5c, 0xab, 0x4a, 0xd1, 0xaa, 0x0b, 0x29,\n\t0x68, 0x8b, 0x20, 0x03, 0xb8, 0xa6, 0x17, 0xd0, 0x9a, 0xd6, 0x96,\n\t0xb2, 0x95, 0xa2, 0x16, 0x65, 0x93, 0x28, 0xb8, 0xd0, 0x33, 0xf4,\n\t0x8d, 0x33, 0x51, 0xb9, 0xec, 0xc1, 0x56, 0x49, 0xca, 0xcf, 0x2a,\n\t0x50, 0xf5, 0x4e, 0x94, 0x0d, 0x02, 0xfa, 0xf8, 0x86, 0x28, 0x55,\n\t0x0a, 0x36, 0x9a, 0x8c, 0xed, 0xc2, 0x0d, 0x3a, 0x99, 0x10, 0x08,\n\t0x4a, 0xc1, 0x99, 0x8d, 0x6d, 0xfe, 0x29, 0x20, 0x75, 0x11, 0xd3,\n\t0xb7, 0x0a, 0x29, 0x19, 0xc4, 0x78, 0xc5, 0x2b, 0x88, 0x91, 0x8c,\n\t0x58, 0x60, 0x96, 0x0a, 0xdc, 0x8c, 0x2a, 0x67, 0x83, 0x2b, 0x85,\n\t0xcf, 0xb2, 0x09, 0xb7, 0xba, 0xe5, 0x6d, 0x32, 0x10, 0xf5, 0x55,\n\t0x3c, 0x86, 0x15, 0xb6, 0x85, 0x25, 0xa4, 0x48, 0x06, 0x60, 0x01,\n\t0x19, 0x74, 0x01, 0xba, 0xb2, 0x65, 0x28, 0x3e, 0xdd, 0x08, 0xa6,\n\t0x64, 0x78, 0xf7, 0xbb, 0xbe, 0x45, 0x54, 0x39, 0x33, 0x9a, 0xd7,\n\t0x2a, 0x54, 0x81, 0x0a, 0x41, 0xc8, 0x68, 0x4e, 0x13, 0xa5, 0xdc,\n\t0xef, 0x2e, 0x17, 0x4f, 0xcd, 0x1d, 0xe3, 0x50, 0x09, 0x0b, 0x05,\n\t0x19, 0xa0, 0xd1, 0x4f, 0x1d, 0xb0, 0xc1, 0x75, 0xb3, 0x3b, 0x46,\n\t0xb7, 0xca, 0xe1, 0x4e, 0xee, 0xf5, 0x6e, 0x78, 0xef, 0x24, 0x0a,\n\t0xcd, 0x66, 0x54, 0xaf, 0x75, 0x95, 0x6b, 0x16, 0xd8, 0x1b, 0xe0,\n\t0xf7, 0x02, 0x18, 0x8f, 0x2a, 0x7d, 0xe8, 0x1c, 0x7b, 0x92, 0x4c,\n\t0x1e, 0xae, 0xf5, 0xb1, 0x46, 0x74, 0x6b, 0x14, 0x1b, 0x9c, 0x28,\n\t0xa8, 0x52, 0xe1, 0x4e, 0x1c, 0x2d, 0xa9, 0x57, 0x39, 0x8c, 0xa7,\n\t0x93, 0xca, 0xd7, 0x8f, 0x92, 0x5c, 0x21, 0x2d, 0x4f, 0xe2, 0xa9,\n\t0x23, 0xa6, 0x12, 0xb2, 0xb6, 0x4d, 0x45, 0x2c, 0x48, 0x4c, 0x60,\n\t0xcd, 0xda, 0xe0, 0xa0, 0x6d, 0xfa, 0x27, 0x3f, 0x7f, 0xd9, 0xe0,\n\t0x01, 0xdf, 0x49, 0x95, 0xa8, 0x64, 0xc6, 0x9e, 0x58, 0x3c, 0xc4,\n\t0x69, 0xc2, 0x34, 0xb2, 0xc7, 0xa5, 0x71, 0x9b, 0x68, 0xca, 0xcd,\n\t0xcb, 0xb6, 0x89, 0xa3, 0x3f, 0xbd, 0xd3, 0x8c, 0x03, 0x2c, 0xaa,\n\t0x69, 0x12, 0x51, 0x0a, 0x23, 0x1c, 0x09, 0x44, 0xdf, 0xc9, 0xd4,\n\t0x18, 0x2b, 0xf9, 0xc9, 0xea, 0x75, 0x32, 0x9b, 0x98, 0x1c, 0xe5,\n\t0x11, 0xbb, 0x97, 0x18, 0xa2, 0x8a, 0x2f, 0xfe, 0x2c, 0xb3, 0x21,\n\t0x83, 0x92, 0x58, 0xc0, 0x99, 0x5c, 0xde, 0xee, 0xfa, 0x1a, 0xec,\n\t0x60, 0x10, 0x07, 0xf7, 0x97, 0xa2, 0xc0, 0xa9, 0x98, 0xbf, 0x34,\n\t0x65, 0xf7, 0x8e, 0x4a, 0xcd, 0xaa, 0x74, 0x28, 0x29, 0x13, 0xe2,\n\t0x81, 0x88, 0x62, 0x78, 0xb6, 0x72, 0x4e, 0xb2, 0x9f, 0x13, 0x55,\n\t0xa4, 0x1e, 0x50, 0xc1, 0xb8, 0x60, 0xaa, 0x42, 0x0f, 0xfe, 0xda,\n\t0xdd, 0x2f, 0x3f, 0x98, 0x99, 0xf1, 0x24, 0xeb, 0x48, 0x62, 0x60,\n\t0xe8, 0x69, 0xba, 0xf5, 0xad, 0x7d, 0xfe, 0xee, 0xa8, 0x50, 0x41,\n\t0xd7, 0x61, 0x42, 0x3a, 0x15, 0x3d, 0xfe, 0x73, 0x60, 0x9d, 0xd9,\n\t0x66, 0x2d, 0xa7, 0xd5, 0xd3, 0x89, 0x06, 0x53, 0xa8, 0xbd, 0xfb,\n\t0xc6, 0x54, 0x8b, 0xca, 0xc4, 0xaa, 0x6c, 0x68, 0x0c, 0x48, 0x72,\n\t0x54, 0x89, 0x62, 0x52, 0x17, 0xee, 0x8b, 0x35, 0x9f, 0x2d, 0xcd,\n\t0x3e, 0x5b, 0x27, 0x0a, 0x10, 0x81, 0xc0, 0x35, 0x84, 0xa3, 0x79,\n\t0xd8, 0xe9, 0xb2, 0x54, 0xa9, 0x64, 0x54, 0x44, 0xde, 0x82, 0x87,\n\t0xcf, 0xff, 0xca, 0x9a, 0xd8, 0xdc, 0x33, 0x36, 0xa2, 0x74, 0x26,\n\t0x08, 0x40, 0x00, 0x72, 0xbe, 0x8c, 0x24, 0x89, 0x07, 0x90, 0xea,\n\t0xd8, 0x31, 0xfa, 0x01, 0x74, 0xd4, 0x96, 0x69, 0x98, 0xb0, 0xfd,\n\t0x3c, 0x3a, 0x8f, 0x6a, 0x6b, 0x8b, 0x90, 0xef, 0x7c, 0x75, 0xa1,\n\t0xe9, 0x92, 0xf4, 0x91, 0xb0, 0x6a, 0xe5, 0xc5, 0xb9, 0xcf, 0x86,\n\t0x86, 0x74, 0xbf, 0x55, 0xdb, 0xfc, 0x9b, 0x75, 0x9d, 0xf1, 0x44,\n\t0x36, 0x45, 0x9c, 0xb6, 0xa1, 0x11, 0xdd, 0xb5, 0x4e, 0xae, 0x89,\n\t0x5d, 0x60, 0xff, 0x8e, 0xdf, 0xe9, 0x13, 0xb6, 0x90, 0x04, 0x5e,\n\t0xeb, 0x00, 0xfb, 0xf8, 0x4e, 0x6e, 0xf3, 0x03, 0x6a, 0x23, 0x6a,\n\t0x58, 0x0a, 0x57, 0xf7, 0xac, 0x93, 0xfb, 0x1c, 0xbf, 0xfe, 0x61,\n\t0x27, 0xf1, 0xdb, 0x5a, 0x5c, 0x8a, 0x14, 0x4f, 0x94, 0xdb, 0xba,\n\t0x1d, 0xd1, 0xfa, 0xde, 0x17, 0x2a, 0x1a, 0x90, 0xc1, 0xd1, 0x5c,\n\t0x87, 0x86, 0x36, 0xe8, 0xaf, 0xda, 0x54, 0x4d, 0x39, 0x0d, 0x01,\n\t0x1e, 0x26, 0x51, 0x48, 0x8d, 0x6b, 0xf6, 0x15, 0x9f, 0x48, 0x1e,\n\t0xe0, 0x39, 0x7e, 0xb7, 0x41, 0x0e, 0x44, 0x22, 0x92, 0x2e, 0xe8,\n\t0xcc, 0xf4, 0xa6, 0x3b, 0xfd, 0xe9, 0x50, 0x87, 0xba, 0x2e, 0x28,\n\t0xd7, 0x9f, 0xd6, 0x48, 0x46, 0x07, 0x97, 0x11, 0x79, 0xcd, 0x51,\n\t0xbc, 0x56, 0x66, 0x48, 0xe3, 0xeb, 0x5f, 0x67, 0x46, 0x83, 0xbd,\n\t0x0e, 0xf6, 0xb2, 0x83, 0x9d, 0x19, 0xc3, 0x18, 0x86, 0xd7, 0xad,\n\t0x51, 0x76, 0x6b, 0x18, 0x31, 0xed, 0x64, 0x37, 0xbb, 0xd9, 0xe9,\n\t0x2c, 0x77, 0xb0, 0x5b, 0x63, 0x18, 0x54, 0x87, 0x8f, 0x0e, 0x26,\n\t0xf3, 0x80, 0xa9, 0x58, 0xa4, 0x0e, 0x8d, 0xf3, 0xc3, 0x85, 0xff,\n\t0x58, 0xf6, 0x6a, 0x88, 0x3d, 0xc0, 0xcc, 0xa8, 0x46, 0xdd, 0xdd,\n\t0xbe, 0x88, 0x9f, 0x07, 0x22, 0xde, 0x6c, 0xff, 0xfa, 0x30, 0xfc,\n\t0x40, 0x75, 0x41, 0x40, 0xbe, 0xee, 0x5f, 0xa7, 0x3b, 0xe6, 0xad,\n\t0xd1, 0x88, 0xff, 0x04, 0xc8, 0xea, 0x65, 0x11, 0xc1, 0x65, 0x66,\n\t0xe3, 0x3a, 0xc1, 0x0f, 0x3e, 0xee, 0x86, 0x1f, 0xbb, 0xe2, 0xcd,\n\t0xee, 0x76, 0x43, 0xf4, 0x47, 0x10, 0xcc, 0xb0, 0xc6, 0xdd, 0xf3,\n\t0x6e, 0x91, 0xcb, 0xd7, 0x5d, 0xf3, 0x98, 0x5f, 0xc4, 0x7f, 0x84,\n\t0x52, 0x1f, 0xc0, 0x60, 0x9d, 0x28, 0xae, 0x73, 0x83, 0x25, 0x2f,\n\t0x8c, 0xfa, 0xc3, 0xbb, 0x37, 0xf1, 0x75, 0xd7, 0xfd, 0x7f, 0xfc,\n\t0x20, 0x0d, 0x66, 0xfc, 0xbc, 0x3f, 0x8d, 0xc0, 0xbc, 0x34, 0x70,\n\t0xcf, 0xfa, 0x6c, 0xd0, 0x5e, 0xef, 0x81, 0x19, 0x40, 0x1b, 0x46,\n\t0xfe, 0x3f, 0x9b, 0xc0, 0x0f, 0x7f, 0xad, 0x65, 0xa7, 0xbe, 0xdd,\n\t0x99, 0x71, 0x7d, 0x8b, 0x08, 0x22, 0xed, 0xbb, 0xe7, 0x43, 0x20,\n\t0x62, 0x6f, 0xf6, 0xd4, 0x23, 0x7e, 0xf5, 0x66, 0xff, 0x86, 0x2e,\n\t0xfc, 0xde, 0x1f, 0x47, 0xe8, 0x06, 0x30, 0x7d, 0xe7, 0x7e, 0x45,\n\t0xda, 0x00, 0x07, 0x1e, 0xc4, 0x60, 0xf0, 0x84, 0xe7, 0x7e, 0xc7,\n\t0x07, 0x7f, 0x65, 0xd7, 0x79, 0xe9, 0x17, 0x0c, 0x06, 0xb8, 0x7b,\n\t0xc1, 0x10, 0x79, 0xe1, 0xd7, 0x60, 0xd2, 0x27, 0x0d, 0x31, 0x80,\n\t0x16, 0x9e, 0x67, 0x07, 0xb5, 0x51, 0x16, 0x44, 0xf7, 0x1f, 0x76,\n\t0x00, 0x07, 0x25, 0xa0, 0x00, 0xce, 0x34, 0x78, 0x99, 0xe7, 0x80,\n\t0x72, 0x77, 0x0d, 0xe4, 0x97, 0x7e, 0x7c, 0x10, 0x0c, 0xca, 0xb7,\n\t0x7b, 0xb0, 0x77, 0x0d, 0x60, 0x27, 0x80, 0xdf, 0x85, 0x7c, 0x72,\n\t0x27, 0x7f, 0x04, 0x30, 0x18, 0x9e, 0xa7, 0x07, 0x19, 0x00, 0x18,\n\t0xa6, 0xb1, 0x7b, 0x91, 0x50, 0x02, 0x00, 0x10, 0x46, 0xa7, 0x67,\n\t0x7c, 0x2d, 0x48, 0x80, 0xd2, 0xe0, 0x76, 0xcf, 0xb7, 0x7b, 0xc3,\n\t0xa0, 0x0b, 0x24, 0xc8, 0x07, 0xb6, 0x37, 0x7d, 0x20, 0x58, 0x77,\n\t0xdf, 0xd0, 0x66, 0x32, 0xb8, 0x7b, 0xa9, 0x61, 0x81, 0xe9, 0xe7,\n\t0x08, 0x91, 0xa1, 0x00, 0x00, 0xc8, 0x0b, 0x74, 0xe6, 0x82, 0x5f,\n\t0x27, 0x82, 0x27, 0xb8, 0x7b, 0xeb, 0x37, 0x82, 0x24, 0x08, 0x79,\n\t0x2c, 0xf8, 0x5d, 0x98, 0xf7, 0x0d, 0xcc, 0xa0, 0x2d, 0x4f, 0x88,\n\t0x14, 0x7a, 0x00, 0x7a, 0x4f, 0x51, 0x19, 0xfa, 0xd7, 0x12, 0x63,\n\t0xa0, 0x22, 0x50, 0xf0, 0x7d, 0xbc, 0xd0, 0x5e, 0x64, 0x68, 0x77,\n\t0x42, 0x78, 0x84, 0x7c, 0xd0, 0x08, 0x6c, 0xd7, 0x85, 0xbb, 0x17,\n\t0x6f, 0xd8, 0xe0, 0x83, 0xde, 0xa5, 0x85, 0x65, 0xd7, 0x84, 0x00,\n\t0x70, 0x16, 0xfe, 0x6f, 0x28, 0x14, 0x14, 0x08, 0x18, 0x03, 0x50,\n\t0x06, 0x89, 0xf8, 0x79, 0x00, 0xd0, 0x01, 0x00, 0x68, 0x87, 0xde,\n\t0x05, 0x76, 0x2a, 0x18, 0x0c, 0xe5, 0xf7, 0x7a, 0xb1, 0xe7, 0x76,\n\t0x99, 0x48, 0x14, 0x82, 0x60, 0x42, 0xaa, 0xf7, 0x82, 0xcc, 0x80,\n\t0x25, 0xf9, 0xe7, 0x79, 0x65, 0x20, 0x74, 0x0a, 0xf1, 0x7b, 0x9e,\n\t0x17, 0x87, 0x3b, 0xf8, 0x7d, 0x94, 0xf8, 0x55, 0xd8, 0x20, 0x0d,\n\t0xc3, 0xe0, 0x87, 0x07, 0x58, 0x76, 0xb4, 0xf8, 0x1f, 0x82, 0xa0,\n\t0x71, 0xef, 0xf7, 0x82, 0x6d, 0x86, 0x88, 0xbb, 0xd7, 0x17, 0x92,\n\t0x21, 0x7a, 0x24, 0x18, 0x19, 0x6f, 0x36, 0x7c, 0x4b, 0x87, 0x78,\n\t0xb3, 0x38, 0x84, 0x24, 0xe8, 0x07, 0xec, 0x17, 0x84, 0xce, 0xa7,\n\t0x87, 0x15, 0x91, 0x8b, 0xc7, 0x58, 0x89, 0xf1, 0xa7, 0x0b, 0x68,\n\t0x48, 0x82, 0x8e, 0xd0, 0x7b, 0x65, 0xd1, 0x00, 0x78, 0x90, 0x88,\n\t0x8f, 0x51, 0x02, 0x0d, 0xf0, 0x7f, 0x82, 0xe5, 0x5e, 0xba, 0x80,\n\t0x6c, 0x9d, 0x88, 0x8b, 0xcd, 0xf8, 0x75, 0x77, 0xa7, 0x8c, 0x24,\n\t0x98, 0x8b, 0x80, 0xb0, 0x74, 0xcc, 0x80, 0x0d, 0xd7, 0x30, 0x8f,\n\t0x2a, 0x18, 0x03, 0x0d, 0x50, 0x02, 0xd4, 0x51, 0x7f, 0x78, 0xc0,\n\t0x86, 0x64, 0xa1, 0x8a, 0xbf, 0x68, 0x13, 0x7e, 0xa0, 0x08, 0x02,\n\t0x09, 0x08, 0x8a, 0xe0, 0x07, 0x81, 0x70, 0x8e, 0x5e, 0x18, 0x0c,\n\t0xd8, 0xb0, 0x90, 0x0c, 0x89, 0x0d, 0xbc, 0x10, 0x0c, 0xec, 0x78,\n\t0x84, 0x82, 0xf0, 0x78, 0x8b, 0x10, 0x0c, 0xc1, 0x30, 0x0c, 0xb8,\n\t0xe0, 0x07, 0xe1, 0xe1, 0x8d, 0x2d, 0xb1, 0x77, 0x7c, 0x97, 0x8f,\n\t0x9e, 0xc7, 0x91, 0xd0, 0xe8, 0x39, 0x72, 0xa0, 0x5b, 0x26, 0x79,\n\t0x92, 0xaf, 0x20, 0x07, 0x23, 0xa9, 0x87, 0xed, 0xe1, 0x79, 0x7c,\n\t0xc0, 0x8f, 0x65, 0xe1, 0xfe, 0x8f, 0x2b, 0x39, 0x93, 0x15, 0x11,\n\t0x08, 0x52, 0x90, 0x38, 0x95, 0x90, 0x93, 0x3a, 0xa9, 0x93, 0x98,\n\t0x10, 0x05, 0x34, 0xf9, 0x93, 0x1d, 0xe9, 0x1a, 0x6e, 0x08, 0x94,\n\t0x2b, 0xe9, 0x07, 0x55, 0x90, 0x31, 0xb4, 0x22, 0x05, 0x11, 0x49,\n\t0x94, 0x13, 0x08, 0x93, 0x80, 0x21, 0x02, 0x20, 0xc9, 0x94, 0xcb,\n\t0x07, 0x3e, 0x48, 0x79, 0x29, 0x39, 0x23, 0x95, 0xd8, 0xc8, 0x07,\n\t0xda, 0x48, 0x1a, 0x27, 0x10, 0x95, 0x58, 0xa9, 0x7e, 0xef, 0x53,\n\t0x95, 0xd0, 0x72, 0x09, 0x72, 0x80, 0x1b, 0x5f, 0x29, 0x13, 0x7c,\n\t0x10, 0x19, 0xbd, 0x31, 0x1d, 0x22, 0x49, 0x93, 0xdf, 0x23, 0x96,\n\t0xf4, 0x72, 0x95, 0x67, 0xf9, 0x18, 0xe5, 0x11, 0x1d, 0x25, 0x40,\n\t0x7f, 0x52, 0x69, 0x94, 0xfe, 0x03, 0x97, 0xcf, 0x42, 0x09, 0x52,\n\t0xe0, 0x36, 0x40, 0x19, 0x20, 0x25, 0x80, 0x8a, 0x4d, 0xf1, 0x00,\n\t0x8e, 0xd8, 0x96, 0xbb, 0x67, 0x07, 0x46, 0x99, 0x04, 0x95, 0xc0,\n\t0x97, 0x19, 0x23, 0x32, 0x7e, 0x60, 0x96, 0x33, 0xe9, 0x12, 0x65,\n\t0x50, 0x83, 0x06, 0x52, 0x02, 0x41, 0xb1, 0x1e, 0x48, 0xf1, 0x12,\n\t0x8a, 0xd9, 0x33, 0x27, 0x53, 0x29, 0x7b, 0xe9, 0x98, 0xbc, 0xa3,\n\t0x04, 0x51, 0x70, 0x90, 0xfc, 0x51, 0x7f, 0x30, 0x41, 0x07, 0x83,\n\t0x89, 0x22, 0xf9, 0xa1, 0x03, 0x6d, 0xa0, 0x20, 0x47, 0x91, 0x11,\n\t0x3a, 0x90, 0x03, 0x41, 0x00, 0x43, 0x9f, 0xe9, 0x2f, 0x94, 0x40,\n\t0x09, 0x8d, 0x29, 0x9a, 0xe8, 0x42, 0x09, 0x9b, 0xe0, 0x4a, 0x3c,\n\t0x90, 0x17, 0x78, 0x00, 0x20, 0x84, 0xa1, 0x07, 0x6d, 0xa0, 0x03,\n\t0x1f, 0x40, 0x98, 0xa3, 0x71, 0x20, 0x19, 0x20, 0x02, 0x25, 0x70,\n\t0x02, 0x26, 0x90, 0x1d, 0x1e, 0x01, 0x12, 0x03, 0xb0, 0x02, 0x4e,\n\t0x64, 0x9b, 0xb7, 0x89, 0x04, 0xb9, 0xfe, 0xb9, 0x9b, 0x7c, 0x59,\n\t0x09, 0xb9, 0xa9, 0x2e, 0xa0, 0x10, 0x0a, 0x8c, 0x82, 0x21, 0x77,\n\t0xa1, 0x21, 0x25, 0x20, 0x02, 0x19, 0x80, 0x13, 0x7d, 0x32, 0x12,\n\t0x0a, 0x40, 0x29, 0x5f, 0x80, 0x9d, 0xb7, 0x69, 0x04, 0xda, 0x99,\n\t0x9b, 0xba, 0xb9, 0x93, 0x3a, 0x49, 0x9f, 0x94, 0x80, 0x04, 0xf7,\n\t0xf3, 0x9e, 0x46, 0x70, 0x25, 0xeb, 0x19, 0x18, 0x14, 0xd0, 0x44,\n\t0xf0, 0x19, 0x9f, 0x27, 0xa3, 0x9f, 0x06, 0x6a, 0xa0, 0xb7, 0xc9,\n\t0x9f, 0xb9, 0xf2, 0x9f, 0xa3, 0xa1, 0x00, 0x2b, 0x90, 0x04, 0x04,\n\t0x1a, 0xa1, 0x12, 0xea, 0x44, 0x46, 0xb0, 0x02, 0x83, 0xc6, 0xa0,\n\t0x8c, 0x88, 0x03, 0x42, 0x10, 0x04, 0x10, 0x3a, 0xa1, 0x12, 0x9a,\n\t0x04, 0x41, 0x20, 0x04, 0x36, 0x80, 0xa1, 0xaf, 0x31, 0x00, 0x3c,\n\t0x00, 0x07, 0x1f, 0x52, 0x59, 0x1c, 0x7a, 0x32, 0xef, 0xc9, 0x9f,\n\t0xf8, 0x23, 0x5a, 0xe8, 0xf3, 0x21, 0x1a, 0x48, 0xa2, 0xaf, 0x61,\n\t0x03, 0x70, 0xd0, 0x38, 0xd9, 0xd3, 0x06, 0x62, 0x20, 0x05, 0x1e,\n\t0xe0, 0x01, 0x2b, 0xb0, 0x02, 0x3d, 0x6a, 0x35, 0x39, 0xea, 0x3a,\n\t0x70, 0xb0, 0x95, 0x34, 0x1a, 0x18, 0x27, 0x70, 0xa3, 0xfc, 0xc6,\n\t0x6f, 0x28, 0x9a, 0x65, 0x0a, 0x50, 0x73, 0x4b, 0xca, 0xa4, 0x51,\n\t0x78, 0xa4, 0x93, 0x31, 0x18, 0xcb, 0x43, 0x35, 0x4c, 0xda, 0x06,\n\t0x15, 0x28, 0x10, 0x19, 0x10, 0xa5, 0x6b, 0xb0, 0x06, 0x75, 0x50,\n\t0x13, 0x53, 0x4a, 0xa5, 0x81, 0x51, 0x02, 0x59, 0x57, 0x13, 0x75,\n\t0xd0, 0x06, 0x66, 0xf3, 0x35, 0x12, 0x00, 0x07, 0x54, 0x13, 0xa6,\n\t0x92, 0xe9, 0x94, 0x64, 0xea, 0x14, 0xab, 0x91, 0x98, 0x96, 0x29,\n\t0x10, 0x66, 0x3a, 0x83, 0x72, 0x3a, 0xa7, 0x3d, 0x51, 0xa7, 0x50,\n\t0x48, 0x10, 0x27, 0x10, 0x09, 0x13, 0xb8, 0xa5, 0xab, 0x7c, 0x4a,\n\t0x19, 0x53, 0xa8, 0x8d, 0x32, 0x29, 0x13, 0x76, 0xa0, 0x9c, 0x85,\n\t0x6a, 0x10, 0xa5, 0x58, 0x7f, 0x6a, 0x29, 0x10, 0x12, 0x58, 0x7f,\n\t0xa7, 0xd8, 0xa8, 0x65, 0x41, 0x00, 0xb2, 0x51, 0x7f, 0x3a, 0x88,\n\t0x4c, 0x8e, 0xb8, 0x8a, 0x8c, 0x6a, 0xa9, 0x17, 0xa2, 0x1e, 0xab,\n\t0x18, 0xaa, 0x8f, 0x38, 0x06, 0xa0, 0x4a, 0x16, 0x8d, 0x58, 0xaa,\n\t0x39, 0x81, 0xa9, 0x8f, 0x18, 0xa9, 0xa7, 0xea, 0x14, 0x93, 0x8a,\n\t0x14, 0xf7, 0x07, 0x00, 0x8f, 0x8a, 0x14, 0xae, 0xfa, 0xaa, 0x3d,\n\t0x91, 0xa8, 0x2d, 0xb1, 0x88, 0xb4, 0x7a, 0xa8, 0xb8, 0xfa, 0x14,\n\t0x69, 0x08, 0x1f, 0x6b, 0x28, 0x10, 0x7e, 0xfa, 0x1f, 0x63, 0xfa,\n\t0xab, 0x3b, 0xf1, 0x1b, 0x83, 0x2a, 0x10, 0x17, 0xb8, 0x7b, 0x7b,\n\t0x8a, 0xac, 0x43, 0xe7, 0x95, 0xc0, 0x88, 0x4c, 0xa2, 0x8a, 0x14,\n\t0xa1, 0x01, 0xad, 0x14, 0x96, 0xa8, 0x90, 0x38, 0x10, 0x50, 0xc9,\n\t0x7d, 0x84, 0xb1, 0xa9, 0xd8, 0xca, 0x13, 0x04, 0x30, 0x06, 0x8f,\n\t0x11, 0x1c, 0x5b, 0xc9, 0x96, 0x85, 0x51, 0x97, 0xe1, 0xca, 0x13,\n\t0x51, 0x11, 0x14, 0x02, 0xe2, 0x94, 0x1f, 0xa0, 0x17, 0x19, 0xa1,\n\t0x19, 0x30, 0x12, 0x10, 0x00, 0x3b\n};\n\nstatic const int _img_dead_length = 4318;\nstatic const char _img_eat[4636] = {\n\t0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x7f, 0x00, 0x7f, 0x00, 0xf7,\n\t0xec, 0x00, 0x00, 0x00, 0x00, 0x51, 0x95, 0x97, 0x51, 0x8a, 0x8e,\n\t0x0d, 0x7e, 0xb8, 0x97, 0xab, 0x76, 0x24, 0x94, 0xae, 0x79, 0x88,\n\t0x6c, 0xf4, 0xc7, 0x4f, 0xa1, 0x7b, 0x5a, 0xe3, 0xb9, 0x49, 0xf2,\n\t0xc7, 0x4f, 0xe5, 0xbc, 0x4c, 0x09, 0x79, 0xb2, 0x01, 0x81, 0xc4,\n\t0x3c, 0xaf, 0xa9, 0x9a, 0xc4, 0xab, 0x29, 0x92, 0xa2, 0x6c, 0x7a,\n\t0x59, 0xf1, 0xc5, 0x4e, 0xa2, 0x7b, 0x5a, 0xf3, 0xc7, 0x4f, 0xf2,\n\t0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0x07, 0x7d, 0xb9, 0x01, 0x81, 0xc5,\n\t0x3d, 0xb3, 0xad, 0x40, 0xba, 0xb3, 0xc1, 0xcb, 0xca, 0x57, 0x3c,\n\t0x09, 0x82, 0x62, 0x48, 0x83, 0x63, 0x49, 0xad, 0x85, 0x57, 0x03,\n\t0x6a, 0xa0, 0x00, 0x67, 0x9f, 0x1f, 0x82, 0x99, 0x02, 0x7f, 0xc2,\n\t0x40, 0xba, 0xb3, 0x09, 0x70, 0xa5, 0x3b, 0xaa, 0xa4, 0x3d, 0xa4,\n\t0xa0, 0xb2, 0xc5, 0xc4, 0x47, 0x2e, 0x00, 0x48, 0x2f, 0x00, 0x47,\n\t0x30, 0x00, 0x4e, 0x35, 0x00, 0x59, 0x3c, 0x00, 0x55, 0x3a, 0x03,\n\t0x44, 0x53, 0x16, 0x5d, 0x42, 0x08, 0x65, 0x46, 0x0e, 0x77, 0x58,\n\t0x12, 0x73, 0x6e, 0x47, 0x39, 0x3f, 0x48, 0x37, 0x3e, 0x47, 0x09,\n\t0x6d, 0x9f, 0x39, 0x41, 0x4a, 0x3a, 0x4b, 0x52, 0x3a, 0x55, 0x5b,\n\t0x3b, 0x5d, 0x62, 0x3b, 0x66, 0x6a, 0x3c, 0x78, 0x7a, 0x3c, 0x6f,\n\t0x71, 0x33, 0x95, 0x8f, 0x4f, 0x4e, 0x56, 0x5b, 0x76, 0x42, 0x67,\n\t0x5c, 0x64, 0x78, 0x67, 0x6e, 0x8a, 0x7f, 0x59, 0x39, 0x92, 0x3e,\n\t0xf3, 0xc7, 0x4f, 0x97, 0x75, 0x2c, 0xa1, 0x7b, 0x5a, 0x83, 0x62,\n\t0x48, 0x88, 0x66, 0x4b, 0x8e, 0x6b, 0x4f, 0x81, 0x61, 0x47, 0x9d,\n\t0x77, 0x55, 0x9e, 0x79, 0x59, 0x9b, 0x75, 0x55, 0xa2, 0x7b, 0x5a,\n\t0x93, 0x75, 0x70, 0xab, 0x79, 0x6f, 0xe6, 0x59, 0x5a, 0xe6, 0x57,\n\t0x58, 0xe8, 0x64, 0x66, 0xea, 0x73, 0x76, 0xe8, 0x68, 0x5b, 0x30,\n\t0x8a, 0x3c, 0x30, 0x8e, 0x3d, 0x34, 0x93, 0x40, 0x3d, 0xac, 0x4b,\n\t0x3d, 0xad, 0x4b, 0x38, 0xa0, 0x6d, 0x68, 0x90, 0x7b, 0x59, 0xa2,\n\t0x5f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xbf,\n\t0x9b, 0x3c, 0xc2, 0x9f, 0x3f, 0xc5, 0xa0, 0x3e, 0xf3, 0xc7, 0x4f,\n\t0xac, 0x87, 0x4b, 0xab, 0x83, 0x59, 0xb4, 0x8c, 0x57, 0xb7, 0x96,\n\t0x50, 0x84, 0x8e, 0x6a, 0x95, 0xaa, 0x7a, 0xb7, 0xb6, 0x6c, 0xa5,\n\t0xb1, 0x76, 0xab, 0x8d, 0x6a, 0xf3, 0xc7, 0x4f, 0xc3, 0x9c, 0x51,\n\t0xf3, 0xc7, 0x4f, 0xd8, 0xbc, 0x5a, 0xd1, 0xac, 0x4c, 0xef, 0xc4,\n\t0x4e, 0xe7, 0xbc, 0x51, 0xf1, 0xbc, 0x51, 0xc6, 0xba, 0x65, 0xd1,\n\t0xbd, 0x60, 0xef, 0xa7, 0x66, 0xa8, 0xc1, 0x79, 0xdb, 0xc1, 0x5b,\n\t0xf2, 0xc6, 0x4f, 0xf3, 0xc7, 0x4f, 0xf5, 0xc8, 0x4e, 0xec, 0xc5,\n\t0x52, 0xe4, 0xc4, 0x57, 0xf5, 0xc9, 0x50, 0xf3, 0xc9, 0x56, 0xcd,\n\t0xc4, 0x65, 0xf4, 0xcb, 0x64, 0xf5, 0xd4, 0x77, 0xf2, 0xc9, 0x6d,\n\t0x00, 0x81, 0xc6, 0x33, 0xae, 0xb6, 0x03, 0x6a, 0xa0, 0x00, 0x80,\n\t0xc4, 0x00, 0x81, 0xc6, 0x00, 0x67, 0x9e, 0x01, 0x68, 0x9f, 0x04,\n\t0x6a, 0x9f, 0x0f, 0x70, 0x9d, 0x2d, 0x79, 0x8d, 0x00, 0x81, 0xc6,\n\t0x00, 0x6a, 0xa2, 0x05, 0x6c, 0xa4, 0x02, 0x72, 0xac, 0x00, 0x75,\n\t0xb3, 0x00, 0x7a, 0xbb, 0x00, 0x7e, 0xc2, 0x08, 0x7e, 0xba, 0x00,\n\t0x67, 0x9e, 0x00, 0x7f, 0xc3, 0x49, 0x7f, 0x81, 0x9b, 0x7c, 0x84,\n\t0x40, 0xba, 0xb3, 0x40, 0xba, 0xb3, 0x3b, 0x8a, 0x89, 0x33, 0x95,\n\t0x8f, 0x37, 0x94, 0x8f, 0x33, 0x97, 0x91, 0x3a, 0x9b, 0x97, 0x36,\n\t0x90, 0x93, 0x3a, 0xa3, 0x9d, 0x40, 0xba, 0xb3, 0x17, 0x88, 0xbb,\n\t0x14, 0x8f, 0xbc, 0x27, 0x8c, 0xb3, 0x2b, 0x95, 0xae, 0x3c, 0xa9,\n\t0xa4, 0x3f, 0xb5, 0xaf, 0x27, 0xa4, 0xba, 0x3c, 0xb6, 0xb4, 0x3e,\n\t0xba, 0xb3, 0x35, 0xb0, 0xb6, 0x3a, 0xb2, 0xb2, 0x40, 0xbb, 0xb3,\n\t0x58, 0x9a, 0x9b, 0x4e, 0x8f, 0x93, 0x70, 0x97, 0x8e, 0x76, 0xa3,\n\t0x8c, 0x6e, 0xb2, 0x96, 0x48, 0x97, 0xa3, 0x49, 0x95, 0xa1, 0x44,\n\t0xb6, 0xad, 0x40, 0xba, 0xb3, 0x4a, 0xb9, 0xb3, 0x43, 0xb7, 0xb0,\n\t0x5a, 0xbb, 0xa8, 0x67, 0xb8, 0xb4, 0x72, 0xae, 0xab, 0x54, 0xad,\n\t0xa1, 0x00, 0x81, 0xc6, 0x00, 0x81, 0xc8, 0x0b, 0x87, 0xc1, 0x14,\n\t0x8a, 0xca, 0x12, 0x91, 0xc1, 0xbb, 0x91, 0x97, 0x86, 0xaf, 0x87,\n\t0xae, 0xba, 0xba, 0xad, 0xbc, 0xb4, 0xc4, 0x94, 0x95, 0xec, 0x8c,\n\t0x90, 0xef, 0x9d, 0xa1, 0xca, 0xb2, 0xb6, 0xc7, 0xb2, 0xb6, 0xd5,\n\t0xa9, 0xa3, 0xe6, 0xa8, 0xae, 0xea, 0xac, 0xb3, 0xe7, 0xb0, 0xb6,\n\t0xf0, 0xb0, 0xb7, 0xf1, 0xb1, 0xb8, 0xf4, 0xbb, 0xbc, 0xf0, 0xb0,\n\t0xae, 0xdc, 0xa8, 0x9b, 0xa0, 0xc8, 0x96, 0xf7, 0xda, 0x8b, 0xf9,\n\t0xe3, 0xa7, 0xfa, 0xe9, 0xb9, 0xd8, 0xd4, 0xa2, 0xa6, 0xb9, 0xc4,\n\t0x8f, 0xd6, 0xd2, 0x8e, 0xd8, 0xd4, 0x84, 0xc7, 0xc3, 0xb3, 0xc7,\n\t0xd1, 0xcc, 0xcc, 0xcc, 0xca, 0xcc, 0xcc, 0xd5, 0xd5, 0xd5, 0xf9,\n\t0xd7, 0xd7, 0xfb, 0xee, 0xce, 0xcf, 0xe7, 0xf4, 0xcf, 0xe8, 0xf6,\n\t0xd2, 0xe4, 0xe7, 0xfd, 0xf8, 0xe8, 0xff, 0xff, 0xff, 0xf9, 0xf7,\n\t0xf4, 0xe6, 0xe6, 0xe6, 0xdf, 0xe0, 0xdf, 0xdb, 0xc7, 0xc7, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x21, 0xf9, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x21, 0xff, 0x0b,\n\t0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x6b,\n\t0x0d, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x3d, 0x30, 0x2e, 0x34, 0x35,\n\t0x34, 0x35, 0x35, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00,\n\t0x7f, 0x00, 0x00, 0x08, 0xfe, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0,\n\t0xa0, 0xc1, 0x83, 0x08, 0x13, 0x1a, 0x80, 0x00, 0xa2, 0x93, 0x27,\n\t0x53, 0xb1, 0x5e, 0xc5, 0x32, 0xe5, 0xa9, 0x93, 0x08, 0x08, 0x06,\n\t0x12, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x13, 0x0a,\n\t0x88, 0x20, 0xc2, 0x53, 0xac, 0x5d, 0x28, 0x53, 0xaa, 0xdc, 0xc5,\n\t0xca, 0xd3, 0x09, 0x0d, 0x19, 0x43, 0xca, 0x9c, 0x49, 0xb3, 0x26,\n\t0xc2, 0x01, 0x20, 0x3c, 0xb9, 0x5a, 0xc9, 0xb3, 0xa7, 0x27, 0x11,\n\t0x31, 0x6d, 0x0a, 0x1d, 0x4a, 0x94, 0xa0, 0x01, 0x11, 0xb2, 0x7a,\n\t0x2a, 0x55, 0x6a, 0x0a, 0x68, 0xd1, 0xa7, 0x50, 0x3f, 0x06, 0xd0,\n\t0xe0, 0x69, 0xa9, 0x55, 0xa6, 0x22, 0x04, 0x44, 0xdd, 0xca, 0x75,\n\t0x20, 0x84, 0x4e, 0x57, 0xc3, 0x2a, 0xf5, 0x04, 0xa1, 0xab, 0x59,\n\t0x84, 0x01, 0x0c, 0x0c, 0x68, 0x30, 0x40, 0xab, 0xc6, 0xa9, 0xa6,\n\t0xc4, 0xca, 0xe5, 0x19, 0x4b, 0x44, 0x80, 0x8d, 0x69, 0x07, 0x0c,\n\t0x30, 0x70, 0xf7, 0x2c, 0xc8, 0x00, 0x0c, 0x44, 0x24, 0xca, 0x84,\n\t0xa9, 0x70, 0xa2, 0x43, 0x17, 0x1a, 0x1c, 0x14, 0x20, 0x62, 0xe7,\n\t0xdc, 0xc7, 0x2a, 0x3b, 0x05, 0x25, 0x38, 0x00, 0xc3, 0xa1, 0x44,\n\t0x85, 0x31, 0x65, 0x4a, 0x24, 0x82, 0x81, 0x5b, 0xbf, 0x09, 0x03,\n\t0x60, 0x48, 0xa4, 0x69, 0x98, 0xe9, 0xd3, 0xa7, 0x31, 0x1d, 0x52,\n\t0x3c, 0xd0, 0x40, 0x55, 0xc8, 0xb0, 0x53, 0x92, 0x25, 0xd8, 0x40,\n\t0x04, 0x26, 0xd4, 0xb8, 0x35, 0x25, 0xc2, 0xf0, 0x19, 0x34, 0xed,\n\t0x43, 0xa5, 0x85, 0x09, 0x1f, 0x4e, 0xdc, 0x34, 0x26, 0xbb, 0x00,\n\t0x20, 0xbc, 0x8e, 0xcd, 0x5c, 0x56, 0x59, 0xd1, 0xb7, 0x87, 0x11,\n\t0x9f, 0x2e, 0x4c, 0x7a, 0xa2, 0xb2, 0xbe, 0xbd, 0x26, 0x92, 0x4e,\n\t0xbd, 0xbb, 0xf4, 0x43, 0x18, 0x48, 0xfe, 0x31, 0x1f, 0x8f, 0xd2,\n\t0x94, 0x06, 0x11, 0xc1, 0xbb, 0x53, 0x1f, 0x86, 0x09, 0x43, 0x76,\n\t0x00, 0x0c, 0x32, 0x71, 0x57, 0xaf, 0x1e, 0x95, 0x63, 0xf2, 0xcc,\n\t0x5d, 0xa1, 0xa2, 0xaf, 0x9e, 0xbd, 0x7b, 0xd0, 0x03, 0x24, 0x62,\n\t0x09, 0x7f, 0xfc, 0xa1, 0xf2, 0x0a, 0x7e, 0xe3, 0xe9, 0x47, 0xe0,\n\t0x7a, 0x98, 0x60, 0x67, 0x56, 0x00, 0x25, 0x48, 0xa2, 0x89, 0x77,\n\t0xa8, 0xd1, 0xd7, 0x0a, 0x82, 0x09, 0xee, 0x37, 0x1c, 0x6e, 0xfd,\n\t0x25, 0xd2, 0xdb, 0x56, 0x10, 0x38, 0x42, 0xc9, 0x7a, 0xa7, 0xe0,\n\t0x52, 0x8b, 0x2d, 0xb3, 0xa8, 0x52, 0x5d, 0x77, 0xc4, 0xdc, 0x87,\n\t0x21, 0x64, 0xae, 0x18, 0x33, 0x5c, 0x2a, 0xb3, 0xd8, 0x52, 0x0b,\n\t0x2e, 0xa7, 0xd0, 0xf7, 0x1f, 0x57, 0x01, 0xd8, 0xd0, 0xc8, 0x88,\n\t0xd3, 0xcd, 0x72, 0xc7, 0x1f, 0x7e, 0xf8, 0xd1, 0xc7, 0x1e, 0x6b,\n\t0xa4, 0x32, 0x1f, 0x71, 0x17, 0xbe, 0x18, 0x1b, 0x2c, 0xc4, 0x9c,\n\t0x82, 0x8c, 0x1c, 0x7d, 0x14, 0xf9, 0xc7, 0x1d, 0xb3, 0x10, 0xb3,\n\t0x9e, 0x87, 0x5d, 0x31, 0xe0, 0x08, 0x23, 0x95, 0x4c, 0x67, 0x0b,\n\t0x91, 0x7d, 0x94, 0x59, 0xa5, 0x1f, 0x77, 0xa8, 0xb2, 0xa4, 0x70,\n\t0xc6, 0x1c, 0xe8, 0x24, 0x6c, 0xb0, 0xb4, 0x51, 0xa4, 0x99, 0x55,\n\t0xfe, 0x81, 0x8c, 0x96, 0xd3, 0x69, 0xe2, 0x60, 0x54, 0x20, 0x48,\n\t0x02, 0xe6, 0x86, 0xb9, 0x00, 0x62, 0x24, 0x9d, 0x65, 0xfa, 0xc1,\n\t0x46, 0x8e, 0xd3, 0x11, 0x03, 0xcb, 0x9b, 0xb1, 0x21, 0xf3, 0x07,\n\t0xa1, 0x75, 0xce, 0xb2, 0x9e, 0x08, 0x5d, 0x45, 0xf8, 0xa7, 0x70,\n\t0xa7, 0xb0, 0x31, 0x28, 0xa4, 0x65, 0xce, 0xb2, 0xa6, 0x30, 0x4d,\n\t0x32, 0x3a, 0xd7, 0x2b, 0xbd, 0xe8, 0xc1, 0x29, 0x9a, 0x88, 0x6e,\n\t0x98, 0x48, 0x5f, 0x50, 0x05, 0x90, 0x88, 0x9f, 0xfe, 0x61, 0x56,\n\t0xa7, 0x0a, 0x20, 0x9c, 0x9a, 0xe9, 0x47, 0x1b, 0xdd, 0x85, 0x2a,\n\t0xaa, 0x5c, 0xaf, 0xf8, 0x32, 0xc8, 0xa6, 0x66, 0xfe, 0x91, 0xcb,\n\t0x92, 0xc3, 0x64, 0x32, 0x59, 0x51, 0x02, 0x24, 0xd2, 0x08, 0x23,\n\t0x40, 0x0e, 0x33, 0x4b, 0xad, 0xb6, 0xde, 0x91, 0xea, 0x70, 0xba,\n\t0xee, 0x2a, 0xd6, 0x2b, 0xb7, 0x08, 0x4a, 0xa8, 0x1f, 0xb6, 0x10,\n\t0x8b, 0xc9, 0x00, 0x5b, 0x25, 0xbb, 0xac, 0x84, 0xd5, 0x3d, 0x0b,\n\t0x6d, 0x95, 0xd2, 0x52, 0x57, 0xad, 0xb5, 0x61, 0xbd, 0x82, 0x0c,\n\t0xa4, 0xdc, 0x7a, 0xcb, 0x1a, 0x54, 0xe2, 0x32, 0x22, 0xc9, 0x80,\n\t0xc3, 0xe0, 0xf2, 0x28, 0xb4, 0x86, 0xe2, 0x49, 0xdc, 0xa2, 0xec,\n\t0x8e, 0xca, 0xcb, 0xaf, 0x84, 0x7a, 0x5a, 0x1c, 0x26, 0xc7, 0x12,\n\t0xd5, 0xa3, 0x9f, 0xcc, 0x62, 0x8a, 0x07, 0xb0, 0xdb, 0xda, 0x42,\n\t0x9d, 0x31, 0x2e, 0x06, 0xdc, 0x6e, 0xb6, 0xb6, 0xee, 0xa1, 0x64,\n\t0x71, 0xab, 0x72, 0xd5, 0x27, 0x23, 0xf6, 0x0e, 0x28, 0x8c, 0x2d,\n\t0xfc, 0xe2, 0xb1, 0x31, 0x93, 0x16, 0xc3, 0x66, 0x6a, 0xa1, 0xc8,\n\t0xac, 0x77, 0x48, 0x57, 0x10, 0x80, 0x0c, 0x32, 0x90, 0xa7, 0xc8,\n\t0x09, 0x2f, 0x20, 0x92, 0x26, 0x5a, 0x71, 0xca, 0x57, 0xf5, 0xfa,\n\t0xab, 0xa1, 0xd3, 0x0a, 0x37, 0xcc, 0x8e, 0x51, 0xd5, 0xcb, 0x48,\n\t0x23, 0xb1, 0x9e, 0xb2, 0x86, 0xa0, 0x45, 0x1a, 0x89, 0x65, 0xae,\n\t0x3c, 0x43, 0xe6, 0x2e, 0x20, 0x6d, 0x9c, 0xbc, 0xe1, 0xb7, 0x66,\n\t0x81, 0xb0, 0x2c, 0xc8, 0xf7, 0x0a, 0x47, 0x0c, 0x2e, 0xc8, 0xb0,\n\t0xc1, 0x46, 0x1b, 0xb5, 0x04, 0xcd, 0xe6, 0xce, 0x51, 0x5b, 0xf5,\n\t0x0a, 0x2f, 0xb8, 0xf8, 0x5b, 0x1c, 0xa5, 0x66, 0x19, 0xf0, 0xaa,\n\t0xcc, 0x5d, 0xaf, 0x48, 0x8c, 0x96, 0x9f, 0x0a, 0xa3, 0x68, 0xfe,\n\t0xda, 0xb0, 0xb5, 0xe2, 0x1d, 0x26, 0xf3, 0xc2, 0xec, 0xc8, 0xd6,\n\t0xf6, 0x56, 0x32, 0x21, 0x7f, 0x9a, 0x9c, 0x02, 0x30, 0xdf, 0x8f,\n\t0xc5, 0x38, 0xdd, 0x30, 0x9a, 0x10, 0x9d, 0xf5, 0xd1, 0x32, 0x17,\n\t0x7e, 0x78, 0x9e, 0x96, 0x50, 0xa2, 0x0a, 0xe3, 0xb1, 0xf9, 0x3d,\n\t0x1d, 0x72, 0xa0, 0x05, 0x00, 0xc2, 0xe0, 0x95, 0x17, 0x6e, 0x89,\n\t0x25, 0x9a, 0x68, 0x62, 0x49, 0x25, 0x92, 0x4c, 0xb2, 0x2e, 0xe7,\n\t0x62, 0x39, 0xbe, 0x22, 0xe8, 0xd9, 0x61, 0x90, 0x89, 0x24, 0x84,\n\t0xd3, 0x2d, 0xc9, 0xee, 0x8d, 0x28, 0x0e, 0x3b, 0x73, 0x7e, 0xb3,\n\t0x47, 0xfb, 0x7b, 0x0d, 0x94, 0xf0, 0x65, 0xe9, 0x32, 0x4f, 0xa2,\n\t0x0a, 0xda, 0xbf, 0xc7, 0x7e, 0xca, 0x21, 0x7b, 0xbe, 0x27, 0x50,\n\t0x00, 0x22, 0x3c, 0xd2, 0x08, 0xe1, 0x93, 0x68, 0xce, 0x7c, 0xf3,\n\t0x72, 0x1d, 0xc2, 0xaa, 0xf4, 0x03, 0x05, 0x60, 0x82, 0x28, 0xa0,\n\t0xa8, 0x62, 0xbe, 0x2a, 0xb0, 0x6c, 0xcf, 0xbd, 0x5c, 0x9e, 0x24,\n\t0x2c, 0x3d, 0x04, 0xa4, 0x80, 0x32, 0x0a, 0xe7, 0xbd, 0x84, 0xc2,\n\t0xc3, 0xfc, 0x56, 0xf5, 0xf2, 0xc9, 0xfd, 0x57, 0xe9, 0xb2, 0xff,\n\t0x28, 0x1a, 0x00, 0x5f, 0x41, 0x44, 0x40, 0xbe, 0x55, 0x70, 0x2e,\n\t0x14, 0x37, 0xa8, 0x01, 0x0e, 0xf0, 0xa7, 0x94, 0x4f, 0x24, 0x10,\n\t0x07, 0xa5, 0xb0, 0x8a, 0x03, 0x6b, 0x90, 0x83, 0xe1, 0x49, 0xcf,\n\t0x00, 0x5c, 0x10, 0x85, 0x28, 0x58, 0xc1, 0x39, 0x1e, 0xd0, 0xe0,\n\t0x06, 0x34, 0xf8, 0x84, 0x55, 0x7a, 0xf0, 0xc1, 0x10, 0x5a, 0x65,\n\t0x07, 0x1f, 0xbc, 0x01, 0x29, 0xdc, 0xe7, 0x9b, 0x08, 0x80, 0x42,\n\t0x7e, 0x6e, 0x62, 0x14, 0x2b, 0x4a, 0xc1, 0xc1, 0x9e, 0x78, 0x10,\n\t0x84, 0x3d, 0x58, 0x8a, 0x2e, 0x74, 0x50, 0x42, 0x1e, 0xe8, 0x30,\n\t0x07, 0xfe, 0x29, 0x1c, 0x05, 0xdc, 0x04, 0x48, 0x40, 0x50, 0x44,\n\t0x50, 0x54, 0xab, 0xd8, 0xc1, 0x0d, 0x74, 0x60, 0x40, 0x9e, 0x38,\n\t0x10, 0x84, 0x39, 0xa8, 0x21, 0x4f, 0x4a, 0x81, 0x83, 0x12, 0xea,\n\t0x40, 0x17, 0x4a, 0x19, 0x45, 0x15, 0x69, 0x80, 0x83, 0x55, 0x78,\n\t0xe2, 0x7b, 0xd9, 0x31, 0x00, 0x29, 0x0a, 0xb8, 0xab, 0x4f, 0xd0,\n\t0xe0, 0x8c, 0x90, 0xe8, 0xc9, 0x2a, 0xaa, 0x78, 0x83, 0x1b, 0x88,\n\t0x90, 0x27, 0xbd, 0x20, 0x61, 0x1b, 0xdb, 0xf8, 0xc6, 0x95, 0xe8,\n\t0x02, 0x85, 0x20, 0xdc, 0x41, 0x2f, 0x62, 0x11, 0xbd, 0x16, 0xbe,\n\t0x70, 0x83, 0xbb, 0xba, 0x21, 0x0d, 0x7c, 0xd8, 0x13, 0x39, 0x72,\n\t0xf1, 0x13, 0xbd, 0x50, 0x09, 0x2b, 0x78, 0x30, 0xc7, 0x36, 0x1e,\n\t0x32, 0x91, 0x29, 0x59, 0x64, 0x23, 0xdf, 0x08, 0x02, 0x22, 0x92,\n\t0x6f, 0x14, 0x31, 0x7c, 0x93, 0x19, 0xcf, 0x58, 0xc7, 0x95, 0x50,\n\t0xb1, 0x84, 0x37, 0xd8, 0xc1, 0x27, 0x46, 0x31, 0x8a, 0x4f, 0xe8,\n\t0x60, 0x8e, 0x34, 0xa8, 0x81, 0x23, 0x43, 0x39, 0xca, 0x52, 0x9e,\n\t0xd2, 0x91, 0x3a, 0xa8, 0xe1, 0x17, 0xa5, 0x27, 0x00, 0x1f, 0x90,\n\t0xef, 0x88, 0x48, 0xdc, 0x01, 0x0e, 0x76, 0xd0, 0xc4, 0x9e, 0x38,\n\t0x30, 0x85, 0x29, 0x5c, 0x65, 0x02, 0x7f, 0x20, 0x84, 0x1f, 0x00,\n\t0xb3, 0x91, 0x29, 0xa4, 0x20, 0x03, 0x4d, 0xc1, 0x42, 0x98, 0x85,\n\t0xe2, 0x85, 0xbd, 0x14, 0x95, 0x2e, 0x56, 0x81, 0xc5, 0xa5, 0xf0,\n\t0xa2, 0x16, 0x3f, 0x50, 0x65, 0x23, 0xe7, 0x58, 0x83, 0x1f, 0x1c,\n\t0x43, 0x1a, 0x9c, 0xc8, 0xe6, 0x36, 0x1d, 0xd9, 0xcd, 0x5a, 0xac,\n\t0x24, 0x80, 0xef, 0xd1, 0x00, 0xf9, 0x00, 0xf9, 0xbb, 0xb5, 0x3d,\n\t0xe3, 0x18, 0x41, 0x48, 0x60, 0x0d, 0xe6, 0x39, 0x4f, 0x62, 0x42,\n\t0xa3, 0x1a, 0xd5, 0xfe, 0xa0, 0x06, 0x3c, 0xe5, 0x49, 0xcf, 0x6e,\n\t0x0a, 0x01, 0x1a, 0xc9, 0xc8, 0xe4, 0x10, 0x7d, 0x53, 0x44, 0x76,\n\t0xc2, 0xce, 0x9d, 0xd5, 0x88, 0xc6, 0x31, 0xa0, 0x10, 0x84, 0x1f,\n\t0xfc, 0x20, 0x08, 0x50, 0x58, 0x86, 0x34, 0xf2, 0x49, 0x0d, 0x6a,\n\t0x24, 0x74, 0xa1, 0x0d, 0x0d, 0x02, 0x44, 0x25, 0x5a, 0x8d, 0x80,\n\t0xaa, 0x64, 0x96, 0x00, 0x08, 0x40, 0x00, 0x04, 0x40, 0x52, 0x01,\n\t0x88, 0x94, 0x5e, 0xb6, 0x84, 0x61, 0xf3, 0x10, 0x8a, 0x4f, 0x6a,\n\t0x48, 0x23, 0x1a, 0xd1, 0x98, 0x28, 0x45, 0x2b, 0x5a, 0xd1, 0x96,\n\t0xbe, 0x34, 0xa6, 0x2d, 0xed, 0xa8, 0x9b, 0x0e, 0x14, 0x8a, 0x08,\n\t0x44, 0xc0, 0x03, 0x33, 0x38, 0x82, 0x50, 0x87, 0x3a, 0x03, 0x0f,\n\t0x44, 0x80, 0x2f, 0x43, 0x11, 0xe3, 0x0b, 0x31, 0x29, 0xaa, 0x57,\n\t0x38, 0xf5, 0xa9, 0x50, 0x5d, 0x09, 0x42, 0x69, 0x6a, 0xd1, 0x99,\n\t0x52, 0xf5, 0xaa, 0x16, 0xbd, 0xaa, 0x4e, 0x49, 0x15, 0x8c, 0x5a,\n\t0xa8, 0xa1, 0x09, 0x4f, 0x08, 0xab, 0x58, 0xc7, 0x1a, 0x56, 0x27,\n\t0xcc, 0x80, 0x03, 0xcd, 0xec, 0x88, 0x0b, 0x5f, 0x88, 0xcb, 0x17,\n\t0xad, 0xed, 0x17, 0x70, 0x8d, 0x6b, 0x5c, 0x79, 0x91, 0xc9, 0xa9,\n\t0x62, 0xf5, 0xae, 0x78, 0xa5, 0x69, 0x47, 0x77, 0x11, 0x8c, 0xaf,\n\t0x92, 0xf5, 0xaf, 0x80, 0x75, 0x82, 0x07, 0xd2, 0xaa, 0x91, 0x22,\n\t0x1a, 0xf1, 0x4d, 0x6b, 0x4b, 0xc6, 0x34, 0x16, 0xcb, 0x58, 0xc6,\n\t0x26, 0x83, 0xae, 0x29, 0xb1, 0x6b, 0x5e, 0x27, 0x4b, 0xd5, 0x8e,\n\t0xd6, 0xe2, 0xaf, 0x67, 0x40, 0xc3, 0x19, 0x30, 0xbb, 0x59, 0xb2,\n\t0x1e, 0x21, 0x02, 0x60, 0xec, 0x88, 0x61, 0xa3, 0x89, 0xa0, 0x57,\n\t0xfc, 0x62, 0x1a, 0x79, 0x9d, 0xc6, 0x2f, 0x62, 0x28, 0x59, 0xca,\n\t0x4e, 0xb6, 0x1a, 0xd0, 0x70, 0xfe, 0xc3, 0x5f, 0xd1, 0x40, 0xa5,\n\t0x3a, 0xa0, 0x61, 0xac, 0x69, 0xa8, 0x43, 0x1d, 0xe4, 0x00, 0x87,\n\t0xce, 0x86, 0xb5, 0x09, 0x1e, 0xf8, 0x10, 0x5e, 0x6c, 0x40, 0x3e,\n\t0x50, 0x90, 0x16, 0x3f, 0xa6, 0x9d, 0x06, 0x3e, 0x97, 0xcb, 0x5c,\n\t0xd5, 0xb2, 0x96, 0x17, 0xcf, 0xb0, 0xaa, 0x6b, 0xef, 0x0a, 0xdb,\n\t0x27, 0x30, 0x81, 0xac, 0xb9, 0x35, 0x92, 0x1f, 0xe6, 0x30, 0xd6,\n\t0x3a, 0x68, 0xb7, 0x0f, 0x75, 0x80, 0x03, 0x59, 0x3b, 0x10, 0x5a,\n\t0x91, 0x64, 0x10, 0x9a, 0xa2, 0x0a, 0xc7, 0x33, 0x9c, 0xc1, 0xde,\n\t0xf6, 0x3a, 0xe3, 0x19, 0xe1, 0x90, 0x2a, 0x74, 0xa5, 0x3b, 0xdd,\n\t0xca, 0x46, 0xe3, 0x09, 0x4a, 0x20, 0xeb, 0x19, 0xbc, 0x5b, 0x28,\n\t0xee, 0x8a, 0x55, 0x0e, 0x9b, 0xf2, 0xc3, 0x1f, 0x6e, 0x3b, 0x56,\n\t0x0f, 0x94, 0xf7, 0x20, 0x62, 0x2c, 0xee, 0x71, 0x4b, 0xcb, 0x8b,\n\t0x06, 0x3b, 0xd8, 0xc1, 0x3c, 0x69, 0x6d, 0x7d, 0xaf, 0xea, 0x86,\n\t0x24, 0x5c, 0x77, 0xac, 0x68, 0xd8, 0x57, 0x1f, 0xe6, 0xe0, 0xdb,\n\t0x27, 0xa0, 0xa1, 0x0e, 0xb6, 0x1a, 0x30, 0x59, 0x9b, 0x10, 0x01,\n\t0x8f, 0x28, 0x15, 0xbd, 0x4d, 0x85, 0x6a, 0x54, 0xe5, 0x1b, 0xdd,\n\t0x09, 0x63, 0x15, 0xb6, 0x4a, 0x48, 0x02, 0x60, 0xe7, 0xd0, 0x87,\n\t0x3f, 0xf4, 0x16, 0xb3, 0x68, 0x98, 0x83, 0x6e, 0xc5, 0xfb, 0xd7,\n\t0x23, 0x08, 0xf7, 0x20, 0xf0, 0x7b, 0xa1, 0x71, 0xb9, 0x27, 0x61,\n\t0x17, 0x57, 0xc3, 0x0d, 0x4b, 0xb0, 0x30, 0x8e, 0x09, 0x0c, 0xd8,\n\t0xb0, 0x9e, 0xa1, 0xc3, 0x64, 0x2d, 0x31, 0x47, 0x20, 0xf0, 0x4c,\n\t0xb6, 0x12, 0x79, 0xbe, 0x2e, 0xbe, 0xaa, 0x34, 0x9e, 0xb0, 0x04,\n\t0x24, 0x24, 0x41, 0x09, 0x60, 0x0e, 0xb3, 0x98, 0xc7, 0x4c, 0xe6,\n\t0x32, 0x87, 0xd9, 0x03, 0x1d, 0x81, 0x80, 0xfe, 0x90, 0x0f, 0xbb,\n\t0x52, 0x2c, 0x67, 0x99, 0xa6, 0xd2, 0x88, 0x02, 0x12, 0xe6, 0x4c,\n\t0xe7, 0x3a, 0xdb, 0xf9, 0xce, 0x78, 0xbe, 0x33, 0x07, 0xd4, 0xba,\n\t0xe6, 0xb6, 0x72, 0xae, 0xc8, 0x13, 0xae, 0xc6, 0x32, 0x80, 0x40,\n\t0xe8, 0x42, 0x1b, 0xfa, 0xd0, 0x88, 0x4e, 0xf4, 0xa1, 0x67, 0x40,\n\t0x58, 0x81, 0x50, 0x59, 0xc8, 0x4c, 0x8d, 0x8d, 0x8a, 0x99, 0x03,\n\t0xe8, 0xe9, 0x0a, 0xda, 0x0b, 0x57, 0xc8, 0xb4, 0xa6, 0x37, 0xcd,\n\t0xe9, 0x4e, 0x7b, 0xba, 0xd3, 0x44, 0x00, 0xd7, 0x46, 0x1e, 0xfd,\n\t0x47, 0x29, 0x8e, 0xaa, 0x17, 0xbe, 0xb8, 0xc5, 0x2d, 0x7c, 0x01,\n\t0x59, 0xd8, 0x54, 0xda, 0xb5, 0xd1, 0xf0, 0x02, 0x16, 0xb2, 0x40,\n\t0xeb, 0x5a, 0xdb, 0xfa, 0xd6, 0xb8, 0xce, 0x75, 0xae, 0x89, 0x30,\n\t0xe5, 0xf8, 0x95, 0x5a, 0x6a, 0xbe, 0xd0, 0x03, 0x20, 0x1e, 0x05,\n\t0x88, 0x41, 0xdc, 0xa2, 0x17, 0x99, 0xbc, 0x96, 0x9b, 0xb3, 0x0c,\n\t0x5b, 0x2d, 0x38, 0xfb, 0xd9, 0xd0, 0x8e, 0xb6, 0xb4, 0xa7, 0x4d,\n\t0x6d, 0x2d, 0x60, 0xe1, 0xc7, 0x46, 0x19, 0xa3, 0x90, 0x17, 0xbc,\n\t0x14, 0x6c, 0xed, 0x61, 0x4e, 0x85, 0xfa, 0x43, 0x36, 0x20, 0x29,\n\t0xb0, 0xe8, 0x32, 0x37, 0xd0, 0xd0, 0xa8, 0xb6, 0xba, 0xd7, 0x3d,\n\t0xed, 0x6b, 0x6f, 0x24, 0xc1, 0xdb, 0x1e, 0x95, 0x2f, 0xbe, 0xcd,\n\t0x29, 0x3b, 0x25, 0xbb, 0x67, 0xbc, 0x58, 0x46, 0x15, 0x98, 0xc1,\n\t0x8c, 0x66, 0xc4, 0x34, 0xab, 0xae, 0x95, 0x86, 0x17, 0xd8, 0x4d,\n\t0xf0, 0x75, 0xef, 0x19, 0x2f, 0x29, 0x5d, 0xea, 0x63, 0xf4, 0x00,\n\t0x31, 0x5b, 0x0d, 0xa2, 0xd5, 0x72, 0xe9, 0x45, 0x14, 0xa6, 0x30,\n\t0x05, 0x29, 0x48, 0x81, 0x0a, 0xfb, 0x6e, 0x06, 0xc0, 0xf3, 0x0a,\n\t0xdb, 0x81, 0x17, 0xfc, 0xe3, 0xcf, 0xde, 0x02, 0x11, 0xfe, 0xb0,\n\t0x3d, 0xc0, 0xe2, 0x82, 0x62, 0x83, 0x2a, 0x4e, 0xf9, 0x53, 0x75,\n\t0x41, 0xb0, 0x5a, 0xfd, 0xe1, 0x16, 0xae, 0x50, 0xb9, 0xcc, 0x9d,\n\t0x3a, 0x71, 0x8b, 0x5b, 0xbc, 0xe2, 0x18, 0x67, 0xc6, 0x44, 0x5f,\n\t0x2b, 0x0d, 0x68, 0x00, 0xe1, 0x05, 0x40, 0x0f, 0xba, 0xd0, 0x87,\n\t0x4e, 0xf4, 0xa2, 0x03, 0x9d, 0x03, 0xa2, 0x16, 0x2d, 0x30, 0x96,\n\t0xbe, 0xf4, 0x70, 0x7c, 0xe3, 0xe9, 0x50, 0x8f, 0xba, 0xd4, 0x69,\n\t0x75, 0xae, 0x6c, 0x80, 0x43, 0xea, 0x58, 0x97, 0x3a, 0x38, 0x8e,\n\t0x61, 0xf3, 0xae, 0x4b, 0xa1, 0xe2, 0x55, 0xd0, 0xf8, 0x6b, 0xa9,\n\t0xa1, 0x04, 0x19, 0x18, 0x41, 0x06, 0x2e, 0x48, 0x81, 0xda, 0xd7,\n\t0xce, 0xf6, 0xb6, 0xbb, 0x9d, 0xed, 0x2a, 0x90, 0xb2, 0x47, 0x22,\n\t0x30, 0x8e, 0xba, 0xd7, 0xfd, 0x1d, 0xec, 0xc8, 0xbb, 0xde, 0xf7,\n\t0xbe, 0xf7, 0x75, 0x10, 0xe2, 0x5c, 0x7d, 0xd0, 0x06, 0xdf, 0x07,\n\t0x4f, 0x78, 0x73, 0x50, 0xc1, 0xeb, 0x5d, 0xaf, 0x38, 0x33, 0xae,\n\t0x41, 0xdf, 0x8a, 0x5e, 0xc3, 0x10, 0x20, 0xee, 0x03, 0x1f, 0xe6,\n\t0x60, 0x84, 0xb4, 0xaf, 0xe0, 0xf2, 0x98, 0xcf, 0xbc, 0xe6, 0x37,\n\t0x7f, 0xf9, 0x83, 0x9b, 0x98, 0x1c, 0x76, 0x1f, 0x47, 0x39, 0xda,\n\t0x41, 0xf8, 0xc1, 0xb7, 0xa3, 0x10, 0x80, 0x17, 0xc4, 0x39, 0x4a,\n\t0xcf, 0xfa, 0x76, 0x30, 0xa3, 0xe2, 0x88, 0xef, 0x7a, 0xd8, 0xe9,\n\t0x7b, 0x8d, 0xbf, 0xd3, 0x29, 0x10, 0x7d, 0x10, 0x03, 0x0c, 0x58,\n\t0xc0, 0xfb, 0xde, 0xfb, 0xfe, 0xf7, 0xc0, 0xe7, 0xbd, 0xe7, 0x3b,\n\t0x22, 0x00, 0x78, 0x84, 0x7e, 0x1c, 0xee, 0x60, 0x3d, 0xdf, 0xb5,\n\t0x01, 0xf8, 0xc0, 0x93, 0x5e, 0xf9, 0x83, 0xb7, 0x46, 0xec, 0xbd,\n\t0x3e, 0x05, 0x2a, 0x88, 0x9d, 0xa6, 0xb5, 0xaf, 0x55, 0x20, 0xc4,\n\t0xfe, 0xd0, 0x82, 0xee, 0x7b, 0xff, 0xfb, 0xe0, 0x0f, 0x7f, 0xf7,\n\t0xe5, 0xee, 0x11, 0x14, 0x1c, 0xbf, 0x1c, 0xd0, 0xd7, 0x3b, 0x37,\n\t0x9a, 0x1f, 0x88, 0x6d, 0xa4, 0x9f, 0xef, 0xae, 0x87, 0xfd, 0xf4,\n\t0x2d, 0x4e, 0x05, 0x66, 0x60, 0xdf, 0x10, 0xe7, 0xaa, 0x83, 0x0c,\n\t0xc4, 0xcf, 0x7f, 0xf1, 0x93, 0x5f, 0xad, 0xc7, 0x37, 0x0e, 0xcf,\n\t0x07, 0x7d, 0x7e, 0xd7, 0x7c, 0x82, 0xc0, 0x0d, 0xef, 0xb7, 0x77,\n\t0x86, 0x27, 0x7f, 0xf3, 0x67, 0x7d, 0xf9, 0x84, 0x7f, 0x80, 0x67,\n\t0x04, 0x31, 0x30, 0x81, 0x14, 0x58, 0x81, 0x16, 0x78, 0x81, 0x31,\n\t0xc0, 0x01, 0x24, 0x87, 0x60, 0xca, 0x70, 0x7c, 0x78, 0xf7, 0x7e,\n\t0xcc, 0x67, 0x80, 0x08, 0x98, 0x80, 0x79, 0x27, 0x7d, 0xf3, 0xd7,\n\t0x75, 0xd6, 0x07, 0x81, 0xe7, 0xb2, 0x5d, 0x4c, 0xd0, 0x82, 0x2e,\n\t0xf8, 0x82, 0x30, 0x18, 0x83, 0x4c, 0xe0, 0x04, 0x47, 0x30, 0x7c,\n\t0x1c, 0x61, 0x7e, 0xc7, 0x37, 0x80, 0xca, 0x77, 0x0e, 0x82, 0xd0,\n\t0x7c, 0x7d, 0x20, 0x08, 0xdb, 0xa0, 0x83, 0xe9, 0x47, 0x0d, 0x54,\n\t0xc0, 0x80, 0xb1, 0x67, 0x05, 0x76, 0xe0, 0x83, 0xdb, 0xd5, 0x64,\n\t0x4c, 0x08, 0x58, 0x47, 0x70, 0x60, 0x07, 0x41, 0x77, 0x1e, 0x98,\n\t0x80, 0x21, 0xc8, 0x7e, 0xda, 0xb0, 0x0e, 0x24, 0xc8, 0x0e, 0xd6,\n\t0x50, 0x05, 0x46, 0xd8, 0x75, 0x79, 0x10, 0x79, 0x3e, 0xc8, 0x63,\n\t0x4d, 0x38, 0x86, 0x4f, 0xe0, 0x63, 0x1f, 0x51, 0x7c, 0x01, 0x28,\n\t0x84, 0xa5, 0xc7, 0x83, 0x3e, 0x58, 0x26, 0x84, 0xb0, 0x0d, 0x58,\n\t0x98, 0x80, 0xe6, 0xc0, 0x0c, 0x45, 0xc8, 0x80, 0x56, 0x90, 0x07,\n\t0x6d, 0x58, 0x26, 0x75, 0x00, 0x65, 0x64, 0xe8, 0x84, 0x1b, 0x68,\n\t0x10, 0x1e, 0x10, 0x80, 0xe8, 0xf7, 0x7e, 0xdb, 0x90, 0x87, 0x65,\n\t0x62, 0x08, 0xfe, 0xdb, 0xb0, 0x7a, 0x72, 0xd8, 0x0c, 0x55, 0x70,\n\t0x78, 0x77, 0x08, 0x86, 0x6d, 0x98, 0x06, 0x32, 0x38, 0x89, 0x94,\n\t0xc8, 0x04, 0x66, 0xf8, 0x11, 0x06, 0xd0, 0x81, 0xc7, 0x97, 0x7c,\n\t0xe9, 0xb7, 0x0e, 0xa8, 0x67, 0x88, 0x3f, 0x58, 0x08, 0x89, 0xb8,\n\t0x0e, 0x6a, 0xc8, 0x77, 0xeb, 0x70, 0x0e, 0xda, 0x90, 0x84, 0xa0,\n\t0xd8, 0x07, 0x70, 0x90, 0x04, 0x79, 0xe6, 0x65, 0x49, 0x10, 0x8b,\n\t0xb2, 0x38, 0x8b, 0xb3, 0xa8, 0x04, 0x33, 0x00, 0x85, 0x08, 0x11,\n\t0x88, 0xe7, 0x57, 0x8a, 0x83, 0x77, 0x0e, 0xb6, 0xb7, 0x8a, 0x82,\n\t0x40, 0x08, 0x85, 0xa0, 0x0d, 0xda, 0xb0, 0x0d, 0xdc, 0x70, 0x8c,\n\t0xc7, 0xb8, 0x0d, 0xc4, 0x68, 0x08, 0x82, 0x80, 0x7b, 0xab, 0x58,\n\t0x07, 0x69, 0x60, 0x06, 0xd2, 0x38, 0x8d, 0xd4, 0x78, 0x04, 0x1d,\n\t0x70, 0x8d, 0xd8, 0x98, 0x8d, 0xd9, 0xc8, 0x01, 0x08, 0x20, 0x13,\n\t0x99, 0x28, 0x88, 0x09, 0xc8, 0x86, 0xab, 0x38, 0x8e, 0x86, 0x58,\n\t0x08, 0x2a, 0x08, 0x2f, 0x74, 0x20, 0x01, 0x7e, 0xa1, 0x8b, 0x9b,\n\t0x98, 0x80, 0xdc, 0xd0, 0x83, 0xe4, 0x18, 0x8f, 0xe7, 0x22, 0x8a,\n\t0xf0, 0xc8, 0x29, 0x81, 0x00, 0x06, 0xa0, 0x81, 0x86, 0x69, 0xe8,\n\t0x8e, 0xf5, 0x28, 0x8f, 0xfe, 0x58, 0x26, 0x85, 0x70, 0x0e, 0x9f,\n\t0x68, 0x8f, 0x71, 0xb0, 0x00, 0x2d, 0x04, 0x7a, 0xbb, 0x18, 0x8e,\n\t0xbf, 0xf8, 0x8f, 0xf1, 0x78, 0x85, 0x85, 0x78, 0x2e, 0x16, 0xf0,\n\t0x1e, 0x1d, 0x10, 0x80, 0xa2, 0xc7, 0x8b, 0xbd, 0x58, 0x08, 0x0d,\n\t0xc7, 0x90, 0xcd, 0xe7, 0x07, 0x40, 0xc8, 0x0e, 0xe2, 0x68, 0x8f,\n\t0x60, 0x80, 0x8b, 0x45, 0x03, 0x0f, 0xde, 0x50, 0x92, 0x26, 0xe9,\n\t0x0d, 0xe2, 0x80, 0x0e, 0xe9, 0x80, 0x0e, 0x2c, 0xd9, 0x92, 0x2e,\n\t0xc9, 0x92, 0xe9, 0xa0, 0xfe, 0x0e, 0xdd, 0x40, 0x26, 0x1a, 0xa9,\n\t0x84, 0x7b, 0x30, 0x0e, 0xe8, 0xa0, 0x0e, 0x03, 0x09, 0x29, 0x81,\n\t0xf0, 0x06, 0x06, 0xf9, 0x3e, 0x8f, 0x30, 0x09, 0x42, 0x39, 0x94,\n\t0xd9, 0x53, 0x0c, 0x46, 0x79, 0x94, 0x48, 0x99, 0x94, 0xc5, 0x90,\n\t0x0b, 0x6c, 0x50, 0x25, 0x35, 0xc9, 0x2f, 0x80, 0x90, 0x24, 0x46,\n\t0x99, 0x0d, 0x19, 0xd9, 0x07, 0x81, 0x10, 0x07, 0xea, 0x28, 0x40,\n\t0x18, 0x80, 0x3c, 0x5c, 0x23, 0x32, 0x0b, 0x32, 0x0c, 0xa7, 0x50,\n\t0x0b, 0x78, 0xe0, 0x94, 0x4f, 0x19, 0x62, 0x6c, 0x90, 0x0b, 0x2b,\n\t0x32, 0x26, 0xda, 0x67, 0x07, 0xff, 0x27, 0x3d, 0x22, 0x90, 0x3b,\n\t0x74, 0xe3, 0x95, 0x0b, 0x22, 0x0c, 0xa7, 0x60, 0x0b, 0x43, 0x02,\n\t0x6e, 0xff, 0x68, 0x25, 0x6c, 0x90, 0x25, 0xdc, 0x31, 0x0b, 0xda,\n\t0xc2, 0x93, 0x71, 0xd0, 0x96, 0xd2, 0x43, 0x3d, 0x0c, 0x53, 0x3a,\n\t0x75, 0x33, 0x97, 0xd5, 0x71, 0x0a, 0xb3, 0xd0, 0x06, 0x54, 0xd2,\n\t0x34, 0xe3, 0x68, 0x25, 0x72, 0xb0, 0x06, 0x6d, 0xc3, 0x1d, 0x9a,\n\t0x80, 0x0b, 0x00, 0x66, 0x8f, 0x6f, 0xd0, 0x8d, 0x02, 0x54, 0x10,\n\t0x02, 0x60, 0x29, 0xc8, 0x23, 0x09, 0x86, 0x83, 0x98, 0x42, 0x23,\n\t0x0c, 0x34, 0xb2, 0x06, 0x6c, 0xb0, 0x07, 0x8f, 0xd2, 0x34, 0xaa,\n\t0xb9, 0x9a, 0x8e, 0x09, 0x08, 0x77, 0xb0, 0x06, 0xb3, 0x90, 0x23,\n\t0xf3, 0xa1, 0x09, 0xa3, 0xf0, 0x30, 0xf0, 0xd2, 0x07, 0x61, 0xf0,\n\t0x93, 0x9b, 0xc9, 0x99, 0x9e, 0x89, 0x3c, 0x94, 0x20, 0x97, 0x1c,\n\t0x42, 0x21, 0x74, 0x99, 0x0a, 0x26, 0x82, 0x0c, 0x6d, 0xc0, 0x06,\n\t0x77, 0x20, 0x07, 0x7b, 0xb0, 0x07, 0x80, 0x00, 0x08, 0x7b, 0x20,\n\t0x07, 0x77, 0x30, 0x36, 0x28, 0xa2, 0x0a, 0xb2, 0x39, 0x1d, 0x96,\n\t0xf0, 0x09, 0xb6, 0x49, 0x27, 0x7e, 0xfe, 0x10, 0x08, 0x76, 0x50,\n\t0x04, 0x7f, 0x08, 0x3e, 0x8c, 0x41, 0x39, 0x9f, 0x69, 0x38, 0x60,\n\t0x99, 0x0b, 0xb6, 0x80, 0x22, 0xa9, 0xf0, 0x95, 0xa6, 0xe1, 0x35,\n\t0xa7, 0x70, 0x0a, 0xa9, 0x90, 0x0a, 0xaa, 0xf0, 0x9e, 0xed, 0x89,\n\t0x37, 0xeb, 0x99, 0x27, 0x94, 0x40, 0x0b, 0x97, 0x69, 0x2b, 0x81,\n\t0xc0, 0x07, 0x60, 0x90, 0x95, 0xbb, 0x19, 0x1a, 0x22, 0x40, 0x3a,\n\t0x5c, 0x39, 0x09, 0x42, 0x42, 0x24, 0x46, 0xb2, 0x07, 0xc8, 0x60,\n\t0x36, 0x73, 0x59, 0x21, 0x88, 0x53, 0x09, 0x93, 0x80, 0x9f, 0x83,\n\t0xb2, 0x9d, 0xdc, 0x09, 0x06, 0xa0, 0xf5, 0x9f, 0x1d, 0x61, 0x3b,\n\t0x85, 0x59, 0x39, 0x5d, 0xf0, 0x97, 0x85, 0x72, 0x2b, 0x0a, 0x2a,\n\t0x9a, 0xf4, 0xa1, 0x09, 0xac, 0xf3, 0x08, 0x5d, 0x40, 0x24, 0x81,\n\t0x70, 0xa2, 0x74, 0xf0, 0x06, 0x45, 0xb0, 0x00, 0x22, 0x69, 0xa1,\n\t0x04, 0x01, 0x01, 0xaf, 0x92, 0x3b, 0x90, 0x90, 0x9f, 0x90, 0x22,\n\t0x31, 0x20, 0xba, 0x20, 0x22, 0x3a, 0x09, 0x92, 0x00, 0x09, 0x6a,\n\t0x10, 0x07, 0x6f, 0xf0, 0x06, 0x61, 0x00, 0x06, 0x16, 0x20, 0x01,\n\t0xdf, 0xe9, 0xa2, 0x06, 0xc1, 0x18, 0x8e, 0x50, 0x98, 0x6b, 0x50,\n\t0x95, 0x7e, 0x20, 0x07, 0x56, 0x73, 0xa3, 0xc4, 0xa1, 0x3a, 0xac,\n\t0x23, 0x09, 0x8e, 0x70, 0x11, 0x0b, 0xb0, 0x00, 0x06, 0x60, 0x52,\n\t0x46, 0x2a, 0x14, 0x10, 0xe0, 0x23, 0x92, 0xf0, 0x08, 0x77, 0x50,\n\t0x95, 0x35, 0x96, 0x0b, 0x97, 0x03, 0xa5, 0x52, 0xca, 0x3b, 0x92,\n\t0xb0, 0x1b, 0x2d, 0xba, 0xa5, 0x21, 0x21, 0x1a, 0x89, 0x30, 0xa3,\n\t0x62, 0xea, 0x07, 0x5d, 0x20, 0x09, 0x94, 0x50, 0x09, 0xa7, 0x53,\n\t0xa6, 0xd4, 0x91, 0x3a, 0xa7, 0x53, 0x09, 0x94, 0x80, 0x3b, 0x5c,\n\t0x93, 0x09, 0x20, 0xd0, 0x68, 0x6c, 0x4a, 0x13, 0xfe, 0x06, 0xc0,\n\t0x01, 0x34, 0x0a, 0x2f, 0x5d, 0x50, 0x39, 0xbb, 0x43, 0xa7, 0x94,\n\t0xd0, 0xa8, 0x8e, 0xda, 0xa8, 0x8b, 0x8a, 0x3c, 0x8f, 0x20, 0x02,\n\t0x81, 0x33, 0xa8, 0x5b, 0x71, 0x00, 0x71, 0xe0, 0x8c, 0xa7, 0x92,\n\t0xa8, 0x5c, 0xd9, 0xa9, 0x86, 0xd9, 0x08, 0x90, 0xd0, 0x05, 0x66,\n\t0x20, 0xa8, 0x96, 0x5a, 0x13, 0x98, 0xaa, 0xa9, 0x88, 0xea, 0xa9,\n\t0x9e, 0x8a, 0x3b, 0x8f, 0xb0, 0x09, 0x6a, 0x90, 0x06, 0x64, 0x20,\n\t0x06, 0xba, 0x59, 0xaa, 0x97, 0x9a, 0xa9, 0xfc, 0x32, 0xa7, 0x7e,\n\t0x8a, 0x3c, 0xd7, 0xb3, 0xa8, 0x8d, 0xf0, 0x08, 0xa1, 0xfa, 0xaa,\n\t0x70, 0x40, 0x06, 0x63, 0x30, 0x06, 0xb2, 0x4a, 0xab, 0x5d, 0x71,\n\t0xaa, 0xfc, 0x32, 0x03, 0x36, 0x30, 0x18, 0x8e, 0xd0, 0xac, 0xce,\n\t0xea, 0x08, 0x9b, 0x61, 0x03, 0x36, 0xd0, 0x05, 0x6a, 0x60, 0x06,\n\t0x69, 0x10, 0xac, 0xc3, 0x9a, 0xad, 0xc5, 0x6a, 0xac, 0xb5, 0x8a,\n\t0xaa, 0x84, 0x12, 0x08, 0x14, 0x10, 0x52, 0x06, 0xd0, 0x00, 0xe4,\n\t0x5a, 0xae, 0x0d, 0x90, 0xa5, 0x01, 0x80, 0x00, 0x63, 0x20, 0xac,\n\t0xd9, 0xda, 0xae, 0xc4, 0x3a, 0xab, 0xdc, 0x5a, 0x14, 0xc8, 0xaa,\n\t0x7d, 0xe1, 0xca, 0x11, 0x08, 0x20, 0x06, 0xee, 0xda, 0xae, 0x73,\n\t0x30, 0x07, 0xf0, 0x1a, 0xaf, 0x43, 0x31, 0xaf, 0xf6, 0x58, 0xaf,\n\t0x1b, 0x71, 0xaf, 0xf9, 0x4a, 0x06, 0xfb, 0xca, 0x07, 0x74, 0xd0,\n\t0xaf, 0xfe, 0x6a, 0x13, 0x00, 0xcb, 0x93, 0x02, 0xab, 0x11, 0x04,\n\t0x3b, 0xac, 0x70, 0xb0, 0xaf, 0x75, 0x90, 0x9a, 0x7c, 0xa0, 0xb0,\n\t0x0b, 0x4b, 0x13, 0x0d, 0xfb, 0xad, 0x0f, 0x9b, 0x10, 0xea, 0x4a,\n\t0xb1, 0x15, 0x4b, 0x28, 0x17, 0x9b, 0xb1, 0xf2, 0x6a, 0xab, 0xf4,\n\t0xda, 0x11, 0x12, 0x40, 0x07, 0xe7, 0x32, 0xb2, 0x24, 0xfb, 0xea,\n\t0xaf, 0x26, 0x1b, 0xb0, 0x28, 0xcb, 0x07, 0x2b, 0x8b, 0xb1, 0x2d,\n\t0x0b, 0x12, 0x1b, 0x7b, 0x7b, 0x1d, 0x8b, 0x10, 0x12, 0x20, 0xb3,\n\t0xd0, 0xc2, 0xb2, 0x35, 0x6b, 0xaa, 0x2f, 0xeb, 0xb0, 0x31, 0x3b,\n\t0xb3, 0x3f, 0xcb, 0xb0, 0x41, 0xcb, 0xb1, 0x43, 0xdb, 0xb3, 0x34,\n\t0x5b, 0xb4, 0x1c, 0x71, 0xb3, 0x66, 0x02, 0xae, 0x49, 0x5b, 0x2b,\n\t0x3e, 0xcb, 0xb4, 0x21, 0xe1, 0xb4, 0x65, 0x02, 0xb5, 0x1c, 0xb1,\n\t0xb3, 0x44, 0x4b, 0xb5, 0x32, 0x61, 0xb5, 0x56, 0x99, 0xb3, 0x07,\n\t0xa1, 0xb5, 0x4a, 0xcb, 0xb5, 0x5d, 0x7b, 0xb4, 0x38, 0x1b, 0xb5,\n\t0x9c, 0x32, 0xb5, 0x64, 0xdb, 0x11, 0x5e, 0x8b, 0xb5, 0x1b, 0x21,\n\t0xb6, 0x52, 0xbb, 0xb4, 0x6b, 0x6b, 0x10, 0x6d, 0x0b, 0xb6, 0x06,\n\t0x01, 0xb7, 0x9c, 0x92, 0xb0, 0x73, 0x7b, 0x86, 0x6f, 0xe0, 0xad,\n\t0x84, 0x22, 0x98, 0x06, 0xb1, 0x00, 0x74, 0xc0, 0xa4, 0x05, 0xb9,\n\t0xb7, 0x1f, 0x01, 0x06, 0x7e, 0x5b, 0x28, 0x85, 0xcb, 0x11, 0x02,\n\t0xd0, 0xb7, 0xda, 0xf7, 0x06, 0x45, 0x6a, 0xb8, 0x00, 0x10, 0x01,\n\t0xd0, 0x72, 0x8f, 0x6b, 0x0a, 0x00, 0x45, 0x90, 0xb8, 0x56, 0x59,\n\t0x04, 0x92, 0xeb, 0x11, 0x01, 0x80, 0xb8, 0x80, 0x29, 0xb7, 0x04,\n\t0x71, 0x00, 0x8e, 0xfb, 0xad, 0x5f, 0x10, 0xb9, 0x9d, 0x2b, 0x00,\n\t0x60, 0xc0, 0x07, 0x81, 0xa0, 0x5d, 0x7e, 0xf0, 0x06, 0xfe, 0xe9,\n\t0x11, 0x0b, 0x10, 0x06, 0x56, 0x79, 0xb5, 0xb8, 0x49, 0xaa, 0x9d,\n\t0x3b, 0x3d, 0x14, 0x10, 0x06, 0x74, 0xc0, 0x07, 0x2a, 0x8a, 0xbb,\n\t0x04, 0x21, 0x00, 0x1e, 0xf0, 0x06, 0x08, 0xfb, 0x06, 0x1a, 0x18,\n\t0xaf, 0x01, 0x01, 0x00, 0x3b\n};\n\nstatic const int _img_eat_length = 4636;\nstatic const char _img_happy[4282] = {\n\t0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x7f, 0x00, 0x7f, 0x00, 0xf7,\n\t0xee, 0x00, 0x00, 0x00, 0x00, 0x47, 0x9e, 0x9f, 0xae, 0xb8, 0x7b,\n\t0x2a, 0x97, 0xaf, 0xb9, 0xbd, 0x9c, 0xea, 0xc0, 0x4c, 0xee, 0xc3,\n\t0x4e, 0xf3, 0xc7, 0x4f, 0x09, 0x7a, 0xb5, 0x3f, 0xae, 0xb1, 0xb4,\n\t0xd2, 0xb9, 0x21, 0x92, 0xaf, 0xd6, 0xc2, 0x77, 0xef, 0xc3, 0x4c,\n\t0xf3, 0xc7, 0x4f, 0xe3, 0xba, 0x4a, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7,\n\t0x4f, 0x0c, 0x7e, 0xb9, 0x01, 0x81, 0xc5, 0x8e, 0xd1, 0xce, 0xd8,\n\t0xb1, 0x46, 0x06, 0x81, 0xc2, 0x40, 0xb9, 0xb3, 0x25, 0x93, 0xaa,\n\t0x64, 0x97, 0x79, 0xf3, 0xc7, 0x4f, 0xdb, 0xb4, 0x47, 0xf3, 0xc7,\n\t0x4f, 0xf3, 0xc7, 0x4f, 0xe9, 0xbf, 0x4c, 0xc7, 0xa2, 0x3f, 0xf3,\n\t0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f,\n\t0xf3, 0xc7, 0x4f, 0x01, 0x81, 0xc6, 0x00, 0x80, 0xc4, 0x0d, 0x7a,\n\t0xb2, 0x3a, 0xb4, 0xb5, 0x40, 0xba, 0xb3, 0xd7, 0xe2, 0xe2, 0x32,\n\t0x95, 0x8f, 0xc5, 0xa1, 0x3f, 0xf3, 0xc7, 0x4f, 0x0e, 0x72, 0xa5,\n\t0x00, 0x68, 0xa1, 0x32, 0x95, 0x8f, 0x00, 0x81, 0xc6, 0x02, 0x81,\n\t0xc4, 0x0a, 0x77, 0xb0, 0x40, 0xb8, 0xb2, 0x08, 0x73, 0xaa, 0x3c,\n\t0xaf, 0xa9, 0x41, 0xa5, 0xa0, 0xb1, 0xc6, 0xb6, 0x39, 0x3e, 0x47,\n\t0x39, 0x3f, 0x48, 0x37, 0x3f, 0x48, 0x33, 0x95, 0x8f, 0x39, 0x41,\n\t0x4a, 0x3a, 0x4a, 0x52, 0x3a, 0x55, 0x5b, 0x3b, 0x5d, 0x62, 0x3b,\n\t0x66, 0x6a, 0x3c, 0x6e, 0x71, 0x3c, 0x77, 0x79, 0x07, 0x6c, 0xa1,\n\t0x4e, 0x4d, 0x55, 0x67, 0x5c, 0x65, 0x5c, 0x6f, 0x72, 0xf3, 0xc7,\n\t0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xd9, 0xb2, 0x47, 0x9f,\n\t0x83, 0x5e, 0x33, 0x95, 0x8f, 0x56, 0x91, 0x79, 0x6c, 0x90, 0x70,\n\t0x71, 0xbd, 0x98, 0x40, 0xba, 0xb3, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7,\n\t0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xcb,\n\t0xa6, 0x42, 0xc3, 0x9f, 0x3f, 0xc3, 0xa0, 0x3f, 0xc2, 0x9f, 0x3f,\n\t0xc4, 0xa0, 0x3f, 0xf3, 0xc7, 0x4f, 0x93, 0x97, 0x5a, 0xbb, 0x9e,\n\t0x44, 0xa8, 0x9a, 0x4f, 0x88, 0x98, 0x63, 0xae, 0xb2, 0x71, 0xae,\n\t0xab, 0x68, 0xf2, 0xc6, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f,\n\t0xc1, 0x9f, 0x40, 0xf3, 0xc7, 0x4f, 0xc4, 0xa1, 0x40, 0xcc, 0xa7,\n\t0x42, 0xdb, 0xb4, 0x47, 0xe1, 0xbd, 0x52, 0xf3, 0xc7, 0x4f, 0xed,\n\t0xc2, 0x4d, 0xc8, 0xb6, 0x62, 0xa9, 0xc1, 0x79, 0xdc, 0xc3, 0x5b,\n\t0xf1, 0xc6, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf5, 0xc8,\n\t0x4f, 0xe7, 0xc5, 0x55, 0xf6, 0xc9, 0x50, 0xf0, 0xc6, 0x50, 0xef,\n\t0xd0, 0x6d, 0xd3, 0xc5, 0x61, 0xf2, 0xce, 0x66, 0x00, 0x81, 0xc6,\n\t0x00, 0x81, 0xc6, 0x00, 0x81, 0xc6, 0x06, 0x6c, 0xa1, 0x00, 0x67,\n\t0x9f, 0x02, 0x82, 0xc6, 0x04, 0x77, 0xb3, 0x00, 0x81, 0xc6, 0x00,\n\t0x67, 0x9e, 0x01, 0x68, 0x9f, 0x06, 0x6b, 0x9e, 0x10, 0x71, 0x9b,\n\t0x30, 0x78, 0x8d, 0x00, 0x81, 0xc6, 0x00, 0x67, 0xa0, 0x00, 0x6a,\n\t0xa2, 0x02, 0x6f, 0xa9, 0x00, 0x71, 0xad, 0x00, 0x75, 0xb4, 0x00,\n\t0x7a, 0xbb, 0x01, 0x81, 0xc5, 0x11, 0x7c, 0xb2, 0x2c, 0x7e, 0xa8,\n\t0x00, 0x7f, 0xc4, 0x72, 0xa4, 0xba, 0x99, 0x7b, 0x83, 0x40, 0xba,\n\t0xb3, 0x40, 0xba, 0xb3, 0x3d, 0x8c, 0x8b, 0x3d, 0x83, 0x83, 0x33,\n\t0x95, 0x8f, 0x3d, 0x92, 0x8d, 0x34, 0x97, 0x91, 0x3e, 0x94, 0x92,\n\t0x35, 0x9a, 0x94, 0x3a, 0x9d, 0x99, 0x2b, 0x8f, 0x92, 0x3b, 0xa3,\n\t0x9e, 0x37, 0xa1, 0x9b, 0x40, 0xba, 0xb3, 0x1a, 0x88, 0xba, 0x18,\n\t0x94, 0xbe, 0x36, 0x94, 0xa9, 0x2a, 0x92, 0xb4, 0x3d, 0xaa, 0xa5,\n\t0x3e, 0xad, 0xa7, 0x3e, 0xb3, 0xad, 0x40, 0xba, 0xb3, 0x3e, 0xba,\n\t0xb3, 0x3d, 0xb5, 0xb3, 0x38, 0xb3, 0xb6, 0x2d, 0x9b, 0xa3, 0x4e,\n\t0x92, 0x8e, 0x73, 0xaa, 0x90, 0x40, 0xb4, 0xae, 0x4c, 0xbb, 0xac,\n\t0x40, 0xba, 0xb3, 0x4b, 0xbb, 0xb5, 0x44, 0xb9, 0xb3, 0x58, 0xb9,\n\t0xb4, 0x54, 0xb7, 0xa7, 0x6f, 0xb6, 0xb3, 0x5f, 0x9f, 0xab, 0x58,\n\t0xc2, 0xbc, 0x00, 0x81, 0xc6, 0x00, 0x82, 0xc8, 0x0c, 0x87, 0xc5,\n\t0x15, 0x8d, 0xc8, 0x24, 0x93, 0xce, 0x33, 0x9a, 0xd1, 0x3f, 0xa0,\n\t0xd4, 0x4d, 0xa7, 0xd7, 0x69, 0xb5, 0xdd, 0x78, 0xbc, 0xe1, 0x68,\n\t0xc8, 0xc3, 0x76, 0xcd, 0xc8, 0x7e, 0xd0, 0xcc, 0xe0, 0xe5, 0xe5,\n\t0xb0, 0x89, 0x90, 0x89, 0xb2, 0x86, 0x88, 0xb6, 0xb4, 0x95, 0xb4,\n\t0xb7, 0xaa, 0xb4, 0xb5, 0xbb, 0xb3, 0xb6, 0xca, 0xcc, 0xca, 0xc6,\n\t0xcc, 0xcc, 0xc5, 0xbc, 0x98, 0xc7, 0xb2, 0xb6, 0xda, 0xb1, 0xb7,\n\t0xe7, 0xb1, 0xb7, 0xf1, 0xb0, 0xb7, 0xf3, 0xb2, 0xb9, 0xe6, 0xaa,\n\t0xb1, 0xc9, 0x98, 0x9f, 0xbf, 0xd9, 0xb6, 0xc0, 0xc3, 0xb9, 0x97,\n\t0xd9, 0xd6, 0x87, 0xd4, 0xcf, 0xa9, 0xd2, 0xd1, 0xae, 0xe1, 0xdd,\n\t0x91, 0xc9, 0xe6, 0xa7, 0xd4, 0xec, 0xb6, 0xdb, 0xef, 0xb8, 0xe5,\n\t0xe3, 0xbf, 0xe0, 0xf1, 0xf9, 0xfd, 0xfc, 0xcc, 0xcc, 0xcc, 0xc8,\n\t0xca, 0xc7, 0xd6, 0xd7, 0xd7, 0xc9, 0xeb, 0xea, 0xc7, 0xe3, 0xf2,\n\t0xd7, 0xeb, 0xf5, 0xd8, 0xf1, 0xf0, 0xe8, 0xf5, 0xf7, 0xf4, 0xfa,\n\t0xfb, 0xff, 0xff, 0xff, 0xf6, 0xf7, 0xf5, 0xf1, 0xf1, 0xee, 0xf9,\n\t0xfa, 0xf2, 0xa3, 0xb9, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x21, 0xf9, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x21, 0xff, 0x0b,\n\t0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x6b,\n\t0x0d, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x3d, 0x30, 0x2e, 0x34, 0x35,\n\t0x34, 0x35, 0x35, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00,\n\t0x7f, 0x00, 0x00, 0x08, 0xfe, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0,\n\t0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x14, 0x18, 0x60, 0x80, 0x43,\n\t0x87, 0x0b, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x00,\n\t0x06, 0x58, 0x48, 0x01, 0xa3, 0x92, 0xa5, 0x8f, 0x1f, 0x6f, 0xc0,\n\t0x48, 0x61, 0x61, 0x00, 0x46, 0x00, 0x01, 0x10, 0x4c, 0xb0, 0x30,\n\t0x61, 0x41, 0x80, 0x93, 0x30, 0x63, 0x62, 0xd4, 0x08, 0xc3, 0x92,\n\t0xaa, 0x59, 0x38, 0x73, 0xea, 0x9c, 0x85, 0xca, 0x12, 0x0c, 0x0c,\n\t0x0b, 0x26, 0x06, 0x28, 0x31, 0xe3, 0x0f, 0xa2, 0x47, 0x8f, 0x10,\n\t0x21, 0x0a, 0x14, 0x23, 0xa8, 0xcc, 0xa7, 0x50, 0x0b, 0x0e, 0x48,\n\t0x61, 0x73, 0xa7, 0x55, 0xab, 0xac, 0x7c, 0x3a, 0x45, 0x38, 0x34,\n\t0x90, 0x24, 0x5e, 0x60, 0x77, 0xed, 0x02, 0x0b, 0x16, 0xd1, 0x9e,\n\t0x09, 0x51, 0xd3, 0xc6, 0xb4, 0x60, 0x89, 0xd5, 0xd5, 0xb7, 0x57,\n\t0x45, 0xc1, 0xb0, 0x70, 0x30, 0x40, 0x8c, 0xaf, 0x62, 0xf3, 0xea,\n\t0x1d, 0xcb, 0x0b, 0x51, 0x09, 0xb5, 0x80, 0x29, 0x2e, 0x80, 0x81,\n\t0x0a, 0xae, 0xe1, 0xab, 0xa8, 0x60, 0x6c, 0x05, 0xb0, 0x60, 0x4f,\n\t0xd8, 0xbd, 0x90, 0xc7, 0x3e, 0x8a, 0xf1, 0x32, 0xb0, 0xe5, 0x83,\n\t0x6c, 0x0f, 0x6b, 0x8e, 0xeb, 0xe2, 0x65, 0x00, 0xc7, 0x91, 0x43,\n\t0x8f, 0x95, 0x74, 0xe2, 0xb2, 0xe9, 0x81, 0x29, 0x44, 0x6d, 0x5e,\n\t0x6d, 0xd5, 0x92, 0x85, 0x18, 0xa2, 0x63, 0xf7, 0xfd, 0x7b, 0x3a,\n\t0x70, 0x00, 0x17, 0x37, 0x59, 0xeb, 0xce, 0xd9, 0xca, 0x54, 0xaf,\n\t0xc8, 0xbd, 0x46, 0x99, 0x1a, 0x15, 0x9a, 0xd7, 0x1f, 0x93, 0xb5,\n\t0xd3, 0x06, 0x80, 0x91, 0x6a, 0xb7, 0x73, 0xde, 0xbf, 0xf3, 0x8e,\n\t0xca, 0x15, 0xc6, 0x0d, 0x1c, 0x37, 0x61, 0x4a, 0x85, 0x2e, 0x9d,\n\t0x3c, 0x2a, 0x0c, 0xb7, 0xcf, 0xc3, 0xfe, 0xb3, 0xf2, 0x25, 0x76,\n\t0x54, 0x98, 0x3b, 0x74, 0xd2, 0xa7, 0xaf, 0x03, 0x0b, 0x32, 0xaf,\n\t0x40, 0xc8, 0xbb, 0xc7, 0x4c, 0xd1, 0x3c, 0xbc, 0x7d, 0x56, 0xa4,\n\t0x7a, 0x85, 0xa1, 0x33, 0xa7, 0xbf, 0x7f, 0x3a, 0x75, 0xe4, 0x02,\n\t0xd9, 0x23, 0x74, 0xc9, 0x07, 0x53, 0x0a, 0x85, 0xd9, 0xa7, 0x20,\n\t0x2b, 0xb7, 0xd4, 0xc1, 0x9f, 0x7f, 0xff, 0xb9, 0x41, 0x9c, 0x5e,\n\t0xbc, 0x70, 0x67, 0x20, 0x41, 0x0b, 0x94, 0x10, 0xc3, 0x0c, 0x7b,\n\t0xec, 0x11, 0xc3, 0x09, 0x25, 0x11, 0x64, 0x81, 0x2b, 0x0a, 0x96,\n\t0x38, 0x4b, 0x2d, 0xca, 0x38, 0x08, 0xa1, 0x7f, 0x77, 0x08, 0x48,\n\t0x61, 0x0c, 0x17, 0x0e, 0x34, 0xc1, 0x0c, 0x5e, 0x91, 0x45, 0xd6,\n\t0x23, 0x81, 0x9c, 0x60, 0xd2, 0x00, 0x96, 0x98, 0x58, 0xe2, 0x2a,\n\t0xb3, 0xa4, 0xf8, 0x20, 0x84, 0x74, 0xb4, 0x47, 0xe1, 0x1e, 0x31,\n\t0x0e, 0x10, 0x03, 0x22, 0x8f, 0xed, 0xc5, 0x8b, 0x24, 0x8a, 0xfc,\n\t0x61, 0x01, 0x0c, 0x3e, 0x9a, 0x08, 0xa4, 0x90, 0x2b, 0xd2, 0xa1,\n\t0x8c, 0x93, 0x48, 0x1a, 0xd8, 0xd8, 0x58, 0xb1, 0x31, 0x32, 0x88,\n\t0x22, 0x86, 0x24, 0x58, 0xa5, 0x89, 0x58, 0xfe, 0x67, 0x64, 0x5e,\n\t0xbc, 0xcc, 0xe0, 0x65, 0x20, 0xbc, 0xc4, 0xb6, 0x4b, 0x23, 0x84,\n\t0x0c, 0x52, 0x48, 0x29, 0x67, 0xfa, 0xb8, 0x0a, 0x8a, 0x77, 0xfc,\n\t0x07, 0x87, 0x29, 0x4e, 0xc2, 0xd8, 0xdd, 0x00, 0xa0, 0xc5, 0xe6,\n\t0x88, 0x22, 0x83, 0x0c, 0xf2, 0x49, 0x7d, 0x79, 0xfe, 0x58, 0xcb,\n\t0x1b, 0x7d, 0xce, 0xa1, 0x25, 0x64, 0x92, 0xd0, 0x96, 0x1c, 0x6c,\n\t0x72, 0x4a, 0x22, 0xa6, 0x9d, 0xa1, 0x34, 0x5a, 0xe5, 0x2a, 0xb2,\n\t0xbc, 0x91, 0x5e, 0x18, 0x13, 0xb2, 0x19, 0xc8, 0x62, 0xa6, 0x4d,\n\t0xc0, 0x64, 0x64, 0xa5, 0xc0, 0xa2, 0x0c, 0x2c, 0xfe, 0xaf, 0x18,\n\t0x32, 0x08, 0x21, 0x8b, 0x7a, 0xfa, 0xe9, 0x2d, 0x61, 0xc0, 0x52,\n\t0x2a, 0x9b, 0x82, 0x5e, 0x1a, 0xe7, 0x5e, 0xa3, 0x08, 0xc9, 0x5f,\n\t0x1a, 0x5f, 0x0c, 0x61, 0x48, 0xa7, 0xb6, 0x9e, 0xc9, 0x4a, 0x74,\n\t0x14, 0x22, 0x82, 0x56, 0x72, 0x01, 0xfc, 0xf1, 0xab, 0x74, 0xfb,\n\t0x3d, 0xd8, 0xc6, 0x16, 0x5b, 0x7c, 0xf1, 0x8a, 0x99, 0xc9, 0xfa,\n\t0xd8, 0x4a, 0x64, 0xbd, 0xd6, 0x66, 0xc1, 0x23, 0x90, 0x29, 0x33,\n\t0x64, 0x1c, 0x69, 0x68, 0xa1, 0x05, 0x18, 0x9e, 0x00, 0xd9, 0xed,\n\t0x99, 0xa4, 0x1c, 0x19, 0x5f, 0x6d, 0x25, 0x4c, 0x2b, 0x96, 0x29,\n\t0x6e, 0x0c, 0xa9, 0x86, 0xba, 0x5e, 0x38, 0x71, 0xca, 0xbb, 0x79,\n\t0x8e, 0x27, 0x96, 0x71, 0xa8, 0x9e, 0x16, 0x83, 0xbd, 0xbb, 0xe4,\n\t0x12, 0xe9, 0x1c, 0xe8, 0xaa, 0x0b, 0xc6, 0x26, 0x8c, 0x02, 0xec,\n\t0xe3, 0xb2, 0xbb, 0xec, 0x31, 0xaf, 0xaf, 0x7b, 0xc1, 0x32, 0xe4,\n\t0xb5, 0x5a, 0xf4, 0xeb, 0x89, 0xc4, 0x8d, 0x9a, 0x92, 0x42, 0x65,\n\t0x06, 0x1e, 0xbc, 0x57, 0x2e, 0x10, 0xa6, 0xab, 0x45, 0x17, 0x9a,\n\t0xfc, 0x0b, 0xf2, 0x99, 0xa8, 0x14, 0x78, 0xe1, 0x09, 0x08, 0x97,\n\t0xa2, 0x62, 0x1b, 0x68, 0xa8, 0xfb, 0x04, 0xc4, 0x2f, 0xe7, 0x69,\n\t0x09, 0xc9, 0xf2, 0x59, 0x20, 0xc9, 0x5e, 0xfa, 0xf1, 0xb7, 0xaf,\n\t0x16, 0xda, 0x7e, 0xdc, 0x73, 0x9e, 0x29, 0xc4, 0xb8, 0x00, 0x9c,\n\t0x7b, 0x95, 0xe2, 0xc6, 0x1c, 0x2a, 0x83, 0x91, 0x89, 0xcb, 0x4b,\n\t0x57, 0xe9, 0x0a, 0x02, 0x31, 0xce, 0x80, 0xf0, 0x2e, 0xa5, 0x88,\n\t0x81, 0x6d, 0xbf, 0x3c, 0x67, 0x7d, 0x26, 0x0c, 0x16, 0x39, 0xc0,\n\t0xc2, 0x14, 0x53, 0x20, 0xa1, 0xc1, 0x45, 0xe3, 0x7e, 0x0d, 0x89,\n\t0x13, 0x60, 0x80, 0xa1, 0x49, 0x27, 0x11, 0x9b, 0x5d, 0x62, 0xfe,\n\t0x2b, 0x32, 0x47, 0x04, 0x02, 0x1a, 0x76, 0x04, 0x6e, 0x07, 0x1b,\n\t0x48, 0x00, 0x1d, 0xd1, 0x67, 0x08, 0x43, 0x39, 0xeb, 0x21, 0x99,\n\t0x20, 0xab, 0xb7, 0x61, 0xa7, 0x5c, 0x32, 0x04, 0x26, 0xa0, 0x1c,\n\t0x86, 0xb6, 0x44, 0x1c, 0xb0, 0x61, 0x07, 0x91, 0x74, 0x20, 0x61,\n\t0x11, 0x02, 0x7e, 0xd8, 0xdb, 0x48, 0xa2, 0xb4, 0x5e, 0xfd, 0xb8,\n\t0x61, 0x97, 0xfc, 0xd0, 0x83, 0x0e, 0x3a, 0xf8, 0x30, 0x44, 0x2c,\n\t0x70, 0xc5, 0x7c, 0x78, 0x19, 0x9b, 0x67, 0xc9, 0xc6, 0xdb, 0x15,\n\t0x59, 0xb0, 0xaa, 0x58, 0x9b, 0x16, 0x92, 0x49, 0xd9, 0xa7, 0x5b,\n\t0xc5, 0x89, 0x0f, 0x3a, 0xf4, 0x60, 0x7c, 0xf1, 0x43, 0x18, 0x76,\n\t0x83, 0xe1, 0x06, 0x69, 0x20, 0xc7, 0x90, 0x44, 0x7a, 0x6e, 0x51,\n\t0x09, 0x50, 0x2b, 0x3e, 0x88, 0x21, 0x99, 0xe0, 0x1d, 0xbc, 0x55,\n\t0xb1, 0x04, 0x91, 0x83, 0xf1, 0x39, 0x14, 0xdf, 0x7a, 0xe5, 0x6f,\n\t0xc9, 0xae, 0xd0, 0x07, 0x2b, 0x42, 0x68, 0xc7, 0x14, 0x18, 0x4d,\n\t0x10, 0xc8, 0x2e, 0x8e, 0xd4, 0xa9, 0x68, 0x26, 0xed, 0x6e, 0xbf,\n\t0xd3, 0x29, 0xc4, 0x1b, 0x1f, 0x44, 0xfe, 0x3d, 0x5c, 0x62, 0xd8,\n\t0xe5, 0x09, 0xe1, 0x40, 0xfa, 0xfc, 0x63, 0x87, 0x32, 0x9c, 0x24,\n\t0x00, 0x27, 0xf8, 0xc3, 0x98, 0x4a, 0x47, 0x3e, 0xfb, 0xe5, 0xc4,\n\t0x13, 0xc7, 0xfb, 0x41, 0x2a, 0x30, 0xa1, 0x83, 0xef, 0x71, 0xc2,\n\t0x30, 0xae, 0x28, 0x98, 0x88, 0xda, 0x00, 0xbd, 0xff, 0xb0, 0x21,\n\t0x26, 0x1a, 0x71, 0xc1, 0x1f, 0x32, 0x61, 0xba, 0xac, 0xc1, 0x0e,\n\t0x2e, 0xa7, 0xf8, 0x41, 0x0e, 0x72, 0x10, 0x84, 0x58, 0xa4, 0x62,\n\t0x08, 0x40, 0x78, 0xdd, 0x61, 0x9a, 0x96, 0x10, 0x07, 0xb0, 0xa1,\n\t0x83, 0xfd, 0xa1, 0x83, 0x1c, 0xa0, 0x82, 0x01, 0x12, 0x72, 0x0b,\n\t0x64, 0xfe, 0x97, 0x08, 0x82, 0x10, 0xb0, 0x26, 0x3c, 0x20, 0x04,\n\t0xa1, 0x81, 0x27, 0x3c, 0x8c, 0x25, 0x2e, 0x46, 0x10, 0x07, 0xac,\n\t0x01, 0x87, 0x92, 0xda, 0xe1, 0x53, 0x60, 0xd0, 0x09, 0xe0, 0x5d,\n\t0x25, 0x89, 0xcf, 0x39, 0x85, 0x26, 0x94, 0x86, 0x13, 0xfc, 0xad,\n\t0x50, 0x08, 0x86, 0x89, 0x05, 0x16, 0x57, 0xa3, 0x8a, 0xbe, 0x15,\n\t0xc4, 0x86, 0x50, 0xa4, 0xc3, 0x07, 0xa7, 0xd8, 0x09, 0xed, 0x59,\n\t0x25, 0x15, 0x97, 0x10, 0x82, 0x10, 0x39, 0x31, 0xc6, 0xab, 0xe4,\n\t0xed, 0x14, 0x40, 0xe8, 0x81, 0x0f, 0x2e, 0x88, 0x13, 0x08, 0xf6,\n\t0x20, 0x07, 0x40, 0xa8, 0xa3, 0x89, 0x00, 0x68, 0x10, 0x0e, 0xc8,\n\t0x61, 0x80, 0x92, 0x42, 0xc3, 0x53, 0x06, 0xc0, 0x83, 0x4d, 0x74,\n\t0x02, 0x3c, 0x3a, 0x39, 0x45, 0x10, 0xfe, 0xb8, 0xc2, 0x1e, 0xc8,\n\t0xf0, 0x2d, 0xb1, 0x18, 0xc2, 0x0f, 0x84, 0xc0, 0x28, 0x4e, 0x80,\n\t0xaf, 0x85, 0x38, 0xb9, 0x04, 0xf8, 0x02, 0xe9, 0xa9, 0x9f, 0x21,\n\t0x04, 0x09, 0xb5, 0x4b, 0x9f, 0x1d, 0xae, 0xf0, 0x94, 0x05, 0x7c,\n\t0x82, 0x7e, 0xee, 0xca, 0x49, 0xf7, 0xbe, 0x67, 0xbc, 0xd5, 0xf5,\n\t0x00, 0x13, 0x70, 0xd1, 0xc4, 0x1f, 0x75, 0x80, 0xcb, 0x50, 0xd6,\n\t0xd2, 0x92, 0xa7, 0xe0, 0xc4, 0x0f, 0x8a, 0x97, 0x03, 0x30, 0x6a,\n\t0x66, 0x15, 0xc8, 0x04, 0x52, 0x2d, 0x6a, 0x11, 0xcb, 0xab, 0x94,\n\t0xf1, 0x20, 0x07, 0xa0, 0x1d, 0x22, 0xed, 0x20, 0x85, 0xa7, 0x58,\n\t0x80, 0x84, 0x8e, 0x7b, 0xe0, 0x2f, 0x6b, 0xa9, 0x03, 0x09, 0xbe,\n\t0xe5, 0x12, 0xe2, 0xfb, 0xc1, 0xbf, 0xba, 0x57, 0xbc, 0x5a, 0xfa,\n\t0xc0, 0x96, 0xc6, 0xe3, 0xe3, 0x5b, 0x90, 0x59, 0x0b, 0x5a, 0xd8,\n\t0x02, 0x17, 0xcc, 0x68, 0x86, 0x34, 0x9a, 0x61, 0x8b, 0x66, 0x5a,\n\t0xc5, 0x05, 0x07, 0xfe, 0x61, 0x01, 0x22, 0xfb, 0x23, 0x07, 0x10,\n\t0x3c, 0xa5, 0x87, 0x8d, 0xb3, 0x0a, 0x05, 0x57, 0xf7, 0x03, 0x4c,\n\t0x10, 0x6f, 0x7c, 0x6f, 0x01, 0x05, 0xff, 0x36, 0x99, 0xc7, 0x6d,\n\t0x96, 0xd3, 0x78, 0x42, 0x10, 0x24, 0x4e, 0x56, 0x61, 0x0b, 0x66,\n\t0x38, 0x43, 0x1a, 0xd4, 0xa0, 0x46, 0x35, 0x36, 0x5a, 0x8d, 0x66,\n\t0xd4, 0xc2, 0x30, 0x95, 0x30, 0x9c, 0x06, 0x6e, 0x88, 0x48, 0x3a,\n\t0xa0, 0xc1, 0x01, 0x6c, 0xcc, 0x44, 0x03, 0x73, 0x32, 0xd0, 0x1c,\n\t0x24, 0x6f, 0x08, 0x15, 0x04, 0x42, 0xde, 0x74, 0x22, 0x04, 0x5a,\n\t0x56, 0xb0, 0x9c, 0xc5, 0xdb, 0xc1, 0x0e, 0x70, 0x2a, 0x4e, 0xb8,\n\t0xac, 0x82, 0x16, 0xd2, 0xe0, 0xa8, 0x50, 0x37, 0x2a, 0x8d, 0x8f,\n\t0xc2, 0xc5, 0x12, 0x8b, 0xd1, 0x80, 0x34, 0xa7, 0x39, 0x05, 0xe6,\n\t0x5d, 0x84, 0x8a, 0x2a, 0xb5, 0x8a, 0x27, 0x7c, 0xf0, 0x3d, 0xff,\n\t0x4d, 0x70, 0x08, 0x44, 0xb4, 0x0a, 0x1e, 0x59, 0xf7, 0xcb, 0x1d,\n\t0x14, 0x21, 0x19, 0x94, 0x28, 0x42, 0x11, 0x8e, 0x47, 0xca, 0x75,\n\t0xda, 0x42, 0xa3, 0x43, 0xdd, 0xe8, 0x34, 0x96, 0x61, 0xcf, 0x9d,\n\t0x3c, 0x13, 0x25, 0x1c, 0x58, 0x43, 0x2a, 0xd3, 0x47, 0x87, 0x38,\n\t0x70, 0x00, 0x2a, 0x50, 0x5d, 0x69, 0x4e, 0x38, 0x31, 0x84, 0x4b,\n\t0x48, 0xf4, 0x2d, 0xa7, 0x10, 0xc2, 0x36, 0x8d, 0x80, 0x0d, 0x6b,\n\t0x54, 0xe3, 0x1a, 0x94, 0x18, 0xe5, 0x5f, 0x7f, 0xea, 0x8c, 0x8d,\n\t0x66, 0x54, 0x1a, 0xce, 0x60, 0xc6, 0x32, 0x6c, 0xb1, 0x99, 0x91,\n\t0x71, 0x60, 0x0a, 0x73, 0x98, 0xab, 0x2a, 0xcb, 0xe0, 0x54, 0x8b,\n\t0x04, 0x80, 0x07, 0x9d, 0x88, 0x6a, 0x9e, 0x60, 0xda, 0x03, 0xaf,\n\t0x16, 0xd6, 0x1a, 0xd6, 0xb8, 0x86, 0x11, 0x76, 0xf0, 0x47, 0x63,\n\t0xfa, 0xd4, 0x16, 0xcb, 0x58, 0xfe, 0x06, 0x2e, 0x6c, 0x41, 0x0b,\n\t0x66, 0x22, 0xf3, 0x98, 0x50, 0xb8, 0x82, 0x1c, 0xec, 0x00, 0xc5,\n\t0xff, 0xc8, 0xa1, 0x02, 0x50, 0x61, 0x64, 0x68, 0xf5, 0x6a, 0x22,\n\t0x85, 0x96, 0xd3, 0x08, 0xc9, 0xc0, 0x46, 0x32, 0x8c, 0xf0, 0x4b,\n\t0x4d, 0x1c, 0x33, 0x99, 0xb7, 0x65, 0xcd, 0x2a, 0x60, 0xc1, 0xdb,\n\t0x7d, 0x12, 0xb0, 0xa9, 0xc1, 0x6d, 0xa4, 0x68, 0x37, 0x93, 0x4c,\n\t0xcd, 0x08, 0xa1, 0x9c, 0xac, 0x1d, 0x2b, 0x6b, 0xff, 0x18, 0x84,\n\t0x99, 0xe6, 0x69, 0x15, 0x0d, 0xb2, 0x6e, 0x7f, 0x0a, 0x88, 0xd2,\n\t0xe0, 0x36, 0x61, 0x13, 0x01, 0x5d, 0x27, 0x74, 0xdb, 0x49, 0xdb,\n\t0xb6, 0xee, 0x04, 0x15, 0x40, 0x78, 0xe8, 0x43, 0x73, 0xf0, 0x03,\n\t0xe2, 0x36, 0x0a, 0xbd, 0x70, 0xe8, 0xed, 0x7a, 0xd9, 0x70, 0xd7,\n\t0xa8, 0x2c, 0xe0, 0xbd, 0xf1, 0xb5, 0xca, 0x4f, 0xdf, 0xb9, 0x8c,\n\t0x66, 0x38, 0x63, 0x1a, 0xd3, 0x70, 0x46, 0x3d, 0x0f, 0x23, 0xc9,\n\t0x5d, 0xb2, 0xee, 0x7b, 0x40, 0xf0, 0xef, 0x7f, 0x6f, 0x91, 0x07,\n\t0x01, 0xdb, 0xa1, 0x9f, 0x6a, 0x71, 0x25, 0x7c, 0xb9, 0xa8, 0x93,\n\t0x5a, 0x2c, 0x43, 0x1a, 0xd3, 0x40, 0xab, 0x50, 0x99, 0x61, 0xdf,\n\t0x9d, 0xc4, 0x82, 0x13, 0x42, 0xf8, 0x81, 0x8c, 0x83, 0x70, 0x09,\n\t0xf3, 0x7a, 0x0a, 0x54, 0x1d, 0x9e, 0x26, 0x81, 0x01, 0x73, 0x60,\n\t0xf8, 0x76, 0xc2, 0x9e, 0xab, 0xc0, 0x85, 0x8a, 0xd3, 0xca, 0x56,\n\t0xd6, 0xa4, 0x02, 0x15, 0x36, 0xfe, 0x6f, 0x32, 0x65, 0x91, 0x63,\n\t0x55, 0xa2, 0xe1, 0x03, 0x81, 0x19, 0x00, 0x82, 0xdd, 0x98, 0x93,\n\t0x20, 0xa7, 0xb5, 0x1a, 0xd4, 0x98, 0x06, 0x3d, 0x5b, 0x9c, 0x35,\n\t0xe8, 0xee, 0x49, 0x17, 0xc5, 0x38, 0xc6, 0x36, 0xc4, 0x81, 0x07,\n\t0x55, 0xce, 0xe1, 0x0a, 0x1a, 0x5c, 0xa4, 0xfe, 0x76, 0xad, 0x38,\n\t0x0b, 0x8a, 0x3a, 0x23, 0xa3, 0x11, 0x6e, 0x86, 0x6c, 0x6d, 0xc1,\n\t0xcc, 0xd3, 0x41, 0x77, 0x16, 0xb4, 0xd0, 0x85, 0x31, 0xb8, 0xe1,\n\t0x0d, 0x74, 0xac, 0xa3, 0x1d, 0xee, 0x70, 0xc7, 0x3b, 0xca, 0x4c,\n\t0x40, 0x3b, 0x3c, 0x59, 0x00, 0x97, 0x11, 0x2e, 0x09, 0xb3, 0xda,\n\t0x66, 0x5a, 0xcc, 0xb6, 0xb6, 0x77, 0x5e, 0x9a, 0x97, 0x6b, 0x01,\n\t0x66, 0x31, 0x8b, 0x63, 0x1d, 0xec, 0x00, 0x74, 0xa0, 0x37, 0x2d,\n\t0xe8, 0x32, 0xd3, 0x81, 0xb7, 0x68, 0x40, 0x42, 0x7b, 0x2f, 0x13,\n\t0x00, 0x22, 0x84, 0x76, 0xbb, 0x3a, 0x89, 0x74, 0xcf, 0xee, 0x9c,\n\t0xe7, 0x3d, 0xf7, 0xf9, 0xcf, 0x9c, 0x8e, 0x35, 0xa7, 0x07, 0xad,\n\t0xc6, 0x2b, 0x80, 0x60, 0xd4, 0xa7, 0x81, 0x2a, 0x2c, 0xed, 0x3c,\n\t0xdf, 0x4a, 0x8f, 0x19, 0xd3, 0x9a, 0x96, 0xb5, 0xb0, 0x37, 0x1d,\n\t0x0f, 0x16, 0xdc, 0xba, 0xb3, 0x09, 0x09, 0x00, 0x07, 0x90, 0xd0,\n\t0x36, 0x0e, 0x20, 0xdb, 0x20, 0xba, 0xa6, 0x32, 0xc8, 0x58, 0xad,\n\t0x67, 0x3e, 0xa3, 0x23, 0xd3, 0xc3, 0xce, 0xb6, 0xb0, 0xa1, 0xf1,\n\t0xec, 0x1a, 0x4e, 0x21, 0x0e, 0x82, 0x9b, 0xc3, 0x14, 0x70, 0xad,\n\t0x10, 0x0c, 0xc0, 0xf7, 0x77, 0x3f, 0x54, 0x72, 0x32, 0x29, 0x5d,\n\t0x0c, 0x6e, 0xfc, 0x1a, 0xdb, 0xda, 0x8e, 0xb7, 0xb0, 0x91, 0x81,\n\t0x91, 0x03, 0x5c, 0xa1, 0xba, 0x39, 0x64, 0xaf, 0x44, 0xae, 0x49,\n\t0x42, 0x54, 0xeb, 0xa9, 0xbb, 0xad, 0xde, 0x46, 0x9f, 0xe1, 0x2d,\n\t0xef, 0x82, 0x0f, 0x9b, 0x90, 0x14, 0x41, 0xc2, 0x34, 0xaf, 0xd0,\n\t0x80, 0x88, 0x88, 0x98, 0x84, 0xd2, 0x76, 0x0e, 0xb5, 0xdb, 0xfd,\n\t0xee, 0x60, 0x1b, 0xfc, 0xe2, 0xc2, 0x7e, 0x07, 0x06, 0x30, 0xb2,\n\t0x54, 0x55, 0x5e, 0x81, 0xdc, 0x06, 0x29, 0xf5, 0xa9, 0xfe, 0x37,\n\t0x91, 0xee, 0xc3, 0xcc, 0x37, 0xe0, 0xe2, 0xb8, 0xb6, 0xc5, 0x31,\n\t0xce, 0xf2, 0x61, 0xc7, 0x83, 0x6b, 0x17, 0x39, 0xe4, 0x3e, 0x0b,\n\t0x08, 0x82, 0x67, 0xeb, 0x3a, 0xc1, 0xf2, 0xbd, 0x6d, 0x9e, 0x29,\n\t0x7e, 0x69, 0x82, 0xb7, 0xfc, 0xe7, 0xda, 0xe6, 0x36, 0x46, 0x48,\n\t0x3a, 0x73, 0x39, 0x4c, 0x81, 0x03, 0x07, 0x08, 0x79, 0x03, 0x60,\n\t0xd0, 0xef, 0xdf, 0x45, 0x6c, 0xd2, 0x28, 0x57, 0x39, 0xd0, 0xa7,\n\t0x7e, 0x71, 0x7a, 0x63, 0xe4, 0xde, 0xea, 0xfd, 0xb4, 0x1c, 0xca,\n\t0x20, 0x85, 0x0f, 0x80, 0xe0, 0x03, 0x1c, 0x60, 0xc1, 0x12, 0xae,\n\t0xa0, 0xad, 0x73, 0xab, 0x14, 0xe0, 0x60, 0xb6, 0x36, 0xac, 0xa9,\n\t0xce, 0xf6, 0x8b, 0xc3, 0x43, 0x02, 0x27, 0xc9, 0x9c, 0x80, 0xff,\n\t0x13, 0x6e, 0xaa, 0xa1, 0x01, 0x0d, 0x5b, 0xf0, 0xc2, 0x13, 0xfa,\n\t0xbd, 0x89, 0x57, 0xe8, 0x79, 0xcc, 0x52, 0x6f, 0xbb, 0xe0, 0x31,\n\t0xfe, 0x0c, 0x26, 0x52, 0x44, 0x9f, 0x73, 0x1f, 0xe0, 0xd1, 0xd4,\n\t0xd5, 0x85, 0x5c, 0xe0, 0x62, 0x19, 0xcc, 0xe8, 0xc6, 0x39, 0x06,\n\t0x4f, 0xf9, 0x9f, 0x5b, 0xfd, 0x80, 0x0a, 0x4f, 0x3c, 0x91, 0x38,\n\t0xc6, 0x2f, 0x6d, 0x94, 0xe3, 0xf3, 0xe5, 0x38, 0xc7, 0x3b, 0x2a,\n\t0x4f, 0xfa, 0x82, 0xc3, 0x23, 0xcd, 0x14, 0x09, 0x80, 0x14, 0x24,\n\t0xa5, 0x5e, 0x08, 0x35, 0x4c, 0x5d, 0x66, 0x88, 0x06, 0xe8, 0x3f,\n\t0x3f, 0xf9, 0xd2, 0xdb, 0x7e, 0xd8, 0xc8, 0xe8, 0xb6, 0x44, 0x02,\n\t0x80, 0x84, 0xdd, 0xb6, 0xde, 0x3f, 0x8b, 0xd7, 0x82, 0x1b, 0xcc,\n\t0x31, 0xfb, 0x72, 0xc0, 0xe3, 0xf6, 0xc8, 0xdf, 0xf4, 0x3b, 0x32,\n\t0x10, 0x95, 0x00, 0x80, 0x40, 0x73, 0xbf, 0x9f, 0x03, 0xce, 0xd4,\n\t0xa5, 0x05, 0x34, 0xc8, 0x7e, 0xf6, 0xa2, 0x4f, 0x3e, 0xe9, 0xdb,\n\t0xfe, 0xc1, 0x8e, 0x74, 0x80, 0xc3, 0x94, 0x69, 0xd1, 0x40, 0x16,\n\t0x3e, 0xfd, 0x7b, 0x95, 0xa9, 0x2b, 0x0c, 0xc4, 0xc7, 0xbe, 0xf6,\n\t0xd9, 0xce, 0x0e, 0x75, 0x84, 0xe3, 0x1b, 0xc3, 0x10, 0xc6, 0x2f,\n\t0x7e, 0x63, 0xa9, 0xb4, 0x1c, 0x00, 0x09, 0x80, 0xd3, 0x6c, 0xfa,\n\t0x38, 0x5f, 0xfd, 0xeb, 0xcf, 0xfe, 0xf8, 0xeb, 0x67, 0x70, 0xdc,\n\t0xe7, 0x7d, 0xc4, 0x20, 0x0c, 0xc0, 0xe0, 0x0b, 0xbf, 0x21, 0x09,\n\t0x43, 0xf3, 0x1e, 0x86, 0x07, 0x15, 0x0e, 0x80, 0x04, 0x65, 0x90,\n\t0x59, 0xf8, 0xb6, 0x22, 0x0d, 0x73, 0x77, 0x58, 0x90, 0x05, 0xcf,\n\t0x50, 0x7c, 0xc6, 0x17, 0x80, 0xc3, 0xd6, 0x7e, 0xef, 0x17, 0x7f,\n\t0xf3, 0xb7, 0x0b, 0x0a, 0xe8, 0x1e, 0x88, 0x60, 0x46, 0x51, 0xf6,\n\t0x01, 0x53, 0x50, 0x06, 0x6c, 0x20, 0x81, 0x82, 0x13, 0x38, 0x6a,\n\t0x70, 0x81, 0x2c, 0x50, 0x01, 0x01, 0x90, 0x01, 0x1a, 0x98, 0x7d,\n\t0x01, 0x38, 0x80, 0xe0, 0x50, 0x80, 0x07, 0x98, 0x80, 0x43, 0x23,\n\t0x1b, 0xe1, 0x52, 0x1b, 0x07, 0xa0, 0x01, 0x20, 0x80, 0x04, 0xcc,\n\t0xd6, 0x36, 0x48, 0x00, 0x02, 0x1c, 0xe0, 0x00, 0x24, 0x13, 0x00,\n\t0xc8, 0x50, 0x83, 0xa3, 0x67, 0x7b, 0x1e, 0x08, 0x7f, 0xc1, 0x10,\n\t0x82, 0x23, 0x28, 0x27, 0x14, 0xf2, 0x07, 0xa8, 0x17, 0x23, 0x06,\n\t0xb1, 0x00, 0x19, 0x58, 0x7c, 0x36, 0xc8, 0x76, 0xed, 0xa0, 0x0e,\n\t0x04, 0x68, 0x80, 0xbe, 0x10, 0x27, 0x55, 0x68, 0x85, 0x91, 0xa1,\n\t0x08, 0x26, 0xa8, 0x85, 0x0a, 0x91, 0x01, 0xe9, 0x87, 0x7d, 0x4f,\n\t0x88, 0x71, 0xdc, 0xe7, 0x7e, 0x52, 0x48, 0x85, 0x3d, 0x88, 0x86,\n\t0xb1, 0xa1, 0x29, 0xf8, 0xc4, 0x86, 0x15, 0x01, 0x03, 0x1a, 0x18,\n\t0x7a, 0x71, 0x98, 0x6d, 0x61, 0x38, 0x0e, 0xdf, 0xa0, 0x83, 0x65,\n\t0x28, 0x82, 0xfe, 0x77, 0x88, 0x87, 0x56, 0xa8, 0x29, 0x33, 0xd0,\n\t0x80, 0x7c, 0xc8, 0x15, 0x4d, 0x58, 0x83, 0x00, 0xb8, 0x69, 0x38,\n\t0x58, 0x87, 0x3c, 0xa8, 0x88, 0x98, 0x98, 0x17, 0x8e, 0xb0, 0x08,\n\t0x87, 0xb0, 0x71, 0x8f, 0x58, 0x11, 0x03, 0x10, 0x89, 0x35, 0xa8,\n\t0x0e, 0x84, 0x08, 0x82, 0x87, 0x78, 0x86, 0x99, 0x98, 0x8a, 0x87,\n\t0x72, 0x08, 0x5f, 0x70, 0x05, 0xb8, 0xf3, 0x89, 0x13, 0x81, 0x00,\n\t0x4d, 0x68, 0x0e, 0xdd, 0x20, 0x0f, 0xcb, 0x90, 0x0b, 0xa5, 0x10,\n\t0x09, 0x90, 0xe0, 0x08, 0x88, 0x98, 0x8a, 0xbe, 0xb8, 0x17, 0x9a,\n\t0x92, 0x08, 0x87, 0xd0, 0x05, 0x5b, 0x80, 0x06, 0x57, 0xb0, 0x86,\n\t0xb0, 0x88, 0x10, 0x08, 0x60, 0x03, 0xb9, 0xb8, 0x08, 0xf2, 0x93,\n\t0x28, 0x8a, 0xd0, 0x08, 0x89, 0xf8, 0x8b, 0xaa, 0x88, 0x28, 0xc3,\n\t0xb8, 0x05, 0xea, 0x92, 0x06, 0x65, 0x00, 0x72, 0xc9, 0x88, 0x10,\n\t0x03, 0x30, 0x03, 0xcf, 0x98, 0x28, 0xe2, 0x18, 0x8d, 0xd3, 0x48,\n\t0x8d, 0x56, 0xe8, 0x08, 0x8c, 0x50, 0x27, 0xac, 0x88, 0x8d, 0xd5,\n\t0xd7, 0x06, 0xeb, 0xa3, 0x7b, 0xdd, 0x98, 0x11, 0x30, 0x50, 0x08,\n\t0xe1, 0x28, 0x8e, 0x83, 0xb0, 0x08, 0xd2, 0x68, 0x8e, 0xe7, 0xc8,\n\t0x08, 0x89, 0x30, 0x2b, 0xaf, 0xf0, 0x05, 0xec, 0x88, 0x06, 0x6d,\n\t0xc0, 0x7a, 0x50, 0x16, 0x8f, 0x12, 0x51, 0x02, 0x7e, 0x80, 0x28,\n\t0xf6, 0x68, 0x8f, 0xf8, 0xc8, 0x8b, 0xfa, 0x08, 0x8c, 0xe8, 0xd8,\n\t0x8f, 0x84, 0x50, 0x08, 0x4f, 0xe0, 0x05, 0xd4, 0x87, 0x06, 0x6a,\n\t0x40, 0x40, 0x27, 0x65, 0x90, 0x12, 0x31, 0x01, 0x35, 0x40, 0x08,\n\t0xf5, 0x68, 0x8f, 0x8a, 0xc0, 0x08, 0x8e, 0x50, 0x8e, 0x99, 0x28,\n\t0x09, 0x8e, 0xd0, 0x08, 0x8a, 0x50, 0x27, 0x20, 0xe9, 0x07, 0x60,\n\t0x90, 0x33, 0xea, 0xb2, 0xfe, 0x05, 0x19, 0xa9, 0x3e, 0xd2, 0xc3,\n\t0x91, 0x0b, 0x31, 0x00, 0x27, 0x90, 0x90, 0x21, 0x29, 0x92, 0x8c,\n\t0xd0, 0x08, 0x25, 0x69, 0x92, 0x91, 0x81, 0x92, 0x8d, 0xc0, 0x08,\n\t0x2b, 0x39, 0x8e, 0x7e, 0xe0, 0x02, 0x0b, 0xc0, 0x01, 0x58, 0x80,\n\t0x8d, 0x18, 0x49, 0x57, 0x69, 0xc0, 0x8d, 0x36, 0x69, 0x10, 0x33,\n\t0x52, 0x08, 0x45, 0xb9, 0x90, 0x0b, 0x49, 0x08, 0x8a, 0xb0, 0x08,\n\t0x3d, 0xd9, 0x08, 0x3e, 0xe9, 0x08, 0x5e, 0xe9, 0x95, 0x5c, 0xc9,\n\t0x08, 0x8b, 0xa0, 0x08, 0xfd, 0x28, 0x92, 0x85, 0x30, 0x03, 0xcf,\n\t0x02, 0x00, 0x1f, 0x80, 0x05, 0x4d, 0x39, 0x40, 0x76, 0x50, 0x90,\n\t0x51, 0x19, 0x11, 0x16, 0x30, 0x03, 0x54, 0xb9, 0x93, 0x56, 0x69,\n\t0x8f, 0x20, 0x79, 0x97, 0x78, 0xa9, 0x08, 0x85, 0x50, 0x03, 0x16,\n\t0x60, 0x38, 0x2c, 0x30, 0x93, 0x6e, 0x79, 0x05, 0xf0, 0x18, 0x97,\n\t0x00, 0x30, 0x25, 0x7e, 0xa0, 0x97, 0x8a, 0xb9, 0x98, 0x58, 0xa9,\n\t0x08, 0x7e, 0x30, 0x03, 0x7f, 0x59, 0x17, 0x53, 0xa0, 0x7f, 0x39,\n\t0xc4, 0x06, 0x50, 0x69, 0x98, 0x07, 0x31, 0x18, 0x87, 0x60, 0x08,\n\t0x84, 0x50, 0x96, 0x8b, 0x69, 0x95, 0x20, 0xa9, 0x08, 0x7c, 0x59,\n\t0x03, 0x27, 0x90, 0x96, 0x08, 0x31, 0x52, 0x02, 0x56, 0x60, 0x98,\n\t0x29, 0x11, 0x2c, 0x80, 0x06, 0x5f, 0xf0, 0x04, 0xaf, 0x70, 0x08,\n\t0xf4, 0x98, 0x08, 0xb4, 0x09, 0x92, 0xb6, 0x19, 0x9a, 0xa2, 0xb9,\n\t0x92, 0x85, 0xf0, 0x07, 0x33, 0x50, 0x02, 0x13, 0x00, 0x8f, 0x01,\n\t0x80, 0x75, 0x6e, 0xe9, 0x4f, 0xab, 0x29, 0x11, 0x48, 0x90, 0x2e,\n\t0x5b, 0x60, 0x06, 0x5e, 0xd0, 0x05, 0x60, 0x00, 0x9b, 0x87, 0xe0,\n\t0x07, 0x7f, 0x10, 0x9d, 0xd2, 0xf9, 0x07, 0x35, 0x30, 0x03, 0x2e,\n\t0xe0, 0x9b, 0x85, 0x49, 0x10, 0xa8, 0xfe, 0x34, 0x4d, 0x35, 0x59,\n\t0x9c, 0xc9, 0xb6, 0x04, 0x30, 0x49, 0x7d, 0xd8, 0x82, 0x06, 0x5e,\n\t0x80, 0x01, 0x0d, 0xf1, 0x10, 0x10, 0x21, 0x13, 0x20, 0x40, 0x99,\n\t0x99, 0xd5, 0x9d, 0xde, 0x59, 0x17, 0xe0, 0x49, 0x7d, 0xf2, 0xa9,\n\t0x05, 0x58, 0x80, 0x8c, 0x32, 0xf1, 0x01, 0xec, 0x69, 0x07, 0xee,\n\t0xf9, 0x9e, 0x05, 0x11, 0x00, 0x59, 0x10, 0x9e, 0xf2, 0xb9, 0x05,\n\t0x58, 0x70, 0x99, 0x31, 0xb1, 0x9d, 0x6e, 0xc9, 0x02, 0xfc, 0x99,\n\t0x10, 0x03, 0x50, 0x06, 0x6d, 0xa0, 0x06, 0x69, 0x00, 0xa0, 0x5b,\n\t0x70, 0x05, 0x30, 0xa7, 0x16, 0xd1, 0xc4, 0x9e, 0x74, 0x40, 0x9c,\n\t0x09, 0x6a, 0x10, 0x0d, 0x00, 0x38, 0xfd, 0xd1, 0xa0, 0x0e, 0x9a,\n\t0x06, 0x69, 0x90, 0x05, 0x49, 0x07, 0x18, 0x86, 0x94, 0x46, 0x72,\n\t0xf0, 0x8a, 0x19, 0x4a, 0x10, 0x1b, 0x9a, 0x4a, 0x0f, 0x12, 0x07,\n\t0x71, 0x50, 0x06, 0x23, 0xaa, 0x1c, 0x93, 0x39, 0x4d, 0x65, 0xd0,\n\t0x70, 0x29, 0x7a, 0x46, 0x68, 0x00, 0x45, 0x05, 0x14, 0xa3, 0x51,\n\t0x51, 0xa2, 0x4c, 0x75, 0xa3, 0x06, 0xe1, 0x44, 0x3a, 0x0a, 0xa3,\n\t0x6a, 0x11, 0x9c, 0xec, 0xd9, 0x1f, 0x18, 0x0a, 0xa4, 0x02, 0x21,\n\t0xa4, 0x6e, 0x59, 0x06, 0x88, 0x96, 0x16, 0x02, 0xd4, 0x5b, 0x05,\n\t0x64, 0xa3, 0x4a, 0xba, 0xa4, 0x39, 0xda, 0xa4, 0x3c, 0xfa, 0x14,\n\t0x06, 0xea, 0x96, 0xfb, 0x09, 0xa4, 0x2b, 0xea, 0x96, 0x68, 0xe0,\n\t0x88, 0x18, 0x21, 0x05, 0x16, 0xba, 0x06, 0x04, 0x9a, 0xa0, 0x15,\n\t0x3a, 0x40, 0x26, 0x45, 0xa5, 0x50, 0xb1, 0xa5, 0x2b, 0xa2, 0x9f,\n\t0x55, 0xda, 0x9f, 0x1d, 0x47, 0x24, 0x96, 0xa9, 0x16, 0x1a, 0xc0,\n\t0x41, 0x9b, 0xc5, 0xa6, 0x71, 0x1a, 0x00, 0x73, 0xea, 0x41, 0xf6,\n\t0x89, 0x11, 0xbc, 0x37, 0x81, 0x99, 0x25, 0x07, 0x87, 0x70, 0x19,\n\t0xa7, 0x0c, 0x31, 0xa3, 0x88, 0xa4, 0x9a, 0x51, 0x71, 0x00, 0x53,\n\t0xb0, 0x5b, 0x82, 0xc3, 0x06, 0x49, 0x6a, 0xa8, 0x02, 0x81, 0xa8,\n\t0x74, 0x15, 0xa9, 0x50, 0xa1, 0x6c, 0x53, 0x70, 0x05, 0x57, 0x80,\n\t0x04, 0x59, 0xa8, 0xa4, 0x6e, 0x4a, 0x93, 0xa6, 0x11, 0x00, 0xd9,\n\t0x99, 0xa2, 0x1c, 0x90, 0x9f, 0xec, 0x23, 0xa9, 0x5a, 0x28, 0x40,\n\t0x34, 0x3a, 0xaa, 0xa8, 0xea, 0x80, 0x44, 0x67, 0x3b, 0x67, 0xda,\n\t0xaa, 0x80, 0x21, 0x00, 0x7d, 0x0a, 0x21, 0x8a, 0x2a, 0xab, 0xc9,\n\t0x41, 0xa9, 0xe9, 0x63, 0xa9, 0xb8, 0x6a, 0x1a, 0x2c, 0xc0, 0x9e,\n\t0x76, 0xd5, 0xab, 0xf2, 0x81, 0x9a, 0x79, 0x2a, 0xac, 0xdd, 0x11,\n\t0xa8, 0xd0, 0xc3, 0x1f, 0xbc, 0x6a, 0xac, 0x96, 0xc1, 0xa8, 0x2c,\n\t0xf8, 0x61, 0x85, 0xc3, 0xac, 0xf2, 0xe1, 0x7c, 0x29, 0x98, 0x05,\n\t0x52, 0x70, 0xab, 0xd2, 0x0a, 0x2d, 0x07, 0xc0, 0xaa, 0x06, 0x19,\n\t0x10, 0x00, 0x3b\n};\n\nstatic const int _img_happy_length = 4282;\nstatic const char _img_hello[4050] = {\n\t0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x7f, 0x00, 0x7f, 0x00, 0xf7,\n\t0xe4, 0x00, 0x00, 0x00, 0x00, 0x09, 0x80, 0xc3, 0x8e, 0xb4, 0x8a,\n\t0x1a, 0x89, 0xb1, 0xf3, 0xc7, 0x4f, 0xed, 0xc3, 0x4d, 0x0c, 0x7f,\n\t0xbb, 0x40, 0xaa, 0xb0, 0xe6, 0xbc, 0x4b, 0xef, 0xc4, 0x4e, 0xc4,\n\t0xa1, 0x40, 0x26, 0x93, 0xac, 0x18, 0x76, 0xa3, 0xef, 0xc3, 0x4d,\n\t0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xdd, 0xbf,\n\t0x5f, 0x01, 0x81, 0xc6, 0x07, 0x80, 0xbf, 0x3f, 0xb3, 0xae, 0x12,\n\t0x90, 0xc1, 0xd6, 0xe0, 0xe1, 0x40, 0xb9, 0xb3, 0xe6, 0xbe, 0x4d,\n\t0xc3, 0xa0, 0x40, 0x02, 0x7e, 0xc1, 0x37, 0xa6, 0xaa, 0x4e, 0x97,\n\t0xa6, 0xf3, 0xc7, 0x4f, 0xf1, 0xc6, 0x4e, 0xc6, 0xa3, 0x41, 0x6d,\n\t0xbc, 0x9b, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f,\n\t0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7,\n\t0x4f, 0x00, 0x81, 0xc6, 0x1a, 0x8c, 0xc8, 0x07, 0x71, 0xa7, 0x01,\n\t0x80, 0xc3, 0x12, 0x72, 0xa6, 0x3a, 0xae, 0xac, 0x65, 0xbd, 0xb9,\n\t0xfb, 0xfd, 0xfd, 0xc2, 0xa0, 0x40, 0xf0, 0xc5, 0x4e, 0x09, 0x6c,\n\t0xa0, 0x34, 0x96, 0x91, 0x18, 0x78, 0x9c, 0x01, 0x81, 0xc6, 0x03,\n\t0x7d, 0xbe, 0x40, 0xba, 0xb3, 0x02, 0x7f, 0xc3, 0x0c, 0x6e, 0xa2,\n\t0x40, 0xba, 0xb3, 0x34, 0x97, 0x91, 0x31, 0xa1, 0xa6, 0xbf, 0xc8,\n\t0xc8, 0x39, 0x3e, 0x47, 0x39, 0x3f, 0x48, 0x0a, 0x6b, 0x9e, 0x33,\n\t0x90, 0x8f, 0x39, 0x41, 0x4a, 0x3a, 0x4c, 0x53, 0x3a, 0x54, 0x5a,\n\t0x3b, 0x5e, 0x63, 0x3b, 0x66, 0x6a, 0x3c, 0x76, 0x78, 0x3c, 0x6e,\n\t0x71, 0x51, 0x86, 0x7c, 0xf3, 0xc7, 0x4f, 0xf4, 0xc7, 0x4f, 0xf3,\n\t0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xe2, 0xb9, 0x49, 0xc5, 0xa1, 0x40,\n\t0x59, 0x82, 0x76, 0x73, 0x92, 0x6b, 0x33, 0x96, 0x90, 0xf3, 0xc7,\n\t0x4f, 0xf3, 0xc7, 0x4f, 0xe6, 0xbc, 0x4b, 0xc4, 0xa1, 0x3f, 0xf3,\n\t0xc7, 0x4f, 0xc2, 0x9f, 0x3f, 0xc4, 0xa0, 0x3f, 0xc9, 0xa3, 0x3f,\n\t0xf3, 0xc7, 0x4f, 0x9b, 0x9a, 0x57, 0xb6, 0x9e, 0x47, 0xa6, 0x9a,\n\t0x4f, 0xbe, 0xa3, 0x50, 0x84, 0x92, 0x62, 0x95, 0xae, 0x7e, 0xb5,\n\t0xb3, 0x70, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f,\n\t0xc1, 0x9f, 0x40, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7,\n\t0x4f, 0xc4, 0xa1, 0x40, 0xca, 0xa6, 0x41, 0xce, 0xa8, 0x43, 0xd3,\n\t0xad, 0x45, 0xda, 0xb3, 0x47, 0xd0, 0xba, 0x59, 0xf3, 0xc7, 0x4f,\n\t0xee, 0xc3, 0x4d, 0xc8, 0xbb, 0x64, 0xaf, 0xc2, 0x75, 0xda, 0xc2,\n\t0x5b, 0xf1, 0xc5, 0x4e, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf5,\n\t0xc8, 0x4f, 0xf8, 0xc9, 0x4c, 0xee, 0xc6, 0x51, 0xe3, 0xc5, 0x57,\n\t0xf6, 0xc9, 0x50, 0xf1, 0xc7, 0x50, 0xf3, 0xcf, 0x69, 0xd5, 0xc5,\n\t0x60, 0x00, 0x81, 0xc5, 0x00, 0x81, 0xc6, 0x05, 0x69, 0x9f, 0x00,\n\t0x81, 0xc6, 0x1c, 0x99, 0xbe, 0x00, 0x81, 0xc6, 0x00, 0x81, 0xc6,\n\t0x00, 0x67, 0x9e, 0x01, 0x68, 0x9f, 0x06, 0x69, 0x9d, 0x16, 0x6e,\n\t0x97, 0x0c, 0x71, 0x9d, 0x2a, 0x79, 0x8d, 0x00, 0x81, 0xc6, 0x00,\n\t0x6a, 0xa2, 0x00, 0x6c, 0xa7, 0x10, 0x6c, 0xa1, 0x00, 0x71, 0xae,\n\t0x00, 0x75, 0xb4, 0x00, 0x7a, 0xbc, 0x00, 0x7f, 0xc3, 0x13, 0x79,\n\t0xb2, 0x05, 0x6a, 0xa0, 0x43, 0x7c, 0x82, 0x00, 0x7f, 0xc3, 0x00,\n\t0x80, 0xc8, 0x40, 0xba, 0xb3, 0x40, 0xba, 0xb3, 0x40, 0xba, 0xb3,\n\t0x3b, 0x8a, 0x88, 0x33, 0x95, 0x8f, 0x3b, 0x94, 0x8d, 0x33, 0x96,\n\t0x90, 0x35, 0x9b, 0x94, 0x3c, 0x9a, 0x97, 0x2b, 0x8f, 0x94, 0x39,\n\t0xa2, 0x9c, 0x40, 0xba, 0xb3, 0x1a, 0x88, 0xbd, 0x27, 0x8b, 0xb5,\n\t0x26, 0x9a, 0xb9, 0x40, 0xba, 0xb3, 0x3d, 0xa6, 0xa1, 0x3d, 0xab,\n\t0xa5, 0x3d, 0xae, 0xa9, 0x3d, 0xb3, 0xac, 0x3e, 0xb3, 0xac, 0x40,\n\t0xba, 0xb3, 0x3d, 0xb7, 0xb3, 0x3e, 0xba, 0xb3, 0x36, 0xb1, 0xb6,\n\t0x2a, 0xa6, 0xba, 0x1d, 0x8e, 0xaa, 0x5c, 0x9b, 0x9b, 0x49, 0x93,\n\t0x84, 0x73, 0xaa, 0x91, 0x4e, 0x96, 0xa2, 0x42, 0xb6, 0xae, 0x40,\n\t0xb7, 0xb0, 0x40, 0xba, 0xb3, 0x4c, 0xb9, 0xb3, 0x58, 0xba, 0xad,\n\t0x7d, 0xb0, 0xae, 0x6a, 0xb8, 0xb4, 0x74, 0xb7, 0xb4, 0x7b, 0xb7,\n\t0xb4, 0x70, 0xb6, 0xa6, 0x60, 0x9c, 0x99, 0x00, 0x81, 0xc6, 0x00,\n\t0x82, 0xc8, 0x0b, 0x87, 0xc3, 0x14, 0x88, 0xc9, 0x14, 0x87, 0xc7,\n\t0x13, 0x92, 0xc1, 0xe1, 0xe5, 0xe4, 0x87, 0xb0, 0x8a, 0x83, 0xb6,\n\t0xb4, 0xac, 0xbc, 0xc5, 0xb6, 0xba, 0xbb, 0xc5, 0xca, 0xc9, 0xcc,\n\t0xb2, 0xb6, 0xec, 0xb0, 0xb7, 0xe3, 0xb1, 0xb7, 0xf0, 0xb0, 0xb7,\n\t0xc2, 0xba, 0x96, 0xf5, 0xdb, 0x91, 0xdd, 0xd1, 0xa9, 0xa6, 0xb8,\n\t0xc4, 0x9c, 0xdb, 0xd8, 0x95, 0xd1, 0xce, 0xca, 0xdc, 0xe6, 0xcc,\n\t0xcc, 0xcc, 0xc9, 0xca, 0xc9, 0xd6, 0xd6, 0xd5, 0xd0, 0xcf, 0xcf,\n\t0xf1, 0xe9, 0xd1, 0xd0, 0xe6, 0xf4, 0xd1, 0xe8, 0xf6, 0xcf, 0xe5,\n\t0xf1, 0xe7, 0xe7, 0xe6, 0xff, 0xff, 0xff, 0xf5, 0xf5, 0xf3, 0xfd,\n\t0xfb, 0xf4, 0xfd, 0xfe, 0xfe, 0xbe, 0xd2, 0xa0, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x21, 0xf9, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x21, 0xff, 0x0b,\n\t0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x6b,\n\t0x0d, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x3d, 0x30, 0x2e, 0x34, 0x35,\n\t0x34, 0x35, 0x35, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00,\n\t0x7f, 0x00, 0x00, 0x08, 0xfe, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0,\n\t0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x24, 0x18, 0xa0, 0x82, 0x0b,\n\t0x1a, 0x9b, 0x36, 0xb5, 0x82, 0x45, 0x31, 0xd5, 0x26, 0x4d, 0x34,\n\t0x34, 0x30, 0x58, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x2e,\n\t0x34, 0xe0, 0x42, 0x53, 0x2a, 0x58, 0xbb, 0x52, 0xaa, 0x5c, 0xb9,\n\t0xab, 0xd5, 0xa6, 0x1d, 0x2e, 0x36, 0x8a, 0x9c, 0x49, 0xb3, 0xa6,\n\t0xcd, 0x81, 0x1a, 0x76, 0xa4, 0x62, 0xc9, 0xb3, 0x27, 0xac, 0x4d,\n\t0x34, 0x2a, 0xdc, 0x1c, 0x4a, 0xb4, 0xa8, 0xc0, 0x9c, 0xad, 0x7a,\n\t0x2a, 0x55, 0x9a, 0x8a, 0x86, 0x01, 0xa3, 0x50, 0xa3, 0x72, 0x64,\n\t0x40, 0x63, 0xe7, 0xd2, 0xab, 0x3d, 0x37, 0xb5, 0x18, 0x20, 0xb5,\n\t0xab, 0x57, 0x17, 0x9b, 0xb0, 0x8a, 0x55, 0xba, 0x49, 0x83, 0xd7,\n\t0xb3, 0x07, 0x07, 0x48, 0xd0, 0xa0, 0x41, 0x02, 0xd7, 0x85, 0x03,\n\t0x68, 0x24, 0x1d, 0x4b, 0x97, 0x65, 0xaa, 0x16, 0x01, 0xa6, 0x32,\n\t0x60, 0xeb, 0x16, 0xed, 0x47, 0x09, 0x2a, 0x00, 0x15, 0x6a, 0x84,\n\t0x09, 0x53, 0xa3, 0x41, 0x34, 0x50, 0xbc, 0x35, 0x58, 0x21, 0x6c,\n\t0xdd, 0xc7, 0x2b, 0x61, 0xed, 0x90, 0x69, 0x10, 0xb0, 0x60, 0xc2,\n\t0x86, 0x07, 0xd9, 0x40, 0x91, 0xd7, 0x2f, 0x42, 0x09, 0x36, 0x1a,\n\t0x15, 0x1b, 0x5d, 0x8c, 0x18, 0x31, 0xd2, 0x98, 0x0a, 0xa9, 0xe8,\n\t0x8c, 0xd3, 0x31, 0xe4, 0xd7, 0x29, 0x37, 0x09, 0x25, 0x28, 0x21,\n\t0x87, 0x68, 0xd2, 0xa6, 0x51, 0xab, 0x66, 0xed, 0x59, 0xa0, 0x8a,\n\t0xdb, 0xa6, 0x83, 0x0b, 0x3f, 0x4d, 0x6c, 0x90, 0x59, 0x81, 0x2e,\n\t0xac, 0xc2, 0x5e, 0x5e, 0x56, 0x60, 0x80, 0xdf, 0xa3, 0x87, 0x0f,\n\t0x2f, 0x6d, 0xbc, 0x37, 0x80, 0x01, 0x36, 0x30, 0x95, 0x96, 0xce,\n\t0x7d, 0x92, 0x25, 0x15, 0x00, 0x5c, 0xfe, 0xcc, 0x5d, 0x4e, 0x3e,\n\t0x95, 0x86, 0x01, 0x39, 0x88, 0x73, 0x97, 0x5e, 0xac, 0x11, 0x78,\n\t0xbf, 0x01, 0x72, 0x44, 0x5f, 0x3f, 0x5c, 0xd2, 0xa1, 0x43, 0x89,\n\t0xe4, 0x92, 0xdf, 0x9f, 0x32, 0x95, 0x20, 0xfa, 0xf4, 0xb5, 0x87,\n\t0x82, 0x5f, 0x34, 0x00, 0x28, 0x9d, 0x7d, 0x87, 0x20, 0x32, 0x0a,\n\t0x2b, 0xfc, 0x35, 0x18, 0x4b, 0x32, 0x06, 0x72, 0xd7, 0x1e, 0x65,\n\t0x52, 0x69, 0x20, 0xda, 0x7a, 0xa3, 0x65, 0xb2, 0x9d, 0x24, 0x8e,\n\t0xdc, 0xa7, 0x88, 0x2a, 0x0d, 0x86, 0x28, 0x0b, 0x84, 0xd3, 0x15,\n\t0xa3, 0x21, 0x86, 0x83, 0xf0, 0x66, 0x54, 0x00, 0x80, 0x6c, 0x27,\n\t0xdd, 0x29, 0xb5, 0xdc, 0x72, 0x0b, 0x2e, 0xa6, 0x70, 0xe8, 0x61,\n\t0x28, 0x28, 0x85, 0xd8, 0xa0, 0x2c, 0xc6, 0x08, 0x07, 0xa3, 0x8c,\n\t0x34, 0xba, 0x38, 0xdc, 0x7b, 0x51, 0xa1, 0x80, 0x09, 0x77, 0xa6,\n\t0x2c, 0x43, 0xc7, 0x1d, 0x79, 0xe4, 0xd1, 0x87, 0x1c, 0x50, 0x20,\n\t0x72, 0x08, 0x24, 0xa0, 0xb8, 0xa2, 0xa3, 0x8e, 0x3c, 0x12, 0x73,\n\t0x4a, 0x18, 0x7b, 0xe0, 0xd1, 0xa4, 0x1e, 0x72, 0x0c, 0xd3, 0xe3,\n\t0x74, 0x82, 0xa8, 0x48, 0x54, 0x8b, 0x2f, 0x8a, 0x91, 0x07, 0x1e,\n\t0x77, 0xb4, 0x59, 0x07, 0x1b, 0x58, 0x44, 0xa1, 0xc8, 0x28, 0xab,\n\t0x5c, 0x79, 0xe5, 0x2c, 0xa7, 0xc8, 0xb1, 0x66, 0x9b, 0x6d, 0xe2,\n\t0xa1, 0xc7, 0x32, 0x63, 0x0a, 0x87, 0xc9, 0x80, 0x50, 0x0d, 0x50,\n\t0x88, 0x90, 0xc4, 0x18, 0xa3, 0x26, 0x9f, 0x77, 0xd4, 0xd1, 0x06,\n\t0x16, 0x58, 0x74, 0x61, 0x4b, 0x28, 0xb1, 0xd8, 0xa9, 0x63, 0x2c,\n\t0xcb, 0x30, 0xca, 0xa8, 0x9f, 0xb5, 0x20, 0x5a, 0x8c, 0x0d, 0x51,\n\t0x69, 0x40, 0xc9, 0x74, 0xb8, 0xe8, 0xa1, 0xa9, 0x1b, 0x90, 0x9a,\n\t0x11, 0x45, 0x28, 0x56, 0x5a, 0x1a, 0x62, 0x2c, 0xfe, 0xbc, 0xcc,\n\t0xc1, 0xa6, 0xa6, 0x4c, 0xca, 0x61, 0xca, 0x74, 0x29, 0x42, 0xa5,\n\t0x02, 0x77, 0x61, 0xe4, 0xc1, 0x68, 0x1c, 0x6a, 0x40, 0xca, 0xc5,\n\t0x27, 0x20, 0xba, 0x7a, 0x69, 0x2f, 0x7f, 0xcc, 0xaa, 0xa9, 0x1e,\n\t0xb8, 0x08, 0x59, 0x8c, 0x25, 0x8b, 0x11, 0x65, 0x03, 0xa2, 0x8a,\n\t0xfa, 0xea, 0xe6, 0x1a, 0x90, 0x4a, 0xca, 0xaa, 0xb1, 0x57, 0xc6,\n\t0x72, 0x8b, 0xa9, 0xb4, 0xe6, 0x71, 0x4b, 0x26, 0xc2, 0xb5, 0x27,\n\t0x01, 0x54, 0xd3, 0x0e, 0x57, 0x2d, 0x9f, 0x8f, 0x46, 0x1a, 0x05,\n\t0x28, 0x75, 0x72, 0x6b, 0xa7, 0xac, 0xe1, 0x8e, 0x5b, 0x6e, 0x23,\n\t0xe7, 0x1a, 0x45, 0x03, 0xa2, 0xc4, 0x2c, 0x7a, 0x07, 0xb0, 0xc2,\n\t0x7e, 0x42, 0x4a, 0xa5, 0xf2, 0x1e, 0x9b, 0x2c, 0xad, 0x9d, 0xde,\n\t0x4b, 0xe1, 0x50, 0x46, 0x4e, 0x77, 0x0b, 0x9b, 0x75, 0x60, 0x1b,\n\t0xa9, 0x2d, 0xa0, 0x30, 0x58, 0x70, 0xb7, 0xcb, 0x80, 0xdb, 0x27,\n\t0x1d, 0xa7, 0x4c, 0x57, 0x88, 0x99, 0x36, 0x49, 0x70, 0xa1, 0x8f,\n\t0x72, 0xe0, 0x81, 0x2a, 0xa4, 0x51, 0x78, 0x42, 0xca, 0xc5, 0x76,\n\t0xc2, 0x4a, 0x6f, 0x9b, 0x79, 0x2c, 0xc3, 0x1e, 0x20, 0x51, 0xb1,\n\t0xc8, 0x2f, 0x2e, 0x6e, 0x68, 0x01, 0xa9, 0x17, 0x14, 0xb7, 0xca,\n\t0xf2, 0xa5, 0xc2, 0x74, 0xc9, 0xa4, 0x18, 0xb7, 0x4e, 0x47, 0xa4,\n\t0x51, 0x2a, 0xf0, 0x9b, 0x89, 0x2d, 0x5e, 0x64, 0xa1, 0xc6, 0xbb,\n\t0x2b, 0xff, 0x6c, 0xe9, 0x1c, 0x79, 0xe8, 0x21, 0x46, 0xc7, 0xd3,\n\t0xe1, 0x2b, 0x15, 0x03, 0x87, 0xd6, 0xe7, 0x88, 0x22, 0x50, 0x44,\n\t0xf1, 0x49, 0x95, 0x52, 0xb7, 0xdc, 0x4b, 0x18, 0xb5, 0x04, 0x5a,\n\t0x2e, 0xa8, 0x5d, 0xed, 0x2a, 0xe8, 0x23, 0xf7, 0x39, 0x32, 0x8a,\n\t0xca, 0x04, 0x97, 0x7d, 0x25, 0x2a, 0xfc, 0x9e, 0xa6, 0x75, 0xfe,\n\t0x57, 0x03, 0xa0, 0x69, 0x1a, 0x82, 0x87, 0x28, 0x02, 0x4a, 0xc5,\n\t0x76, 0x5b, 0x9a, 0xe5, 0x74, 0x98, 0x1c, 0x2d, 0x95, 0x04, 0x5d,\n\t0x63, 0x02, 0x77, 0x82, 0x73, 0xe3, 0x58, 0xb8, 0xa5, 0xa8, 0x70,\n\t0xc7, 0x36, 0x5a, 0x8c, 0x17, 0x03, 0xb8, 0xe0, 0x9e, 0x14, 0x3b,\n\t0xf9, 0x95, 0x87, 0x13, 0x97, 0x43, 0xb4, 0x67, 0x49, 0x00, 0xc8,\n\t0x23, 0x52, 0x2a, 0xe8, 0xc9, 0xb6, 0x9f, 0xdb, 0x59, 0xb9, 0xde,\n\t0x34, 0x80, 0xec, 0xd5, 0x00, 0x2a, 0x08, 0x32, 0x25, 0x28, 0x2a,\n\t0xb7, 0x6e, 0xb8, 0x31, 0x98, 0x00, 0x72, 0x9c, 0x75, 0x03, 0x31,\n\t0x20, 0x03, 0x23, 0x83, 0xc7, 0xab, 0xfb, 0x95, 0xb4, 0x28, 0x06,\n\t0xbc, 0x41, 0x0c, 0x8c, 0x02, 0x0a, 0xeb, 0xc7, 0xeb, 0xb8, 0x89,\n\t0xec, 0xd6, 0xb5, 0x80, 0x7b, 0xd4, 0xd1, 0xeb, 0xd8, 0xca, 0xef,\n\t0xcb, 0x0b, 0x34, 0x40, 0x10, 0xa1, 0xc0, 0x9b, 0xbd, 0x9d, 0x34,\n\t0x74, 0x4f, 0x90, 0x06, 0x91, 0xfb, 0x3c, 0x7e, 0x83, 0x9b, 0x2c,\n\t0x0c, 0x3c, 0x0d, 0xa1, 0xe4, 0xae, 0x54, 0x2e, 0x9f, 0x74, 0xe2,\n\t0xf9, 0xf1, 0xa2, 0x74, 0x22, 0x8a, 0x2e, 0x58, 0xc1, 0xe2, 0x82,\n\t0xf9, 0xd7, 0x09, 0x02, 0xee, 0x8c, 0xc7, 0x12, 0x5d, 0x1c, 0x41,\n\t0x08, 0x3f, 0x20, 0xc2, 0xfd, 0x3e, 0x27, 0x8a, 0x21, 0xfc, 0x40,\n\t0x08, 0x9d, 0x10, 0xcb, 0x0e, 0x00, 0xa8, 0x01, 0x4f, 0x78, 0x82,\n\t0x6c, 0x3d, 0x21, 0x85, 0x03, 0x85, 0xe0, 0x83, 0x08, 0x1e, 0x0f,\n\t0x09, 0x3e, 0xe0, 0x20, 0x11, 0x2c, 0xb6, 0x94, 0x54, 0xb8, 0x2f,\n\t0x24, 0x0d, 0xe8, 0xc0, 0x07, 0x1c, 0xf0, 0x11, 0xf8, 0xad, 0x2e,\n\t0x47, 0x3c, 0x11, 0x85, 0x10, 0x66, 0xe8, 0x83, 0x23, 0x8c, 0x65,\n\t0x15, 0xa2, 0x58, 0xe0, 0x2e, 0x54, 0x21, 0x0a, 0x02, 0xee, 0x42,\n\t0x17, 0xfe, 0xa2, 0x10, 0x05, 0x09, 0xaf, 0x62, 0x84, 0x10, 0x26,\n\t0xd0, 0x87, 0x3c, 0xd1, 0xc5, 0xff, 0x68, 0xa2, 0x00, 0x25, 0xa8,\n\t0xc1, 0x0e, 0x76, 0x80, 0xc3, 0x14, 0x3a, 0xc0, 0x91, 0xef, 0x5d,\n\t0x6f, 0x29, 0x1a, 0x7c, 0x60, 0x07, 0xc5, 0x22, 0x0a, 0x22, 0x08,\n\t0x61, 0x08, 0x9f, 0x58, 0xc9, 0x27, 0x86, 0x20, 0x04, 0x22, 0x88,\n\t0x62, 0x25, 0x8c, 0x98, 0x61, 0x11, 0x90, 0xc8, 0x13, 0x10, 0x8a,\n\t0x70, 0x88, 0x4a, 0x99, 0xe0, 0x4c, 0x3a, 0x50, 0x06, 0x3e, 0xf0,\n\t0xa1, 0x4f, 0x7c, 0x80, 0x43, 0x08, 0x16, 0x82, 0x3e, 0x0b, 0xea,\n\t0x50, 0x25, 0x06, 0x44, 0xa0, 0x02, 0xc5, 0xe2, 0x46, 0x1f, 0x14,\n\t0x21, 0x17, 0x29, 0xc9, 0x45, 0x11, 0x42, 0xe8, 0x03, 0x24, 0xa8,\n\t0x64, 0x15, 0x1b, 0xfc, 0x81, 0x07, 0xaf, 0xd2, 0xc0, 0x07, 0x4e,\n\t0xf2, 0x2a, 0x9b, 0x20, 0x5d, 0x47, 0x1c, 0x50, 0x47, 0x5a, 0xe5,\n\t0x71, 0x8f, 0x09, 0x71, 0x01, 0xee, 0x08, 0xb7, 0x14, 0xfa, 0x75,\n\t0x82, 0x8d, 0x6d, 0x34, 0xe2, 0x10, 0xe2, 0x05, 0x49, 0x2d, 0x16,\n\t0x81, 0x7f, 0xbb, 0x90, 0xe1, 0x0c, 0x7f, 0x60, 0x43, 0xb1, 0x90,\n\t0x42, 0x7f, 0xb0, 0xc4, 0xca, 0xf6, 0x44, 0xa2, 0x84, 0x3b, 0xd2,\n\t0xea, 0x0e, 0x7c, 0xa8, 0x02, 0xf5, 0x66, 0x10, 0x3f, 0x0c, 0x86,\n\t0xe8, 0x08, 0x21, 0x9c, 0xe1, 0x11, 0x56, 0xb1, 0x8a, 0x03, 0xce,\n\t0x70, 0x86, 0x9d, 0x60, 0x85, 0x2a, 0x8c, 0xf0, 0xc0, 0x19, 0x86,\n\t0xd1, 0x55, 0x2d, 0x08, 0x49, 0x00, 0x3a, 0xf9, 0x4b, 0x3c, 0xc0,\n\t0x81, 0x85, 0x69, 0x11, 0xe0, 0x0b, 0xaf, 0x24, 0xcb, 0x67, 0x12,\n\t0xc1, 0x8b, 0xcf, 0x34, 0x27, 0x19, 0x67, 0x39, 0x84, 0x3f, 0x36,\n\t0x48, 0x8e, 0x1f, 0x71, 0x00, 0x1c, 0x94, 0xf5, 0xcb, 0x11, 0x20,\n\t0xa4, 0x02, 0x73, 0xfe, 0x5b, 0x9d, 0x9d, 0x74, 0x51, 0xc4, 0x67,\n\t0xfe, 0xa0, 0x9a, 0xe9, 0x44, 0x20, 0x40, 0x69, 0xc9, 0xad, 0xe9,\n\t0x81, 0x24, 0x04, 0x75, 0xf8, 0x25, 0xa3, 0xec, 0x79, 0x90, 0x0d,\n\t0x58, 0x50, 0x7e, 0x3c, 0x89, 0x85, 0x44, 0x27, 0x4a, 0xd1, 0xba,\n\t0xf5, 0x44, 0x15, 0x44, 0x48, 0x66, 0x3a, 0x1f, 0x08, 0xd0, 0x59,\n\t0xfe, 0xc0, 0x08, 0xea, 0x8b, 0x68, 0x45, 0x2b, 0x8a, 0x95, 0x54,\n\t0xcc, 0xc6, 0x23, 0x21, 0xa0, 0xa7, 0xa6, 0xbc, 0x99, 0x01, 0x84,\n\t0xb8, 0xb0, 0x73, 0x4a, 0xf9, 0x05, 0x33, 0x66, 0x4a, 0xd3, 0x99,\n\t0x06, 0x83, 0x17, 0x16, 0xe5, 0xc9, 0x34, 0x39, 0xe8, 0x83, 0x9e,\n\t0x0a, 0xc1, 0x08, 0x9d, 0x28, 0x02, 0x4f, 0x7d, 0xf0, 0x83, 0x21,\n\t0x1c, 0x01, 0x8e, 0x2c, 0x81, 0x55, 0x30, 0x6a, 0x5a, 0xd3, 0x5e,\n\t0x60, 0x45, 0x17, 0xdc, 0xe3, 0x48, 0x08, 0x7c, 0xf9, 0x4b, 0x3e,\n\t0x9c, 0xa1, 0x01, 0x08, 0x21, 0xa6, 0x05, 0x91, 0x18, 0x8b, 0x60,\n\t0x48, 0x63, 0x1a, 0x60, 0x0d, 0x2b, 0x58, 0xa3, 0xe1, 0x0c, 0x9c,\n\t0x5e, 0x05, 0x88, 0x47, 0x30, 0x82, 0x11, 0x8e, 0x20, 0x0a, 0x44,\n\t0xba, 0xe2, 0x13, 0x48, 0x50, 0x2b, 0x5b, 0x73, 0xd9, 0x93, 0x58,\n\t0xf4, 0x02, 0x1a, 0xd1, 0x10, 0xab, 0x58, 0xa5, 0xf1, 0x8b, 0x9c,\n\t0xb2, 0x44, 0x06, 0x20, 0x19, 0x01, 0x55, 0x3d, 0x59, 0x06, 0x90,\n\t0x59, 0x71, 0xab, 0x49, 0xe5, 0x05, 0x34, 0xf4, 0xaa, 0xd7, 0x68,\n\t0x00, 0xc3, 0xaf, 0x3d, 0xd1, 0x05, 0x5d, 0x01, 0x39, 0x59, 0xa5,\n\t0xc4, 0x82, 0x19, 0x8c, 0xd5, 0xab, 0x33, 0xb0, 0x02, 0xcf, 0x8e,\n\t0x08, 0x56, 0xa1, 0xc0, 0x2c, 0xec, 0x41, 0x9a, 0x87, 0x3b, 0x4f,\n\t0xc0, 0x11, 0x56, 0x8b, 0xcd, 0xec, 0x58, 0xfb, 0xfa, 0xb3, 0xae,\n\t0xe6, 0x55, 0xb5, 0xd3, 0xd8, 0xfe, 0x2c, 0x26, 0xa9, 0x67, 0x90,\n\t0xa9, 0x82, 0xd6, 0xaa, 0x58, 0x35, 0x48, 0x1f, 0x2f, 0x88, 0xd4,\n\t0x58, 0xfc, 0x02, 0xaf, 0xd1, 0x08, 0xae, 0x70, 0xa3, 0x21, 0x8d,\n\t0xb2, 0x42, 0xd6, 0x55, 0xb0, 0x72, 0xc6, 0x70, 0x97, 0x0b, 0x0d,\n\t0xd6, 0x2e, 0x25, 0x93, 0x1f, 0x09, 0x01, 0x68, 0xef, 0x80, 0x07,\n\t0x3b, 0x50, 0x51, 0xb7, 0x0f, 0x35, 0x26, 0x4b, 0x7a, 0x01, 0x8c,\n\t0xee, 0x7a, 0xb7, 0xbb, 0xbf, 0x30, 0xab, 0xd4, 0x60, 0xf5, 0x8b,\n\t0xef, 0x7e, 0x57, 0xbc, 0x25, 0x3c, 0x21, 0x42, 0x3a, 0x60, 0x87,\n\t0xe9, 0xf2, 0x41, 0x09, 0x07, 0x11, 0xa5, 0x05, 0x49, 0x29, 0xd2,\n\t0x91, 0x4e, 0xb4, 0x70, 0xf6, 0xa5, 0xa8, 0x58, 0x5a, 0x71, 0x52,\n\t0x8e, 0x38, 0x20, 0x0d, 0x2a, 0x65, 0x14, 0x1f, 0xca, 0x90, 0x5b,\n\t0x82, 0xbc, 0xd4, 0xb4, 0xeb, 0x93, 0xd7, 0x2e, 0x3d, 0x12, 0x80,\n\t0x2a, 0x0c, 0x96, 0x56, 0x78, 0x80, 0x6f, 0x41, 0x0e, 0x8c, 0xca,\n\t0x04, 0x37, 0x08, 0x16, 0x51, 0x5d, 0x48, 0x2f, 0xa7, 0x8b, 0x87,\n\t0x38, 0x80, 0x72, 0x20, 0x14, 0xb6, 0xb0, 0xb1, 0xfc, 0x07, 0x92,\n\t0x0f, 0xd8, 0x21, 0xc0, 0x9b, 0x82, 0x03, 0x0c, 0x58, 0x73, 0x60,\n\t0x77, 0x8a, 0x78, 0x3f, 0x24, 0xfe, 0x48, 0x00, 0xa8, 0xf0, 0x60,\n\t0x4f, 0xc6, 0xe1, 0x09, 0x1f, 0xe0, 0xca, 0x81, 0xb1, 0xf7, 0x62,\n\t0x1d, 0xc5, 0x38, 0xba, 0xd3, 0xe5, 0x53, 0xc4, 0xac, 0x60, 0x05,\n\t0x25, 0x88, 0xd3, 0x82, 0xa1, 0xe8, 0xb1, 0x9d, 0x5e, 0x91, 0xe1,\n\t0x85, 0x28, 0x80, 0x9b, 0xa0, 0xad, 0x43, 0xb0, 0xd4, 0xb0, 0x86,\n\t0x77, 0x3d, 0x14, 0x7a, 0x4a, 0xe6, 0xcf, 0x82, 0x0f, 0x4a, 0xdd,\n\t0xe9, 0x4a, 0x19, 0x52, 0x58, 0x00, 0xc3, 0x43, 0x2f, 0x18, 0xd2,\n\t0x2c, 0x2f, 0x27, 0x17, 0x1b, 0x10, 0x49, 0xfe, 0x00, 0xa6, 0x50,\n\t0x63, 0x46, 0x45, 0x0c, 0xcc, 0x5c, 0x18, 0xb3, 0x27, 0x2a, 0x6c,\n\t0x66, 0xba, 0xd8, 0xf5, 0x0d, 0x4a, 0xd0, 0xe4, 0x42, 0x38, 0xd9,\n\t0xe6, 0x6b, 0x81, 0xd9, 0x0b, 0x9f, 0x18, 0x33, 0x8f, 0xeb, 0xfc,\n\t0x9a, 0x58, 0x04, 0x0d, 0x0f, 0x55, 0x00, 0xe7, 0x47, 0x3a, 0x90,\n\t0x86, 0x3e, 0xdf, 0x01, 0x4e, 0xd9, 0xb2, 0xc5, 0x98, 0x71, 0x94,\n\t0xdf, 0x4a, 0x5b, 0xfa, 0xd2, 0x98, 0xce, 0xb4, 0xa6, 0x29, 0xfa,\n\t0x2d, 0x60, 0x9e, 0xe1, 0xc3, 0x1e, 0x19, 0x41, 0xa3, 0x15, 0xda,\n\t0xae, 0x48, 0x2d, 0xc3, 0x17, 0xa8, 0x46, 0x75, 0x36, 0xb0, 0xc1,\n\t0xea, 0x56, 0xbb, 0xfa, 0xd5, 0xb0, 0x8e, 0xb5, 0xac, 0x67, 0x4d,\n\t0xeb, 0x5a, 0xdb, 0xba, 0xd5, 0xe8, 0xe0, 0xd3, 0x27, 0x43, 0x12,\n\t0x82, 0x33, 0xb4, 0xf9, 0x64, 0x58, 0x50, 0x03, 0x35, 0xb6, 0x41,\n\t0x6c, 0x62, 0x8f, 0x83, 0x1c, 0xc8, 0x4e, 0xb6, 0xb2, 0x97, 0xcd,\n\t0xec, 0x66, 0x3b, 0xfb, 0xd9, 0xd0, 0x8e, 0xb6, 0xb4, 0x93, 0x5d,\n\t0x0d, 0x01, 0xeb, 0x31, 0x24, 0x0e, 0xa8, 0x02, 0x1e, 0x1e, 0x1c,\n\t0x87, 0x2c, 0x80, 0x59, 0x0c, 0xc5, 0x26, 0x76, 0x37, 0xa6, 0x4d,\n\t0xee, 0x72, 0x9b, 0xfb, 0xdc, 0xcc, 0xae, 0xb6, 0x80, 0xd5, 0xa0,\n\t0x68, 0x06, 0x2b, 0xa1, 0xd1, 0xca, 0xfa, 0x32, 0xa4, 0xbe, 0xc0,\n\t0x8d, 0x70, 0x6f, 0xa3, 0x1c, 0xe8, 0xce, 0xb7, 0xbe, 0xf7, 0x4d,\n\t0x8e, 0x72, 0xf8, 0xc1, 0x93, 0x55, 0xd0, 0xf3, 0x9e, 0xdf, 0x6d,\n\t0x47, 0x36, 0x41, 0x1a, 0x0b, 0x5f, 0x80, 0x86, 0xbd, 0x8f, 0xcd,\n\t0xef, 0x86, 0x3b, 0xfc, 0xd9, 0xdf, 0xe8, 0x43, 0x37, 0x25, 0x2c,\n\t0x12, 0x07, 0xc0, 0xe0, 0x0a, 0xf3, 0x74, 0x83, 0x1a, 0xd4, 0x90,\n\t0x85, 0x2c, 0x0c, 0x3b, 0xdc, 0xdd, 0xc0, 0xf7, 0xc3, 0xfe, 0x47,\n\t0x3e, 0x72, 0x75, 0x43, 0x18, 0x0e, 0x2d, 0xa5, 0x49, 0x00, 0x1c,\n\t0x10, 0x02, 0x25, 0x3c, 0xa1, 0x0a, 0x44, 0xe6, 0x42, 0xbd, 0xc3,\n\t0xcd, 0x70, 0x92, 0xdb, 0x5c, 0xdf, 0xfe, 0xbe, 0xed, 0x14, 0x88,\n\t0x12, 0x80, 0x00, 0x28, 0xa0, 0x01, 0x0c, 0x78, 0x86, 0xbd, 0xc7,\n\t0x7d, 0xf3, 0xa2, 0x9f, 0xfb, 0x1b, 0x8e, 0xf6, 0xe6, 0x75, 0x8d,\n\t0x32, 0x03, 0x7b, 0x6f, 0xa3, 0xe6, 0x46, 0x8f, 0x3a, 0xb4, 0x4d,\n\t0xae, 0xd0, 0xf7, 0x46, 0x85, 0x01, 0xce, 0x18, 0xba, 0xc8, 0xa5,\n\t0xce, 0xf5, 0x65, 0x8f, 0x43, 0x68, 0xb7, 0x25, 0x70, 0x54, 0x94,\n\t0xe1, 0x74, 0xa8, 0x77, 0xbd, 0xeb, 0xca, 0x80, 0x41, 0x90, 0xdb,\n\t0x04, 0x6a, 0xa2, 0x50, 0x60, 0xe6, 0xc5, 0xf6, 0xc6, 0xd6, 0xcf,\n\t0x2e, 0xf5, 0x73, 0x30, 0x60, 0xcd, 0x8e, 0x06, 0x26, 0xc5, 0x8b,\n\t0x12, 0x00, 0xb2, 0x0f, 0x9d, 0xee, 0x68, 0x17, 0x48, 0x07, 0xe6,\n\t0x19, 0x76, 0xda, 0xce, 0xe4, 0xed, 0x65, 0x07, 0x7c, 0xd4, 0xed,\n\t0xee, 0x1c, 0x36, 0x83, 0xd6, 0x9b, 0xed, 0x2e, 0x8a, 0xdf, 0xc3,\n\t0x2d, 0x77, 0xc5, 0x17, 0x5d, 0x19, 0x04, 0x49, 0x69, 0x90, 0xdb,\n\t0x4e, 0x14, 0x06, 0x34, 0xc3, 0xe9, 0x21, 0xb7, 0x3c, 0xc9, 0x9b,\n\t0x11, 0x2d, 0x79, 0xa2, 0xb8, 0x4d, 0x7c, 0x80, 0x41, 0x57, 0x64,\n\t0xe0, 0xf4, 0x6d, 0x10, 0x5d, 0xf4, 0x0d, 0x2f, 0x07, 0x07, 0x0a,\n\t0x32, 0x00, 0x28, 0x7b, 0x72, 0xe7, 0x52, 0xe9, 0xbb, 0x37, 0x12,\n\t0x0f, 0x7b, 0x7e, 0x63, 0xde, 0x20, 0x8e, 0xaf, 0x3a, 0xee, 0xb7,\n\t0xd6, 0x8c, 0x6b, 0x18, 0xff, 0xf8, 0xd7, 0xd8, 0x86, 0x38, 0xc0,\n\t0xc1, 0xfc, 0xe6, 0x3b, 0xff, 0xf9, 0xd0, 0x8f, 0xbe, 0xf4, 0xa7,\n\t0x4f, 0x7d, 0xe8, 0x87, 0xe3, 0x19, 0x4f, 0x31, 0xc8, 0x86, 0xab,\n\t0xfe, 0x2e, 0xda, 0xb6, 0x29, 0x02, 0x12, 0xe0, 0x0f, 0x3f, 0x24,\n\t0x2a, 0x81, 0x8c, 0x63, 0x98, 0xff, 0xfc, 0xe8, 0x4f, 0xbf, 0xfa,\n\t0xd7, 0xcf, 0xfe, 0xf6, 0xbb, 0x3f, 0xfd, 0xa6, 0x20, 0x94, 0x41,\n\t0x60, 0xe0, 0xe8, 0x01, 0x0b, 0x9c, 0x28, 0x34, 0xb8, 0x8f, 0xfe,\n\t0xf5, 0x1f, 0x89, 0x23, 0x45, 0xe8, 0xff, 0x00, 0x18, 0x80, 0xc1,\n\t0x81, 0x09, 0xd9, 0x84, 0x10, 0xb6, 0xa5, 0x50, 0x78, 0x90, 0x06,\n\t0x91, 0x57, 0x28, 0x39, 0xd0, 0x21, 0xfb, 0x77, 0x1f, 0xfd, 0x27,\n\t0x80, 0x12, 0x38, 0x81, 0xd2, 0x71, 0x39, 0x07, 0x91, 0x01, 0x1c,\n\t0x06, 0x07, 0x0a, 0x80, 0x16, 0x0c, 0x00, 0x04, 0x0e, 0xf8, 0x80,\n\t0x8f, 0x30, 0x09, 0x14, 0x38, 0x82, 0x01, 0x98, 0x09, 0xa3, 0xa3,\n\t0x10, 0x23, 0x90, 0x81, 0x0b, 0x78, 0x75, 0x82, 0xf0, 0x81, 0xfb,\n\t0xe7, 0x08, 0x92, 0x40, 0x82, 0x32, 0x48, 0x1f, 0x93, 0x70, 0x82,\n\t0x0a, 0x81, 0x50, 0x8f, 0xf7, 0x4d, 0x9e, 0xd1, 0x81, 0x2e, 0xa8,\n\t0x7f, 0x8e, 0x10, 0x81, 0x33, 0x18, 0x84, 0xc4, 0x20, 0x09, 0x36,\n\t0x78, 0x83, 0x09, 0x85, 0x80, 0x3a, 0xb8, 0x83, 0x40, 0x20, 0x25,\n\t0x0f, 0x78, 0x1f, 0x21, 0x28, 0x84, 0x24, 0x38, 0x09, 0x91, 0x40,\n\t0x03, 0xf7, 0x97, 0x79, 0x47, 0xd8, 0x4d, 0x49, 0xe8, 0x19, 0x71,\n\t0xd1, 0x84, 0x3e, 0x18, 0x09, 0x22, 0x08, 0x85, 0x01, 0x88, 0x09,\n\t0x92, 0x80, 0x08, 0x54, 0xe8, 0x11, 0xec, 0x75, 0x7a, 0x90, 0x07,\n\t0x3c, 0x03, 0x20, 0x03, 0x89, 0xc0, 0x84, 0x4d, 0xf8, 0x83, 0x5f,\n\t0x08, 0x86, 0xf4, 0x21, 0x86, 0x8f, 0xf0, 0x1d, 0x20, 0xf1, 0x5f,\n\t0xa7, 0x37, 0x60, 0x1b, 0xb8, 0x3c, 0x1a, 0xd0, 0x82, 0x5c, 0x18,\n\t0x37, 0x5e, 0x28, 0x87, 0xd2, 0x41, 0x87, 0x8e, 0x20, 0x08, 0x4d,\n\t0xb6, 0x10, 0xfe, 0xc1, 0xe7, 0x49, 0x7b, 0x07, 0x3c, 0x54, 0xd1,\n\t0x86, 0x7f, 0x78, 0x08, 0x8e, 0xf0, 0x08, 0x92, 0xe0, 0x7f, 0x50,\n\t0x88, 0x09, 0x52, 0xe8, 0x08, 0x8e, 0x90, 0x1f, 0xea, 0xb5, 0x10,\n\t0x19, 0x30, 0x6a, 0x9a, 0x62, 0x55, 0x2b, 0xd8, 0x1b, 0xcf, 0x21,\n\t0x08, 0x6e, 0xf8, 0x87, 0x3f, 0x28, 0x09, 0x93, 0x40, 0x89, 0x13,\n\t0x68, 0x89, 0x91, 0xf0, 0x38, 0x88, 0x60, 0x88, 0x36, 0x11, 0x02,\n\t0x8d, 0xc6, 0x07, 0x78, 0xb0, 0x6d, 0x56, 0xc5, 0x79, 0xdd, 0x23,\n\t0x3c, 0x96, 0xd0, 0x83, 0x5c, 0x18, 0x89, 0x91, 0x80, 0x8a, 0x85,\n\t0x01, 0x20, 0x85, 0x31, 0x09, 0x92, 0x20, 0x09, 0x8f, 0xf0, 0x81,\n\t0xaf, 0xa8, 0x02, 0x55, 0xe8, 0x11, 0x0e, 0x30, 0x05, 0x6a, 0x00,\n\t0x07, 0x70, 0x50, 0x06, 0x4a, 0x10, 0x8a, 0xe6, 0x23, 0x01, 0x34,\n\t0xa0, 0x08, 0x8f, 0xf8, 0x86, 0x91, 0xf8, 0x08, 0x91, 0xd0, 0x8d,\n\t0xbf, 0xe8, 0x8d, 0x8f, 0x70, 0x8c, 0xbc, 0xa8, 0x08, 0x34, 0xb0,\n\t0x89, 0x33, 0xd1, 0x00, 0x0e, 0xe0, 0x00, 0x7b, 0x08, 0x40, 0x08,\n\t0xf1, 0x01, 0x5c, 0x00, 0x05, 0x8c, 0x50, 0x8a, 0xd9, 0x38, 0x8f,\n\t0x4d, 0x88, 0x08, 0x8c, 0x10, 0x05, 0x5c, 0xb0, 0x8e, 0xec, 0x08,\n\t0x3c, 0x1f, 0x80, 0x05, 0x59, 0xe0, 0x05, 0x51, 0x70, 0x09, 0x8a,\n\t0x20, 0x8f, 0xf4, 0xf8, 0x87, 0x88, 0xa0, 0x08, 0x49, 0x00, 0x06,\n\t0x5d, 0xa0, 0x05, 0x56, 0xa0, 0x8f, 0xfb, 0xd8, 0x1b, 0xfd, 0x08,\n\t0x29, 0x59, 0xd0, 0x05, 0x00, 0x99, 0x04, 0x8c, 0xb0, 0x08, 0x52,\n\t0x82, 0x89, 0x04, 0xa9, 0x7f, 0x88, 0x80, 0x89, 0x09, 0xa2, 0x08,\n\t0x8c, 0x00, 0x05, 0x60, 0xe0, 0x05, 0x66, 0xe0, 0x6d, 0x59, 0xd0,\n\t0x90, 0x0f, 0xb9, 0x3c, 0x11, 0x09, 0x66, 0xfe, 0x68, 0x06, 0x5d,\n\t0xc0, 0x05, 0x51, 0x00, 0xfe, 0x05, 0x40, 0x00, 0x04, 0x82, 0x60,\n\t0x09, 0x89, 0xa0, 0x91, 0x98, 0x98, 0x08, 0x96, 0x20, 0x08, 0x40,\n\t0x10, 0x04, 0x22, 0xe9, 0x05, 0x5d, 0x50, 0x92, 0x2c, 0x79, 0x92,\n\t0x0e, 0x99, 0x92, 0x68, 0xb1, 0x92, 0x2c, 0x29, 0x91, 0xde, 0x96,\n\t0x01, 0x01, 0xa0, 0x16, 0x1a, 0xa0, 0x02, 0x50, 0x09, 0x95, 0x6d,\n\t0x31, 0x00, 0x01, 0x00, 0x03, 0x5a, 0xd0, 0x71, 0x49, 0x29, 0x91,\n\t0x28, 0x69, 0x94, 0x10, 0xc9, 0x06, 0xc1, 0x92, 0x95, 0x90, 0x62,\n\t0x05, 0x29, 0xb7, 0x10, 0x30, 0x20, 0x31, 0x60, 0xb9, 0x06, 0x5b,\n\t0xc9, 0x95, 0x7e, 0x31, 0x02, 0x75, 0x10, 0x07, 0x6e, 0xb0, 0x06,\n\t0xde, 0x96, 0x94, 0x62, 0xd9, 0x11, 0x65, 0x99, 0x95, 0x6a, 0xc0,\n\t0x06, 0x6e, 0x50, 0x07, 0x67, 0x50, 0x94, 0x6a, 0x29, 0x15, 0x29,\n\t0x08, 0x31, 0x71, 0xd0, 0x06, 0x70, 0x09, 0x66, 0x73, 0xc9, 0x11,\n\t0x30, 0xf0, 0x95, 0xc1, 0x86, 0x97, 0x71, 0x80, 0x7a, 0x7b, 0xd9,\n\t0x97, 0x6b, 0x49, 0x2b, 0x6d, 0xe9, 0x06, 0x82, 0x89, 0x05, 0x63,\n\t0xa9, 0x10, 0x65, 0xb9, 0x06, 0x6d, 0xe0, 0x06, 0x71, 0x70, 0x85,\n\t0x9e, 0xc6, 0x97, 0x8e, 0x69, 0x14, 0x29, 0x18, 0x65, 0x71, 0xb0,\n\t0x74, 0x96, 0x59, 0x07, 0x9c, 0x29, 0x60, 0x8d, 0xf9, 0x99, 0x5e,\n\t0x11, 0x9a, 0x08, 0x68, 0x5d, 0x1d, 0xb1, 0x7d, 0x55, 0x95, 0x9a,\n\t0xaa, 0xe9, 0x97, 0x41, 0xe6, 0x9a, 0x1c, 0x01, 0x9b, 0x9e, 0x24,\n\t0x9b, 0xb3, 0x09, 0x15, 0xac, 0xa9, 0x50, 0xb6, 0xa9, 0x61, 0xf5,\n\t0xa7, 0x9b, 0xbb, 0x59, 0x14, 0xbd, 0xf9, 0x4b, 0xbf, 0xa9, 0x10,\n\t0xb8, 0xf9, 0x89, 0xc2, 0x39, 0x9c, 0x43, 0x51, 0x9c, 0xb4, 0x72,\n\t0x9c, 0x09, 0x91, 0x9c, 0xa8, 0xe9, 0x99, 0xcc, 0x49, 0x13, 0xce,\n\t0xa9, 0x29, 0xd0, 0x89, 0x10, 0xd2, 0x9e, 0xa9, 0x6b, 0xcb, 0x59,\n\t0x9d, 0x35, 0x71, 0x9d, 0x8c, 0x92, 0x9d, 0x07, 0xb1, 0x9d, 0x8c,\n\t0x49, 0x9d, 0xde, 0x19, 0x12, 0xe0, 0xc9, 0x27, 0xe2, 0xa9, 0x7d,\n\t0xc1, 0x69, 0x9e, 0xe7, 0xf9, 0x11, 0xe9, 0xd9, 0x26, 0xeb, 0x59,\n\t0x10, 0xe4, 0xd9, 0x99, 0xef, 0xd9, 0x9c, 0xb5, 0x49, 0x9a, 0xd1,\n\t0xd9, 0x9e, 0xf7, 0x79, 0x13, 0x26, 0x86, 0x86, 0x76, 0x50, 0x99,\n\t0x09, 0xf1, 0x59, 0xdc, 0xb7, 0x8c, 0xfd, 0xb9, 0x10, 0x0d, 0x60,\n\t0x7b, 0xa8, 0x59, 0x60, 0x37, 0xd8, 0x5e, 0xc2, 0x77, 0xa0, 0x37,\n\t0x41, 0x9e, 0x56, 0xd7, 0x11, 0x01, 0x70, 0x05, 0x6d, 0x56, 0x5d,\n\t0xb8, 0x08, 0xa1, 0x1f, 0x91, 0xa0, 0x35, 0x36, 0x60, 0xd4, 0x58,\n\t0x5b, 0x70, 0xf0, 0x60, 0xdb, 0xb6, 0x88, 0x1a, 0x5a, 0x71, 0x55,\n\t0x00, 0x4c, 0xa8, 0x77, 0x07, 0x57, 0xf0, 0xa1, 0x17, 0xe8, 0x6b,\n\t0x6c, 0xb2, 0x6d, 0x76, 0x30, 0x05, 0x06, 0x5a, 0xa2, 0x70, 0xa1,\n\t0x04, 0x65, 0x00, 0x45, 0xd2, 0xc8, 0xa0, 0xf1, 0x34, 0x05, 0x69,\n\t0x70, 0x07, 0x70, 0x70, 0x05, 0x21, 0x60, 0x78, 0x5d, 0x11, 0x10,\n\t0x00, 0x3b\n};\n\nstatic const int _img_hello_length = 4050;\nstatic const char _img_hungry[4260] = {\n\t0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x7f, 0x00, 0x7f, 0x00, 0xf7,\n\t0xe7, 0x00, 0x00, 0x00, 0x00, 0x80, 0xab, 0x86, 0x51, 0x98, 0x97,\n\t0xf3, 0xc7, 0x4f, 0xee, 0xc2, 0x4d, 0x03, 0x7b, 0xba, 0x24, 0xa1,\n\t0xbb, 0x23, 0x94, 0xae, 0x9e, 0xb1, 0x6c, 0xf3, 0xc7, 0x4f, 0xf3,\n\t0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf5, 0xc7, 0x4e, 0x08, 0x7f, 0xbc,\n\t0x00, 0x80, 0xc4, 0x3e, 0xb4, 0xad, 0x34, 0xaf, 0xb7, 0xea, 0xc0,\n\t0x4c, 0xc3, 0xa0, 0x3f, 0x04, 0x82, 0xc1, 0x3a, 0xa8, 0xa2, 0x28,\n\t0x93, 0xa7, 0x1f, 0x7f, 0x9f, 0x6d, 0x74, 0x5e, 0xf3, 0xc7, 0x4f,\n\t0xf3, 0xc7, 0x4f, 0xed, 0xc2, 0x4d, 0xa0, 0x85, 0x35, 0xf3, 0xc7,\n\t0x4f, 0xf3, 0xc7, 0x4f, 0xcb, 0xa6, 0x42, 0xd4, 0xad, 0x45, 0xf3,\n\t0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xed, 0xc2, 0x4d, 0xec, 0xc1, 0x4d,\n\t0xf3, 0xc7, 0x4f, 0x00, 0x81, 0xc6, 0x00, 0x81, 0xc6, 0x04, 0x7a,\n\t0xb9, 0x00, 0x81, 0xc6, 0x40, 0xba, 0xb3, 0x3f, 0xb5, 0xae, 0x20,\n\t0x9d, 0xbd, 0x34, 0x96, 0x90, 0xeb, 0xc1, 0x4d, 0xc3, 0xa1, 0x40,\n\t0xbf, 0xa0, 0x42, 0x07, 0x6a, 0x9f, 0x32, 0x92, 0x90, 0x40, 0xba,\n\t0xb3, 0x00, 0x81, 0xc6, 0x00, 0x81, 0xc6, 0x40, 0xba, 0xb3, 0x39,\n\t0xa5, 0x9e, 0x15, 0x7a, 0xa4, 0x93, 0xa3, 0x8b, 0x39, 0x3e, 0x47,\n\t0x39, 0x3f, 0x48, 0x06, 0x6a, 0x9f, 0x39, 0x41, 0x4a, 0x3a, 0x4c,\n\t0x53, 0x3a, 0x54, 0x5b, 0x3a, 0x55, 0x5b, 0x3b, 0x5c, 0x62, 0x3b,\n\t0x66, 0x6a, 0x3c, 0x6e, 0x71, 0x3c, 0x77, 0x79, 0x3d, 0x7b, 0x85,\n\t0x33, 0x8c, 0x8f, 0x4a, 0x7c, 0x7d, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7,\n\t0x4f, 0xdd, 0xb4, 0x47, 0xc7, 0xb7, 0x5f, 0x40, 0xba, 0xb3, 0x33,\n\t0x95, 0x90, 0x58, 0x86, 0x7a, 0x54, 0x97, 0x7b, 0x6c, 0x91, 0x70,\n\t0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf0, 0xc4, 0x4e, 0xc2, 0x9f,\n\t0x3f, 0xc2, 0x9f, 0x3f, 0xc5, 0xa0, 0x3e, 0xf3, 0xc7, 0x4f, 0x91,\n\t0x97, 0x5b, 0xa9, 0x9b, 0x4d, 0xb6, 0x9d, 0x46, 0xa3, 0x9b, 0x51,\n\t0x83, 0x91, 0x66, 0x97, 0xac, 0x7c, 0xb9, 0xb6, 0x6a, 0xa8, 0xb1,\n\t0x74, 0xb0, 0xab, 0x6e, 0xcb, 0xb7, 0x5f, 0xf3, 0xc7, 0x4f, 0xf3,\n\t0xc7, 0x50, 0xf3, 0xc7, 0x4f, 0xc1, 0x9f, 0x40, 0xf3, 0xc7, 0x4f,\n\t0xc4, 0xa1, 0x40, 0xca, 0xa6, 0x42, 0xcd, 0xa8, 0x43, 0xd4, 0xae,\n\t0x44, 0xda, 0xb3, 0x47, 0xd8, 0xbe, 0x5a, 0xdb, 0xb8, 0x51, 0xeb,\n\t0xc1, 0x4c, 0xf3, 0xc7, 0x4f, 0xc8, 0xbb, 0x64, 0xd1, 0xbd, 0x60,\n\t0xf3, 0xda, 0x8f, 0xd9, 0xc3, 0x5b, 0xf1, 0xc5, 0x4e, 0xf3, 0xc7,\n\t0x4f, 0xf3, 0xc7, 0x4f, 0xf5, 0xc8, 0x4e, 0xf8, 0xc9, 0x4e, 0xec,\n\t0xc5, 0x52, 0xe5, 0xc6, 0x57, 0xf2, 0xc7, 0x50, 0xf5, 0xc9, 0x51,\n\t0xf3, 0xcb, 0x5c, 0xcc, 0xc4, 0x68, 0xf5, 0xce, 0x66, 0xf5, 0xd4,\n\t0x7a, 0xf1, 0xce, 0x6f, 0xa2, 0xc2, 0x7a, 0x00, 0x81, 0xc6, 0x17,\n\t0x94, 0xc0, 0x04, 0x6c, 0xa3, 0x00, 0x81, 0xc6, 0x00, 0x81, 0xc6,\n\t0x00, 0x81, 0xc6, 0x00, 0x67, 0x9e, 0x03, 0x69, 0x9e, 0x07, 0x6a,\n\t0x9d, 0x17, 0x6e, 0x95, 0x16, 0x78, 0x98, 0x06, 0x6f, 0xa1, 0x23,\n\t0x74, 0x92, 0x2e, 0x77, 0x8c, 0x00, 0x81, 0xc6, 0x00, 0x6a, 0xa3,\n\t0x00, 0x6b, 0xa5, 0x01, 0x71, 0xad, 0x00, 0x7a, 0xbc, 0x00, 0x7b,\n\t0xbd, 0x00, 0x81, 0xc6, 0x05, 0x69, 0x9f, 0x00, 0x80, 0xc4, 0x00,\n\t0x7f, 0xc9, 0x40, 0xba, 0xb3, 0x40, 0xba, 0xb3, 0x40, 0xba, 0xb3,\n\t0x3d, 0x83, 0x83, 0x3d, 0x8b, 0x8a, 0x33, 0x95, 0x8f, 0x3b, 0x95,\n\t0x8c, 0x33, 0x96, 0x90, 0x3e, 0x95, 0x92, 0x35, 0x9b, 0x95, 0x3c,\n\t0x9c, 0x98, 0x2e, 0x93, 0x94, 0x3f, 0xb7, 0xb0, 0x3b, 0xa3, 0x9e,\n\t0x37, 0xa1, 0x9a, 0x1a, 0x87, 0xbb, 0x1b, 0x98, 0xbe, 0x0e, 0x85,\n\t0xbf, 0x27, 0x8b, 0xb4, 0x2e, 0x98, 0xb4, 0x40, 0xba, 0xb3, 0x3d,\n\t0xa6, 0xa1, 0x3d, 0xaa, 0xa4, 0x3f, 0xae, 0xa8, 0x40, 0xba, 0xb3,\n\t0x3e, 0xb4, 0xad, 0x40, 0xba, 0xb3, 0x2c, 0xa9, 0xb9, 0x27, 0xa4,\n\t0xba, 0x33, 0xaf, 0xb7, 0x30, 0xab, 0xb8, 0x3d, 0xb7, 0xb3, 0x3e,\n\t0xb9, 0xb2, 0x36, 0xb1, 0xb6, 0x59, 0x9a, 0x9c, 0x49, 0x92, 0x85,\n\t0x68, 0x9d, 0x92, 0x71, 0xae, 0x93, 0x46, 0x95, 0xa5, 0x50, 0x97,\n\t0xa1, 0x40, 0xb4, 0xae, 0x49, 0xba, 0xad, 0x40, 0xba, 0xb3, 0x40,\n\t0xb7, 0xb0, 0x53, 0xbb, 0xa8, 0x7e, 0xb0, 0xad, 0x00, 0x81, 0xc6,\n\t0x00, 0x82, 0xc8, 0x0b, 0x85, 0xc5, 0x11, 0x8a, 0xc1, 0x12, 0x91,\n\t0xc1, 0x8d, 0xae, 0x86, 0xbd, 0xb8, 0x94, 0xbb, 0xc1, 0xba, 0xe4,\n\t0xd2, 0x9b, 0xf6, 0xd9, 0x88, 0xf8, 0xde, 0x97, 0xe2, 0xc9, 0x86,\n\t0xf8, 0xe0, 0x9e, 0xcd, 0xc7, 0xad, 0xf9, 0xe3, 0xa9, 0xf9, 0xe8,\n\t0xb6, 0x9e, 0xdc, 0xd8, 0x92, 0xcd, 0xca, 0xc4, 0xc9, 0xca, 0xcc,\n\t0xcc, 0xcc, 0xc6, 0xc9, 0xc6, 0xd6, 0xd6, 0xd6, 0xc1, 0xd7, 0xd6,\n\t0xfa, 0xed, 0xc7, 0xfc, 0xf3, 0xda, 0xf8, 0xf0, 0xd3, 0xc3, 0xe0,\n\t0xf1, 0xe7, 0xe7, 0xe7, 0xfe, 0xf9, 0xeb, 0xfd, 0xf7, 0xe4, 0xfe,\n\t0xfb, 0xf4, 0xff, 0xff, 0xff, 0xf6, 0xf6, 0xf6, 0xfc, 0xfd, 0xfa,\n\t0xd1, 0xe3, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x21, 0xf9, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x21, 0xff, 0x0b,\n\t0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x6b,\n\t0x0d, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x3d, 0x30, 0x2e, 0x34, 0x35,\n\t0x34, 0x35, 0x35, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00,\n\t0x7f, 0x00, 0x00, 0x08, 0xfe, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0,\n\t0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x04, 0x70, 0x20, 0x45, 0x0c,\n\t0x4d, 0x9b, 0x5c, 0xd1, 0xca, 0x45, 0xcb, 0x95, 0xa9, 0x4d, 0x31,\n\t0x52, 0x14, 0x58, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x2e,\n\t0x6c, 0x18, 0xc3, 0x14, 0x2d, 0x62, 0x28, 0x53, 0xaa, 0x24, 0x46,\n\t0xcb, 0xd4, 0x92, 0x14, 0x07, 0x44, 0xca, 0x9c, 0x49, 0xb3, 0x26,\n\t0xc1, 0x07, 0x31, 0x36, 0x15, 0x5b, 0xc9, 0xb3, 0xa7, 0xa9, 0x18,\n\t0x31, 0x6d, 0x0a, 0x1d, 0x4a, 0x14, 0x00, 0x4e, 0x57, 0x3d, 0x93,\n\t0x26, 0x75, 0x15, 0xe3, 0x41, 0xd1, 0xa7, 0x50, 0x39, 0x0a, 0x88,\n\t0x81, 0x54, 0xa9, 0xd5, 0x9e, 0x4c, 0x83, 0x46, 0xdd, 0x1a, 0x75,\n\t0xc2, 0xa6, 0xab, 0x60, 0x93, 0x6e, 0xaa, 0xc0, 0xb5, 0xec, 0xd0,\n\t0x00, 0x54, 0xc3, 0xaa, 0xe5, 0xc9, 0x34, 0x80, 0xd9, 0xb7, 0x22,\n\t0x0f, 0x2c, 0xd9, 0xb9, 0xb6, 0xae, 0x4a, 0x4d, 0x4e, 0xe1, 0xea,\n\t0x1d, 0xf9, 0xd5, 0xae, 0xdf, 0x94, 0x9b, 0x26, 0xec, 0x1d, 0x6c,\n\t0xb0, 0x82, 0xa9, 0xbf, 0x88, 0x51, 0xba, 0x4a, 0x41, 0xb8, 0xb1,\n\t0xe1, 0xc4, 0x90, 0x17, 0x37, 0xde, 0xfb, 0x18, 0x32, 0x64, 0x59,\n\t0x8c, 0x27, 0x9b, 0xad, 0x50, 0xca, 0xb2, 0x67, 0xc9, 0x9a, 0x3f,\n\t0x0a, 0x70, 0x70, 0x42, 0x90, 0x20, 0x1a, 0x25, 0x0a, 0xb8, 0x35,\n\t0x38, 0xa1, 0xb3, 0xe7, 0xcf, 0x99, 0x0b, 0x06, 0x28, 0x30, 0xa1,\n\t0xc4, 0x89, 0x13, 0x25, 0x26, 0x08, 0x20, 0x3c, 0x81, 0x86, 0x21,\n\t0x48, 0xc8, 0x92, 0x09, 0xc7, 0x64, 0xa9, 0xd0, 0x89, 0x8d, 0x03,\n\t0x1f, 0x74, 0x9a, 0xf5, 0xfa, 0xb5, 0x2b, 0xc1, 0x03, 0x0f, 0x9c,\n\t0x28, 0x64, 0x09, 0x93, 0xf0, 0x64, 0xc8, 0x2a, 0x19, 0x12, 0x54,\n\t0x62, 0x75, 0x59, 0x07, 0x82, 0x2a, 0xfe, 0x5d, 0x47, 0x46, 0x9e,\n\t0xfc, 0xf5, 0x4b, 0x30, 0x76, 0x1f, 0x28, 0xc2, 0xbc, 0xf9, 0xeb,\n\t0x4d, 0x4e, 0x03, 0x9c, 0xb8, 0x34, 0xbe, 0xbc, 0xf9, 0x64, 0x98,\n\t0x04, 0x41, 0xdf, 0x5a, 0xc2, 0x92, 0x70, 0xfb, 0x00, 0x66, 0x17,\n\t0x09, 0x22, 0x3b, 0x4c, 0x10, 0x03, 0x2c, 0xee, 0xb9, 0xa7, 0xc9,\n\t0x04, 0x82, 0x04, 0x17, 0x60, 0x80, 0xc9, 0x40, 0x42, 0x83, 0x77,\n\t0x45, 0xd1, 0x60, 0xdd, 0x83, 0xf6, 0x51, 0x32, 0x20, 0x22, 0x89,\n\t0x30, 0x32, 0x4a, 0x7b, 0x09, 0xbe, 0xd6, 0x0a, 0x76, 0x18, 0x42,\n\t0x88, 0x0c, 0x0c, 0x14, 0x0a, 0x65, 0xc1, 0x85, 0x25, 0x22, 0x83,\n\t0x89, 0x24, 0x88, 0xc4, 0xc8, 0x48, 0x28, 0xb1, 0x84, 0x98, 0xa0,\n\t0x2a, 0x2d, 0x62, 0x48, 0x43, 0x51, 0x25, 0x88, 0x97, 0x23, 0x32,\n\t0x93, 0xc4, 0xc8, 0x61, 0x29, 0xa7, 0xd8, 0x98, 0x60, 0x2e, 0xcc,\n\t0xfc, 0x68, 0x1f, 0x7e, 0x27, 0x0c, 0x75, 0x80, 0x21, 0x24, 0x02,\n\t0x28, 0x9c, 0x32, 0xca, 0x20, 0xa3, 0x61, 0x8c, 0x89, 0x94, 0xf2,\n\t0xa1, 0x91, 0x09, 0xde, 0x52, 0xa5, 0x79, 0xc8, 0x50, 0xe9, 0x20,\n\t0x84, 0x96, 0x38, 0x20, 0x14, 0x0d, 0x51, 0x02, 0x08, 0x4c, 0x33,\n\t0x5d, 0x74, 0xe1, 0x45, 0x13, 0x8b, 0x0c, 0x38, 0x23, 0x82, 0x5c,\n\t0x26, 0x68, 0x4b, 0x70, 0xac, 0xf8, 0xe2, 0x45, 0x9b, 0x5c, 0x04,\n\t0xa3, 0x4c, 0x9a, 0xe6, 0xed, 0x58, 0x93, 0x00, 0x50, 0x06, 0x98,\n\t0x0a, 0x17, 0x78, 0xdc, 0x71, 0x87, 0x1d, 0x69, 0x54, 0x81, 0x85,\n\t0x11, 0x8c, 0x7c, 0x32, 0x4a, 0x2e, 0x75, 0x1e, 0xc9, 0x0c, 0x2f,\n\t0x70, 0xd8, 0xa1, 0xa8, 0xa2, 0x78, 0x78, 0xc1, 0x0a, 0xa0, 0xc9,\n\t0x58, 0x82, 0xdc, 0x4c, 0x25, 0x60, 0x12, 0xe0, 0x32, 0x5e, 0x2c,\n\t0x5a, 0x47, 0x1d, 0x6d, 0x54, 0x41, 0x45, 0x15, 0xfe, 0x59, 0xf4,\n\t0x12, 0x0a, 0x9d, 0x95, 0x36, 0xa7, 0xcb, 0x30, 0x72, 0xdc, 0xb1,\n\t0xea, 0xae, 0x75, 0xdc, 0xd1, 0x45, 0x2a, 0x0f, 0x36, 0x49, 0x13,\n\t0x9a, 0x52, 0xfa, 0x62, 0xc7, 0xae, 0x73, 0x9c, 0x41, 0xc5, 0xb2,\n\t0x57, 0x80, 0x32, 0x8a, 0x2e, 0xb5, 0x86, 0x18, 0xc8, 0xb1, 0xbc,\n\t0xae, 0x7a, 0x47, 0x33, 0x10, 0x0a, 0x42, 0x53, 0x00, 0x85, 0x00,\n\t0x9a, 0x4a, 0xa6, 0xbb, 0xaa, 0xb1, 0x2c, 0x15, 0xb1, 0xce, 0x1a,\n\t0x6d, 0x82, 0xba, 0x18, 0x23, 0x07, 0xb5, 0xbc, 0xda, 0x21, 0xc7,\n\t0xa7, 0x4b, 0x1a, 0x92, 0xe2, 0x47, 0x0e, 0xf8, 0xb7, 0x24, 0x30,\n\t0x78, 0xec, 0xda, 0x86, 0x19, 0xe3, 0x3e, 0x21, 0x29, 0xb4, 0xe7,\n\t0xba, 0xa7, 0x4b, 0x33, 0xd5, 0xf2, 0xca, 0x4b, 0x26, 0x4b, 0x5a,\n\t0xa2, 0x55, 0x48, 0x13, 0x54, 0x02, 0x60, 0x26, 0xbc, 0xb0, 0x9b,\n\t0xc6, 0xb8, 0x58, 0xc8, 0x4a, 0x6b, 0xc0, 0xaf, 0xdd, 0xda, 0x07,\n\t0xbb, 0xbb, 0xde, 0xf1, 0x0b, 0xc2, 0xe5, 0x85, 0xba, 0x30, 0x48,\n\t0x0d, 0xa7, 0x09, 0xb1, 0xbe, 0xfc, 0x52, 0x41, 0xc6, 0x13, 0xa1,\n\t0x4c, 0x8a, 0x31, 0xba, 0xbf, 0xe8, 0x51, 0xf0, 0x1d, 0xbe, 0x80,\n\t0x6c, 0x9e, 0xc2, 0x33, 0x15, 0x40, 0xdf, 0x92, 0xad, 0xe4, 0x5b,\n\t0xc7, 0xc4, 0xcb, 0x6a, 0x01, 0xca, 0x27, 0x17, 0xbf, 0xec, 0x99,\n\t0xc6, 0x1c, 0xd7, 0x31, 0x47, 0x30, 0x69, 0x26, 0x73, 0xc9, 0xc8,\n\t0x20, 0x09, 0x02, 0xe8, 0x32, 0x5d, 0xdc, 0xb1, 0xef, 0xb2, 0x2b,\n\t0xb7, 0x0c, 0xa2, 0xd1, 0x19, 0xff, 0xe2, 0xf3, 0xaa, 0x76, 0xbc,\n\t0x01, 0xec, 0x92, 0x85, 0xcc, 0xfb, 0x11, 0xb1, 0x4b, 0xf2, 0x82,\n\t0x07, 0xd0, 0x54, 0x08, 0xfd, 0x49, 0x91, 0x5c, 0x0b, 0x3c, 0xcc,\n\t0xc6, 0xbc, 0xfa, 0x02, 0xaa, 0xa0, 0x33, 0x95, 0x1c, 0xa0, 0xfe,\n\t0x2f, 0x66, 0xb8, 0x9a, 0x75, 0x28, 0x5b, 0xc7, 0x7d, 0xf4, 0x2f,\n\t0x60, 0xd7, 0xd1, 0xcc, 0x97, 0xf6, 0x61, 0x52, 0x42, 0x4d, 0xdc,\n\t0x02, 0x0a, 0xa4, 0x11, 0x5a, 0x50, 0x51, 0xf1, 0xbf, 0x82, 0xcb,\n\t0xbd, 0x31, 0x1c, 0xbe, 0x20, 0x1e, 0xb2, 0x21, 0xbb, 0xd5, 0x54,\n\t0x2a, 0x80, 0x57, 0x2e, 0x62, 0x84, 0x13, 0x9f, 0x10, 0x5d, 0x39,\n\t0xcc, 0xbc, 0xa4, 0xe2, 0x38, 0x79, 0xc2, 0x32, 0x2e, 0xb5, 0x7d,\n\t0x41, 0x62, 0x59, 0xca, 0x27, 0x80, 0x9f, 0x9e, 0xe0, 0x2e, 0x25,\n\t0x26, 0x53, 0x48, 0xe7, 0x36, 0x39, 0xb0, 0xb3, 0x8b, 0x30, 0xca,\n\t0x18, 0x0a, 0xe5, 0xb6, 0xbb, 0x87, 0x23, 0x99, 0xfb, 0x09, 0x55,\n\t0x02, 0x24, 0xd8, 0x51, 0x22, 0x64, 0x96, 0xa5, 0x17, 0x5d, 0xbc,\n\t0x65, 0xb8, 0x40, 0x08, 0xc9, 0xe2, 0x4f, 0xf5, 0x97, 0x4c, 0xec,\n\t0x1c, 0x96, 0x5e, 0xfb, 0xf4, 0xcd, 0xe5, 0xb2, 0x4c, 0xc2, 0xd8,\n\t0x43, 0x75, 0x00, 0x21, 0x1b, 0x22, 0x12, 0x29, 0xf1, 0xe0, 0xbf,\n\t0x76, 0xa7, 0x83, 0x85, 0x24, 0x0f, 0x95, 0x00, 0x25, 0x10, 0x32,\n\t0x64, 0xe9, 0x70, 0xb7, 0xff, 0xda, 0x2d, 0xd8, 0x19, 0x62, 0x01,\n\t0xef, 0x65, 0x11, 0xc0, 0x04, 0x6e, 0x50, 0x3a, 0xd3, 0xe9, 0xef,\n\t0x35, 0xb9, 0xe0, 0x0e, 0x00, 0xe1, 0x92, 0x82, 0xe1, 0x7d, 0x4f,\n\t0x25, 0xb1, 0x08, 0x1c, 0x4a, 0x22, 0x68, 0x34, 0x61, 0xc4, 0x82,\n\t0x2e, 0x2a, 0xb1, 0xa0, 0x55, 0x62, 0x30, 0x99, 0x18, 0x8c, 0x82,\n\t0x7d, 0x28, 0xf1, 0x84, 0x0f, 0x7e, 0x40, 0x8a, 0x95, 0x88, 0x10,\n\t0x08, 0x25, 0x0c, 0xd8, 0x2b, 0x82, 0xd0, 0x83, 0x21, 0x08, 0x43,\n\t0x25, 0xa7, 0x08, 0x82, 0x0f, 0x3a, 0x81, 0xc1, 0x95, 0x68, 0xc2,\n\t0x6c, 0x65, 0x39, 0x00, 0x13, 0x86, 0x97, 0x3f, 0x94, 0xbc, 0xa2,\n\t0x07, 0xfe, 0x39, 0xc8, 0x01, 0x10, 0x5e, 0xe8, 0x43, 0x20, 0xe6,\n\t0x20, 0x08, 0x44, 0x8c, 0x96, 0x10, 0x72, 0xa0, 0x03, 0x1e, 0xa4,\n\t0x10, 0x25, 0x4b, 0x6c, 0xa2, 0x28, 0x96, 0x92, 0x97, 0xbd, 0x4c,\n\t0xa0, 0x80, 0x45, 0x23, 0x05, 0x0f, 0x78, 0xa0, 0x83, 0x1e, 0xd0,\n\t0x4a, 0x8b, 0x5c, 0xfc, 0x81, 0x04, 0x8d, 0x54, 0x8c, 0x20, 0xe4,\n\t0x60, 0x8b, 0x9d, 0x48, 0x89, 0x30, 0x80, 0xd0, 0x44, 0x1e, 0x0c,\n\t0x21, 0x29, 0xc5, 0x88, 0x8d, 0x5e, 0x3c, 0x48, 0xbb, 0x1a, 0xa9,\n\t0x04, 0x16, 0x3d, 0x68, 0x63, 0x1a, 0x89, 0x21, 0x0c, 0x21, 0x34,\n\t0xf1, 0x88, 0x35, 0xac, 0xd4, 0x10, 0xce, 0xa8, 0x03, 0x20, 0xd8,\n\t0x51, 0x14, 0x5b, 0xdc, 0xe2, 0x13, 0x79, 0xc2, 0xc1, 0xc1, 0xdc,\n\t0xe0, 0x83, 0x0f, 0x44, 0x49, 0x31, 0x96, 0xc8, 0x45, 0x1e, 0x08,\n\t0xa1, 0x13, 0x41, 0x48, 0xa4, 0x0e, 0xf6, 0x78, 0x2e, 0x44, 0x26,\n\t0x12, 0x08, 0x43, 0x18, 0x42, 0x1e, 0x79, 0x20, 0xc4, 0x24, 0xf2,\n\t0x64, 0x13, 0x38, 0x8c, 0x8a, 0x0e, 0x87, 0xe7, 0xb2, 0x95, 0x90,\n\t0x62, 0x94, 0x5c, 0xd4, 0x41, 0x1b, 0x75, 0xf0, 0x03, 0xe9, 0x5d,\n\t0xa5, 0x18, 0xc2, 0x98, 0x85, 0x30, 0x02, 0x09, 0x16, 0x61, 0x98,\n\t0x71, 0x8b, 0xb2, 0x94, 0x65, 0x25, 0x3d, 0x61, 0x15, 0x57, 0x8c,\n\t0xea, 0x2d, 0xad, 0x29, 0xdd, 0xb3, 0x7a, 0xd2, 0x89, 0x4a, 0x26,\n\t0x92, 0x94, 0x3d, 0x98, 0xe2, 0x5a, 0x5e, 0xd1, 0x09, 0x21, 0x00,\n\t0xe1, 0x07, 0x40, 0x08, 0xc2, 0x10, 0x48, 0xc1, 0x4b, 0xa5, 0x9c,\n\t0xe2, 0x07, 0x67, 0x7c, 0x66, 0x13, 0x5d, 0x68, 0x95, 0x5c, 0x90,\n\t0x45, 0x2f, 0x17, 0x18, 0xde, 0x27, 0x50, 0x01, 0x47, 0x4f, 0xfc,\n\t0x80, 0x94, 0x4c, 0xe4, 0x01, 0x0a, 0xd7, 0x02, 0x0b, 0x51, 0x92,\n\t0x32, 0x98, 0x4c, 0xfe, 0xec, 0x81, 0x10, 0x7a, 0x78, 0x95, 0x18,\n\t0x72, 0x31, 0x88, 0x3c, 0xe8, 0x41, 0x27, 0x4c, 0x99, 0x14, 0x16,\n\t0xec, 0x85, 0x8e, 0x6f, 0xb3, 0x4a, 0x2c, 0x3c, 0x31, 0x04, 0x21,\n\t0x0c, 0x41, 0x14, 0x63, 0x4c, 0x8a, 0x28, 0x7e, 0x20, 0xcc, 0x67,\n\t0x02, 0x33, 0x07, 0x3d, 0x20, 0xa6, 0x5a, 0x84, 0x41, 0x8a, 0x86,\n\t0x0e, 0xa1, 0x13, 0xaf, 0x50, 0x4b, 0x23, 0xe1, 0x82, 0xd0, 0x90,\n\t0xda, 0x48, 0x14, 0xb0, 0xac, 0x68, 0x2c, 0x81, 0xc9, 0x03, 0x4e,\n\t0x72, 0x09, 0x95, 0x70, 0x09, 0x40, 0x11, 0xd4, 0x69, 0x4b, 0xcb,\n\t0xbc, 0xc2, 0x07, 0xb3, 0xf4, 0xc1, 0x43, 0x49, 0x21, 0x8a, 0x21,\n\t0xbc, 0xb3, 0x89, 0x5d, 0x94, 0xe6, 0x4b, 0x17, 0xb8, 0x95, 0x03,\n\t0x74, 0x82, 0xa6, 0x21, 0x9a, 0x64, 0x1b, 0x2d, 0x59, 0xb4, 0x58,\n\t0x0c, 0xa1, 0x92, 0x85, 0xb4, 0xa3, 0x91, 0x8c, 0x09, 0x97, 0x03,\n\t0x94, 0x02, 0xa9, 0x49, 0xd9, 0xc5, 0x2d, 0xb6, 0xca, 0xd5, 0x5b,\n\t0x50, 0xca, 0x2a, 0x5a, 0x6c, 0x23, 0x39, 0x99, 0xf9, 0x4c, 0x8d,\n\t0x2a, 0x25, 0x17, 0x5d, 0xe5, 0xea, 0x2e, 0xc2, 0x22, 0x0b, 0xf9,\n\t0x6d, 0xe5, 0x8a, 0x58, 0x4c, 0x4a, 0x2d, 0xc6, 0x17, 0x20, 0x66,\n\t0xdc, 0xc2, 0x2a, 0x43, 0x00, 0xea, 0x0f, 0xa4, 0xca, 0x13, 0x5f,\n\t0xfe, 0x11, 0x89, 0x67, 0x55, 0x85, 0xe6, 0xc8, 0xa3, 0x0c, 0x5b,\n\t0x00, 0xec, 0xac, 0xe7, 0x34, 0x4b, 0x0a, 0x0a, 0x68, 0xc0, 0x95,\n\t0x88, 0xaf, 0x44, 0xaa, 0x38, 0xec, 0x4a, 0xd6, 0xa8, 0xc7, 0xab,\n\t0x78, 0xb2, 0x8b, 0x35, 0x25, 0xc6, 0xfb, 0x1e, 0xa4, 0x8c, 0x5a,\n\t0x80, 0x45, 0x8e, 0x5c, 0x41, 0xe8, 0x27, 0x4c, 0xea, 0x58, 0xba,\n\t0x3e, 0x88, 0x19, 0x92, 0xbd, 0x63, 0x1e, 0xbb, 0xc8, 0x4f, 0x9e,\n\t0xc4, 0x02, 0xa7, 0x8a, 0x54, 0xfe, 0xca, 0x66, 0x1f, 0xe4, 0xd9,\n\t0xab, 0x80, 0x76, 0x2b, 0xa2, 0x6d, 0x2d, 0x4a, 0x6c, 0x31, 0x58,\n\t0xc2, 0xd6, 0xb6, 0x27, 0x3f, 0x94, 0xa5, 0x17, 0xaf, 0xb2, 0xc6,\n\t0x70, 0x0a, 0x95, 0x27, 0xbb, 0x48, 0xd2, 0x83, 0x22, 0xfb, 0x59,\n\t0x92, 0x7e, 0xb0, 0x74, 0xec, 0x4c, 0xca, 0x2d, 0x6a, 0x41, 0xdd,\n\t0xea, 0xd6, 0x62, 0xad, 0x4a, 0x89, 0x05, 0x38, 0x4b, 0x09, 0x96,\n\t0x25, 0x62, 0x54, 0xb7, 0x29, 0xc9, 0x85, 0x75, 0xab, 0x8b, 0x8b,\n\t0xd4, 0x26, 0xe5, 0xb6, 0x51, 0x11, 0xed, 0x32, 0xdd, 0x23, 0x8a,\n\t0x6c, 0x2e, 0x52, 0x29, 0xaf, 0xb0, 0xa6, 0x27, 0xba, 0xd9, 0x1c,\n\t0xf4, 0x42, 0x25, 0x06, 0xea, 0x94, 0xd4, 0x57, 0xdd, 0x23, 0x0c,\n\t0x82, 0x5a, 0x05, 0x97, 0xb5, 0xb2, 0x6f, 0x51, 0xd0, 0xc2, 0xd8,\n\t0x48, 0x1e, 0xb0, 0xbe, 0x66, 0x11, 0x00, 0x12, 0x9a, 0x55, 0x40,\n\t0x1a, 0x1d, 0x38, 0x44, 0x5b, 0x40, 0x00, 0x57, 0x14, 0xec, 0xa8,\n\t0xa1, 0x15, 0x90, 0xb4, 0x0f, 0xb6, 0x8c, 0xc6, 0xc6, 0xa0, 0x80,\n\t0xa8, 0x04, 0x00, 0x09, 0x13, 0x2b, 0x57, 0x01, 0xa3, 0x9b, 0x61,\n\t0x0d, 0xab, 0xeb, 0x0e, 0x1c, 0x86, 0xca, 0x0b, 0x58, 0x45, 0x2e,\n\t0xd2, 0x15, 0xf0, 0x43, 0xba, 0x88, 0xb1, 0x8c, 0x67, 0x4c, 0xe3,\n\t0x1a, 0xdb, 0xf8, 0xc6, 0x38, 0xce, 0xb1, 0x8e, 0x77, 0x2c, 0x63,\n\t0x63, 0xe4, 0xa1, 0x0e, 0x7b, 0x88, 0x42, 0x2a, 0x45, 0x92, 0x01,\n\t0x36, 0xec, 0x21, 0x59, 0x66, 0x68, 0xc6, 0x31, 0x96, 0xbc, 0xe4,\n\t0x6c, 0x60, 0xe3, 0xc9, 0x50, 0x8e, 0xb2, 0x94, 0xa7, 0x4c, 0xe5,\n\t0x2a, 0x5b, 0xf9, 0xca, 0x58, 0xce, 0x32, 0x94, 0xb5, 0x21, 0xb3,\n\t0x55, 0x91, 0x80, 0x28, 0x01, 0x90, 0xc2, 0x1e, 0x56, 0x35, 0x31,\n\t0x67, 0x6c, 0xe3, 0xcc, 0x67, 0x1e, 0xc7, 0xfe, 0x39, 0xd6, 0xcc,\n\t0xe6, 0x36, 0xbb, 0xf9, 0xcd, 0x70, 0x8e, 0xb3, 0x9c, 0xe7, 0x4c,\n\t0xe7, 0x3a, 0xb3, 0xf9, 0x1a, 0x5d, 0xde, 0x03, 0x1b, 0x3a, 0x2c,\n\t0x94, 0x0e, 0xf0, 0xaa, 0x0d, 0x54, 0xf8, 0x02, 0x37, 0xd0, 0xbc,\n\t0x8d, 0x6e, 0x98, 0xc3, 0xce, 0x88, 0x4e, 0xb4, 0xa2, 0x17, 0xed,\n\t0x66, 0x69, 0xf0, 0x6a, 0x0f, 0x47, 0x10, 0x4a, 0x98, 0xc7, 0xbc,\n\t0xaa, 0x64, 0x65, 0xa1, 0x1a, 0x84, 0xde, 0x86, 0x9a, 0x19, 0x1d,\n\t0x67, 0x72, 0x5c, 0x23, 0x1a, 0xd4, 0x00, 0xc7, 0xa1, 0xdf, 0x0c,\n\t0x0e, 0x6b, 0x44, 0xc3, 0x1a, 0xe5, 0xe0, 0x74, 0xa2, 0xcd, 0xf1,\n\t0x87, 0x76, 0xed, 0xd9, 0x26, 0x19, 0xa0, 0x03, 0xc7, 0xd4, 0x90,\n\t0x05, 0x33, 0x13, 0xba, 0x1b, 0xaa, 0x76, 0xb3, 0x39, 0xac, 0xe1,\n\t0x87, 0x2e, 0xf3, 0x21, 0x1a, 0xe0, 0x68, 0x33, 0x39, 0xa4, 0xc1,\n\t0x87, 0x55, 0xe9, 0xc1, 0x0f, 0xd4, 0x20, 0x47, 0xae, 0xe9, 0x0c,\n\t0x8e, 0x62, 0x3f, 0xfa, 0x05, 0x36, 0x41, 0x02, 0xa5, 0xf5, 0x55,\n\t0x85, 0x2f, 0x64, 0x7a, 0x1b, 0xe8, 0x58, 0xf6, 0x39, 0xcc, 0x21,\n\t0x8d, 0x2e, 0xf3, 0x0a, 0x10, 0xc1, 0x3e, 0x07, 0x39, 0x5a, 0x5d,\n\t0xb0, 0x68, 0x8c, 0x5a, 0xdb, 0x6f, 0xbe, 0x46, 0xc1, 0xf6, 0x20,\n\t0x85, 0x21, 0x2f, 0x64, 0xd2, 0x05, 0x4b, 0xc3, 0xa5, 0x33, 0xbd,\n\t0xe9, 0x5c, 0x5f, 0x63, 0xda, 0xd5, 0x32, 0xf7, 0x39, 0x1c, 0x5d,\n\t0xb0, 0x55, 0x59, 0x03, 0xdd, 0x70, 0x8e, 0x46, 0xc1, 0xec, 0xf0,\n\t0xea, 0x9c, 0x19, 0xb9, 0x60, 0xfb, 0xc2, 0xf4, 0xad, 0xb3, 0xad,\n\t0x6a, 0x56, 0xf7, 0x7b, 0x55, 0x7c, 0x00, 0x47, 0x39, 0xfc, 0xf0,\n\t0xf0, 0x3a, 0xf8, 0x41, 0xd9, 0x00, 0x67, 0x73, 0xb3, 0x1f, 0xde,\n\t0x01, 0x9a, 0x44, 0xc0, 0x0d, 0x49, 0x5b, 0x95, 0x1a, 0xfe, 0xac,\n\t0x4d, 0xef, 0x5c, 0x7f, 0xc3, 0xd9, 0x0f, 0xb7, 0xc6, 0x37, 0xbc,\n\t0x5d, 0x30, 0x3d, 0x5c, 0x23, 0xe3, 0x6c, 0xb6, 0xc6, 0xc3, 0xf7,\n\t0xe0, 0x01, 0x9a, 0xc4, 0xfa, 0xe1, 0x73, 0x40, 0x83, 0xc2, 0x09,\n\t0xcd, 0xf0, 0x45, 0x3b, 0xbc, 0xe2, 0x75, 0xb0, 0x86, 0xba, 0x81,\n\t0x0e, 0x88, 0x54, 0x67, 0xfc, 0xe7, 0xeb, 0x46, 0x02, 0x4d, 0xfc,\n\t0x5c, 0xf1, 0x36, 0x34, 0xe3, 0xda, 0xb8, 0x66, 0xb4, 0x35, 0x58,\n\t0xde, 0xef, 0x6b, 0x7c, 0x03, 0xdf, 0xfd, 0xd6, 0x37, 0xc0, 0x57,\n\t0x3e, 0x73, 0x21, 0xcf, 0x84, 0xe9, 0x38, 0x7f, 0xc1, 0x33, 0xae,\n\t0x5d, 0x6f, 0x44, 0xdf, 0x1b, 0xe8, 0x75, 0x88, 0x38, 0x39, 0x28,\n\t0x0e, 0x74, 0x3d, 0x50, 0xe3, 0xdc, 0xb9, 0x36, 0x87, 0xc0, 0xbb,\n\t0x6e, 0x73, 0x3a, 0x54, 0x7c, 0x0f, 0x2f, 0xc0, 0x01, 0xd4, 0x7b,\n\t0x5e, 0x67, 0x6b, 0xa0, 0xbc, 0xe2, 0xfa, 0xe6, 0x77, 0xdb, 0xa5,\n\t0x01, 0x77, 0x4e, 0x87, 0xe3, 0x6b, 0x49, 0xa7, 0x89, 0x02, 0x40,\n\t0x3e, 0x73, 0x29, 0x5c, 0x60, 0xec, 0x99, 0x8e, 0x3a, 0x9d, 0x87,\n\t0x8d, 0xf5, 0x7e, 0xef, 0xe1, 0x1b, 0x6b, 0xde, 0x38, 0xda, 0xf5,\n\t0x10, 0x0d, 0xa3, 0x73, 0x3a, 0x1d, 0x60, 0x00, 0xfa, 0x1e, 0x42,\n\t0x40, 0x13, 0x01, 0x8c, 0xa1, 0xf2, 0x60, 0x73, 0xc3, 0x05, 0x62,\n\t0x70, 0x6d, 0x4d, 0xd3, 0xf9, 0x1b, 0xe4, 0x46, 0x7b, 0x1d, 0xfe,\n\t0x70, 0x6e, 0xc1, 0xa3, 0xdd, 0x0f, 0xd7, 0x28, 0x3c, 0xa2, 0x9d,\n\t0x31, 0x06, 0x5d, 0x3d, 0x9c, 0x0e, 0x19, 0xa8, 0x49, 0x14, 0x50,\n\t0xbf, 0x2a, 0x76, 0x5f, 0xe0, 0xe9, 0xd7, 0xe6, 0x7b, 0x9b, 0xc1,\n\t0x11, 0x8d, 0xbf, 0x03, 0x9d, 0x0f, 0x98, 0xd7, 0x38, 0xdb, 0x65,\n\t0xbf, 0x87, 0x68, 0x7c, 0x43, 0xf7, 0x73, 0xee, 0x46, 0x14, 0x80,\n\t0xfe, 0x4e, 0x70, 0x3e, 0xcf, 0xe4, 0x05, 0xc4, 0xdf, 0x55, 0x12,\n\t0x62, 0xa0, 0x8d, 0xbd, 0xb7, 0xd9, 0x1c, 0xdf, 0x68, 0xbe, 0xec,\n\t0x79, 0x45, 0x8d, 0x74, 0x53, 0xfd, 0xf9, 0xd6, 0xc7, 0x78, 0x9d,\n\t0xa1, 0xc1, 0xf8, 0xae, 0xbb, 0x7b, 0x21, 0x08, 0xa8, 0x7f, 0xc5,\n\t0xa1, 0x80, 0xfc, 0xc8, 0xa3, 0x83, 0x1c, 0xdf, 0x60, 0x0d, 0x80,\n\t0x10, 0x7e, 0xfd, 0x66, 0x07, 0x7f, 0x20, 0x7f, 0x6c, 0xc6, 0x6d,\n\t0x21, 0xd7, 0x76, 0x80, 0x20, 0x0d, 0xdf, 0x50, 0x0e, 0xd8, 0x77,\n\t0x0e, 0xe5, 0x70, 0x0d, 0x7c, 0xb0, 0x80, 0xbb, 0x62, 0x07, 0x35,\n\t0xc7, 0x38, 0xc3, 0x87, 0x76, 0x76, 0x80, 0x07, 0x80, 0x00, 0x0d,\n\t0xd0, 0x50, 0x0d, 0xd5, 0x00, 0x82, 0xd3, 0xf0, 0x07, 0x7e, 0x40,\n\t0x80, 0x0f, 0xe7, 0x2e, 0xde, 0x20, 0x0e, 0x2c, 0xd8, 0x82, 0x2c,\n\t0xe8, 0x0d, 0x74, 0xb3, 0x7e, 0x8f, 0xe6, 0x07, 0x7f, 0x20, 0x0d,\n\t0x56, 0xf7, 0x0d, 0x38, 0xf8, 0x69, 0xbd, 0x86, 0x76, 0x7a, 0xe6,\n\t0x7d, 0x4b, 0x27, 0x6b, 0x32, 0xa8, 0x07, 0x42, 0xf8, 0x7e, 0x32,\n\t0x08, 0x36, 0x6b, 0x00, 0x0c, 0x54, 0x92, 0x84, 0x4a, 0xa8, 0x0c,\n\t0xac, 0xf0, 0x06, 0x16, 0x18, 0x84, 0x43, 0x58, 0x84, 0x7b, 0xa0,\n\t0x74, 0x92, 0xb6, 0x81, 0x45, 0x78, 0x85, 0x05, 0x08, 0x07, 0xc0,\n\t0x90, 0x23, 0xc9, 0xc0, 0x0a, 0x5d, 0xf0, 0x84, 0x58, 0xb8, 0x7e,\n\t0x7a, 0x06, 0x35, 0x33, 0x51, 0x64, 0x60, 0x18, 0x86, 0x15, 0x17,\n\t0x36, 0xad, 0xa0, 0x24, 0x5d, 0xe8, 0x05, 0x68, 0xf8, 0x86, 0x75,\n\t0xf0, 0x65, 0x45, 0xb1, 0x62, 0x70, 0x28, 0x83, 0x76, 0xa0, 0x07,\n\t0x9e, 0xb2, 0x3a, 0x0f, 0x92, 0x0c, 0xa9, 0xd0, 0x0c, 0x78, 0x70,\n\t0x86, 0x75, 0x58, 0x7c, 0x5e, 0x37, 0x60, 0x56, 0x18, 0x88, 0x29,\n\t0x28, 0x07, 0xfe, 0xbe, 0xb0, 0x0a, 0x7a, 0x58, 0x22, 0xca, 0x80,\n\t0x29, 0x80, 0x08, 0x87, 0x7b, 0x90, 0x62, 0xf3, 0x53, 0x88, 0x86,\n\t0x78, 0x81, 0x9d, 0xb2, 0x86, 0x4a, 0x82, 0x21, 0xac, 0x80, 0x28,\n\t0x8f, 0x88, 0x85, 0x91, 0x28, 0x61, 0x5b, 0x21, 0x00, 0xdb, 0xd7,\n\t0x89, 0xb2, 0x77, 0x87, 0x6f, 0xc0, 0x0b, 0x8a, 0x98, 0x89, 0x18,\n\t0x92, 0x0c, 0xca, 0x10, 0x0c, 0x5d, 0xf0, 0x87, 0x95, 0x58, 0x7c,\n\t0x63, 0x00, 0x8a, 0x5c, 0xf1, 0x61, 0x6e, 0x80, 0x82, 0x1c, 0x78,\n\t0x07, 0x78, 0xd0, 0x05, 0xbe, 0xa0, 0x3a, 0xaa, 0xc8, 0x85, 0xab,\n\t0xc0, 0x0b, 0xaf, 0xa8, 0x2a, 0x90, 0x58, 0x07, 0x51, 0xe0, 0x83,\n\t0x65, 0x91, 0x01, 0x52, 0x00, 0x64, 0x58, 0xa8, 0x29, 0x75, 0xb0,\n\t0x06, 0x5f, 0xd0, 0x0b, 0x8b, 0x30, 0x09, 0x94, 0xf0, 0x8b, 0x6c,\n\t0xa8, 0x0c, 0xc0, 0xc0, 0x05, 0x6b, 0xd0, 0x2b, 0xa4, 0x58, 0x7c,\n\t0x91, 0x18, 0x02, 0xf7, 0x37, 0x60, 0x21, 0x30, 0x06, 0x74, 0xb0,\n\t0x07, 0xe6, 0x18, 0x72, 0x76, 0x60, 0x07, 0xe6, 0xb8, 0x07, 0x78,\n\t0x00, 0x8d, 0x4f, 0xf0, 0x08, 0x89, 0x20, 0x24, 0x91, 0x40, 0x8d,\n\t0xa6, 0x62, 0x8d, 0x2d, 0x82, 0x1d, 0x79, 0xe2, 0x05, 0x6b, 0xf0,\n\t0x87, 0xe7, 0x88, 0x8e, 0xeb, 0x58, 0x07, 0x63, 0x80, 0x04, 0xc7,\n\t0x34, 0x18, 0x02, 0xd0, 0x01, 0x48, 0x20, 0x05, 0x6c, 0xe0, 0x06,\n\t0x73, 0x50, 0x07, 0xe9, 0xb8, 0x2a, 0x74, 0xc0, 0x06, 0x63, 0x10,\n\t0x05, 0x2e, 0xd0, 0x04, 0x8e, 0x10, 0x8f, 0x42, 0x72, 0x91, 0x91,\n\t0x20, 0x09, 0x95, 0x50, 0x8d, 0xf6, 0x58, 0x22, 0x98, 0x40, 0x09,\n\t0x93, 0xe0, 0x08, 0xbd, 0xb0, 0x05, 0x51, 0x30, 0x06, 0x09, 0xb9,\n\t0x90, 0x0d, 0x59, 0x07, 0x6e, 0xc0, 0x06, 0x50, 0x80, 0x04, 0x1d,\n\t0x40, 0x54, 0x93, 0x11, 0xfe, 0x00, 0x02, 0xa0, 0x00, 0x1d, 0x10,\n\t0x02, 0x1e, 0xe0, 0x01, 0x21, 0xd0, 0x01, 0x19, 0x50, 0x00, 0x9d,\n\t0x33, 0x01, 0x3b, 0x70, 0x91, 0x40, 0x29, 0x8f, 0x93, 0xb0, 0x91,\n\t0xf5, 0xd8, 0x91, 0x1f, 0x39, 0x09, 0x92, 0x30, 0x20, 0x91, 0x40,\n\t0x08, 0xdd, 0x11, 0x00, 0x0a, 0x10, 0x01, 0x35, 0x79, 0x93, 0x39,\n\t0x19, 0x01, 0x0a, 0x10, 0x8e, 0xa1, 0x91, 0x10, 0xf4, 0x63, 0x3f,\n\t0x41, 0x19, 0x94, 0x19, 0x39, 0x94, 0x94, 0x40, 0x09, 0x45, 0xf9,\n\t0x20, 0x98, 0xf0, 0x91, 0x20, 0x39, 0x09, 0xe9, 0x83, 0x08, 0xe8,\n\t0x41, 0x86, 0x57, 0xa9, 0x4a, 0x31, 0xe0, 0x08, 0x5b, 0xf9, 0x96,\n\t0x88, 0x90, 0x91, 0x92, 0x30, 0x09, 0x74, 0x59, 0x97, 0x75, 0x99,\n\t0x94, 0x67, 0x19, 0x23, 0x8b, 0x10, 0x03, 0x66, 0xb2, 0x96, 0x7b,\n\t0x21, 0x01, 0x58, 0xf0, 0x8e, 0x16, 0x09, 0x97, 0x84, 0x49, 0x98,\n\t0x89, 0xe0, 0x08, 0x4f, 0xa0, 0x05, 0x1d, 0xe7, 0x97, 0x7b, 0x71,\n\t0x01, 0xaf, 0x92, 0x05, 0x57, 0x40, 0x91, 0x83, 0x59, 0x98, 0x85,\n\t0x99, 0x08, 0xa2, 0xb3, 0x05, 0x59, 0xe0, 0x2a, 0x8b, 0xc9, 0x98,\n\t0x70, 0x71, 0x01, 0x53, 0xb0, 0x2c, 0x55, 0x40, 0x06, 0x58, 0xb0,\n\t0x05, 0x4d, 0xf0, 0x08, 0x8b, 0x10, 0x8f, 0x91, 0x90, 0x9a, 0x84,\n\t0xa9, 0x9a, 0x96, 0xf9, 0x08, 0x4d, 0xb0, 0x05, 0x58, 0x40, 0x06,\n\t0xae, 0xb2, 0x2c, 0x9b, 0xc9, 0x99, 0x66, 0xe1, 0x99, 0xe3, 0x02,\n\t0x9a, 0xb0, 0xa2, 0x05, 0x5b, 0xf0, 0x04, 0x44, 0xb0, 0x03, 0x84,\n\t0x70, 0x09, 0x8d, 0xa0, 0x08, 0x89, 0x50, 0x9c, 0x8a, 0xd0, 0x08,\n\t0x97, 0x40, 0x08, 0x3b, 0x50, 0x04, 0xaf, 0xa9, 0x05, 0x59, 0x20,\n\t0x9b, 0xb9, 0x49, 0x9b, 0xb6, 0xd9, 0x99, 0x9f, 0x19, 0x9d, 0xe3,\n\t0x52, 0x05, 0x55, 0xf0, 0x02, 0x32, 0xfe, 0x79, 0x00, 0x0e, 0x30,\n\t0x01, 0x15, 0xf0, 0x9d, 0x13, 0x30, 0x01, 0x07, 0xb0, 0x1b, 0x2f,\n\t0x80, 0x9d, 0xb3, 0x69, 0x9d, 0x54, 0x50, 0x9b, 0xd3, 0xb9, 0x15,\n\t0x19, 0x80, 0x06, 0xca, 0x82, 0x9e, 0x54, 0x60, 0x06, 0xd0, 0xc6,\n\t0x11, 0x1e, 0x90, 0x32, 0xe8, 0x69, 0x06, 0x68, 0x40, 0x7a, 0xeb,\n\t0x99, 0x8c, 0x74, 0x30, 0x07, 0x6a, 0x80, 0x06, 0xf6, 0x39, 0x2e,\n\t0xf2, 0xd9, 0x11, 0xf5, 0x69, 0x9d, 0x55, 0x70, 0x06, 0x6a, 0x30,\n\t0x07, 0x73, 0xa0, 0x9f, 0xfb, 0xc9, 0x9e, 0x40, 0xc8, 0x2a, 0xff,\n\t0x69, 0x9f, 0x03, 0x4a, 0x9f, 0x12, 0x7a, 0x06, 0x69, 0xd0, 0x06,\n\t0x28, 0x59, 0x07, 0x0c, 0xda, 0xa0, 0x50, 0x71, 0x73, 0xd5, 0xd2,\n\t0x06, 0x6a, 0x90, 0x06, 0xee, 0x39, 0x9f, 0x0b, 0xe1, 0x01, 0x67,\n\t0x60, 0xa1, 0x6a, 0x80, 0xa1, 0x05, 0xb3, 0xa1, 0x1c, 0x5a, 0x14,\n\t0x1e, 0x8a, 0x73, 0x54, 0xb8, 0x10, 0x21, 0xa0, 0xa0, 0x40, 0xc7,\n\t0xa2, 0x2d, 0x3a, 0x14, 0x2f, 0x6a, 0x79, 0x91, 0xc6, 0x11, 0x24,\n\t0x80, 0x82, 0x36, 0x7a, 0xa3, 0xb0, 0x66, 0x77, 0x77, 0xb7, 0xa3,\n\t0x0b, 0xd1, 0xa3, 0x68, 0xf7, 0xa3, 0x40, 0x5a, 0x77, 0xa2, 0x47,\n\t0xa4, 0x0a, 0x61, 0xa4, 0x35, 0x9a, 0xa4, 0x2e, 0x2a, 0xa4, 0x33,\n\t0xc7, 0xa4, 0x09, 0xe1, 0xa4, 0x15, 0x87, 0xa4, 0x50, 0x4a, 0x64,\n\t0x52, 0xaa, 0xa3, 0x1d, 0x61, 0xa5, 0x0f, 0x87, 0xa5, 0x59, 0x0a,\n\t0x12, 0x39, 0xba, 0x6e, 0x54, 0x8a, 0x10, 0x5e, 0xda, 0x6f, 0x60,\n\t0x1a, 0xa6, 0x1e, 0x31, 0xa6, 0xd5, 0x02, 0x69, 0x5d, 0xea, 0xa3,\n\t0x6a, 0x1a, 0xa4, 0x4b, 0xfa, 0xa6, 0x47, 0x1a, 0xa7, 0x35, 0xc1,\n\t0xa6, 0x8f, 0x56, 0xa6, 0x07, 0x71, 0xa6, 0x2b, 0x6a, 0xa7, 0x4a,\n\t0x3a, 0xa4, 0x74, 0xfa, 0xa4, 0x7e, 0x2a, 0x13, 0x71, 0x08, 0xc0,\n\t0x06, 0x4f, 0x68, 0x07, 0x24, 0xaa, 0x10, 0x21, 0xc0, 0x7d, 0x74,\n\t0xa0, 0x9e, 0x83, 0xea, 0x11, 0x01, 0x40, 0x89, 0xed, 0xe2, 0x06,\n\t0x11, 0xd0, 0x11, 0x0a, 0x70, 0x7a, 0x33, 0x37, 0x06, 0x30, 0xf9,\n\t0xa8, 0x1c, 0xe1, 0x67, 0x0b, 0x18, 0x64, 0x56, 0x29, 0x6d, 0x33,\n\t0x17, 0xa3, 0x9c, 0x0a, 0x12, 0x91, 0xba, 0x07, 0x49, 0xa3, 0x67,\n\t0x95, 0xea, 0x11, 0x97, 0x5a, 0x79, 0x91, 0xb8, 0xa9, 0xa5, 0xba,\n\t0x10, 0xa2, 0x58, 0x8e, 0xe9, 0x98, 0x8e, 0x63, 0xe0, 0xa8, 0xf8,\n\t0x07, 0x05, 0x0c, 0x59, 0x7c, 0x75, 0x20, 0x05, 0xc8, 0x18, 0xab,\n\t0x1f, 0x11, 0x00, 0x21, 0x80, 0x90, 0x6e, 0x10, 0x90, 0xbf, 0xda,\n\t0x11, 0x0a, 0x46, 0x8e, 0x74, 0x10, 0x90, 0xb0, 0xaa, 0x17, 0x01,\n\t0x01, 0x00, 0x3b\n};\n\nstatic const int _img_hungry_length = 4260;\nstatic const char _img_laughing[4662] = {\n\t0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x7f, 0x00, 0x7f, 0x00, 0xf7,\n\t0xe8, 0x00, 0x00, 0x00, 0x00, 0x4e, 0xa8, 0xae, 0xe4, 0xbb, 0x4a,\n\t0xee, 0xc4, 0x4f, 0x30, 0x9d, 0xb7, 0x45, 0x9d, 0xa2, 0xf6, 0xc7,\n\t0x4d, 0xf3, 0xc7, 0x4f, 0x0a, 0x82, 0xc1, 0x2a, 0xa3, 0xb5, 0x40,\n\t0xba, 0xb3, 0x23, 0x90, 0xac, 0xc3, 0xc1, 0x83, 0xea, 0xbf, 0x4c,\n\t0xf3, 0xc7, 0x4f, 0xe8, 0xbe, 0x4b, 0x07, 0x7b, 0xb8, 0x06, 0x80,\n\t0xc0, 0x34, 0xaf, 0xb7, 0x40, 0xb9, 0xb4, 0xf3, 0xc7, 0x4f, 0x04,\n\t0x81, 0xc2, 0x2f, 0xa0, 0xac, 0x56, 0xa3, 0x9e, 0xf1, 0xc5, 0x4e,\n\t0xd8, 0xb1, 0x46, 0xc6, 0xa2, 0x41, 0x3e, 0xb4, 0xae, 0xf3, 0xc7,\n\t0x4f, 0xee, 0xc3, 0x4d, 0xc4, 0xa0, 0x3f, 0xf3, 0xc7, 0x4f, 0xf3,\n\t0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0x01, 0x81, 0xc5,\n\t0x08, 0x7a, 0xb6, 0x39, 0xaa, 0xa7, 0x40, 0xb9, 0xb3, 0xdd, 0xe8,\n\t0xe8, 0xc4, 0xa0, 0x3f, 0xdf, 0xb7, 0x4a, 0x0e, 0x72, 0xa4, 0x26,\n\t0x89, 0x98, 0x02, 0x82, 0xc6, 0x06, 0x7a, 0xb7, 0x40, 0xba, 0xb3,\n\t0x09, 0x6e, 0xa2, 0x3c, 0xaf, 0xa8, 0x3b, 0x9b, 0xa4, 0xac, 0xbf,\n\t0xba, 0x39, 0x3e, 0x47, 0x37, 0x3f, 0x48, 0x39, 0x3f, 0x48, 0x36,\n\t0x3e, 0x47, 0x39, 0x41, 0x4a, 0x3a, 0x4c, 0x54, 0x3a, 0x53, 0x5a,\n\t0x3a, 0x57, 0x5d, 0x3b, 0x5d, 0x62, 0x3b, 0x66, 0x6a, 0x3c, 0x74,\n\t0x76, 0x3c, 0x7c, 0x7d, 0x3c, 0x76, 0x78, 0x3c, 0x6e, 0x71, 0x33,\n\t0x95, 0x8f, 0x52, 0x4f, 0x58, 0x67, 0x5c, 0x65, 0x67, 0x74, 0x74,\n\t0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xd9, 0xb3,\n\t0x48, 0xc3, 0x9f, 0x3f, 0x86, 0x6f, 0x77, 0x40, 0xba, 0xb3, 0xa6,\n\t0xc6, 0xaa, 0x33, 0x95, 0x8f, 0x54, 0x8c, 0x7d, 0x70, 0x92, 0x6e,\n\t0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xd9, 0xb1,\n\t0x46, 0xc2, 0xa0, 0x40, 0xc8, 0xa4, 0x41, 0xf3, 0xc7, 0x4f, 0xc2,\n\t0x9f, 0x3f, 0xc4, 0xa0, 0x3f, 0x94, 0x99, 0x59, 0xb7, 0x9d, 0x46,\n\t0xa6, 0x9a, 0x50, 0x99, 0xad, 0x7c, 0xb0, 0xb4, 0x70, 0x92, 0x9a,\n\t0x60, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xc1, 0x9f, 0x40, 0xf3,\n\t0xc7, 0x4f, 0xc4, 0xa1, 0x41, 0xc8, 0xa5, 0x43, 0xd3, 0xad, 0x45,\n\t0xda, 0xb3, 0x47, 0xe7, 0xc3, 0x53, 0xf3, 0xc7, 0x4f, 0xec, 0xc1,\n\t0x4d, 0xd2, 0xc0, 0x68, 0xaf, 0xc2, 0x75, 0xf1, 0xc5, 0x4e, 0xf3,\n\t0xc7, 0x4f, 0xf5, 0xc8, 0x4f, 0xfa, 0xc8, 0x4b, 0xe9, 0xc5, 0x54,\n\t0xf6, 0xca, 0x50, 0xf4, 0xc8, 0x51, 0xee, 0xcd, 0x67, 0xd0, 0xc4,\n\t0x63, 0x00, 0x81, 0xc6, 0x00, 0x81, 0xc6, 0x05, 0x84, 0xc6, 0x05,\n\t0x6c, 0xa2, 0x02, 0x7d, 0xbf, 0x00, 0x81, 0xc6, 0x00, 0x81, 0xc6,\n\t0x00, 0x67, 0x9e, 0x02, 0x68, 0x9f, 0x07, 0x6c, 0x9d, 0x10, 0x70,\n\t0x9b, 0x32, 0x7a, 0x8a, 0x00, 0x6a, 0xa2, 0x00, 0x6e, 0xa8, 0x00,\n\t0x71, 0xad, 0x00, 0x81, 0xc6, 0x00, 0x75, 0xb4, 0x00, 0x7a, 0xbb,\n\t0x00, 0x78, 0xb7, 0x05, 0x7e, 0xbe, 0x06, 0x6c, 0xa1, 0x43, 0x7f,\n\t0x85, 0x00, 0x7f, 0xc4, 0x00, 0x81, 0xc6, 0x9a, 0x7c, 0x84, 0x40,\n\t0xba, 0xb3, 0x40, 0xba, 0xb3, 0x3d, 0x87, 0x87, 0x33, 0x95, 0x8f,\n\t0x3b, 0x94, 0x8b, 0x33, 0x96, 0x90, 0x3e, 0x95, 0x92, 0x34, 0x9a,\n\t0x94, 0x3e, 0x9d, 0x9a, 0x3b, 0x99, 0x96, 0x2c, 0x90, 0x92, 0x3c,\n\t0xa3, 0x9e, 0x37, 0xa1, 0x9b, 0x40, 0xba, 0xb3, 0x14, 0x89, 0xbd,\n\t0x2e, 0x91, 0xb0, 0x40, 0xba, 0xb3, 0x3e, 0xab, 0xa5, 0x3e, 0xae,\n\t0xa9, 0x3d, 0xa5, 0xa1, 0x3e, 0xb2, 0xac, 0x40, 0xba, 0xb3, 0x3e,\n\t0xba, 0xb3, 0x3e, 0xb7, 0xb2, 0x2f, 0xaa, 0xb8, 0x34, 0xa6, 0xa8,\n\t0x4e, 0x99, 0x93, 0x70, 0xad, 0x93, 0x4a, 0x94, 0xab, 0x40, 0xb4,\n\t0xae, 0x4b, 0xba, 0xad, 0x40, 0xb7, 0xb0, 0x40, 0xba, 0xb3, 0x4b,\n\t0xbc, 0xb6, 0x57, 0xb9, 0xb4, 0x5d, 0xb2, 0xa4, 0x67, 0xb8, 0xb4,\n\t0x78, 0xb7, 0xb4, 0x6b, 0xb1, 0xa6, 0x63, 0x9d, 0x96, 0x57, 0xc2,\n\t0xbc, 0x00, 0x81, 0xc6, 0x00, 0x82, 0xc8, 0x0b, 0x86, 0xc5, 0x17,\n\t0x8c, 0xcb, 0x16, 0x91, 0xc4, 0x2d, 0x98, 0xd0, 0x3f, 0xa0, 0xd4,\n\t0x51, 0xa9, 0xd8, 0x69, 0xb5, 0xdd, 0x79, 0xbd, 0xe1, 0x66, 0xc8,\n\t0xc2, 0x75, 0xcd, 0xc8, 0x7d, 0xd0, 0xcb, 0x5c, 0xc5, 0xc0, 0xf3,\n\t0xfb, 0xfa, 0xc7, 0xcb, 0xca, 0xb2, 0x8a, 0x92, 0x8c, 0xb0, 0x87,\n\t0x8f, 0xb4, 0xb6, 0xb6, 0xbb, 0xba, 0xc5, 0x96, 0x9d, 0xc5, 0xb2,\n\t0xb6, 0xda, 0xb1, 0xb7, 0xd6, 0xa0, 0xa7, 0xe9, 0xac, 0xb3, 0xe9,\n\t0xb0, 0xb7, 0xf1, 0xb0, 0xb7, 0xf3, 0xb2, 0xb9, 0xe1, 0xa7, 0xae,\n\t0xd5, 0x9f, 0xa7, 0xc5, 0xc3, 0xaf, 0xf3, 0xe0, 0xa4, 0xa8, 0xc7,\n\t0xd6, 0x8e, 0xd6, 0xd2, 0xaa, 0xd5, 0xd4, 0xac, 0xe1, 0xde, 0x8d,\n\t0xc7, 0xe5, 0xb0, 0xd8, 0xed, 0xb8, 0xe5, 0xe3, 0xcc, 0xcc, 0xcc,\n\t0xc6, 0xca, 0xcb, 0xd7, 0xd7, 0xd7, 0xce, 0xd0, 0xcf, 0xc9, 0xeb,\n\t0xe9, 0xdc, 0xf2, 0xf1, 0xd2, 0xea, 0xf2, 0xe8, 0xe9, 0xe9, 0xea,\n\t0xf6, 0xf8, 0xf4, 0xfb, 0xfb, 0xff, 0xff, 0xff, 0xf8, 0xf9, 0xf8,\n\t0xf4, 0xf6, 0xf1, 0xf6, 0xf0, 0xd6, 0x99, 0xc1, 0x87, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x21, 0xf9, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x21, 0xff, 0x0b,\n\t0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x6b,\n\t0x0d, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x3d, 0x30, 0x2e, 0x34, 0x35,\n\t0x34, 0x35, 0x35, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00,\n\t0x7f, 0x00, 0x00, 0x08, 0xfe, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0,\n\t0xa0, 0xc1, 0x83, 0x08, 0x01, 0x2c, 0x18, 0x51, 0x47, 0x0f, 0xa1,\n\t0x45, 0x8c, 0x10, 0xe1, 0x59, 0x51, 0x21, 0x40, 0xc2, 0x8b, 0x18,\n\t0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc6, 0x05, 0x2c, 0xf4, 0x30,\n\t0xc2, 0x45, 0xf2, 0xd6, 0x2d, 0x92, 0xb8, 0x08, 0xd5, 0x19, 0x61,\n\t0xd1, 0xa3, 0x40, 0x02, 0x05, 0x16, 0x20, 0x58, 0xb0, 0x80, 0x40,\n\t0x4b, 0x97, 0x38, 0x73, 0xea, 0x14, 0x38, 0x42, 0x4f, 0x49, 0x93,\n\t0x40, 0x81, 0x92, 0x64, 0x54, 0x07, 0xc1, 0x46, 0x02, 0x15, 0x4a,\n\t0xac, 0x70, 0xf4, 0xe8, 0x94, 0xa7, 0xa7, 0x9e, 0x1e, 0x3d, 0x5a,\n\t0x51, 0xa2, 0x02, 0x81, 0x9d, 0x58, 0xb3, 0x1e, 0x0c, 0xc0, 0x82,\n\t0x10, 0xae, 0xa0, 0x60, 0xc1, 0xe2, 0xd2, 0x53, 0xe1, 0xe2, 0x82,\n\t0x0a, 0x2b, 0x1e, 0x8d, 0x72, 0xc5, 0xb6, 0xad, 0xdb, 0xb6, 0xa3,\n\t0xa6, 0x2e, 0xb8, 0xa9, 0xb5, 0x2e, 0x4e, 0x16, 0x23, 0xc3, 0xea,\n\t0x15, 0x4a, 0xd6, 0x60, 0x00, 0xb4, 0xa7, 0x4a, 0xbd, 0x1d, 0x4c,\n\t0xd8, 0x95, 0xa7, 0x25, 0x15, 0xed, 0x2a, 0xe6, 0x38, 0x22, 0xef,\n\t0xde, 0xc7, 0xb7, 0xf0, 0x44, 0x18, 0x48, 0xa0, 0x84, 0xa3, 0xb5,\n\t0x85, 0x33, 0x0f, 0x1e, 0x15, 0x63, 0xc1, 0xe2, 0xcf, 0x09, 0x23,\n\t0xec, 0xf9, 0xaa, 0x17, 0x25, 0xe9, 0xa0, 0x87, 0x04, 0x05, 0x7a,\n\t0x11, 0xe0, 0xef, 0x23, 0xc1, 0x9a, 0x63, 0x0f, 0xf6, 0x44, 0x82,\n\t0x2e, 0xe8, 0xcf, 0x01, 0xea, 0x9c, 0x06, 0xcb, 0x49, 0x55, 0x2d,\n\t0x54, 0x9d, 0x72, 0x01, 0x35, 0x24, 0x88, 0x8f, 0x71, 0x3e, 0x2b,\n\t0x62, 0x60, 0x96, 0xcd, 0xfc, 0xed, 0x12, 0xa3, 0xb7, 0x41, 0x57,\n\t0xf0, 0x1a, 0x96, 0x53, 0x2a, 0x35, 0x70, 0xda, 0xb4, 0x81, 0xd3,\n\t0x45, 0xd5, 0xad, 0x42, 0x81, 0x8e, 0xfe, 0xfb, 0xc1, 0x04, 0xaa,\n\t0xb9, 0xf9, 0xc1, 0x8f, 0xca, 0x46, 0x5f, 0xbc, 0x62, 0xb7, 0x49,\n\t0x4e, 0x5d, 0xda, 0xb8, 0xd1, 0x2e, 0xdf, 0x4d, 0x1a, 0x27, 0x7d,\n\t0x8c, 0xf7, 0xf9, 0x53, 0x49, 0xd4, 0xf9, 0xff, 0x6e, 0x79, 0xa2,\n\t0xde, 0x7a, 0x5a, 0x11, 0xe0, 0x13, 0x58, 0xb9, 0x70, 0x31, 0x1f,\n\t0x7d, 0xda, 0xa5, 0x41, 0x86, 0x16, 0x3e, 0xf0, 0x31, 0x5e, 0x28,\n\t0xad, 0x00, 0x68, 0x21, 0x5b, 0x9e, 0x40, 0x40, 0xa0, 0x56, 0x11,\n\t0x50, 0x27, 0x94, 0x2a, 0x70, 0x2c, 0xa8, 0x1d, 0x1b, 0x66, 0x60,\n\t0x71, 0x05, 0x16, 0x59, 0xfc, 0x11, 0xc9, 0x27, 0x17, 0xb6, 0x68,\n\t0xd8, 0x80, 0x1b, 0xe6, 0x34, 0xc2, 0x22, 0x61, 0x21, 0x23, 0x62,\n\t0x1b, 0x6c, 0x94, 0x71, 0xc5, 0x8e, 0x5a, 0x3c, 0x31, 0x09, 0x8b,\n\t0x2e, 0xb6, 0x78, 0x0a, 0x8c, 0x31, 0x7a, 0x34, 0x42, 0x58, 0xb9,\n\t0x74, 0x21, 0xa2, 0x83, 0x3b, 0x5e, 0xd1, 0x63, 0x25, 0xe5, 0x05,\n\t0xe9, 0xe2, 0x23, 0x9e, 0x15, 0xe9, 0xd2, 0x08, 0xee, 0x25, 0xb9,\n\t0x20, 0x93, 0x3b, 0x6e, 0xe1, 0x44, 0x7f, 0x52, 0x4a, 0xb9, 0x84,\n\t0x6d, 0x56, 0x66, 0x74, 0x64, 0x58, 0x0a, 0xb6, 0x61, 0xc6, 0x18,\n\t0x4d, 0x66, 0x81, 0x0a, 0x98, 0x61, 0x4a, 0xa9, 0x42, 0x99, 0x1d,\n\t0x55, 0xc0, 0x88, 0x58, 0xb5, 0xa8, 0xc9, 0xe6, 0x8e, 0x6e, 0xc2,\n\t0x19, 0x67, 0x90, 0x02, 0xd2, 0xb9, 0xd1, 0x02, 0x07, 0x06, 0x05,\n\t0x9f, 0x89, 0x57, 0x84, 0xe1, 0x85, 0x24, 0x50, 0xfe, 0x19, 0xe7,\n\t0x23, 0x57, 0x11, 0x44, 0x00, 0x02, 0x11, 0x54, 0x10, 0xc1, 0x5c,\n\t0x82, 0xe6, 0xe6, 0x5e, 0x21, 0x80, 0x68, 0x61, 0xe2, 0xa2, 0x3f,\n\t0xba, 0x05, 0x0a, 0x24, 0x3e, 0x64, 0xe2, 0xa8, 0x85, 0x25, 0x08,\n\t0xb4, 0x50, 0x43, 0x88, 0x10, 0xe2, 0x6a, 0x22, 0xfe, 0x78, 0xb0,\n\t0x50, 0xa5, 0x95, 0x67, 0x02, 0x75, 0x48, 0x78, 0x3e, 0x6c, 0x01,\n\t0x2a, 0x90, 0x6d, 0xf5, 0x50, 0xc3, 0x0c, 0x39, 0x58, 0x72, 0xea,\n\t0x7f, 0x43, 0xb2, 0x90, 0xc8, 0x49, 0x28, 0x21, 0x4b, 0x92, 0x4a,\n\t0x44, 0xae, 0x57, 0x40, 0xa1, 0xb7, 0x1e, 0x07, 0x88, 0x24, 0x93,\n\t0x84, 0xf2, 0xd6, 0x2a, 0x3b, 0xcc, 0x70, 0x43, 0x0d, 0xc1, 0x0e,\n\t0x7b, 0xde, 0x29, 0x27, 0x41, 0x46, 0x12, 0x22, 0x2c, 0x90, 0x79,\n\t0xdb, 0x91, 0xb8, 0x18, 0x12, 0x9e, 0x71, 0x2a, 0x46, 0xa2, 0x09,\n\t0x29, 0x83, 0x01, 0x72, 0xc3, 0xbc, 0xdc, 0x0a, 0xeb, 0x2d, 0x73,\n\t0xa4, 0xec, 0x02, 0x99, 0x50, 0xb7, 0xd4, 0x11, 0x29, 0x81, 0xb9,\n\t0x2d, 0xb2, 0x2e, 0x1f, 0xed, 0xfa, 0xe9, 0xd6, 0x2a, 0x3d, 0xcc,\n\t0xbb, 0x6d, 0xb7, 0xf7, 0xca, 0x66, 0xca, 0xbe, 0x41, 0xe1, 0xe2,\n\t0x6f, 0x8c, 0x08, 0xe0, 0xb1, 0xee, 0x78, 0x91, 0x18, 0x7c, 0x6d,\n\t0xc2, 0xf4, 0x32, 0xdc, 0x70, 0x66, 0xf9, 0x42, 0x1c, 0x14, 0x0b,\n\t0x45, 0x46, 0x60, 0x71, 0x1f, 0x98, 0x44, 0x12, 0xaa, 0x66, 0x08,\n\t0x2b, 0x5c, 0xef, 0xc7, 0x9a, 0x3d, 0x6c, 0x12, 0x69, 0x3f, 0x89,\n\t0x45, 0x48, 0xb3, 0xb7, 0x2d, 0xf0, 0x42, 0xca, 0xee, 0x32, 0xd7,\n\t0x72, 0xc7, 0xf6, 0xc2, 0x3c, 0x58, 0xc8, 0x9d, 0xd4, 0x82, 0x0c,\n\t0x32, 0xa9, 0x04, 0x57, 0x1a, 0x1e, 0xe6, 0x82, 0x56, 0x42, 0x24,\n\t0x19, 0xfb, 0xe7, 0x33, 0xc7, 0x0b, 0x07, 0x2d, 0xb4, 0x5b, 0xa6,\n\t0x5c, 0x57, 0x9f, 0x1b, 0x70, 0x70, 0xd1, 0x89, 0x5e, 0x8c, 0x8c,\n\t0x10, 0x63, 0x05, 0x98, 0x4c, 0x32, 0x49, 0x94, 0xcd, 0xfd, 0x5c,\n\t0xf5, 0xd5, 0x6e, 0x91, 0xc2, 0x0a, 0x1d, 0x37, 0xba, 0xe1, 0x86,\n\t0x1a, 0x5f, 0x8b, 0x55, 0x87, 0x46, 0x15, 0x78, 0x50, 0x84, 0xfe,\n\t0x11, 0x1d, 0x34, 0xe0, 0x51, 0x01, 0x41, 0x54, 0x12, 0x89, 0xa9,\n\t0xff, 0xa9, 0xfd, 0x32, 0xdb, 0x6d, 0xad, 0x71, 0xa3, 0x76, 0x6e,\n\t0x74, 0xc1, 0x89, 0x58, 0x7a, 0x14, 0x70, 0x51, 0x03, 0x45, 0xa0,\n\t0x11, 0xc7, 0xe5, 0x6d, 0x7c, 0xd1, 0x41, 0x47, 0x2b, 0x4c, 0x12,\n\t0xb5, 0x85, 0x86, 0x7b, 0x7c, 0x35, 0x29, 0xb4, 0x64, 0xc7, 0x20,\n\t0x7d, 0xa8, 0xec, 0x96, 0xd2, 0xac, 0x06, 0x15, 0x20, 0x45, 0x1c,\n\t0x37, 0xc6, 0x91, 0xc6, 0x07, 0x1b, 0x91, 0xad, 0x32, 0xaf, 0x00,\n\t0x86, 0x6e, 0xf5, 0xa9, 0xad, 0x54, 0xf8, 0x96, 0xe2, 0xa7, 0xcb,\n\t0xc7, 0x85, 0x5e, 0x62, 0x23, 0x64, 0x44, 0x1c, 0xc1, 0xb7, 0x11,\n\t0x87, 0x18, 0x0f, 0x64, 0xb4, 0x40, 0xe0, 0xee, 0xfa, 0x7e, 0xe1,\n\t0x2a, 0x3f, 0xb8, 0x2c, 0xba, 0x94, 0xad, 0x7c, 0x42, 0x89, 0x0f,\n\t0x3c, 0x00, 0x41, 0x38, 0x5b, 0xa4, 0x20, 0x93, 0x7c, 0xe3, 0xc2,\n\t0x81, 0x55, 0xbc, 0x41, 0x09, 0x88, 0x81, 0x7c, 0xf2, 0x71, 0x18,\n\t0x91, 0x51, 0xe7, 0x2a, 0x4b, 0x7d, 0xa1, 0x28, 0x99, 0x40, 0x82,\n\t0x43, 0x0d, 0xf3, 0xce, 0xa0, 0x03, 0xda, 0x2d, 0x8a, 0x62, 0x09,\n\t0x24, 0x3c, 0xc8, 0xc1, 0xb6, 0x66, 0x30, 0x03, 0x1e, 0xac, 0xa2,\n\t0x2d, 0xa4, 0x88, 0x45, 0x88, 0x4e, 0x47, 0xbe, 0xb0, 0x9c, 0xaf,\n\t0x20, 0x28, 0x58, 0x1f, 0xfb, 0xa6, 0xd0, 0x34, 0x81, 0x90, 0xcd,\n\t0x73, 0xdf, 0x3b, 0xcf, 0x2a, 0x42, 0x21, 0x89, 0x1e, 0xe8, 0x00,\n\t0x07, 0x0a, 0xa3, 0xd7, 0x0d, 0x32, 0xa8, 0xc1, 0xfa, 0x01, 0x41,\n\t0x07, 0x03, 0xc4, 0x5f, 0xfe, 0x74, 0x70, 0xc0, 0xb6, 0xb0, 0x42,\n\t0x0d, 0x8b, 0x73, 0xc3, 0xf0, 0x1c, 0x78, 0x90, 0x02, 0x7c, 0x41,\n\t0x82, 0xc1, 0x8b, 0xc3, 0x17, 0xfe, 0x65, 0x10, 0x02, 0xbc, 0x40,\n\t0x70, 0xfe, 0x1a, 0xd3, 0x4c, 0xf6, 0xb6, 0xb7, 0x03, 0x10, 0xce,\n\t0xa0, 0x06, 0x2a, 0x4c, 0x21, 0x0f, 0xe4, 0xc7, 0x9c, 0x21, 0xfe,\n\t0xa0, 0x88, 0x37, 0x38, 0x62, 0x08, 0x7f, 0x75, 0x03, 0x1c, 0x40,\n\t0xe2, 0x2d, 0xe1, 0x5b, 0x5c, 0x1b, 0x52, 0x07, 0x96, 0x9b, 0x1d,\n\t0x04, 0x03, 0x6c, 0xd0, 0x22, 0x7d, 0xe2, 0x60, 0x85, 0x0a, 0x3e,\n\t0x0d, 0x6a, 0xd6, 0x92, 0x0d, 0x28, 0xfe, 0x17, 0xc0, 0x14, 0xba,\n\t0x4c, 0x8a, 0x39, 0xe0, 0x01, 0x24, 0x70, 0xa7, 0x19, 0x50, 0x5c,\n\t0x82, 0x7b, 0x46, 0x44, 0xe2, 0x1b, 0xf1, 0x97, 0x03, 0x20, 0x40,\n\t0x22, 0x8d, 0x6d, 0x2b, 0x1d, 0x83, 0x1a, 0xf7, 0xb8, 0x88, 0x25,\n\t0x42, 0x72, 0x06, 0x29, 0x02, 0x0e, 0x73, 0x58, 0x84, 0x84, 0x2c,\n\t0xa0, 0x09, 0x9e, 0x0b, 0xe2, 0x5b, 0x44, 0xf1, 0x03, 0x01, 0xfe,\n\t0x2a, 0x89, 0x48, 0xd4, 0x16, 0x0e, 0x78, 0xe0, 0x83, 0x4b, 0x80,\n\t0x42, 0x7a, 0xb2, 0xa1, 0x04, 0x0a, 0x2f, 0xb9, 0xc7, 0x2a, 0xca,\n\t0xd1, 0x12, 0xfc, 0xc3, 0xe2, 0xdb, 0x16, 0x34, 0xb7, 0xba, 0x45,\n\t0xec, 0x6e, 0x7e, 0x79, 0x5d, 0xf2, 0x18, 0x87, 0x06, 0x0c, 0x24,\n\t0x04, 0x7e, 0x83, 0x93, 0x0d, 0x24, 0xf4, 0xf8, 0xc6, 0x2a, 0xee,\n\t0xe0, 0x07, 0x94, 0xf8, 0x44, 0x0b, 0x35, 0x98, 0xad, 0x29, 0x6a,\n\t0x72, 0x07, 0x3e, 0x08, 0x26, 0x28, 0x35, 0xb3, 0x86, 0x37, 0x70,\n\t0xad, 0x0b, 0xae, 0x0c, 0x4a, 0xd8, 0x0e, 0xd2, 0x80, 0x31, 0x2c,\n\t0x92, 0x41, 0x71, 0x88, 0x42, 0xd3, 0x1e, 0xe9, 0xb9, 0x49, 0x30,\n\t0xb1, 0x30, 0x3f, 0xd0, 0x16, 0x29, 0x75, 0xe0, 0xc7, 0x4c, 0x0c,\n\t0x13, 0x74, 0x3c, 0xd0, 0x96, 0xc2, 0x74, 0xd0, 0x03, 0x49, 0x84,\n\t0xe2, 0x9c, 0xf8, 0x4a, 0x05, 0x17, 0x52, 0xa1, 0x8a, 0xf2, 0x89,\n\t0x05, 0x0f, 0x3c, 0xfe, 0x1c, 0xc8, 0x03, 0xd0, 0x20, 0x46, 0xc6,\n\t0xd1, 0x0e, 0x21, 0xb8, 0xd4, 0x04, 0x73, 0x2c, 0x21, 0xc0, 0x38,\n\t0x42, 0xc2, 0x12, 0xdf, 0x74, 0x11, 0x25, 0xee, 0xa7, 0xb0, 0x1f,\n\t0x2c, 0xf3, 0x3c, 0x32, 0x73, 0xcf, 0xcc, 0x08, 0xf1, 0x40, 0x82,\n\t0x70, 0x60, 0x96, 0xb4, 0x64, 0x1d, 0x41, 0x16, 0x50, 0x36, 0x95,\n\t0xa5, 0x32, 0x33, 0x9f, 0xb0, 0xc4, 0x27, 0x1e, 0x1a, 0xa6, 0x85,\n\t0x26, 0xd1, 0x07, 0x24, 0x65, 0x4e, 0x29, 0xec, 0x19, 0x16, 0x5c,\n\t0xac, 0x20, 0x21, 0x1d, 0xc0, 0xa8, 0xf2, 0xc6, 0xe0, 0xb7, 0x83,\n\t0x94, 0xc0, 0x73, 0x19, 0x83, 0xcd, 0x9f, 0x42, 0x9a, 0xd0, 0x50,\n\t0x32, 0x14, 0x7f, 0x28, 0xb5, 0x10, 0x29, 0x0a, 0xd9, 0xd2, 0x89,\n\t0x21, 0xe4, 0x03, 0x32, 0xd5, 0x21, 0x22, 0x0b, 0x42, 0x00, 0xe8,\n\t0xe5, 0x92, 0x30, 0xa4, 0x80, 0x17, 0x80, 0x32, 0x81, 0x42, 0x1e,\n\t0x7c, 0xd4, 0xa7, 0xf8, 0x03, 0x6a, 0x4a, 0x63, 0x23, 0xb3, 0x88,\n\t0x49, 0x6c, 0xa9, 0x07, 0x41, 0x2a, 0x46, 0x75, 0x58, 0xd3, 0x82,\n\t0x54, 0x00, 0x6a, 0xf1, 0x2b, 0x0c, 0x2c, 0x60, 0xf1, 0x8a, 0xa8,\n\t0x4a, 0x95, 0x39, 0xe1, 0xc4, 0x9f, 0x24, 0xae, 0x05, 0x4f, 0xc2,\n\t0x98, 0x74, 0x5b, 0x37, 0x08, 0xea, 0x7f, 0xba, 0x8a, 0x2c, 0x42,\n\t0xb0, 0x20, 0x9f, 0x06, 0xb9, 0x28, 0x46, 0xdd, 0x80, 0x86, 0xe6,\n\t0x15, 0x24, 0x00, 0x2b, 0x10, 0x5c, 0x4e, 0x09, 0x93, 0x8c, 0x66,\n\t0x34, 0x83, 0x19, 0xc9, 0x98, 0x05, 0x2c, 0x5c, 0x11, 0xd5, 0xd8,\n\t0xb4, 0x22, 0x9d, 0xf3, 0x9a, 0x6b, 0x5b, 0x20, 0xa1, 0x03, 0x1e,\n\t0xec, 0xce, 0xae, 0x3f, 0xcd, 0xeb, 0x56, 0x0b, 0xf3, 0x30, 0x94,\n\t0x30, 0x0b, 0x6f, 0x69, 0xe8, 0xa7, 0x7c, 0xfe, 0xb9, 0xd1, 0x8e,\n\t0x3e, 0xb5, 0x6d, 0xaf, 0x68, 0xfe, 0x46, 0x34, 0x66, 0x1b, 0x0d,\n\t0x68, 0x34, 0x43, 0x19, 0xc9, 0x90, 0x45, 0x5b, 0x33, 0x73, 0x59,\n\t0x75, 0x5e, 0x91, 0x2d, 0xa1, 0xc0, 0x01, 0x01, 0x79, 0x30, 0x5a,\n\t0xb6, 0xdc, 0x55, 0xab, 0xe7, 0x29, 0x05, 0x27, 0xf6, 0x30, 0x91,\n\t0xc4, 0x68, 0x04, 0x01, 0x63, 0x50, 0x6d, 0x1c, 0xa6, 0x90, 0xcf,\n\t0x9b, 0xa2, 0x95, 0x8e, 0x94, 0x7d, 0x05, 0x33, 0xa4, 0x41, 0xdb,\n\t0xee, 0x42, 0x43, 0x19, 0xbb, 0x2d, 0x0c, 0x10, 0xc4, 0xa9, 0x83,\n\t0x4c, 0xb4, 0x02, 0x14, 0x40, 0xc0, 0xdf, 0x0c, 0x76, 0x30, 0xcc,\n\t0x55, 0x40, 0xa2, 0x07, 0x94, 0x18, 0xcc, 0x71, 0x45, 0x6b, 0x9e,\n\t0x51, 0x94, 0x00, 0x53, 0x1d, 0x09, 0x80, 0x2c, 0x65, 0xca, 0x5a,\n\t0x00, 0x20, 0x56, 0xb1, 0xde, 0x84, 0xea, 0x2c, 0x98, 0x01, 0x8d,\n\t0xee, 0xd2, 0x16, 0x1a, 0xb2, 0x78, 0xeb, 0xb5, 0x76, 0x90, 0xc4,\n\t0x4d, 0x0a, 0x30, 0x7f, 0xec, 0xdd, 0x6c, 0x14, 0x71, 0x40, 0x42,\n\t0x57, 0xcc, 0x57, 0xaf, 0xb2, 0x11, 0x05, 0xce, 0x34, 0x72, 0xbc,\n\t0xa4, 0x92, 0xc1, 0x96, 0xaa, 0x72, 0x6d, 0x25, 0x74, 0x8a, 0xc5,\n\t0x57, 0xc8, 0x22, 0x19, 0xca, 0x68, 0x46, 0x81, 0xa3, 0x21, 0x8d,\n\t0x66, 0xc0, 0x42, 0xc1, 0x6e, 0x09, 0x2e, 0x26, 0xa5, 0x48, 0x2f,\n\t0x1c, 0xc4, 0xd7, 0x15, 0x99, 0xc8, 0x81, 0x0a, 0x6f, 0xfc, 0x96,\n\t0x0b, 0x17, 0xb7, 0x2d, 0xa9, 0xc2, 0x09, 0x18, 0x55, 0x8b, 0xa3,\n\t0x2a, 0x80, 0xf8, 0xac, 0x68, 0x15, 0x28, 0xc8, 0x2a, 0x6b, 0x62,\n\t0x14, 0x43, 0x56, 0x33, 0x90, 0x50, 0x18, 0x0d, 0x68, 0x20, 0x65,\n\t0x1b, 0xd4, 0xf8, 0x07, 0x3e, 0xd0, 0xf1, 0xb6, 0x70, 0x00, 0xc8,\n\t0x1e, 0x87, 0xf6, 0xb7, 0xb2, 0x21, 0x41, 0x4e, 0x08, 0x60, 0x85,\n\t0x6b, 0x32, 0x28, 0x0d, 0x63, 0xa0, 0x02, 0xfe, 0x0a, 0x1a, 0xa0,\n\t0x02, 0xc5, 0x46, 0xa2, 0xcb, 0x9a, 0x71, 0x2b, 0xf8, 0x34, 0x13,\n\t0xce, 0x79, 0x0d, 0x41, 0x08, 0x42, 0x98, 0x97, 0x10, 0x86, 0xe0,\n\t0x32, 0x24, 0x9e, 0x54, 0x33, 0xc7, 0xe5, 0x32, 0x73, 0x5e, 0x9a,\n\t0x13, 0x0f, 0x10, 0x59, 0x47, 0x58, 0xc0, 0x42, 0x15, 0x9c, 0x80,\n\t0xd3, 0x15, 0xf1, 0x0e, 0xb3, 0x37, 0x38, 0xc6, 0x34, 0x96, 0x71,\n\t0x8c, 0x63, 0x38, 0xe3, 0x19, 0x4a, 0xb8, 0x01, 0x95, 0xa7, 0xb8,\n\t0x83, 0xab, 0xba, 0x65, 0xa1, 0x04, 0xc4, 0x01, 0x76, 0x09, 0x43,\n\t0x68, 0x9c, 0x34, 0xe0, 0x86, 0x18, 0x25, 0x43, 0x93, 0xb4, 0x80,\n\t0x0a, 0x9c, 0x9e, 0xed, 0xd1, 0xea, 0x3c, 0x86, 0x34, 0x66, 0x3d,\n\t0xeb, 0x68, 0x3c, 0xa3, 0x11, 0x79, 0xde, 0xf4, 0xb6, 0xc0, 0x0c,\n\t0xe8, 0x1d, 0xe4, 0x80, 0xd7, 0x9a, 0x71, 0x44, 0x05, 0x33, 0x22,\n\t0xd6, 0xe4, 0xb1, 0x41, 0xd5, 0x7c, 0x42, 0x6b, 0x5a, 0x1d, 0xd5,\n\t0xdb, 0x79, 0xc9, 0xda, 0xc0, 0xb3, 0xa5, 0xc6, 0x31, 0x32, 0xad,\n\t0xb0, 0xcf, 0x16, 0x46, 0x14, 0x9e, 0x26, 0xcc, 0x23, 0x86, 0x8d,\n\t0x91, 0x00, 0x44, 0xc1, 0xcc, 0x68, 0x6e, 0x92, 0x17, 0x94, 0x2d,\n\t0xc9, 0x20, 0xd5, 0xd9, 0x06, 0x4a, 0x80, 0xf6, 0x6c, 0x67, 0x7d,\n\t0x0c, 0x7a, 0xe9, 0xa0, 0xa7, 0x52, 0xda, 0xf6, 0x4e, 0x1e, 0x60,\n\t0xcd, 0xe0, 0xa5, 0xa1, 0x49, 0x57, 0xf0, 0x11, 0x5a, 0xcb, 0xad,\n\t0xd0, 0x79, 0xd1, 0x40, 0x08, 0xcb, 0xe0, 0x2e, 0xb4, 0xa7, 0x31,\n\t0x04, 0x2a, 0xcf, 0xa0, 0x07, 0xf7, 0x92, 0xf7, 0x4e, 0x38, 0x60,\n\t0xb9, 0xd3, 0x99, 0x01, 0xdf, 0x4f, 0x20, 0x37, 0xbc, 0x5d, 0x04,\n\t0x0a, 0x1d, 0xe0, 0x8f, 0x06, 0x43, 0x70, 0x86, 0xc0, 0xd7, 0x8d,\n\t0xe9, 0x10, 0x5e, 0x22, 0xce, 0x6e, 0x85, 0xb1, 0x6c, 0xfe, 0x20,\n\t0x95, 0x95, 0x0f, 0x34, 0x9c, 0x3e, 0x0f, 0xdf, 0xd1, 0x18, 0x90,\n\t0x41, 0x8b, 0x56, 0x7f, 0x6e, 0x58, 0x51, 0xf6, 0xf7, 0x10, 0x24,\n\t0x3d, 0xdb, 0x67, 0x2c, 0x83, 0xcf, 0xf9, 0x03, 0xc2, 0x68, 0x67,\n\t0x91, 0x8c, 0xdc, 0xbe, 0x82, 0xb2, 0x22, 0x2f, 0x0c, 0xc9, 0xb3,\n\t0xd2, 0x81, 0x93, 0xab, 0xa9, 0x49, 0x63, 0xa8, 0x86, 0x37, 0xb2,\n\t0x11, 0xd9, 0x58, 0xfc, 0x5c, 0xce, 0x71, 0x5a, 0x45, 0x7a, 0xfd,\n\t0x7d, 0x83, 0x3d, 0x0f, 0xe1, 0xce, 0x9b, 0xe6, 0x16, 0x9c, 0xdb,\n\t0x36, 0x8b, 0x15, 0x43, 0x83, 0x19, 0xca, 0x90, 0x6c, 0x5b, 0x83,\n\t0xee, 0x96, 0xa1, 0x67, 0x05, 0x03, 0x37, 0x9c, 0x8f, 0x8e, 0x54,\n\t0xae, 0x74, 0x6f, 0xb8, 0x3d, 0x1c, 0xe3, 0xe8, 0x06, 0x36, 0x82,\n\t0xf1, 0xf4, 0xca, 0x06, 0xe9, 0x13, 0x3c, 0xe0, 0x25, 0x0d, 0x6c,\n\t0xc0, 0x77, 0x15, 0x02, 0xcb, 0xda, 0x08, 0x4c, 0x86, 0xba, 0x1f,\n\t0x9b, 0x8c, 0xf0, 0x0a, 0x9d, 0xdb, 0x1d, 0xa1, 0x1c, 0x1b, 0xe2,\n\t0xb0, 0xf6, 0x2b, 0x24, 0xdd, 0xed, 0x6f, 0x4f, 0x07, 0x3a, 0xd0,\n\t0x71, 0x8e, 0xb8, 0xcf, 0x7d, 0xec, 0x64, 0x6f, 0x0e, 0x28, 0x12,\n\t0x46, 0x63, 0x7a, 0x69, 0x8b, 0x07, 0x15, 0xc6, 0xa2, 0x2c, 0x64,\n\t0xab, 0xee, 0x68, 0x24, 0x23, 0xf3, 0xae, 0x50, 0xb8, 0x5d, 0x38,\n\t0x20, 0x05, 0x32, 0x8c, 0xc1, 0x44, 0x8f, 0x87, 0xbc, 0x37, 0x24,\n\t0x3f, 0xf9, 0xda, 0x9b, 0x43, 0x1c, 0xda, 0x18, 0x86, 0x2d, 0x80,\n\t0x8e, 0x7a, 0xde, 0x5e, 0x02, 0x08, 0x20, 0x54, 0x18, 0x0e, 0x76,\n\t0x00, 0x89, 0x89, 0xbf, 0xe5, 0xc4, 0xcc, 0x20, 0x3d, 0x6d, 0xa5,\n\t0xa1, 0x8c, 0xd8, 0x08, 0x1b, 0x37, 0x18, 0x28, 0x02, 0x15, 0xb0,\n\t0x40, 0x86, 0xb6, 0x43, 0x5e, 0x1d, 0xb5, 0xcf, 0xbe, 0xed, 0xc5,\n\t0xfe, 0x81, 0x0d, 0x61, 0xec, 0x1e, 0xea, 0xe6, 0xc9, 0xde, 0x25,\n\t0x20, 0x01, 0x09, 0x4a, 0x98, 0xf3, 0x3c, 0x51, 0x7d, 0x05, 0x2c,\n\t0x66, 0xa1, 0x0c, 0x02, 0x47, 0xa3, 0x19, 0xb3, 0x40, 0xfd, 0x12,\n\t0xa2, 0x13, 0x80, 0x05, 0x70, 0x00, 0x09, 0xca, 0x90, 0xbd, 0x37,\n\t0xca, 0xa1, 0xfd, 0xfe, 0x4f, 0xbe, 0xf2, 0x72, 0x47, 0x77, 0x40,\n\t0x87, 0x38, 0xe0, 0x03, 0x2f, 0x26, 0x36, 0x0b, 0xb2, 0x20, 0x1b,\n\t0xa5, 0x46, 0x7f, 0xc6, 0x10, 0x0e, 0xb2, 0xc7, 0x7f, 0xfe, 0x17,\n\t0x81, 0x94, 0x37, 0x0e, 0xda, 0x80, 0x0d, 0xb6, 0x80, 0x79, 0x04,\n\t0x18, 0x72, 0xb2, 0x31, 0x27, 0x1b, 0xc2, 0x04, 0xe0, 0x20, 0x7b,\n\t0xe0, 0x20, 0x81, 0x22, 0x38, 0x79, 0xb7, 0xa7, 0x0d, 0xde, 0xc7,\n\t0x7b, 0x04, 0x28, 0x1b, 0x41, 0x46, 0x20, 0x2b, 0xa0, 0x7f, 0xe0,\n\t0x70, 0x0e, 0x23, 0x18, 0x83, 0xe7, 0x70, 0x7b, 0x73, 0xf7, 0x7d,\n\t0x76, 0x97, 0x82, 0x6e, 0xa1, 0x61, 0x31, 0x72, 0x01, 0xfa, 0x17,\n\t0x0e, 0xb4, 0x17, 0x83, 0x40, 0x08, 0x80, 0x97, 0x07, 0x7e, 0x29,\n\t0xe8, 0x09, 0x1a, 0x95, 0x33, 0xdf, 0xa0, 0x7f, 0x10, 0x08, 0x84,\n\t0x4c, 0xf8, 0x7f, 0xe4, 0x50, 0x81, 0x17, 0x48, 0x84, 0x42, 0xf3,\n\t0x08, 0x60, 0x15, 0x1d, 0x05, 0x90, 0x7f, 0x20, 0xd8, 0x84, 0x5a,\n\t0x98, 0x7d, 0xb7, 0x97, 0x0d, 0x27, 0x28, 0x85, 0xde, 0xe2, 0x08,\n\t0x45, 0x12, 0x00, 0xc6, 0xe0, 0x82, 0x30, 0xb8, 0x85, 0x68, 0x48,\n\t0x79, 0xe6, 0x10, 0x80, 0x75, 0xd7, 0x7b, 0x2d, 0xb2, 0x80, 0x2c,\n\t0xa8, 0x7f, 0xb3, 0x97, 0x86, 0x74, 0xf8, 0x7f, 0x96, 0x47, 0x77,\n\t0x60, 0xe8, 0x22, 0xa5, 0xb0, 0x61, 0xa0, 0x21, 0x01, 0x49, 0xf8,\n\t0x80, 0x75, 0x18, 0x88, 0x4e, 0x98, 0x7b, 0x51, 0x78, 0x83, 0x2d,\n\t0xe2, 0x09, 0xfe, 0xd0, 0x11, 0x23, 0x57, 0xd8, 0x83, 0x3f, 0x28,\n\t0x88, 0x81, 0xd8, 0x85, 0x5f, 0x68, 0x88, 0xe7, 0xf1, 0x7c, 0x56,\n\t0x52, 0x86, 0x4a, 0xe8, 0x88, 0x98, 0xf8, 0x7f, 0x6b, 0x78, 0x79,\n\t0x28, 0x68, 0x1e, 0x2b, 0x58, 0x24, 0x3c, 0xe8, 0x82, 0x99, 0x38,\n\t0x8a, 0x76, 0xc8, 0x86, 0x79, 0xf8, 0x16, 0x46, 0x48, 0x27, 0x05,\n\t0x80, 0x0c, 0x72, 0x88, 0x7d, 0xa4, 0xf8, 0x8a, 0x25, 0xa8, 0x7b,\n\t0x9d, 0x38, 0x18, 0x94, 0x58, 0x26, 0x2b, 0xa0, 0x0a, 0xc9, 0x70,\n\t0x0d, 0x7f, 0x18, 0x82, 0xaf, 0xd8, 0x8b, 0x24, 0xc8, 0x7d, 0x91,\n\t0xa8, 0x60, 0x63, 0x22, 0x28, 0x15, 0xe0, 0x07, 0xfb, 0xd1, 0x09,\n\t0xb8, 0x98, 0x0d, 0x4b, 0xe8, 0x8b, 0xbd, 0x28, 0x84, 0x02, 0x18,\n\t0x55, 0xb1, 0x40, 0x07, 0x45, 0x80, 0x78, 0x8b, 0x11, 0x00, 0x2f,\n\t0x30, 0x30, 0xfb, 0xa1, 0x0a, 0xdb, 0xc0, 0x0d, 0xe6, 0xc0, 0x8c,\n\t0xde, 0x58, 0x79, 0x15, 0x48, 0x0c, 0xec, 0x30, 0x1f, 0x46, 0x40,\n\t0x8d, 0x8a, 0x51, 0x8c, 0xc7, 0x71, 0x1c, 0x85, 0x90, 0x0b, 0xbc,\n\t0xe0, 0x0b, 0xdb, 0x40, 0x0e, 0xdd, 0xe8, 0x8d, 0xbe, 0x58, 0x0e,\n\t0x73, 0x20, 0x1f, 0x6c, 0xd0, 0x5f, 0x31, 0x62, 0x8d, 0x03, 0x63,\n\t0x1c, 0x81, 0x60, 0x08, 0xb7, 0x40, 0x23, 0xba, 0xc0, 0x0b, 0xbf,\n\t0xc0, 0x0d, 0xe4, 0x70, 0x86, 0xf2, 0x88, 0x89, 0xd6, 0x20, 0x07,\n\t0xda, 0xb1, 0x3c, 0x20, 0x66, 0x25, 0xe8, 0x98, 0x8e, 0x7c, 0x30,\n\t0x08, 0x41, 0xb1, 0x08, 0x00, 0xe9, 0x0b, 0xc0, 0xc0, 0x0d, 0xe3,\n\t0x60, 0x90, 0x07, 0x89, 0x86, 0xe9, 0x50, 0x8f, 0x63, 0x24, 0x05,\n\t0x80, 0xc5, 0x82, 0xfb, 0x68, 0x1c, 0x85, 0xa0, 0x17, 0x14, 0x99,\n\t0x0b, 0xba, 0xe0, 0x8e, 0xe2, 0x10, 0x8f, 0x1b, 0xd9, 0x84, 0xd6,\n\t0x90, 0x3c, 0xf8, 0xb8, 0xfe, 0x21, 0x15, 0x93, 0x1f, 0xe9, 0xd8,\n\t0x8f, 0x90, 0x41, 0x23, 0xec, 0xf8, 0x0b, 0xef, 0xa8, 0x91, 0x2d,\n\t0xe9, 0x7f, 0xeb, 0xe0, 0x91, 0xd8, 0xf4, 0x05, 0x55, 0xb8, 0x21,\n\t0x23, 0x40, 0x93, 0xe9, 0x28, 0x08, 0x34, 0x02, 0x31, 0x00, 0xd9,\n\t0x0b, 0x03, 0x59, 0x90, 0x3d, 0xa9, 0x7d, 0xe9, 0xf0, 0x92, 0xb3,\n\t0x14, 0x93, 0x00, 0xb3, 0x02, 0x23, 0x19, 0x91, 0x49, 0x29, 0x32,\n\t0x14, 0x89, 0x0b, 0x29, 0x79, 0x91, 0x2c, 0xd9, 0x92, 0x09, 0x39,\n\t0x4b, 0xd3, 0x65, 0x8e, 0x76, 0xb1, 0x00, 0x16, 0x03, 0x91, 0x11,\n\t0x29, 0x32, 0x61, 0x81, 0x93, 0xed, 0xb8, 0x0d, 0x2b, 0x79, 0x90,\n\t0x3f, 0x39, 0x58, 0x68, 0xc0, 0x87, 0xd1, 0x51, 0x01, 0x89, 0x80,\n\t0x96, 0x69, 0xa9, 0x96, 0x26, 0x79, 0x0b, 0x39, 0xb9, 0x93, 0xbd,\n\t0x18, 0x0e, 0x30, 0x94, 0x54, 0x28, 0x20, 0x28, 0x00, 0x30, 0x02,\n\t0x7e, 0x80, 0x97, 0x25, 0xa9, 0x97, 0x8f, 0xb1, 0x94, 0x17, 0x99,\n\t0x91, 0x98, 0x58, 0x0e, 0x16, 0x50, 0x6c, 0x62, 0x19, 0x05, 0x84,\n\t0x09, 0x00, 0x2b, 0x60, 0x94, 0xe9, 0x38, 0x08, 0x59, 0xa9, 0x98,\n\t0x26, 0xb9, 0x08, 0x5c, 0xe9, 0x8e, 0xdc, 0x58, 0x87, 0xea, 0x70,\n\t0x01, 0x00, 0x60, 0x43, 0x66, 0xb6, 0x90, 0x42, 0x49, 0x98, 0x88,\n\t0x85, 0x99, 0xc7, 0x81, 0x94, 0x9c, 0xa9, 0x94, 0x7c, 0xd9, 0x96,\n\t0x6f, 0xd9, 0x84, 0xe9, 0x50, 0x6a, 0x8a, 0x24, 0x97, 0x86, 0x95,\n\t0x29, 0x97, 0x89, 0x97, 0x82, 0xe0, 0x8f, 0xaf, 0xa9, 0x95, 0xb1,\n\t0xd9, 0x94, 0x3c, 0xd9, 0x7f, 0xe9, 0xf0, 0x89, 0x43, 0x26, 0x53,\n\t0x1c, 0x50, 0x99, 0xfe, 0xb5, 0x02, 0x78, 0xc9, 0x07, 0x81, 0x90,\n\t0x98, 0xbf, 0xa9, 0x96, 0x8c, 0x89, 0x91, 0xc3, 0xa9, 0x0e, 0x9f,\n\t0x08, 0x00, 0xd5, 0x74, 0x9a, 0xca, 0xfe, 0x43, 0x95, 0x56, 0x82,\n\t0x58, 0x87, 0x89, 0x97, 0x9a, 0x19, 0x9d, 0x8a, 0x79, 0x92, 0x29,\n\t0xb9, 0x8d, 0xf1, 0x08, 0x0e, 0xa4, 0x79, 0x58, 0xa8, 0x26, 0x96,\n\t0x8d, 0xa4, 0x9c, 0x00, 0x80, 0x02, 0x4f, 0xf0, 0x07, 0xcd, 0xf9,\n\t0x9c, 0x9b, 0x29, 0x9e, 0xc0, 0x99, 0x93, 0xc9, 0x20, 0x01, 0x5b,\n\t0xb1, 0x5f, 0xec, 0xe3, 0x3e, 0xca, 0x19, 0x00, 0x55, 0x30, 0x06,\n\t0x59, 0x00, 0x08, 0x57, 0x69, 0x1c, 0xbd, 0x69, 0x9f, 0x9c, 0x49,\n\t0x12, 0x75, 0x30, 0x19, 0x08, 0xf1, 0x6d, 0x63, 0xd5, 0x9e, 0x95,\n\t0xb9, 0x00, 0xd3, 0x87, 0x05, 0x5e, 0xf2, 0x9d, 0x68, 0x19, 0x08,\n\t0x83, 0xe0, 0x9b, 0x08, 0xba, 0x2f, 0x29, 0xf1, 0x57, 0x17, 0xe1,\n\t0xa0, 0xec, 0xe9, 0x9e, 0x1e, 0x80, 0x28, 0x4e, 0xe2, 0x05, 0x80,\n\t0xc0, 0x9a, 0xc7, 0x11, 0x08, 0x82, 0x70, 0x08, 0xf5, 0xb9, 0xa1,\n\t0x33, 0x63, 0x08, 0x78, 0x40, 0x97, 0xfe, 0x05, 0xa2, 0xfd, 0xe9,\n\t0x9e, 0x45, 0x80, 0x6c, 0x3b, 0x82, 0x05, 0x3d, 0x22, 0x9f, 0xcd,\n\t0xe9, 0x9c, 0x19, 0xda, 0xa2, 0xd1, 0xb9, 0x08, 0x86, 0x90, 0x08,\n\t0x23, 0x10, 0x92, 0x87, 0x35, 0x05, 0xda, 0x19, 0x07, 0x10, 0x2a,\n\t0x28, 0x05, 0x50, 0x05, 0x38, 0xda, 0x24, 0x14, 0xea, 0x04, 0x7f,\n\t0x50, 0xa0, 0x29, 0x3a, 0x08, 0x87, 0x60, 0x08, 0x40, 0xba, 0x2f,\n\t0x42, 0x7a, 0x08, 0x83, 0x90, 0x08, 0x2a, 0x70, 0x84, 0x08, 0x41,\n\t0x00, 0xeb, 0xc9, 0x3e, 0x1e, 0xa0, 0x9c, 0x18, 0x90, 0x06, 0x5c,\n\t0x82, 0x6f, 0x89, 0xb2, 0x05, 0x41, 0x80, 0x07, 0x7d, 0x40, 0xa5,\n\t0xfc, 0x28, 0x08, 0x83, 0x50, 0x08, 0x57, 0x8a, 0xa5, 0x14, 0x79,\n\t0xa7, 0x14, 0x69, 0x08, 0x86, 0x50, 0x08, 0x85, 0xa0, 0x1a, 0x7c,\n\t0x80, 0x07, 0x5f, 0xda, 0x11, 0xa6, 0x39, 0x56, 0xfe, 0xdc, 0x19,\n\t0x23, 0x1e, 0x80, 0x3c, 0x24, 0xb2, 0x27, 0x6a, 0xfa, 0x00, 0x05,\n\t0x30, 0x02, 0x2f, 0x90, 0x08, 0x81, 0x00, 0xa7, 0x35, 0x19, 0xa9,\n\t0x2a, 0xaa, 0x1a, 0x94, 0x7a, 0x1c, 0x7f, 0xa0, 0x08, 0x2b, 0x30,\n\t0x94, 0x19, 0x91, 0x00, 0xfc, 0x24, 0x53, 0x9b, 0x53, 0x99, 0x34,\n\t0x9a, 0x06, 0x65, 0xa0, 0xa8, 0x58, 0x40, 0x05, 0x35, 0x15, 0x00,\n\t0x11, 0xe0, 0xa8, 0x77, 0x79, 0xa9, 0x3d, 0x8a, 0x97, 0xfb, 0x01,\n\t0x08, 0x4f, 0xb0, 0x05, 0x64, 0x30, 0x98, 0x2e, 0x71, 0x9c, 0xb3,\n\t0xc4, 0x06, 0x0d, 0x49, 0x27, 0xd9, 0x79, 0x3a, 0xa4, 0xca, 0x26,\n\t0x63, 0x90, 0x04, 0xb6, 0x51, 0x7f, 0x15, 0xa0, 0x02, 0x2d, 0x80,\n\t0x07, 0x89, 0x70, 0x98, 0x94, 0xba, 0xac, 0x81, 0xd0, 0x07, 0x7e,\n\t0xf0, 0x07, 0x80, 0xa0, 0x08, 0x4f, 0xe0, 0x05, 0x5b, 0xe0, 0x29,\n\t0x57, 0x50, 0xab, 0x38, 0x11, 0x53, 0xb8, 0x59, 0x99, 0x1c, 0xc0,\n\t0x06, 0xb3, 0x44, 0xaa, 0xd8, 0x7a, 0x11, 0x04, 0xb0, 0x00, 0x95,\n\t0x32, 0x02, 0x23, 0xa0, 0x02, 0x2a, 0xb0, 0x02, 0x2a, 0x60, 0xae,\n\t0x44, 0x90, 0x05, 0xd5, 0x1a, 0x06, 0x89, 0x86, 0x6f, 0xe1, 0xea,\n\t0x11, 0x1c, 0x90, 0xa4, 0xa9, 0x49, 0x98, 0xb7, 0x89, 0x51, 0x69,\n\t0xb0, 0xab, 0x38, 0x91, 0x04, 0x24, 0xaa, 0xa6, 0xd7, 0x6a, 0xab,\n\t0xf4, 0x6a, 0xaf, 0x64, 0xa9, 0x18, 0xfa, 0x95, 0xa4, 0x34, 0xb5,\n\t0x13, 0x01, 0x90, 0x04, 0x4f, 0xaa, 0xa6, 0xf3, 0xda, 0x11, 0x82,\n\t0x35, 0x99, 0x95, 0x99, 0x3e, 0xd2, 0x45, 0x99, 0x0a, 0xcb, 0xb0,\n\t0x00, 0x4b, 0x7d, 0x65, 0x90, 0x06, 0xfe, 0xf9, 0x37, 0x63, 0x1a,\n\t0x3c, 0xa1, 0x2a, 0x28, 0xda, 0x3a, 0x56, 0x65, 0x7a, 0xb1, 0x7b,\n\t0x82, 0x05, 0x63, 0x50, 0x06, 0x66, 0x90, 0x06, 0xde, 0xda, 0xfe,\n\t0x3e, 0x39, 0x81, 0x54, 0x5a, 0x94, 0x4d, 0x05, 0xab, 0x18, 0xf9,\n\t0x3a, 0x3e, 0xb5, 0x84, 0x15, 0x00, 0x6a, 0x06, 0x2a, 0xcb, 0xb2,\n\t0xa7, 0xe3, 0xb2, 0x38, 0x11, 0x00, 0x45, 0xb0, 0x78, 0x72, 0xe3,\n\t0x06, 0x97, 0x33, 0x05, 0x09, 0x50, 0x99, 0x62, 0x6a, 0xaf, 0x9c,\n\t0x9a, 0x5f, 0xfc, 0x99, 0x43, 0x1d, 0x9b, 0xad, 0x52, 0x80, 0x06,\n\t0x6c, 0x80, 0x06, 0x5f, 0x50, 0x04, 0x4b, 0x1b, 0x23, 0xfb, 0x54,\n\t0xb1, 0x59, 0x71, 0xb0, 0x63, 0xf5, 0xb4, 0x3f, 0x9b, 0x00, 0x18,\n\t0xc0, 0xa8, 0xee, 0x09, 0x00, 0x1f, 0x40, 0x64, 0x6d, 0x50, 0xa8,\n\t0x1c, 0xc1, 0xb5, 0x62, 0xe9, 0xb5, 0x63, 0x8b, 0x15, 0x35, 0x1b,\n\t0x3c, 0x84, 0x95, 0x9b, 0x3a, 0xa1, 0xb6, 0x35, 0xda, 0xb6, 0x75,\n\t0x41, 0xa3, 0x39, 0x54, 0x46, 0x5b, 0xdb, 0xb4, 0x3d, 0xcb, 0xb6,\n\t0x76, 0x9b, 0x13, 0x6f, 0xdb, 0xb7, 0x5a, 0x41, 0xb7, 0x4e, 0xfb,\n\t0xb7, 0x5a, 0x21, 0x99, 0x0c, 0xc4, 0x06, 0xc9, 0xb9, 0xb7, 0x49,\n\t0xea, 0xb7, 0x86, 0xeb, 0xb1, 0x66, 0x16, 0x07, 0x20, 0x39, 0xb8,\n\t0x7c, 0x8b, 0x4d, 0x8e, 0xfb, 0xb8, 0x10, 0x6b, 0x74, 0x0b, 0x39,\n\t0x06, 0xfc, 0x3a, 0xb7, 0x95, 0x3b, 0x46, 0x97, 0x8b, 0xb9, 0x1c,\n\t0xc1, 0x01, 0x5f, 0xa0, 0x3c, 0x98, 0x33, 0x05, 0x9d, 0xeb, 0xb9,\n\t0x8d, 0x2b, 0xba, 0x59, 0x51, 0x00, 0x1d, 0x50, 0x04, 0x51, 0x60,\n\t0x04, 0x1c, 0x60, 0xa4, 0x3a, 0x81, 0xb7, 0x3d, 0x2b, 0xb0, 0xac,\n\t0x9b, 0xbb, 0x81, 0x7b, 0x3a, 0x8b, 0x9b, 0xbb, 0xb9, 0x9b, 0xb5,\n\t0xec, 0x73, 0xaf, 0xbe, 0xab, 0xbb, 0xf2, 0xd1, 0xb3, 0x68, 0xd0,\n\t0xbb, 0xc3, 0xcb, 0xba, 0x40, 0x6b, 0x39, 0xf3, 0x41, 0xb4, 0x63,\n\t0x80, 0xb6, 0xc9, 0xfb, 0xb7, 0x1c, 0x10, 0x05, 0x52, 0x3b, 0x06,\n\t0x51, 0x05, 0x20, 0xa3, 0x1b, 0x12, 0x10, 0x00, 0x3b\n};\n\nstatic const int _img_laughing_length = 4662;\nstatic const char _img_music[5067] = {\n\t0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x7f, 0x00, 0x7f, 0x00, 0xf7,\n\t0xe6, 0x00, 0x00, 0x00, 0x00, 0x51, 0x91, 0x7d, 0x90, 0x99, 0x76,\n\t0x59, 0x60, 0x71, 0xe7, 0x79, 0x58, 0xf1, 0xc6, 0x4f, 0x5a, 0xa7,\n\t0xaa, 0x51, 0x63, 0x64, 0xe6, 0x59, 0x5a, 0xe6, 0x59, 0x5a, 0xe5,\n\t0x7f, 0x59, 0xf3, 0xc7, 0x4f, 0xf0, 0xc4, 0x4e, 0x46, 0x7a, 0xc5,\n\t0x46, 0xb6, 0xb1, 0x7f, 0xb0, 0x99, 0x39, 0x40, 0x49, 0xc7, 0x4d,\n\t0x4e, 0x3d, 0xad, 0x4b, 0x3d, 0xad, 0x4b, 0xc9, 0xa4, 0x40, 0x1b,\n\t0x89, 0xae, 0x39, 0x40, 0x49, 0x38, 0x40, 0x49, 0x39, 0x40, 0x49,\n\t0x36, 0x6f, 0x70, 0x98, 0x7b, 0x7e, 0xe6, 0x59, 0x5a, 0xf3, 0xc7,\n\t0x4f, 0xf3, 0xc7, 0x4f, 0xce, 0xa9, 0x43, 0xe0, 0x57, 0x57, 0xe6,\n\t0x59, 0x5a, 0xe7, 0x5f, 0x60, 0xd0, 0x56, 0x56, 0x3c, 0xa9, 0x56,\n\t0x3e, 0xb1, 0x6b, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf1, 0xc5,\n\t0x4e, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xdf, 0xb7, 0x49, 0xf3,\n\t0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0x8e, 0x78, 0xcf, 0x8e, 0x78, 0xcf,\n\t0x10, 0x7b, 0xb2, 0x7d, 0x7b, 0xcd, 0x3c, 0xae, 0xa8, 0x48, 0xba,\n\t0xaf, 0xe1, 0xea, 0xea, 0x39, 0x40, 0x49, 0x40, 0x42, 0x4a, 0x39,\n\t0x40, 0x49, 0xd3, 0x52, 0x53, 0xb0, 0x4a, 0x4e, 0x3d, 0xad, 0x4b,\n\t0x3d, 0xad, 0x4b, 0x3d, 0xad, 0x4b, 0xc3, 0xa0, 0x3f, 0xee, 0xc3,\n\t0x4d, 0x0e, 0x73, 0xa6, 0xbd, 0x78, 0xa4, 0x40, 0xb3, 0xac, 0x0d,\n\t0x79, 0xb1, 0x40, 0xb8, 0xb1, 0x3d, 0xa8, 0xa2, 0x37, 0x83, 0x96,\n\t0x97, 0x96, 0xc0, 0x39, 0x40, 0x49, 0x39, 0x40, 0x49, 0x39, 0x40,\n\t0x49, 0x39, 0x40, 0x49, 0x39, 0x3e, 0x47, 0x39, 0x3f, 0x48, 0x39,\n\t0x40, 0x49, 0x39, 0x40, 0x49, 0x39, 0x40, 0x49, 0x37, 0x40, 0x49,\n\t0x3a, 0x4c, 0x53, 0x3a, 0x55, 0x5b, 0x3b, 0x5e, 0x63, 0x3b, 0x6c,\n\t0x6f, 0x33, 0x95, 0x8f, 0x65, 0x57, 0x5d, 0xe6, 0x59, 0x5a, 0xe6,\n\t0x59, 0x5a, 0xce, 0x50, 0x51, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f,\n\t0xf3, 0xc7, 0x4f, 0xe4, 0xba, 0x49, 0xe2, 0x66, 0x68, 0xe6, 0x5c,\n\t0x5d, 0xba, 0x46, 0x47, 0xbd, 0x49, 0x49, 0xb7, 0x48, 0x49, 0xaf,\n\t0x4e, 0x51, 0x89, 0x59, 0x6a, 0x94, 0x6b, 0x6a, 0xb0, 0x6b, 0x73,\n\t0xa1, 0x54, 0x5a, 0xe6, 0x59, 0x5a, 0xc5, 0x4c, 0x4d, 0xdf, 0x56,\n\t0x58, 0xd5, 0x52, 0x53, 0xe6, 0x59, 0x5a, 0xe9, 0x5a, 0x5b, 0xe2,\n\t0x57, 0x58, 0xd8, 0x6b, 0x6d, 0xe8, 0x67, 0x68, 0xec, 0x7a, 0x7b,\n\t0xea, 0x75, 0x76, 0xe6, 0x6f, 0x70, 0xdf, 0x5b, 0x5e, 0xce, 0x50,\n\t0x51, 0x3d, 0xad, 0x4b, 0x3d, 0xad, 0x4b, 0x3d, 0xad, 0x4b, 0x3d,\n\t0xad, 0x4b, 0x3e, 0xb0, 0x4c, 0x3c, 0xaa, 0x54, 0x69, 0x8b, 0x72,\n\t0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xc2, 0x9f,\n\t0x3f, 0xc2, 0x9f, 0x3f, 0xc4, 0xa0, 0x3e, 0xf4, 0xc7, 0x4e, 0xb2,\n\t0x9d, 0x4b, 0x83, 0x95, 0x64, 0xa4, 0xa1, 0x5b, 0xf3, 0xc7, 0x4f,\n\t0xf3, 0xc7, 0x4f, 0xc6, 0xa2, 0x40, 0xd3, 0xad, 0x45, 0xee, 0xc3,\n\t0x4d, 0xec, 0xc2, 0x4d, 0xf3, 0xc7, 0x4f, 0xc4, 0xae, 0x67, 0xab,\n\t0xc1, 0x78, 0xf2, 0xc6, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f,\n\t0xf4, 0xc8, 0x4f, 0xf9, 0xca, 0x4e, 0xf6, 0xca, 0x50, 0xeb, 0xc7,\n\t0x59, 0xd3, 0xc4, 0x61, 0x00, 0x81, 0xc5, 0x8e, 0x78, 0xcf, 0x8e,\n\t0x78, 0xcf, 0x06, 0x6d, 0xa4, 0x00, 0x81, 0xc6, 0x00, 0x81, 0xc6,\n\t0x00, 0x67, 0x9e, 0x02, 0x68, 0x9f, 0x06, 0x6a, 0x9e, 0x0e, 0x6e,\n\t0x9d, 0x34, 0x77, 0x90, 0x01, 0x6a, 0xa3, 0x00, 0x6c, 0xa6, 0x00,\n\t0x79, 0xba, 0x0a, 0x77, 0xb5, 0x2c, 0x77, 0xad, 0x8e, 0x78, 0xcf,\n\t0x55, 0x6b, 0x8c, 0x6e, 0x6c, 0x8c, 0x77, 0x78, 0xc2, 0x00, 0x7f,\n\t0xc4, 0x08, 0x7f, 0xc1, 0x8e, 0x78, 0xcf, 0x9c, 0x7a, 0x91, 0xd0,\n\t0x79, 0x81, 0x8e, 0x78, 0xcf, 0x8e, 0x78, 0xcf, 0x8f, 0x79, 0xd0,\n\t0x90, 0x7a, 0xd2, 0x8e, 0x78, 0xcf, 0x40, 0xba, 0xb3, 0xd8, 0xe0,\n\t0xdf, 0x40, 0xba, 0xb3, 0x3c, 0x86, 0x85, 0x33, 0x95, 0x8f, 0x36,\n\t0x95, 0x8d, 0x33, 0x97, 0x91, 0x3a, 0x9b, 0x97, 0x2d, 0x93, 0x96,\n\t0x3a, 0xa2, 0x9c, 0x40, 0xba, 0xb3, 0x3e, 0xaa, 0xa4, 0x3e, 0xb3,\n\t0xac, 0x40, 0xba, 0xb3, 0x3e, 0xba, 0xb3, 0x3d, 0xb7, 0xb2, 0x3b,\n\t0xb5, 0xb5, 0x36, 0xae, 0xb1, 0x6e, 0x94, 0x90, 0x61, 0x97, 0xb4,\n\t0x41, 0xb4, 0xae, 0x48, 0xb8, 0xae, 0x40, 0xba, 0xb3, 0x4a, 0xb9,\n\t0xb3, 0x52, 0xb9, 0xb3, 0x54, 0xab, 0xa5, 0x63, 0xb8, 0xb4, 0x74,\n\t0xb0, 0xad, 0x5b, 0x9e, 0xa4, 0x00, 0x81, 0xc6, 0x00, 0x83, 0xc9,\n\t0x0a, 0x81, 0xc3, 0x19, 0x99, 0xc0, 0x78, 0xbc, 0xe1, 0x73, 0xb0,\n\t0xd1, 0x8b, 0xb6, 0xb5, 0xbb, 0xbd, 0xbc, 0xa6, 0xa6, 0xa0, 0xd3,\n\t0xb2, 0xb6, 0xc6, 0xb2, 0xb6, 0xe4, 0xb1, 0xb7, 0xf2, 0xb0, 0xb7,\n\t0xc3, 0xb9, 0x90, 0x9c, 0xc5, 0x8f, 0x93, 0xd8, 0xd4, 0x88, 0xca,\n\t0xc6, 0xcc, 0xcc, 0xcc, 0xcb, 0xcc, 0xcc, 0xd9, 0xd9, 0xd9, 0xff,\n\t0xff, 0xff, 0xf7, 0xf7, 0xf7, 0xed, 0xee, 0xee, 0xf9, 0xfc, 0xfc,\n\t0xf4, 0xf7, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x21, 0xf9, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x21, 0xff, 0x0b,\n\t0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x6b,\n\t0x0d, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x3d, 0x30, 0x2e, 0x34, 0x35,\n\t0x34, 0x35, 0x35, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00,\n\t0x7f, 0x00, 0x00, 0x08, 0xfe, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0,\n\t0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x0c, 0x30, 0xe0, 0xc0, 0x01,\n\t0x08, 0x10, 0x23, 0x46, 0x74, 0x38, 0x20, 0x80, 0xc2, 0x8b, 0x18,\n\t0x33, 0x6a, 0xdc, 0xc8, 0x51, 0xe3, 0x00, 0x08, 0x16, 0x68, 0xd8,\n\t0x30, 0x82, 0x24, 0x49, 0x12, 0x26, 0x28, 0x99, 0x28, 0x49, 0xc9,\n\t0xc4, 0x24, 0x12, 0x23, 0x36, 0x68, 0x58, 0x80, 0x30, 0xa0, 0xa3,\n\t0xcd, 0x9b, 0x38, 0x73, 0x02, 0x08, 0x00, 0xe1, 0x82, 0x8d, 0x23,\n\t0x4c, 0x9c, 0x08, 0x1d, 0x4a, 0xb4, 0xa8, 0x51, 0xa1, 0x4c, 0x8e,\n\t0xd8, 0xb8, 0x00, 0xc1, 0xa2, 0xce, 0xa7, 0x50, 0x71, 0x1e, 0xb8,\n\t0x60, 0x24, 0xe8, 0xd1, 0xab, 0x58, 0x8d, 0x32, 0x31, 0x72, 0xe1,\n\t0x40, 0xd4, 0xaf, 0x60, 0x11, 0x1e, 0xa0, 0x91, 0x24, 0xab, 0xd9,\n\t0xb3, 0x44, 0x93, 0xd0, 0xf0, 0x1a, 0xb6, 0x2d, 0xd4, 0x01, 0x64,\n\t0xd1, 0xca, 0x95, 0xab, 0xb6, 0xa6, 0x5b, 0xb0, 0x0d, 0x21, 0x76,\n\t0x84, 0x60, 0x64, 0xee, 0x4a, 0x93, 0x47, 0x90, 0x08, 0x16, 0x7c,\n\t0xc4, 0xa4, 0xca, 0xb9, 0x46, 0x20, 0xdc, 0xcd, 0xc9, 0x10, 0xc2,\n\t0x88, 0x1d, 0x76, 0xf0, 0xdc, 0xc1, 0x43, 0x62, 0x23, 0x86, 0xb2,\n\t0x59, 0x99, 0x20, 0x89, 0x39, 0x93, 0xe2, 0x80, 0xcf, 0x0c, 0x3f,\n\t0x37, 0x7c, 0x18, 0xd2, 0x06, 0x12, 0xab, 0x58, 0x93, 0x60, 0x58,\n\t0xbc, 0x97, 0x46, 0x1d, 0x3d, 0x92, 0xf3, 0xdc, 0x99, 0x9d, 0xa7,\n\t0x8e, 0xd3, 0x85, 0x34, 0x50, 0x1b, 0x4d, 0x62, 0xc3, 0xc2, 0x01,\n\t0xbb, 0x37, 0x1b, 0x5a, 0xb0, 0x81, 0xf9, 0x28, 0x13, 0x1a, 0xb7,\n\t0x59, 0x2b, 0xb4, 0x80, 0x47, 0xf6, 0xec, 0xe7, 0xcf, 0xed, 0x24,\n\t0x47, 0x48, 0x63, 0xc9, 0x51, 0x25, 0x46, 0x30, 0x00, 0xff, 0x3a,\n\t0x00, 0x83, 0x11, 0x25, 0x47, 0x97, 0xfe, 0xd0, 0x50, 0x8e, 0x51,\n\t0x87, 0x73, 0xe8, 0xd0, 0xa5, 0x5f, 0xb4, 0xa0, 0x7b, 0xa8, 0x11,\n\t0x0b, 0xd3, 0xc3, 0x06, 0xb0, 0xd0, 0x57, 0xab, 0x05, 0xf2, 0x0a,\n\t0xcd, 0xa3, 0x47, 0xaf, 0x3e, 0x21, 0x84, 0xe2, 0x43, 0x1d, 0xb7,\n\t0x1d, 0x6b, 0x70, 0xb5, 0xe7, 0x44, 0x12, 0x8a, 0xe1, 0x77, 0x90,\n\t0x7e, 0xfb, 0x45, 0x17, 0xdf, 0x40, 0x01, 0xd4, 0x97, 0xd6, 0x7d,\n\t0x0a, 0x0e, 0x64, 0x01, 0x80, 0x42, 0x19, 0xf1, 0x20, 0x7e, 0x0c,\n\t0x36, 0x78, 0x47, 0x7f, 0x07, 0x61, 0xb0, 0x5b, 0x82, 0x15, 0x0e,\n\t0xf4, 0x9f, 0x51, 0xab, 0x95, 0x38, 0x50, 0x87, 0x0d, 0x82, 0x58,\n\t0xd0, 0x00, 0x48, 0x14, 0xc5, 0x04, 0x85, 0x2a, 0x5a, 0xd8, 0x1e,\n\t0x12, 0x03, 0x2a, 0xc8, 0x22, 0x7a, 0x79, 0xd4, 0x90, 0x90, 0x05,\n\t0x46, 0x8d, 0x77, 0x53, 0x68, 0xa2, 0x6d, 0x88, 0x11, 0x0d, 0x46,\n\t0xd1, 0x58, 0xe2, 0x8e, 0xb2, 0xe1, 0x61, 0x47, 0x0d, 0x39, 0x0a,\n\t0x14, 0x61, 0x51, 0x38, 0x72, 0x14, 0xc0, 0x01, 0x32, 0x10, 0x51,\n\t0x4b, 0x2d, 0xc6, 0x74, 0xb9, 0x25, 0x11, 0x32, 0x1c, 0x60, 0xe4,\n\t0x41, 0x30, 0x16, 0xa5, 0x61, 0x8d, 0x0c, 0xe2, 0xa1, 0xc7, 0x93,\n\t0xbe, 0x45, 0x39, 0xd0, 0x01, 0x18, 0x0a, 0x99, 0xd1, 0x01, 0x41,\n\t0xd4, 0x52, 0xcc, 0x32, 0x78, 0xe6, 0xa9, 0xe7, 0x32, 0xc5, 0xd4,\n\t0x12, 0x04, 0x5b, 0x19, 0x21, 0x99, 0x16, 0xa0, 0x15, 0x32, 0x48,\n\t0x43, 0x45, 0x1a, 0x61, 0xf0, 0xc4, 0x13, 0x43, 0x25, 0x41, 0x28,\n\t0x42, 0x3c, 0x11, 0xf1, 0xcb, 0x9e, 0x94, 0x52, 0xfa, 0x0b, 0x11,\n\t0x4d, 0x61, 0x04, 0xe7, 0x50, 0x8b, 0xa6, 0xb8, 0xa4, 0x73, 0x13,\n\t0x64, 0x34, 0x80, 0x08, 0x57, 0xd0, 0x51, 0x85, 0x50, 0x8b, 0xda,\n\t0xa0, 0x29, 0x11, 0x77, 0x56, 0xea, 0xea, 0x9e, 0xfe, 0xc5, 0x10,\n\t0xf1, 0xe8, 0x41, 0x36, 0x38, 0xc1, 0xa8, 0x13, 0x55, 0x98, 0x71,\n\t0x85, 0x08, 0x6e, 0xba, 0xc5, 0x60, 0xa8, 0x17, 0x0d, 0x80, 0x85,\n\t0x1a, 0x6c, 0xb0, 0xd1, 0x46, 0x1a, 0x65, 0x90, 0x51, 0x85, 0x9c,\n\t0x64, 0x06, 0x31, 0xe9, 0xab, 0xd0, 0xee, 0xf9, 0x4b, 0x10, 0xbd,\n\t0x02, 0x40, 0x43, 0x15, 0x62, 0x80, 0x91, 0x86, 0x1c, 0x70, 0x74,\n\t0x6b, 0x46, 0xb5, 0x60, 0xfd, 0x8a, 0xd1, 0x0d, 0xda, 0xae, 0xb1,\n\t0x06, 0x1b, 0xdc, 0x76, 0x3b, 0x87, 0x08, 0x62, 0xd5, 0x12, 0xed,\n\t0xbb, 0x94, 0xd6, 0x32, 0xab, 0x40, 0x16, 0x88, 0x71, 0x6e, 0xb1,\n\t0x71, 0x74, 0xdb, 0xad, 0x8f, 0x1c, 0x82, 0x7a, 0x51, 0x00, 0x38,\n\t0xa0, 0x91, 0x86, 0xb9, 0x6f, 0xe8, 0xdb, 0xad, 0x1c, 0x24, 0x9a,\n\t0x68, 0x0c, 0xbc, 0x0c, 0xeb, 0x69, 0x4c, 0xc2, 0x02, 0x41, 0x20,\n\t0xc6, 0xc0, 0x04, 0x1b, 0x0c, 0x87, 0x19, 0x63, 0x7e, 0x25, 0xae,\n\t0x42, 0x07, 0x98, 0x81, 0x86, 0xb9, 0x6b, 0xa4, 0x6b, 0x30, 0x16,\n\t0xc0, 0x05, 0x10, 0x44, 0xab, 0x0d, 0xa7, 0x5c, 0x4c, 0x10, 0xb7,\n\t0x0d, 0x60, 0x03, 0x18, 0x1f, 0x57, 0x6c, 0xb0, 0x1b, 0xf3, 0xb6,\n\t0xb5, 0xb1, 0x58, 0x46, 0x84, 0xa1, 0x06, 0xc8, 0xf9, 0x5a, 0xec,\n\t0x8a, 0x26, 0x5e, 0x99, 0x4c, 0x4c, 0xca, 0x44, 0xe3, 0x49, 0x0c,\n\t0xcb, 0x00, 0x1c, 0xa0, 0x49, 0x15, 0x5f, 0xc4, 0x7c, 0x6e, 0xcf,\n\t0xfa, 0xca, 0x4a, 0xde, 0xcd, 0x06, 0x41, 0xa0, 0x49, 0x2a, 0x5f,\n\t0x50, 0xbc, 0x06, 0xd4, 0xfa, 0xa6, 0x32, 0x8a, 0x26, 0x10, 0x04,\n\t0x31, 0x74, 0xd1, 0x64, 0x07, 0x61, 0xf5, 0x34, 0xa8, 0x7c, 0x51,\n\t0xae, 0xb9, 0x22, 0x77, 0xfb, 0x33, 0xc4, 0x36, 0xfb, 0x7b, 0x90,\n\t0xd2, 0xd4, 0x8c, 0xb1, 0x76, 0xc8, 0x16, 0xc3, 0x81, 0x4a, 0xfe,\n\t0x27, 0x9e, 0xf4, 0x12, 0x0c, 0xd9, 0x80, 0xf3, 0x39, 0xcd, 0x34,\n\t0xa6, 0x84, 0x91, 0x35, 0xc8, 0x6f, 0x70, 0xed, 0x0a, 0x35, 0x40,\n\t0xb7, 0x75, 0x25, 0x09, 0x34, 0xd8, 0xf1, 0x1c, 0xb0, 0x05, 0x05,\n\t0x70, 0x09, 0xe1, 0x62, 0x38, 0xbd, 0x46, 0xc1, 0x06, 0xbf, 0x02,\n\t0x4a, 0x27, 0x7e, 0x07, 0x1e, 0x78, 0x31, 0xd2, 0x94, 0x22, 0xc6,\n\t0x17, 0x3b, 0x23, 0xde, 0xb9, 0x29, 0xd3, 0x5c, 0x92, 0x71, 0xe5,\n\t0x1f, 0xcd, 0x3b, 0x41, 0x1d, 0x92, 0xa1, 0x47, 0x39, 0x41, 0x2f,\n\t0xac, 0x32, 0x4d, 0x28, 0x61, 0x68, 0xce, 0x86, 0xe2, 0x7d, 0x03,\n\t0x23, 0x7a, 0xe0, 0xc3, 0x54, 0x53, 0x77, 0xd3, 0x20, 0x13, 0x0c,\n\t0x35, 0xeb, 0xab, 0xbc, 0x80, 0xd1, 0x95, 0x2e, 0xd4, 0x80, 0x89,\n\t0x2a, 0xb4, 0xb4, 0xe2, 0x42, 0x41, 0x24, 0x34, 0xd7, 0xe0, 0xed,\n\t0x52, 0x6a, 0x32, 0x8d, 0x34, 0x58, 0x6b, 0x2d, 0x73, 0xb7, 0xa9,\n\t0x7c, 0x22, 0xfc, 0xf0, 0xc4, 0x57, 0x93, 0x36, 0x18, 0x6d, 0x24,\n\t0x7f, 0xee, 0x1b, 0x72, 0xc8, 0x91, 0x8a, 0x34, 0xd3, 0x68, 0xb2,\n\t0xe1, 0x54, 0x99, 0x60, 0x42, 0x4b, 0x2c, 0xb3, 0xcc, 0x22, 0x0b,\n\t0x2c, 0xb3, 0xc0, 0xc4, 0x6d, 0x98, 0xe3, 0xa1, 0x3b, 0x70, 0x0f,\n\t0x00, 0x10, 0x20, 0xc5, 0x34, 0x58, 0x61, 0x37, 0xf1, 0x29, 0xaf,\n\t0x5b, 0xa8, 0xd8, 0xc5, 0xdf, 0xd0, 0x17, 0x38, 0x62, 0x44, 0xc3,\n\t0x70, 0x0e, 0x04, 0x19, 0x1b, 0xca, 0x40, 0x8d, 0x69, 0x90, 0x02,\n\t0x6e, 0x00, 0x70, 0x41, 0x2b, 0x64, 0xd1, 0xbf, 0xff, 0xc1, 0xe2,\n\t0x84, 0x00, 0x3c, 0x85, 0x53, 0x06, 0x20, 0x39, 0x0f, 0xe1, 0xe1,\n\t0x80, 0x41, 0xf8, 0x9e, 0xe9, 0x34, 0x97, 0x3c, 0x36, 0xbc, 0xc1,\n\t0x0d, 0xbc, 0x98, 0x20, 0x05, 0x01, 0x37, 0x0c, 0x67, 0x9c, 0x2e,\n\t0x75, 0xfe, 0xee, 0x33, 0x97, 0x1b, 0x4c, 0x41, 0xbf, 0x20, 0x1c,\n\t0x24, 0x13, 0xb3, 0x40, 0xa1, 0x12, 0x4f, 0x38, 0x0b, 0x15, 0x46,\n\t0xac, 0x76, 0x0d, 0xc2, 0xc3, 0xac, 0x2e, 0xb7, 0xbb, 0xde, 0x05,\n\t0x51, 0x83, 0x65, 0xf0, 0xc5, 0x0e, 0x87, 0xa7, 0x0c, 0x32, 0x20,\n\t0xef, 0x8a, 0x6b, 0x68, 0x43, 0x28, 0x06, 0x77, 0x89, 0x83, 0x60,\n\t0x22, 0x89, 0x4b, 0x44, 0x61, 0x13, 0x9d, 0x32, 0x81, 0x02, 0xe6,\n\t0x41, 0x07, 0xd3, 0x09, 0x80, 0xf7, 0xa4, 0x91, 0xb6, 0x0c, 0x26,\n\t0x8f, 0x0c, 0x3a, 0xdc, 0x22, 0xd9, 0x86, 0xc1, 0x34, 0xf6, 0x81,\n\t0x91, 0x0d, 0xf3, 0xab, 0x5f, 0x7c, 0xce, 0x98, 0x46, 0x35, 0x3a,\n\t0x31, 0x69, 0x7a, 0xf0, 0x90, 0x1e, 0xe0, 0x26, 0xc7, 0x05, 0x36,\n\t0x10, 0x8c, 0xe6, 0x3a, 0xc6, 0x30, 0xf4, 0x48, 0xbc, 0x63, 0x60,\n\t0xf0, 0x8f, 0x1c, 0x14, 0xa4, 0x41, 0x08, 0x59, 0xc8, 0x14, 0xde,\n\t0x86, 0x06, 0x2d, 0x02, 0x61, 0x23, 0x67, 0xd8, 0x3e, 0x30, 0xba,\n\t0xc1, 0x19, 0x93, 0xa4, 0xe4, 0x1e, 0x7d, 0x88, 0x3a, 0x48, 0x0e,\n\t0x51, 0x93, 0x05, 0xe1, 0x64, 0x21, 0xd7, 0x08, 0xa1, 0x11, 0x44,\n\t0x06, 0x0f, 0x4e, 0x3a, 0x54, 0x42, 0x2e, 0x57, 0x38, 0x1a, 0xba,\n\t0xaf, 0x0c, 0xca, 0x50, 0x65, 0xe0, 0x92, 0xe1, 0x45, 0x5f, 0x82,\n\t0x2c, 0x0d, 0xac, 0x2b, 0xe3, 0x26, 0xd1, 0x98, 0x46, 0x12, 0x66,\n\t0xc2, 0x20, 0x1f, 0x81, 0xc0, 0x6f, 0x2e, 0xf2, 0x02, 0xb4, 0x1d,\n\t0x0e, 0x92, 0xda, 0x48, 0xa5, 0x30, 0x8b, 0x36, 0x0c, 0x2f, 0xfa,\n\t0xf1, 0x8a, 0x80, 0x9c, 0x86, 0xf3, 0x96, 0x89, 0x42, 0x59, 0x90,\n\t0x70, 0x16, 0xb1, 0x68, 0x05, 0x26, 0x6a, 0xa6, 0x91, 0x03, 0x8c,\n\t0xe2, 0x91, 0x90, 0x94, 0xe4, 0x36, 0xf7, 0x68, 0xc9, 0x6b, 0x06,\n\t0x71, 0x83, 0xa3, 0xfe, 0x98, 0x97, 0x2c, 0x69, 0x71, 0x0a, 0x4c,\n\t0xd0, 0xc0, 0x05, 0x62, 0x7a, 0x8a, 0xc9, 0x32, 0x57, 0xca, 0x2b,\n\t0x9e, 0x52, 0x9b, 0xf3, 0x6c, 0x58, 0x0f, 0x7f, 0xe8, 0x4a, 0x22,\n\t0x3c, 0x88, 0x93, 0x35, 0x98, 0x66, 0x58, 0x20, 0xd0, 0xbb, 0x82,\n\t0x06, 0x11, 0x98, 0x09, 0x25, 0x5b, 0x17, 0xbf, 0x78, 0xc5, 0x34,\n\t0x80, 0x10, 0x00, 0x84, 0x8c, 0xc5, 0xf5, 0xdc, 0x62, 0x81, 0x2f,\n\t0xd8, 0x33, 0x88, 0xd9, 0xcc, 0x28, 0xd9, 0xbc, 0x69, 0x51, 0xf7,\n\t0x6d, 0x00, 0x21, 0x21, 0x1d, 0x69, 0x5b, 0x28, 0xda, 0x34, 0x3b,\n\t0xae, 0x41, 0x9e, 0x2a, 0x4d, 0xd9, 0x30, 0xea, 0x69, 0xd3, 0x34,\n\t0xbc, 0xd4, 0x8c, 0x49, 0x14, 0xe9, 0x5d, 0x02, 0x80, 0x05, 0x30,\n\t0x18, 0x15, 0x0d, 0x6a, 0x48, 0x43, 0x41, 0x0f, 0x9a, 0x53, 0x9d,\n\t0xb2, 0x52, 0x60, 0x20, 0x3b, 0x56, 0x1a, 0xd0, 0x80, 0x85, 0x0d,\n\t0xc5, 0x74, 0x31, 0x2e, 0x33, 0x43, 0x18, 0x8c, 0x7a, 0xd4, 0xa4,\n\t0x62, 0xb4, 0xa9, 0x29, 0x23, 0xa6, 0x49, 0x61, 0x86, 0x86, 0xb2,\n\t0x86, 0xc1, 0x0c, 0x50, 0x4a, 0xc8, 0x55, 0x09, 0x04, 0x81, 0x1b,\n\t0x60, 0x41, 0xab, 0x5f, 0x08, 0x03, 0x19, 0x50, 0x09, 0x56, 0xa7,\n\t0x92, 0xc1, 0x70, 0x67, 0xc5, 0xc2, 0x0d, 0x68, 0x72, 0x91, 0xb5,\n\t0x92, 0x27, 0x00, 0x36, 0x98, 0x42, 0x15, 0x8e, 0x41, 0xd7, 0xba,\n\t0x3a, 0xf5, 0x18, 0x88, 0x75, 0xa8, 0x46, 0xfc, 0xaa, 0x9c, 0x01,\n\t0xe8, 0x61, 0x17, 0xbe, 0x18, 0x06, 0x42, 0x0d, 0xcb, 0x30, 0xc9,\n\t0x4a, 0xd6, 0x18, 0xe0, 0x1a, 0x08, 0x63, 0x59, 0x63, 0x81, 0x5c,\n\t0xec, 0xe2, 0x7c, 0x94, 0x15, 0x9d, 0x0c, 0x82, 0xe5, 0x02, 0x0b,\n\t0x60, 0xe2, 0x7f, 0x42, 0xfd, 0x2b, 0x11, 0x76, 0x21, 0xc1, 0xd0,\n\t0x0e, 0xaf, 0x16, 0xf7, 0xcb, 0xfe, 0x84, 0x2a, 0x62, 0xa1, 0xc4,\n\t0xd4, 0x2a, 0xe7, 0x00, 0xbd, 0xc8, 0x85, 0x16, 0x2b, 0x05, 0x0c,\n\t0x5e, 0xf8, 0x22, 0x8f, 0x39, 0x0d, 0x86, 0x2f, 0x78, 0x01, 0xda,\n\t0x4a, 0xfd, 0x62, 0x5e, 0x16, 0x50, 0x85, 0xff, 0x96, 0x68, 0x5b,\n\t0xd6, 0xd0, 0x60, 0x17, 0xb9, 0x28, 0x6e, 0x9e, 0x70, 0x01, 0x05,\n\t0xa1, 0x48, 0x41, 0xba, 0x09, 0x05, 0x86, 0x14, 0x84, 0x02, 0x05,\n\t0x5c, 0x40, 0xcb, 0x88, 0x05, 0x71, 0x01, 0x2d, 0x4c, 0xc8, 0x5c,\n\t0x99, 0x2e, 0x26, 0x00, 0xab, 0x6d, 0xed, 0x9e, 0x80, 0x01, 0x05,\n\t0xf0, 0x2c, 0x41, 0x09, 0xde, 0x85, 0x56, 0x30, 0x92, 0x41, 0x29,\n\t0xe0, 0x2e, 0x23, 0x19, 0xf6, 0xdd, 0x13, 0x2e, 0x94, 0x60, 0x1d,\n\t0x25, 0x40, 0x01, 0xbb, 0x79, 0x82, 0x2d, 0x41, 0x02, 0x80, 0xc4,\n\t0x4e, 0x36, 0xf7, 0x2e, 0xb8, 0xcd, 0x05, 0x2f, 0xc6, 0xa6, 0x27,\n\t0x60, 0x44, 0x81, 0xbf, 0xe0, 0x89, 0xaf, 0xab, 0x70, 0x11, 0x05,\n\t0x29, 0xf0, 0x22, 0x4f, 0xc1, 0x98, 0x42, 0x14, 0xa6, 0xa0, 0x43,\n\t0x5e, 0x48, 0x21, 0x0a, 0x12, 0xae, 0x14, 0x2e, 0x9c, 0x00, 0xe1,\n\t0x28, 0x00, 0x18, 0x4f, 0xc7, 0x25, 0xc8, 0x01, 0xc6, 0x5b, 0x48,\n\t0x59, 0xd0, 0xe2, 0xa3, 0x60, 0x21, 0x41, 0x2e, 0x74, 0xeb, 0x2a,\n\t0x0f, 0x47, 0x61, 0xc3, 0xf9, 0xc5, 0x13, 0x7b, 0x95, 0xa0, 0x84,\n\t0x29, 0xd0, 0x77, 0x19, 0x23, 0x8e, 0x70, 0x9e, 0xa6, 0xc0, 0xe3,\n\t0xff, 0xbe, 0x2a, 0xc3, 0x37, 0xb6, 0x70, 0xb4, 0x46, 0x3b, 0x10,\n\t0x17, 0xd0, 0x76, 0x96, 0x87, 0x64, 0xcd, 0x6a, 0xa3, 0xfb, 0x2a,\n\t0xfc, 0xfe, 0xf8, 0x55, 0xbe, 0x10, 0xca, 0x12, 0x8c, 0xbc, 0x0c,\n\t0x22, 0x93, 0x78, 0x0a, 0x3a, 0x86, 0x82, 0x75, 0x9c, 0xb0, 0xdb,\n\t0x2a, 0xcf, 0xf7, 0x5d, 0x44, 0x50, 0x31, 0xfe, 0x8b, 0x97, 0xe8,\n\t0x62, 0xf3, 0xde, 0x65, 0x00, 0x54, 0x80, 0xee, 0x89, 0x1b, 0xe6,\n\t0xe0, 0x31, 0x4f, 0x81, 0x17, 0xd4, 0xb5, 0xce, 0x96, 0x71, 0xc1,\n\t0x8b, 0x29, 0x68, 0xd9, 0xc4, 0x3b, 0xac, 0xc5, 0x76, 0x6c, 0x60,\n\t0xce, 0x72, 0xce, 0xa2, 0x15, 0x4a, 0x5a, 0x4c, 0x82, 0xd5, 0x2b,\n\t0x3a, 0x2f, 0x13, 0x65, 0xcc, 0x4e, 0x80, 0xb4, 0x50, 0x7a, 0xbc,\n\t0xc5, 0x62, 0x10, 0x6a, 0x00, 0x35, 0x68, 0x05, 0x2c, 0x64, 0x91,\n\t0xce, 0x4c, 0xc0, 0x38, 0x2c, 0x9d, 0xf5, 0xac, 0x7d, 0x2d, 0x4b,\n\t0x6a, 0xc9, 0xbe, 0xca, 0xc1, 0xe0, 0x79, 0x34, 0x7f, 0x8b, 0xa2,\n\t0x04, 0x40, 0xbb, 0xaa, 0xd4, 0xa4, 0x86, 0x16, 0x93, 0x55, 0x6c,\n\t0x01, 0x0c, 0x00, 0xb4, 0x44, 0x35, 0x80, 0xee, 0x82, 0xf7, 0x34,\n\t0x0c, 0x66, 0x3c, 0xe3, 0xd7, 0xc0, 0x7e, 0x46, 0x33, 0xa0, 0xc5,\n\t0x8b, 0x28, 0xbc, 0xf7, 0xbd, 0xfe, 0x9d, 0x42, 0x7b, 0x21, 0xbc,\n\t0x84, 0x28, 0x5c, 0xf8, 0x55, 0xcd, 0x08, 0x36, 0xb0, 0x99, 0x31,\n\t0x59, 0x3d, 0x81, 0xb7, 0x46, 0x06, 0x41, 0xaf, 0xae, 0x79, 0xdd,\n\t0x8c, 0x6c, 0x74, 0xe3, 0xdb, 0xe0, 0xee, 0xc6, 0x36, 0xb0, 0x01,\n\t0x2d, 0x60, 0xe0, 0xe2, 0xc3, 0x52, 0xb8, 0x73, 0x32, 0xfa, 0x8c,\n\t0x6e, 0x5c, 0xcc, 0x79, 0x19, 0xd8, 0xd8, 0x46, 0xb8, 0xc1, 0x9d,\n\t0x8d, 0x66, 0x54, 0x1b, 0x4f, 0x02, 0xc6, 0xf6, 0x8b, 0xe2, 0x4c,\n\t0x63, 0x3d, 0x0d, 0x03, 0x1b, 0xde, 0x08, 0xb8, 0xc0, 0x05, 0xbe,\n\t0x0d, 0x7b, 0x43, 0x2b, 0x19, 0x08, 0xdf, 0x13, 0xc2, 0xaf, 0x5c,\n\t0xa9, 0x61, 0x34, 0x63, 0x1b, 0x03, 0x8f, 0x38, 0x36, 0xee, 0xbd,\n\t0x0c, 0x41, 0xeb, 0xbb, 0x20, 0xb8, 0x85, 0x6e, 0x99, 0xf1, 0xf4,\n\t0xef, 0x88, 0x0f, 0x9c, 0x1b, 0xd4, 0x16, 0x66, 0xaf, 0xfe, 0xb9,\n\t0xe1, 0x71, 0x81, 0x4f, 0xdc, 0x55, 0xc6, 0x60, 0x67, 0x89, 0x20,\n\t0x90, 0xdb, 0x7e, 0xe7, 0xc9, 0xe1, 0xd9, 0xd8, 0x86, 0xcc, 0x67,\n\t0xbe, 0x0d, 0x6e, 0x40, 0x83, 0xe2, 0x14, 0x1c, 0x06, 0x34, 0xb8,\n\t0x41, 0xf3, 0x99, 0xd7, 0x9b, 0xe2, 0xc2, 0xf8, 0x74, 0x47, 0xae,\n\t0xc4, 0x80, 0x80, 0x6e, 0x04, 0x02, 0x33, 0x76, 0xf9, 0xcb, 0x97,\n\t0xc1, 0x8c, 0x66, 0x38, 0xfd, 0xe9, 0x21, 0x4f, 0x68, 0xaf, 0x9f,\n\t0x0e, 0xf5, 0x65, 0xe0, 0x9c, 0x18, 0xf0, 0x69, 0x08, 0x03, 0xb6,\n\t0xfe, 0x9b, 0xd7, 0x15, 0xc4, 0x04, 0x7e, 0x30, 0x04, 0x23, 0x0c,\n\t0xc1, 0x07, 0x0f, 0x6c, 0x24, 0xd4, 0x4a, 0xf7, 0x37, 0xac, 0x71,\n\t0xae, 0xc7, 0xb5, 0xb3, 0xdd, 0xea, 0x84, 0xe8, 0xc3, 0x21, 0x0c,\n\t0xa1, 0x08, 0x46, 0x28, 0xc2, 0x10, 0x87, 0xe8, 0x03, 0x1f, 0x78,\n\t0xe0, 0x81, 0xcc, 0x9a, 0x00, 0x12, 0x94, 0x90, 0x84, 0x24, 0x28,\n\t0x41, 0x09, 0x45, 0x98, 0xc0, 0xeb, 0x32, 0x80, 0x6e, 0xda, 0x5d,\n\t0x3b, 0xbc, 0x61, 0x38, 0x62, 0x12, 0x81, 0x17, 0xbc, 0xe0, 0x09,\n\t0x4f, 0x78, 0x48, 0x1c, 0x82, 0x0f, 0x26, 0x70, 0x93, 0x09, 0x18,\n\t0x41, 0x89, 0x48, 0x78, 0xde, 0xf3, 0x92, 0x88, 0x44, 0xd9, 0x31,\n\t0x92, 0xf8, 0x19, 0x3f, 0x9b, 0xf1, 0x39, 0x07, 0x47, 0xe8, 0x3f,\n\t0xcf, 0x7a, 0xd0, 0x57, 0xfe, 0x10, 0x2a, 0xc8, 0x11, 0x1f, 0x3a,\n\t0xdf, 0xfa, 0x48, 0x0c, 0x9e, 0x11, 0x98, 0xef, 0x55, 0x10, 0x14,\n\t0xcf, 0x8b, 0xb7, 0xa3, 0xbe, 0xb2, 0xaa, 0xaf, 0xbd, 0xf0, 0x07,\n\t0x1f, 0x89, 0x43, 0x1c, 0x9e, 0x20, 0x8c, 0x58, 0xfd, 0xf0, 0x29,\n\t0x61, 0x79, 0x3e, 0x94, 0xc0, 0x04, 0x1e, 0x88, 0xbe, 0x09, 0x54,\n\t0x80, 0x85, 0x3d, 0x28, 0x9e, 0xd1, 0xbf, 0x27, 0x5e, 0xf0, 0x85,\n\t0xfe, 0xcf, 0x7d, 0x4a, 0x3c, 0x82, 0x0f, 0x0c, 0x18, 0x08, 0x24,\n\t0x94, 0xcf, 0xfd, 0xc1, 0x13, 0x3e, 0x12, 0x8f, 0x80, 0x44, 0x24,\n\t0x16, 0x81, 0x88, 0x40, 0x10, 0xe2, 0xfa, 0x39, 0xce, 0xbe, 0x42,\n\t0x1d, 0x41, 0x7e, 0xee, 0xb7, 0x7e, 0xf0, 0xc6, 0x17, 0xc8, 0x21,\n\t0x68, 0x6f, 0xff, 0xfb, 0x0b, 0x7e, 0x11, 0x81, 0x00, 0x08, 0x84,\n\t0x90, 0x74, 0x9f, 0x25, 0x7f, 0xc3, 0x43, 0x7f, 0xfd, 0x67, 0x7f,\n\t0x94, 0xb0, 0x08, 0x26, 0x00, 0x00, 0x3c, 0x60, 0x7b, 0x09, 0x58,\n\t0x7b, 0x92, 0x00, 0x80, 0x02, 0x98, 0x74, 0x54, 0x66, 0x80, 0x81,\n\t0x83, 0x80, 0x11, 0x28, 0x7c, 0x85, 0x97, 0x79, 0xb3, 0x57, 0x7f,\n\t0x09, 0x38, 0x81, 0x01, 0x58, 0x08, 0xba, 0x90, 0x74, 0x1b, 0x87,\n\t0x81, 0x0a, 0xa5, 0x0c, 0x96, 0x00, 0x82, 0x1b, 0xe8, 0x79, 0x94,\n\t0xc0, 0x07, 0x00, 0x30, 0x00, 0x7c, 0x00, 0x81, 0x2d, 0x38, 0x81,\n\t0x88, 0x00, 0x08, 0x83, 0x50, 0x82, 0x33, 0x26, 0x41, 0x6e, 0xd7,\n\t0x83, 0x3e, 0xf8, 0x83, 0x40, 0x18, 0x84, 0x6b, 0xd7, 0x0c, 0x2b,\n\t0x48, 0x79, 0x46, 0xc8, 0x82, 0x12, 0xc8, 0x08, 0x52, 0xc2, 0x03,\n\t0x8a, 0x10, 0x78, 0x2d, 0xf8, 0x08, 0x37, 0x08, 0x08, 0xda, 0x00,\n\t0x0d, 0x54, 0x08, 0x0d, 0xe2, 0x10, 0x0e, 0x58, 0x98, 0x85, 0x5a,\n\t0xb8, 0x85, 0x5c, 0xd8, 0x85, 0x5e, 0xf8, 0x85, 0x60, 0x18, 0x86,\n\t0x5b, 0x58, 0x09, 0x8c, 0x70, 0x79, 0x7c, 0x90, 0x05, 0x7c, 0xc0,\n\t0x07, 0x87, 0x90, 0x7c, 0x4e, 0x68, 0x7f, 0x92, 0x00, 0x09, 0x04,\n\t0xe1, 0x01, 0x33, 0xd8, 0x86, 0xfd, 0x07, 0x85, 0x80, 0x80, 0x08,\n\t0xdf, 0x30, 0x0e, 0x7a, 0x38, 0x0e, 0xe8, 0x60, 0x0e, 0x7e, 0xf8,\n\t0x87, 0x80, 0x18, 0x88, 0x82, 0x38, 0x88, 0x84, 0x58, 0x88, 0x86,\n\t0x78, 0x88, 0xfe, 0x80, 0xa8, 0x0d, 0x2a, 0xc0, 0x00, 0x88, 0x22,\n\t0x25, 0x03, 0xc0, 0x00, 0x26, 0xc0, 0x07, 0x4d, 0x88, 0x84, 0x94,\n\t0x70, 0x08, 0x95, 0x03, 0x76, 0x8f, 0x40, 0x87, 0xdc, 0x97, 0x08,\n\t0x80, 0x00, 0x08, 0x79, 0xb8, 0x87, 0xe5, 0x70, 0x0e, 0x88, 0x38,\n\t0x8a, 0xa4, 0x58, 0x8a, 0xa5, 0x08, 0x03, 0x18, 0xc1, 0x00, 0x59,\n\t0xc0, 0x79, 0x12, 0x18, 0x09, 0x59, 0x40, 0x26, 0x91, 0x68, 0x08,\n\t0xe6, 0xc7, 0x82, 0x9c, 0x08, 0x08, 0x8d, 0xb0, 0x87, 0x7a, 0xd8,\n\t0x87, 0xa6, 0xb8, 0x8b, 0xbc, 0x68, 0x8a, 0xe8, 0x20, 0x74, 0x03,\n\t0xe1, 0x01, 0x7d, 0x40, 0x87, 0x83, 0xc7, 0x07, 0xd5, 0x72, 0x00,\n\t0x91, 0xb8, 0x86, 0x91, 0x60, 0x84, 0x84, 0xb7, 0x08, 0x80, 0xf0,\n\t0x07, 0x85, 0x90, 0x0d, 0xb8, 0x58, 0x0e, 0xbd, 0x58, 0x8d, 0xd6,\n\t0x48, 0x88, 0xd9, 0x90, 0x59, 0x03, 0x31, 0x00, 0xab, 0x48, 0x79,\n\t0x90, 0x60, 0x8c, 0x1e, 0x01, 0x89, 0x2a, 0xc0, 0x03, 0x59, 0x50,\n\t0x8e, 0x3c, 0xa0, 0x02, 0x1e, 0xf0, 0x1b, 0x3f, 0x80, 0x8b, 0xe3,\n\t0x20, 0x8a, 0xd7, 0xf8, 0x8e, 0xd6, 0x58, 0x04, 0x36, 0x01, 0x01,\n\t0xe4, 0x98, 0x05, 0x1e, 0xe0, 0x75, 0x47, 0x47, 0x0e, 0xd3, 0x08,\n\t0x8f, 0xfc, 0xb8, 0x8b, 0xe7, 0x00, 0x8c, 0x2a, 0x32, 0x00, 0xda,\n\t0xc0, 0x8e, 0xee, 0xd8, 0x8f, 0x06, 0x69, 0x88, 0xda, 0xa0, 0x8d,\n\t0x2a, 0x52, 0x03, 0xec, 0x48, 0x8d, 0x07, 0xf9, 0x90, 0x83, 0x68,\n\t0x0b, 0x17, 0xc7, 0x31, 0x03, 0x89, 0x8b, 0xba, 0x08, 0x91, 0x18,\n\t0x99, 0x0e, 0x2a, 0x37, 0x91, 0xeb, 0x38, 0x8d, 0x05, 0x89, 0x91,\n\t0x07, 0x29, 0x8f, 0x13, 0x49, 0x91, 0xec, 0x78, 0x91, 0x20, 0xd9,\n\t0x8f, 0x1a, 0x39, 0x92, 0x17, 0xc1, 0x90, 0x25, 0x79, 0x92, 0x06,\n\t0xf9, 0x03, 0x2a, 0x19, 0xfe, 0x2c, 0x15, 0x89, 0x8b, 0x1f, 0xe9,\n\t0x92, 0xd5, 0x98, 0x8d, 0x43, 0xf2, 0x19, 0x0a, 0x62, 0x01, 0xfa,\n\t0xe8, 0x91, 0x36, 0x69, 0x8d, 0xe7, 0x90, 0x68, 0xc1, 0xa2, 0x00,\n\t0x1b, 0x70, 0x05, 0x5e, 0x30, 0x07, 0x73, 0x70, 0x03, 0xf8, 0x11,\n\t0x00, 0xb6, 0xc0, 0x8e, 0xe3, 0xe0, 0x90, 0x3f, 0xc9, 0x8b, 0x45,\n\t0x90, 0x31, 0x8d, 0x41, 0x2a, 0x5e, 0xb0, 0x33, 0xc5, 0x52, 0x2c,\n\t0x6a, 0xb0, 0x91, 0x1d, 0xf1, 0x88, 0x7d, 0x47, 0x10, 0x03, 0x50,\n\t0x0b, 0xc8, 0x30, 0x96, 0x64, 0x79, 0x0d, 0xd6, 0x70, 0x96, 0x68,\n\t0x99, 0x96, 0x6a, 0xb9, 0x96, 0x6c, 0xd9, 0x96, 0x6e, 0xe9, 0x96,\n\t0xd1, 0xe0, 0x26, 0x57, 0xb2, 0x01, 0x6e, 0xe5, 0x05, 0x69, 0x90,\n\t0x95, 0x6c, 0xe0, 0x3e, 0x6a, 0x90, 0x00, 0x02, 0x35, 0x00, 0x1e,\n\t0x50, 0x02, 0x6a, 0xc8, 0x08, 0x8f, 0xe0, 0x07, 0xdb, 0x01, 0x01,\n\t0x9f, 0xd3, 0x09, 0x88, 0x89, 0x98, 0xa3, 0xb0, 0x0a, 0x8c, 0xd9,\n\t0x98, 0x8e, 0xf9, 0x98, 0x90, 0x19, 0x99, 0x92, 0x39, 0x99, 0x90,\n\t0x39, 0x0d, 0xa3, 0x20, 0x4a, 0x22, 0x70, 0x95, 0x6d, 0x90, 0x95,\n\t0x90, 0xb4, 0x06, 0x7b, 0x39, 0x24, 0x90, 0x98, 0x05, 0x7e, 0x70,\n\t0x08, 0x80, 0x47, 0x78, 0x92, 0xd7, 0x80, 0xb8, 0xf3, 0x09, 0x89,\n\t0x99, 0x98, 0x8b, 0x29, 0x0d, 0xae, 0xf9, 0x9a, 0xb0, 0x19, 0x9b,\n\t0xb2, 0x39, 0x9b, 0xb4, 0x59, 0x9b, 0xaf, 0xb9, 0x40, 0xe3, 0x64,\n\t0x10, 0x20, 0x70, 0x2f, 0x9d, 0x99, 0x3c, 0x9f, 0xe9, 0x11, 0x1e,\n\t0xa0, 0x02, 0x6a, 0xa8, 0x08, 0xcb, 0x68, 0x9a, 0xf7, 0xa7, 0x02,\n\t0x06, 0x41, 0x03, 0x9e, 0xb0, 0x9a, 0x8a, 0x49, 0x0a, 0xb6, 0xf9,\n\t0x9c, 0xd0, 0x19, 0x9d, 0x0b, 0x74, 0x6d, 0x06, 0x71, 0x05, 0x79,\n\t0xd9, 0x9b, 0xbe, 0xc9, 0x97, 0xcf, 0xfe, 0xc3, 0x03, 0xa4, 0x49,\n\t0x79, 0x48, 0x08, 0x7a, 0xc8, 0x59, 0x39, 0x41, 0xb0, 0x9c, 0xcc,\n\t0x29, 0x0a, 0xce, 0x19, 0x9d, 0xe8, 0x99, 0x9e, 0xae, 0x49, 0x0a,\n\t0x48, 0x83, 0x10, 0xd6, 0x89, 0x9d, 0xd9, 0x99, 0x11, 0x1e, 0x00,\n\t0x78, 0xdf, 0x79, 0x9c, 0x07, 0x61, 0x32, 0xcc, 0xc9, 0x9a, 0xab,\n\t0xa0, 0x9e, 0xfc, 0x49, 0x9b, 0xab, 0x50, 0x0a, 0xed, 0xe9, 0x9e,\n\t0xd7, 0x09, 0x9f, 0x9e, 0xa9, 0x9d, 0x17, 0x81, 0x02, 0xf5, 0x29,\n\t0x81, 0xe1, 0x99, 0x6d, 0x34, 0xf0, 0x09, 0xe4, 0xb9, 0x9a, 0xe6,\n\t0xb9, 0x9f, 0xfd, 0x39, 0xa1, 0xa4, 0x20, 0x0a, 0xc8, 0x71, 0x11,\n\t0xef, 0x49, 0xa0, 0x05, 0x9a, 0x11, 0x28, 0xd0, 0x82, 0x9f, 0x27,\n\t0x09, 0x0b, 0x7a, 0x10, 0x2f, 0x00, 0x0a, 0xa2, 0x90, 0x9f, 0x9d,\n\t0x30, 0x0a, 0xe7, 0x39, 0xa1, 0xe8, 0x49, 0x0a, 0xa4, 0x00, 0x0a,\n\t0xb9, 0xa9, 0x10, 0x19, 0xfa, 0x47, 0x9c, 0xb9, 0xa1, 0x18, 0xd1,\n\t0xa1, 0x1e, 0x6a, 0x7b, 0x21, 0x7a, 0x10, 0x56, 0x53, 0xa2, 0xf9,\n\t0x29, 0x0a, 0x28, 0x2a, 0xa1, 0x2a, 0x4a, 0x9b, 0x2c, 0xfa, 0x35,\n\t0x00, 0x09, 0x00, 0x31, 0xaa, 0x41, 0xc5, 0xe2, 0x99, 0x5e, 0x80,\n\t0x03, 0xc4, 0x42, 0xa3, 0x07, 0x7a, 0xa3, 0x38, 0x8a, 0x11, 0x03,\n\t0x10, 0x04, 0x9f, 0xc0, 0xa3, 0xf9, 0x89, 0xa2, 0x29, 0x1a, 0xa4,\n\t0xd2, 0xb0, 0x0a, 0xa4, 0x30, 0x0a, 0xa2, 0xf0, 0x09, 0xd4, 0xb2,\n\t0x11, 0x19, 0x9a, 0x95, 0x6d, 0xa0, 0x06, 0x5e, 0x70, 0x05, 0x20,\n\t0xa0, 0x00, 0x9f, 0xe1, 0x05, 0x79, 0xf9, 0x9b, 0x4f, 0xea, 0x86,\n\t0xde, 0x09, 0x9e, 0x1a, 0x61, 0x35, 0x9e, 0xf0, 0xa0, 0xe5, 0x89,\n\t0xa5, 0x40, 0x9a, 0x9e, 0x5c, 0xea, 0xa5, 0xa2, 0xe0, 0x09, 0x60,\n\t0xd3, 0x11, 0x19, 0xaa, 0x06, 0x7a, 0xb5, 0x01, 0xfe, 0x46, 0x27,\n\t0x25, 0x6c, 0xea, 0xa4, 0x0a, 0x61, 0xa3, 0xac, 0x67, 0x7e, 0xcc,\n\t0x77, 0x08, 0x7e, 0x20, 0x9a, 0x9d, 0x07, 0xa2, 0x1b, 0x31, 0x00,\n\t0x2f, 0xa0, 0x09, 0x26, 0x0a, 0xa1, 0xa3, 0x80, 0xa5, 0xa4, 0xd0,\n\t0x98, 0xaf, 0xd9, 0x98, 0x2c, 0xda, 0xa5, 0x5e, 0x9a, 0x98, 0x9a,\n\t0xf0, 0x02, 0x0a, 0x49, 0x10, 0xef, 0xc9, 0x06, 0xec, 0x02, 0x29,\n\t0x87, 0xea, 0xa6, 0x89, 0xfa, 0xa1, 0x81, 0x57, 0x86, 0xce, 0xd7,\n\t0x77, 0x16, 0x91, 0x05, 0x91, 0x9a, 0xa3, 0x52, 0x6a, 0x04, 0xa1,\n\t0x60, 0xa7, 0x97, 0xda, 0x09, 0xa2, 0xe0, 0xa3, 0x99, 0xfa, 0xab,\n\t0x7c, 0xca, 0x9c, 0x9e, 0x10, 0x0a, 0x46, 0x50, 0xaa, 0x05, 0x71,\n\t0xaa, 0x20, 0x90, 0x10, 0x01, 0xb0, 0xaa, 0x06, 0xda, 0xaa, 0xb6,\n\t0x67, 0x08, 0x59, 0x60, 0x02, 0x12, 0x45, 0x10, 0xb4, 0x1a, 0xa5,\n\t0x1d, 0xc1, 0x03, 0x83, 0xb0, 0x07, 0xa1, 0x50, 0xa5, 0xbb, 0xda,\n\t0xad, 0x10, 0xfa, 0x09, 0xa1, 0xb0, 0x07, 0x83, 0xc0, 0x03, 0x39,\n\t0x81, 0xac, 0xca, 0xca, 0xac, 0x1c, 0xea, 0x82, 0x30, 0x98, 0x10,\n\t0xd5, 0x2a, 0xa9, 0xd7, 0x1a, 0x08, 0x81, 0x30, 0x08, 0x85, 0xa0,\n\t0xad, 0x0e, 0x6a, 0xa5, 0xde, 0xca, 0xab, 0x9e, 0x00, 0xae, 0x7b,\n\t0x50, 0x08, 0x83, 0x00, 0xaf, 0xe4, 0x8a, 0x13, 0xe6, 0xaa, 0xaa,\n\t0x6d, 0xda, 0xac, 0x09, 0x61, 0xa3, 0x2f, 0xa8, 0x10, 0xed, 0x6a,\n\t0xab, 0x18, 0xc1, 0x03, 0x51, 0x08, 0xaf, 0xf2, 0x4a, 0x08, 0xda,\n\t0xaa, 0x09, 0xa0, 0xf0, 0x09, 0x55, 0xda, 0xab, 0xbd, 0x4a, 0xb1,\n\t0xa0, 0xa0, 0x09, 0xe1, 0x4a, 0x08, 0xfc, 0x0a, 0xaf, 0x9d, 0x88,\n\t0x08, 0xff, 0x7a, 0x13, 0x01, 0x7b, 0x9f, 0xe8, 0x5a, 0xa3, 0xea,\n\t0x8a, 0xb0, 0xb5, 0x6a, 0x13, 0x0c, 0xdb, 0x89, 0x2c, 0x0b, 0xfe,\n\t0x08, 0x0e, 0x6b, 0x01, 0x79, 0xf1, 0x02, 0x32, 0x2b, 0xb3, 0xd2,\n\t0x34, 0x00, 0x16, 0xd0, 0xaf, 0x01, 0xd8, 0xb2, 0x77, 0x18, 0xb2,\n\t0x36, 0x31, 0xb2, 0x03, 0x76, 0x00, 0x1b, 0x50, 0xb2, 0x6f, 0x7a,\n\t0xb0, 0xec, 0x9a, 0xb2, 0xd7, 0x9a, 0x08, 0x51, 0xa8, 0xb3, 0x80,\n\t0x20, 0x74, 0x10, 0xa0, 0xb4, 0x1f, 0x9b, 0x08, 0x3c, 0x0b, 0xa8,\n\t0x79, 0xc9, 0x06, 0xc9, 0x0a, 0x96, 0x37, 0x70, 0x95, 0x6a, 0x50,\n\t0x4a, 0xac, 0x5a, 0xb0, 0x27, 0x5b, 0xb4, 0xd6, 0xca, 0x11, 0x59,\n\t0x30, 0x09, 0x8b, 0x80, 0xb4, 0x4a, 0xcb, 0xb4, 0x4a, 0x8b, 0x08,\n\t0x89, 0xb0, 0x08, 0x93, 0xf0, 0x8a, 0x00, 0x3b, 0xb5, 0x55, 0x2b,\n\t0x10, 0x41, 0x3b, 0xa3, 0xe6, 0xb2, 0xb5, 0x08, 0x61, 0xb0, 0xeb,\n\t0xfa, 0x22, 0x1e, 0x00, 0x76, 0x46, 0x0b, 0xb6, 0x4e, 0xf8, 0x08,\n\t0x63, 0x8b, 0x08, 0x37, 0xf8, 0x07, 0x4c, 0xfb, 0x07, 0x77, 0x88,\n\t0xb6, 0x8b, 0xf0, 0x08, 0xb6, 0x47, 0x09, 0x6c, 0x6b, 0x13, 0x01,\n\t0x30, 0xb2, 0x1b, 0xd0, 0xa4, 0x41, 0x44, 0xb7, 0x07, 0x61, 0xb7,\n\t0x18, 0x97, 0x05, 0xa4, 0x29, 0x78, 0x72, 0xda, 0x11, 0xd5, 0x0a,\n\t0x7a, 0xe8, 0xb7, 0x08, 0x63, 0x6b, 0x76, 0x0a, 0xe1, 0x01, 0x69,\n\t0x7b, 0xb8, 0x34, 0xb8, 0x8c, 0x8b, 0xdb, 0x4e, 0x56, 0xd9, 0xa4,\n\t0x54, 0x2b, 0x10, 0x03, 0x70, 0xa8, 0x57, 0x24, 0xb9, 0x06, 0x61,\n\t0x02, 0x5d, 0x2b, 0x10, 0x1e, 0xb0, 0x7f, 0x9a, 0xe8, 0xae, 0x7c,\n\t0x2b, 0x81, 0xa1, 0x07, 0xba, 0x09, 0xe1, 0x01, 0xb6, 0x07, 0x82,\n\t0x8a, 0xbb, 0x11, 0x01, 0x20, 0x02, 0x73, 0x80, 0x97, 0xe6, 0xb2,\n\t0xba, 0x00, 0xb0, 0x01, 0x2d, 0xa5, 0x41, 0x5b, 0xf9, 0x2f, 0x03,\n\t0x20, 0xbb, 0xcb, 0x78, 0xb7, 0x0c, 0xb0, 0x7f, 0xc3, 0xa7, 0xb0,\n\t0x17, 0xfe, 0xb1, 0xb9, 0xc2, 0xc7, 0xbb, 0x08, 0xe1, 0xbb, 0xdd,\n\t0x77, 0xba, 0x0b, 0x71, 0x05, 0xe7, 0x72, 0x4f, 0x55, 0xbb, 0x01,\n\t0x03, 0xea, 0x3e, 0x6c, 0xe0, 0x05, 0x46, 0xa2, 0x8a, 0xa3, 0x49,\n\t0x9c, 0xd1, 0x2b, 0x25, 0xb3, 0x57, 0x7e, 0xa8, 0x99, 0xbb, 0xdc,\n\t0xa7, 0xbd, 0x07, 0xc1, 0xbd, 0x1c, 0xe8, 0xbd, 0x09, 0x21, 0x02,\n\t0x9b, 0x09, 0x4e, 0xe3, 0xbb, 0xbc, 0xe7, 0xa2, 0x06, 0x3f, 0x95,\n\t0x6d, 0x25, 0x60, 0x08, 0x71, 0xda, 0xbe, 0x49, 0x23, 0x8b, 0xf6,\n\t0x17, 0xbf, 0x1b, 0x81, 0xbd, 0xb5, 0x47, 0xbf, 0x06, 0x61, 0xbf,\n\t0xb5, 0x17, 0xbc, 0x52, 0xea, 0xba, 0xf7, 0xf4, 0x53, 0xad, 0x5b,\n\t0xbe, 0xff, 0x9b, 0xaa, 0x07, 0x91, 0x05, 0xcb, 0x18, 0xc1, 0xeb,\n\t0xca, 0x00, 0xc9, 0xc7, 0x81, 0x87, 0x60, 0xac, 0x02, 0xc1, 0xc0,\n\t0xad, 0xe7, 0xc0, 0x05, 0x01, 0xc1, 0xad, 0x27, 0xc1, 0x17, 0xa1,\n\t0x00, 0x90, 0x6b, 0xbe, 0x6e, 0xaa, 0x00, 0x5e, 0xb0, 0x99, 0xc5,\n\t0x92, 0x06, 0x5e, 0x10, 0xc0, 0xb1, 0x3b, 0x7e, 0x1c, 0xb8, 0xae,\n\t0x03, 0x40, 0xbd, 0xf7, 0x07, 0x09, 0x0a, 0xbc, 0xc0, 0xfc, 0xd7,\n\t0xc0, 0x17, 0xa1, 0xc2, 0xac, 0xc7, 0xc2, 0x1c, 0xf3, 0xc2, 0x35,\n\t0x74, 0x05, 0xc9, 0x61, 0xb3, 0x57, 0xb0, 0x2b, 0x1b, 0x30, 0x26,\n\t0xef, 0x7b, 0xbf, 0x03, 0xf1, 0x80, 0xfc, 0x77, 0x7b, 0x41, 0x2c,\n\t0xc4, 0xf6, 0x87, 0xc2, 0x71, 0xa8, 0x80, 0xf8, 0x4b, 0xb2, 0x18,\n\t0x7c, 0x2e, 0x5e, 0xc0, 0x95, 0x09, 0xd1, 0xc3, 0x43, 0xfc, 0xa1,\n\t0x91, 0x10, 0xbf, 0x01, 0x90, 0x05, 0x86, 0x00, 0x81, 0x8a, 0x30,\n\t0x7a, 0x38, 0x61, 0xc2, 0xac, 0xc7, 0xc5, 0xc1, 0xe8, 0xc5, 0x73,\n\t0xca, 0xa6, 0x78, 0xd9, 0x06, 0x58, 0x40, 0xc6, 0xca, 0xea, 0x07,\n\t0x67, 0xec, 0x82, 0x9b, 0x84, 0x89, 0x71, 0x26, 0x30, 0xc8, 0x0c,\n\t0x80, 0x8f, 0x08, 0x21, 0xc7, 0x9f, 0x47, 0xc7, 0xb4, 0x6b, 0xc7,\n\t0x1a, 0xa1, 0x00, 0x46, 0xe9, 0x05, 0x67, 0x1a, 0xc5, 0x50, 0x61,\n\t0x02, 0x98, 0xeb, 0xaa, 0x87, 0x10, 0x7e, 0xac, 0x61, 0x02, 0x7f,\n\t0x6c, 0x7b, 0x90, 0xa0, 0xc8, 0x00, 0x30, 0x9f, 0x2c, 0x48, 0x09,\n\t0x59, 0xec, 0xbc, 0x86, 0x2c, 0xa5, 0x7c, 0x90, 0x89, 0x94, 0xb7,\n\t0x08, 0xe0, 0x47, 0x1e, 0xa0, 0x1c, 0xc1, 0x23, 0x1c, 0x2c, 0x3e,\n\t0xbc, 0xa8, 0x9d, 0x1c, 0x93, 0x01, 0x60, 0x02, 0x68, 0x78, 0x86,\n\t0xf7, 0xb8, 0x94, 0x7e, 0x7c, 0x7f, 0x48, 0x5c, 0xb4, 0xf5, 0x47,\n\t0x09, 0x7e, 0x50, 0xca, 0x31, 0xd9, 0x16, 0x07, 0xb0, 0x7f, 0x92,\n\t0x47, 0x78, 0xe0, 0x68, 0xca, 0xa6, 0x39, 0x79, 0x87, 0xc0, 0xc7,\n\t0xc3, 0xbc, 0x18, 0x0c, 0xc0, 0x07, 0x86, 0x00, 0x09, 0x96, 0x97,\n\t0x05, 0xa5, 0xca, 0x8d, 0xa4, 0x09, 0x09, 0x64, 0x87, 0xc9, 0xcf,\n\t0x3c, 0x91, 0x01, 0x00, 0x89, 0xe9, 0x78, 0x13, 0x07, 0x90, 0xb7,\n\t0x85, 0x3c, 0xcc, 0x01, 0x01, 0x00, 0x3b\n};\n\nstatic const int _img_music_length = 5067;\nstatic const char _img_sad[3998] = {\n\t0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x7f, 0x00, 0x7f, 0x00, 0xf7,\n\t0xd7, 0x00, 0x00, 0x00, 0x00, 0x09, 0x85, 0xc8, 0xc1, 0xbb, 0x66,\n\t0x1f, 0x8d, 0xb0, 0xf3, 0xc7, 0x4f, 0x09, 0x7d, 0xbb, 0x01, 0x81,\n\t0xc5, 0x69, 0xb3, 0x91, 0x07, 0x81, 0xc0, 0x2f, 0x9d, 0xad, 0x4d,\n\t0x97, 0x81, 0xcc, 0xa7, 0x42, 0xf3, 0xc7, 0x4f, 0xc4, 0xa1, 0x41,\n\t0xf1, 0xc6, 0x4e, 0xe5, 0xbb, 0x4a, 0xe0, 0xb7, 0x49, 0xf3, 0xc7,\n\t0x4f, 0x0e, 0x77, 0xae, 0x00, 0x81, 0xc6, 0x3e, 0xb5, 0xaf, 0x20,\n\t0x9d, 0xbc, 0x56, 0xa5, 0x8c, 0x06, 0x81, 0xbf, 0x40, 0xb9, 0xb2,\n\t0x39, 0xa6, 0xa0, 0x21, 0x84, 0x99, 0x71, 0x9a, 0x6c, 0xf3, 0xc7,\n\t0x4f, 0xf1, 0xc5, 0x4d, 0xca, 0xa6, 0x42, 0x40, 0xba, 0xb3, 0x33,\n\t0x95, 0x8f, 0xf2, 0xc6, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f,\n\t0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xc0, 0xb1, 0x5e, 0x00, 0x81,\n\t0xc6, 0x00, 0x81, 0xc6, 0x02, 0x80, 0xc3, 0x03, 0x7a, 0xb9, 0x40,\n\t0xba, 0xb3, 0x3d, 0xb1, 0xaa, 0xd9, 0xb9, 0x4f, 0x10, 0x73, 0xa5,\n\t0x28, 0x85, 0x96, 0x40, 0xba, 0xb3, 0x00, 0x81, 0xc6, 0x07, 0x79,\n\t0xb4, 0x40, 0xba, 0xb3, 0x08, 0x73, 0xa9, 0x37, 0xa1, 0x9a, 0x39,\n\t0x3e, 0x47, 0x39, 0x3f, 0x48, 0x39, 0x41, 0x4a, 0x3a, 0x4c, 0x54,\n\t0x3a, 0x54, 0x5a, 0x3a, 0x54, 0x5a, 0x3b, 0x5e, 0x63, 0x3b, 0x6a,\n\t0x6e, 0x3b, 0x63, 0x67, 0x3c, 0x72, 0x74, 0x3c, 0x7a, 0x7b, 0x22,\n\t0x7f, 0x97, 0x4a, 0x7d, 0x79, 0xf3, 0xc7, 0x4f, 0x40, 0xba, 0xb3,\n\t0x37, 0x95, 0x8d, 0x52, 0x87, 0x7d, 0x67, 0x89, 0x73, 0x6f, 0x99,\n\t0x6d, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xc2,\n\t0x9f, 0x3f, 0xc3, 0x9f, 0x3f, 0xc1, 0xa0, 0x40, 0xc2, 0x9f, 0x3f,\n\t0xc4, 0xa0, 0x3e, 0x9e, 0x98, 0x54, 0xab, 0x9c, 0x4c, 0xb8, 0x9d,\n\t0x46, 0xa2, 0x9a, 0x52, 0x86, 0x92, 0x64, 0x98, 0xac, 0x7a, 0xad,\n\t0xb3, 0x72, 0xb8, 0xb7, 0x6f, 0xbf, 0xa0, 0x42, 0xf3, 0xc7, 0x4f,\n\t0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xc1, 0x9f, 0x40, 0xc4, 0xa1,\n\t0x41, 0xca, 0xa6, 0x42, 0xcf, 0xa9, 0x43, 0xd3, 0xad, 0x44, 0xdb,\n\t0xb3, 0x47, 0xc1, 0xa7, 0x59, 0xe5, 0xc0, 0x51, 0xf3, 0xc7, 0x4f,\n\t0xf2, 0xc6, 0x4d, 0xf3, 0xc7, 0x4f, 0xe5, 0xbc, 0x4a, 0xed, 0xc2,\n\t0x4d, 0xc4, 0xb3, 0x6a, 0xb0, 0xc2, 0x74, 0xd9, 0xc4, 0x5d, 0xf1,\n\t0xc6, 0x4e, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf4, 0xc8, 0x4f,\n\t0xeb, 0xc5, 0x53, 0xf5, 0xc9, 0x51, 0xf1, 0xc7, 0x50, 0xcf, 0xc4,\n\t0x63, 0xf1, 0xd0, 0x6f, 0x01, 0x7f, 0xc3, 0x13, 0x92, 0xc1, 0x06,\n\t0x6c, 0xa1, 0x00, 0x80, 0xc5, 0x00, 0x72, 0xaf, 0x00, 0x81, 0xc6,\n\t0x00, 0x81, 0xc6, 0x00, 0x67, 0x9e, 0x02, 0x69, 0x9f, 0x04, 0x6a,\n\t0x9f, 0x14, 0x6e, 0x96, 0x19, 0x76, 0x98, 0x0a, 0x70, 0x9d, 0x3d,\n\t0x7c, 0x80, 0x2d, 0x77, 0x8e, 0x00, 0x81, 0xc6, 0x00, 0x81, 0xc6,\n\t0x00, 0x67, 0xa0, 0x00, 0x6a, 0xa2, 0x00, 0x6e, 0xa9, 0x0f, 0x6e,\n\t0xa2, 0x00, 0x71, 0xad, 0x00, 0x75, 0xb4, 0x00, 0x7a, 0xbb, 0x00,\n\t0x81, 0xc6, 0x12, 0x79, 0xb0, 0x06, 0x6b, 0xa1, 0x00, 0x7f, 0xc3,\n\t0x40, 0xba, 0xb3, 0x3f, 0xb7, 0xb0, 0x40, 0xba, 0xb3, 0x3d, 0x8c,\n\t0x8b, 0x3b, 0x8c, 0x89, 0x33, 0x95, 0x8f, 0x3a, 0x94, 0x8d, 0x28,\n\t0x8b, 0x92, 0x33, 0x96, 0x90, 0x3e, 0x95, 0x93, 0x35, 0x9a, 0x94,\n\t0x3b, 0x9d, 0x99, 0x34, 0x95, 0x94, 0x3f, 0xb6, 0xb0, 0x3d, 0xa3,\n\t0x9e, 0x37, 0xa0, 0x9a, 0x17, 0x88, 0xbb, 0x1c, 0x99, 0xbe, 0x22,\n\t0x97, 0xba, 0x40, 0xba, 0xb3, 0x3e, 0xa7, 0xa2, 0x3c, 0xaa, 0xa4,\n\t0x3c, 0xaf, 0xa8, 0x3f, 0xb3, 0xac, 0x40, 0xba, 0xb3, 0x2a, 0xa6,\n\t0xba, 0x33, 0xae, 0xb7, 0x31, 0xae, 0xb8, 0x3b, 0xb6, 0xb4, 0x3d,\n\t0xb9, 0xb2, 0x36, 0xb1, 0xb6, 0x50, 0x95, 0x8d, 0x64, 0x9e, 0x96,\n\t0x74, 0x9c, 0x82, 0x75, 0xab, 0x90, 0x47, 0x96, 0xa3, 0x40, 0xb4,\n\t0xae, 0x4c, 0xbb, 0xac, 0x40, 0xb7, 0xb0, 0x40, 0xba, 0xb3, 0x56,\n\t0xb9, 0xa6, 0x72, 0xac, 0xa9, 0x4a, 0xba, 0xad, 0x00, 0x81, 0xc6,\n\t0x0b, 0x8b, 0xc3, 0x00, 0x82, 0xc8, 0x0a, 0x84, 0xc2, 0x13, 0x8a,\n\t0xca, 0x11, 0x8d, 0xc3, 0x16, 0x95, 0xc0, 0x21, 0x90, 0xc5, 0x8a,\n\t0xb4, 0x87, 0xb2, 0xbb, 0xb4, 0xc3, 0xb8, 0x8e, 0xa4, 0xc9, 0x93,\n\t0xf2, 0xdb, 0x91, 0xc8, 0xc4, 0xb4, 0xf3, 0xe4, 0xaf, 0xa5, 0xb9,\n\t0xc4, 0x8f, 0xd6, 0xd2, 0x85, 0xc9, 0xc6, 0xb5, 0xc9, 0xd4, 0xcc,\n\t0xcc, 0xcc, 0xc9, 0xc9, 0xc3, 0xd7, 0xd7, 0xd6, 0xf6, 0xed, 0xcc,\n\t0xcf, 0xe7, 0xf4, 0xcf, 0xe8, 0xf5, 0xe7, 0xe7, 0xe7, 0xff, 0xff,\n\t0xff, 0xf7, 0xf7, 0xf4, 0xf9, 0xf7, 0xe7, 0xdd, 0xe8, 0xde, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x21, 0xf9, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x21, 0xff, 0x0b,\n\t0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x6b,\n\t0x0d, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x3d, 0x30, 0x2e, 0x34, 0x35,\n\t0x34, 0x35, 0x35, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00,\n\t0x7f, 0x00, 0x00, 0x08, 0xfe, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0,\n\t0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x04, 0x80, 0x40, 0xc3, 0x0b,\n\t0x49, 0x93, 0x4a, 0xa9, 0x7a, 0xa5, 0xaa, 0xd4, 0x24, 0x49, 0x2f,\n\t0x34, 0x20, 0x58, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x2e,\n\t0x44, 0xb0, 0xe2, 0x85, 0x27, 0x55, 0xb9, 0x52, 0xaa, 0x5c, 0x99,\n\t0x4b, 0x95, 0xa7, 0x17, 0x2b, 0x36, 0x8a, 0x9c, 0x49, 0xb3, 0xa6,\n\t0xcd, 0x81, 0x14, 0x4c, 0xe2, 0x62, 0xc9, 0x93, 0x27, 0xae, 0x97,\n\t0x14, 0x6e, 0x0a, 0x1d, 0x4a, 0x54, 0x60, 0xce, 0x52, 0x3d, 0x93,\n\t0x26, 0x2d, 0xf5, 0x22, 0x68, 0xd1, 0xa7, 0x50, 0x17, 0x0e, 0x80,\n\t0x81, 0x54, 0xa9, 0xd5, 0x9e, 0xa5, 0x60, 0x0c, 0x88, 0xca, 0xb5,\n\t0xab, 0x86, 0x49, 0x57, 0xc3, 0x26, 0x9d, 0xa4, 0xa1, 0xab, 0xd9,\n\t0xa1, 0x53, 0xab, 0x8a, 0x5d, 0xbb, 0x32, 0xeb, 0xd6, 0xb3, 0x70,\n\t0x43, 0x22, 0x20, 0xb2, 0x93, 0xad, 0x5d, 0x95, 0xb8, 0x88, 0xc8,\n\t0x8c, 0xcb, 0x57, 0xa1, 0x02, 0xb0, 0x77, 0x03, 0xab, 0x9c, 0xa4,\n\t0xa0, 0xaf, 0x61, 0x83, 0x1a, 0x3e, 0x09, 0x5e, 0x9c, 0xf2, 0x53,\n\t0xd9, 0xc3, 0x87, 0x13, 0x33, 0x9e, 0x5c, 0xea, 0x31, 0xe4, 0xb8,\n\t0x92, 0x27, 0x53, 0xfe, 0x70, 0x19, 0x6e, 0x66, 0xcd, 0x94, 0x57,\n\t0x74, 0x06, 0x69, 0x60, 0xc2, 0x89, 0x13, 0x2a, 0x4e, 0x68, 0x28,\n\t0x10, 0xe0, 0xa0, 0x06, 0x4f, 0xa0, 0x63, 0x57, 0x3e, 0x18, 0xa0,\n\t0x80, 0x06, 0xd4, 0xa7, 0x27, 0x18, 0x30, 0x1c, 0x40, 0x83, 0x0c,\n\t0x3e, 0x86, 0x7a, 0xfd, 0xfa, 0xd5, 0x2b, 0x52, 0x21, 0x3b, 0x2a,\n\t0xf6, 0x32, 0xf4, 0xf4, 0x2a, 0x76, 0xec, 0x49, 0x4e, 0x05, 0x22,\n\t0x50, 0x61, 0xa7, 0x50, 0x24, 0xe1, 0xc4, 0x0d, 0xf1, 0x91, 0xa1,\n\t0xa1, 0xf5, 0xd9, 0x0b, 0x76, 0x1c, 0xfe, 0x0d, 0x27, 0xde, 0xab,\n\t0x3c, 0xf6, 0x5e, 0x78, 0x4e, 0x6c, 0x45, 0x10, 0x24, 0x95, 0x73,\n\t0xe7, 0x93, 0x36, 0x0e, 0x50, 0xc1, 0xe7, 0xbc, 0x79, 0xec, 0xbf,\n\t0x1c, 0xd9, 0xb9, 0xd0, 0x35, 0x80, 0x8a, 0x42, 0xc3, 0xdd, 0x27,\n\t0x60, 0x2f, 0x8c, 0x20, 0xd2, 0x87, 0x0c, 0x17, 0xbc, 0x70, 0xca,\n\t0x7b, 0xef, 0x11, 0x01, 0x9e, 0x70, 0x03, 0x0a, 0x38, 0x5c, 0x21,\n\t0x2a, 0x78, 0x57, 0x54, 0x00, 0x32, 0x44, 0x42, 0x5e, 0x84, 0xe5,\n\t0x35, 0x62, 0x60, 0x1f, 0x7e, 0x10, 0xd2, 0x49, 0x73, 0x0c, 0xc6,\n\t0x86, 0x0b, 0x29, 0x1b, 0x72, 0x78, 0xdf, 0x2f, 0x91, 0xc8, 0x60,\n\t0xe1, 0x50, 0x2f, 0x40, 0xa8, 0x62, 0x71, 0x1f, 0xf6, 0x11, 0x88,\n\t0x26, 0xee, 0x95, 0xe8, 0xdc, 0x2b, 0xa3, 0xcc, 0x38, 0x20, 0x71,\n\t0x2f, 0x14, 0x75, 0x82, 0x86, 0x3e, 0xf6, 0xb2, 0x48, 0x1f, 0x48,\n\t0x2a, 0x92, 0x89, 0x29, 0x3a, 0x32, 0x08, 0x8b, 0x2f, 0x45, 0xae,\n\t0x18, 0xc9, 0x09, 0x43, 0x15, 0xa0, 0x47, 0x8a, 0xe6, 0x11, 0x07,\n\t0x0c, 0x30, 0x04, 0x1e, 0x82, 0xa4, 0x1f, 0x99, 0x70, 0x92, 0x63,\n\t0x93, 0xce, 0xad, 0xb2, 0x62, 0x2f, 0x5b, 0xca, 0x28, 0xa1, 0x1e,\n\t0x05, 0x08, 0x25, 0x03, 0x96, 0xe5, 0x01, 0x53, 0x4b, 0x31, 0x57,\n\t0x60, 0x61, 0x85, 0x11, 0x80, 0x20, 0x79, 0xe3, 0x82, 0x64, 0x32,\n\t0xd8, 0x63, 0x2f, 0xa2, 0xc8, 0x62, 0x05, 0x16, 0x57, 0x14, 0x53,\n\t0x0b, 0x97, 0x3f, 0xca, 0x70, 0x13, 0x02, 0x00, 0x0e, 0x28, 0x8a,\n\t0x15, 0x71, 0xc0, 0x21, 0x69, 0x18, 0x4f, 0x50, 0x31, 0x88, 0x92,\n\t0x23, 0xf6, 0xc9, 0xa0, 0x2b, 0xc2, 0xd4, 0xa2, 0xc6, 0x1b, 0x92,\n\t0x4a, 0x1a, 0x87, 0x15, 0xa2, 0xfc, 0x58, 0x88, 0x72, 0x22, 0x9d,\n\t0x10, 0xa1, 0x28, 0x57, 0x48, 0xfa, 0xc6, 0x1b, 0xfe, 0x62, 0x40,\n\t0xf1, 0x04, 0x14, 0x52, 0x54, 0xa2, 0x09, 0x2a, 0x9a, 0x32, 0xf8,\n\t0x8a, 0x2e, 0x6c, 0xc0, 0xf1, 0xea, 0xaf, 0x92, 0x5e, 0x51, 0xea,\n\t0x80, 0x54, 0xd6, 0xf4, 0xe6, 0x80, 0xb4, 0xf8, 0xfa, 0x6a, 0x1b,\n\t0x5f, 0x3c, 0xe1, 0x6c, 0x15, 0x98, 0x84, 0x92, 0x6b, 0x89, 0xb7,\n\t0xac, 0xa1, 0xec, 0xaf, 0xaf, 0xc2, 0x41, 0x4b, 0xa2, 0x35, 0x0d,\n\t0x90, 0x07, 0x96, 0xa2, 0xa8, 0x71, 0xad, 0x18, 0xce, 0x3e, 0x21,\n\t0x45, 0x2c, 0xb7, 0x4e, 0xab, 0x2b, 0xaf, 0xd7, 0x02, 0xab, 0xc6,\n\t0xb0, 0x59, 0xe6, 0xf1, 0x96, 0x48, 0x8c, 0xa6, 0xf8, 0x4b, 0x2d,\n\t0x71, 0x64, 0x8b, 0x86, 0x17, 0xe5, 0x22, 0x71, 0x89, 0xb4, 0xea,\n\t0xea, 0x5a, 0x0c, 0xb6, 0xd8, 0xc6, 0x51, 0x8b, 0xbd, 0xa7, 0xd2,\n\t0x54, 0xef, 0x8a, 0xb2, 0x5c, 0x4b, 0xa9, 0xb3, 0xe7, 0xa6, 0x1b,\n\t0xf0, 0x7b, 0xbb, 0xf6, 0x4a, 0x30, 0xa8, 0xb2, 0x20, 0x8c, 0xea,\n\t0x47, 0x0b, 0x67, 0xd9, 0x30, 0xa8, 0xfb, 0x3a, 0xdb, 0x85, 0xbf,\n\t0x99, 0x4e, 0x4c, 0x71, 0x31, 0x73, 0x5c, 0x0c, 0x47, 0xc6, 0x2b,\n\t0x26, 0x3c, 0x93, 0x01, 0x7c, 0xd8, 0x8b, 0xaf, 0xaf, 0x0f, 0x57,\n\t0x8a, 0x89, 0x26, 0x7c, 0x9a, 0xbc, 0xe3, 0x2d, 0x74, 0xb4, 0xfb,\n\t0x86, 0xc1, 0xf6, 0xf2, 0xb1, 0xdb, 0x4c, 0x01, 0x7c, 0x2b, 0xa0,\n\t0x28, 0x58, 0xc0, 0x11, 0xf2, 0x13, 0x53, 0x20, 0xa1, 0x89, 0x98,\n\t0x3a, 0x0b, 0x9c, 0x32, 0xb0, 0x58, 0xc0, 0x5b, 0xde, 0x2f, 0x79,\n\t0xbc, 0x18, 0xd2, 0xb1, 0x02, 0xca, 0x12, 0x47, 0xcd, 0x54, 0x60,\n\t0x72, 0x09, 0x93, 0x51, 0x53, 0xcc, 0xb3, 0xb2, 0x70, 0xc4, 0x21,\n\t0x0b, 0xb7, 0x35, 0x0d, 0x39, 0x20, 0x30, 0xb3, 0x64, 0x21, 0xeb,\n\t0x13, 0x4e, 0xe3, 0x58, 0xb6, 0xc0, 0xd9, 0xc6, 0x41, 0x0b, 0xfe,\n\t0xa2, 0xf7, 0x4d, 0x69, 0x53, 0x00, 0x78, 0xc0, 0xb9, 0x88, 0x10,\n\t0x54, 0x4c, 0x71, 0xee, 0xbf, 0x77, 0xaf, 0xcb, 0x46, 0x1c, 0x6a,\n\t0xc8, 0xc2, 0x77, 0x96, 0x78, 0x68, 0x2d, 0x92, 0x0a, 0x03, 0x7a,\n\t0xd8, 0x07, 0x20, 0x83, 0x18, 0x71, 0xc9, 0x25, 0x39, 0x27, 0xee,\n\t0x9c, 0x2c, 0xb5, 0x58, 0x2d, 0xa0, 0x0a, 0x42, 0x15, 0x9d, 0x22,\n\t0x23, 0x48, 0x82, 0x98, 0xc9, 0x25, 0x50, 0x7b, 0xfe, 0x1e, 0x2b,\n\t0x70, 0x5e, 0x9d, 0xf5, 0x50, 0x0a, 0x34, 0x4a, 0x63, 0xea, 0x81,\n\t0x6c, 0x0e, 0xb0, 0xeb, 0x3b, 0x0e, 0x13, 0xe1, 0x2f, 0x85, 0x14,\n\t0x46, 0xd4, 0x09, 0x86, 0x10, 0xd7, 0x48, 0xea, 0x60, 0x6e, 0xde,\n\t0x39, 0xef, 0xa0, 0x99, 0x29, 0xa1, 0x21, 0xc5, 0x0a, 0x09, 0xe0,\n\t0x91, 0x5f, 0x6e, 0xde, 0x3a, 0xf3, 0xb1, 0xb9, 0x02, 0x65, 0x96,\n\t0x85, 0x44, 0xff, 0xd4, 0x05, 0x79, 0x20, 0xe2, 0x87, 0x9e, 0x9b,\n\t0x77, 0x82, 0xbd, 0x9f, 0x57, 0xf7, 0x92, 0x07, 0x7f, 0x5d, 0x19,\n\t0x70, 0x02, 0x1e, 0xaa, 0x6f, 0x4e, 0xf6, 0xf9, 0xb1, 0xb5, 0xc2,\n\t0x22, 0x1f, 0x2a, 0x0c, 0x7d, 0x96, 0x01, 0x0e, 0x6d, 0x2e, 0x31,\n\t0xfd, 0xa0, 0x71, 0x85, 0x1d, 0x4e, 0xa0, 0x3f, 0xbe, 0xac, 0x40,\n\t0x13, 0xac, 0x1b, 0x93, 0x4a, 0x6c, 0x51, 0x17, 0x96, 0x30, 0x50,\n\t0x67, 0xb8, 0xb0, 0x45, 0x4f, 0x22, 0x68, 0x15, 0xd1, 0x40, 0xe6,\n\t0x05, 0x9c, 0xb8, 0x84, 0xf9, 0x58, 0x52, 0x09, 0x1e, 0xf4, 0x60,\n\t0x7e, 0x29, 0xe9, 0xe0, 0x07, 0x27, 0x66, 0x8a, 0x1e, 0xf0, 0xa0,\n\t0x12, 0x2c, 0x29, 0xe1, 0x09, 0x95, 0x42, 0x04, 0xc8, 0x20, 0xc0,\n\t0x13, 0x08, 0x04, 0x45, 0x0a, 0x73, 0x60, 0x03, 0x1b, 0xf4, 0xa0,\n\t0x81, 0xa0, 0xa0, 0xa1, 0x0d, 0x7e, 0x30, 0xb1, 0x1f, 0xd4, 0x30,\n\t0x07, 0xfe, 0x32, 0x4c, 0x09, 0x2e, 0x7a, 0xf0, 0x43, 0x10, 0xae,\n\t0xe4, 0x13, 0x1b, 0x3b, 0x8b, 0x06, 0x36, 0xc7, 0x39, 0x96, 0x74,\n\t0x02, 0x07, 0x38, 0xb8, 0xc1, 0x0e, 0xc6, 0x54, 0x09, 0x28, 0xda,\n\t0xc0, 0x07, 0x0d, 0xd4, 0x14, 0x2e, 0x7c, 0x60, 0x03, 0x28, 0xa2,\n\t0x30, 0x25, 0xa9, 0xd8, 0xc1, 0x0d, 0xa0, 0xb8, 0x41, 0x9e, 0xbc,\n\t0x82, 0x33, 0x86, 0xc1, 0xe0, 0x25, 0xec, 0xb6, 0x12, 0x53, 0xe4,\n\t0x60, 0x8c, 0x38, 0xf8, 0x62, 0x2a, 0x7c, 0x30, 0xc6, 0x1d, 0xf6,\n\t0xb0, 0x8b, 0x37, 0xf0, 0x41, 0x8e, 0xaa, 0x18, 0xc5, 0x1c, 0x18,\n\t0x71, 0x25, 0x41, 0xea, 0x4b, 0x00, 0xd4, 0x78, 0x3d, 0x21, 0x72,\n\t0xb1, 0x8f, 0x3f, 0x18, 0x84, 0x0f, 0xa0, 0xe8, 0xc5, 0x89, 0xf1,\n\t0x11, 0x8a, 0x3e, 0x18, 0xc4, 0x0f, 0xde, 0x88, 0x83, 0x2b, 0x66,\n\t0x91, 0x25, 0x92, 0x30, 0x0c, 0x02, 0x8a, 0x80, 0x40, 0x4e, 0x90,\n\t0x68, 0x25, 0x9b, 0x88, 0x62, 0x14, 0x6f, 0x40, 0x4a, 0x2b, 0xf2,\n\t0x40, 0x81, 0x6b, 0x89, 0xe0, 0x25, 0xc5, 0x92, 0x0a, 0x1e, 0x74,\n\t0x71, 0x94, 0xa5, 0x1c, 0xe3, 0x26, 0xac, 0x82, 0xc4, 0xbe, 0xbc,\n\t0x46, 0x77, 0x13, 0x04, 0x82, 0x28, 0x19, 0x59, 0x49, 0x1d, 0x94,\n\t0x51, 0x2c, 0xa6, 0xa8, 0xc4, 0x0f, 0x7c, 0xc0, 0x03, 0x1f, 0xfc,\n\t0xa0, 0x12, 0x7f, 0xb4, 0x4a, 0x27, 0x74, 0xf0, 0x4a, 0x46, 0x8e,\n\t0x11, 0x08, 0xab, 0x5c, 0x89, 0x2a, 0x2c, 0x03, 0x97, 0x03, 0xe2,\n\t0x72, 0x82, 0x96, 0xd0, 0x41, 0x25, 0x6d, 0x30, 0x46, 0x1f, 0x04,\n\t0x51, 0x2c, 0xa7, 0x00, 0x42, 0x0e, 0xb6, 0x79, 0x83, 0x1a, 0xe2,\n\t0x20, 0x07, 0x40, 0x58, 0x9e, 0x55, 0x40, 0xb1, 0xc8, 0x72, 0x76,\n\t0x51, 0x07, 0x96, 0x88, 0x26, 0x4b, 0x2c, 0x18, 0x17, 0x35, 0x8e,\n\t0xcd, 0x2a, 0xa7, 0xfe, 0x10, 0xe6, 0x0f, 0x80, 0xb0, 0x09, 0x09,\n\t0xae, 0x65, 0x13, 0x62, 0x84, 0x23, 0x2f, 0x47, 0xb9, 0x83, 0x59,\n\t0xae, 0xc5, 0x16, 0x9b, 0x00, 0xc2, 0x0f, 0x8e, 0xa9, 0xce, 0xa4,\n\t0x04, 0xb2, 0x9e, 0x19, 0x6c, 0xa2, 0x8e, 0x36, 0x41, 0xc9, 0x51,\n\t0x3a, 0x13, 0x8e, 0x37, 0xc8, 0x81, 0x41, 0xfb, 0x94, 0xc9, 0xb8,\n\t0x0c, 0x20, 0x08, 0x11, 0x6d, 0xa8, 0x66, 0x40, 0xa1, 0x03, 0x81,\n\t0xea, 0x00, 0x08, 0x95, 0xd8, 0x44, 0x25, 0x80, 0xa0, 0x4d, 0x28,\n\t0xde, 0x40, 0x07, 0xdf, 0x6c, 0xd2, 0x24, 0xe6, 0x65, 0x96, 0x17,\n\t0x22, 0x50, 0xa2, 0xef, 0x19, 0x62, 0x33, 0x7f, 0xb0, 0xbc, 0x53,\n\t0xfc, 0x80, 0x91, 0x36, 0x94, 0xa7, 0x6c, 0x92, 0x08, 0x15, 0x0a,\n\t0x78, 0x82, 0x89, 0x22, 0xcd, 0xc5, 0x2b, 0x5c, 0xc1, 0xd4, 0xa6,\n\t0xba, 0xe2, 0x93, 0x49, 0x09, 0x25, 0x23, 0xa1, 0x99, 0x4b, 0x5e,\n\t0x6e, 0x34, 0x29, 0x4b, 0x75, 0x2a, 0x53, 0xa1, 0xaa, 0x94, 0x52,\n\t0x44, 0xc7, 0x2c, 0x1a, 0x10, 0x9b, 0xf2, 0x92, 0xb2, 0x0a, 0x61,\n\t0xf8, 0xe2, 0xac, 0x68, 0xf5, 0xc5, 0x28, 0x5c, 0x61, 0x15, 0x1f,\n\t0x46, 0x91, 0x07, 0xfe, 0xec, 0x89, 0x2d, 0x78, 0x50, 0x47, 0x1e,\n\t0x2a, 0xc5, 0x15, 0xa3, 0x48, 0x2b, 0x5a, 0x85, 0xb1, 0x8a, 0xb0,\n\t0x4c, 0x13, 0x33, 0x4c, 0xc4, 0xe9, 0x4a, 0xb4, 0xa7, 0xa2, 0x51,\n\t0x28, 0x25, 0x8c, 0x70, 0xfc, 0xa2, 0x52, 0xf8, 0x28, 0x45, 0x54,\n\t0xae, 0xe4, 0x4f, 0x11, 0xf2, 0x05, 0x5b, 0xad, 0xf2, 0x0a, 0x6a,\n\t0x7a, 0x25, 0xb0, 0xc9, 0x24, 0x2c, 0x87, 0x0c, 0x9b, 0x14, 0x37,\n\t0x92, 0xd2, 0x8f, 0x57, 0xf1, 0x6c, 0x46, 0x93, 0x99, 0x12, 0xc8,\n\t0x0e, 0x48, 0xb2, 0x57, 0xc1, 0x05, 0x3d, 0xc1, 0x7a, 0xd3, 0x7b,\n\t0xf6, 0x64, 0x15, 0xdb, 0x13, 0xfe, 0x90, 0x2f, 0x60, 0xa1, 0x14,\n\t0x50, 0xb8, 0x74, 0x8a, 0x57, 0x41, 0x2c, 0x14, 0x63, 0xca, 0x92,\n\t0x27, 0x45, 0xb6, 0xaf, 0x61, 0x59, 0xad, 0x57, 0x5a, 0xcb, 0x5b,\n\t0x95, 0xbc, 0x02, 0x16, 0xac, 0x48, 0xae, 0x72, 0x59, 0x31, 0xd9,\n\t0xa4, 0x9c, 0x82, 0x99, 0x41, 0x4d, 0x2d, 0x11, 0x6d, 0xa0, 0x83,\n\t0xa4, 0xe6, 0xc2, 0x15, 0xcb, 0x55, 0x2e, 0x2c, 0xb8, 0x9a, 0x14,\n\t0xe1, 0x72, 0x65, 0x89, 0x4c, 0xfc, 0x65, 0x6c, 0x36, 0xe1, 0x83,\n\t0x11, 0x86, 0xa5, 0x84, 0x3e, 0xb8, 0xaa, 0x8e, 0xbc, 0x1b, 0x15,\n\t0xf0, 0x5a, 0x8f, 0xbb, 0x9a, 0xc1, 0x85, 0x50, 0x7d, 0x32, 0x5f,\n\t0xd0, 0x9c, 0x11, 0xb0, 0x4c, 0x2c, 0x24, 0x00, 0x63, 0xf3, 0x57,\n\t0xcf, 0x1c, 0xd5, 0x7f, 0x8e, 0xdd, 0xef, 0x64, 0xfa, 0x7b, 0x96,\n\t0x02, 0xc0, 0x10, 0xa9, 0x02, 0x7e, 0x8f, 0x57, 0xe3, 0x52, 0x00,\n\t0x4e, 0x32, 0x71, 0x77, 0x09, 0xd6, 0xcc, 0x27, 0xda, 0x04, 0x17,\n\t0x17, 0x68, 0x2e, 0xbf, 0xa9, 0x78, 0x85, 0x86, 0x37, 0xcc, 0xe1,\n\t0x0e, 0x7b, 0xf8, 0xc3, 0x20, 0x0e, 0xb1, 0x88, 0x47, 0x4c, 0xe2,\n\t0x0d, 0xeb, 0xa2, 0x05, 0x70, 0x09, 0x80, 0x13, 0x8a, 0xb1, 0x8b,\n\t0x16, 0xb7, 0xd8, 0x19, 0xcd, 0x88, 0xb1, 0x8c, 0x67, 0x4c, 0xe3,\n\t0x1a, 0xdb, 0xf8, 0xc6, 0x38, 0xce, 0xb1, 0x8e, 0x77, 0x2c, 0x63,\n\t0x64, 0x70, 0x41, 0x72, 0x4f, 0x29, 0x00, 0x13, 0x8e, 0x01, 0x8d,\n\t0x22, 0x17, 0xd9, 0x1a, 0xd7, 0x48, 0xb2, 0x92, 0x97, 0xcc, 0xe4,\n\t0x26, 0x3b, 0xf9, 0xc9, 0x50, 0x8e, 0xb2, 0x94, 0xa7, 0xac, 0xe4,\n\t0x65, 0x98, 0xc1, 0x01, 0x67, 0x71, 0x00, 0x13, 0xd4, 0x60, 0xe4,\n\t0x22, 0x4b, 0x03, 0x1b, 0x54, 0x0e, 0xb3, 0x98, 0xc7, 0x4c, 0x66,\n\t0x26, 0x27, 0x23, 0x0d, 0x58, 0x36, 0x8b, 0xfe, 0x96, 0xc7, 0xa0,\n\t0x8c, 0x2e, 0x43, 0x03, 0xc9, 0x65, 0x8e, 0xb3, 0x9c, 0xe7, 0x9c,\n\t0x8d, 0x3a, 0xa4, 0x21, 0x02, 0x59, 0x66, 0x82, 0x17, 0xda, 0xdc,\n\t0x65, 0x69, 0xcc, 0xf9, 0xcf, 0x80, 0xa6, 0xf2, 0x34, 0xe4, 0x70,\n\t0xe7, 0x3c, 0x3f, 0x81, 0xc8, 0x7d, 0x06, 0x73, 0xa0, 0x17, 0xcd,\n\t0xe8, 0x24, 0x2f, 0x03, 0x0e, 0x85, 0x56, 0x33, 0x13, 0x9e, 0x30,\n\t0x86, 0x68, 0xb8, 0x19, 0xce, 0x8d, 0xce, 0xb4, 0x9c, 0xb1, 0x51,\n\t0x07, 0x48, 0xe3, 0x59, 0xcd, 0xfc, 0xda, 0xb3, 0x9b, 0xbf, 0xac,\n\t0xe9, 0x52, 0x93, 0x79, 0x1a, 0x73, 0xf0, 0xf4, 0x59, 0x22, 0x00,\n\t0x06, 0x67, 0x21, 0xba, 0xcb, 0x98, 0x36, 0xb5, 0xac, 0xa3, 0x9c,\n\t0x0c, 0x50, 0x45, 0xba, 0x2b, 0x11, 0x30, 0x43, 0xb3, 0xd8, 0x3c,\n\t0x6a, 0x45, 0xcf, 0xfa, 0xd7, 0x4c, 0xae, 0xb3, 0xad, 0x3f, 0x8d,\n\t0xeb, 0x34, 0x50, 0xaa, 0x0b, 0xaf, 0x36, 0xb2, 0x9f, 0x81, 0xcd,\n\t0x6c, 0x47, 0xa7, 0x4c, 0xd5, 0x66, 0x89, 0x40, 0x1a, 0x42, 0x56,\n\t0x69, 0x37, 0xbf, 0xb9, 0xd9, 0xc0, 0xe6, 0x74, 0xb6, 0x6e, 0xcd,\n\t0x15, 0x69, 0xbf, 0xa1, 0xd5, 0x5e, 0x48, 0xb6, 0x97, 0x7d, 0x8d,\n\t0xed, 0x52, 0x2f, 0x63, 0x6a, 0xd0, 0x2e, 0xb6, 0xd2, 0x64, 0x55,\n\t0xed, 0x4b, 0x97, 0xdb, 0xd4, 0xda, 0xde, 0x36, 0xb1, 0xbb, 0x9d,\n\t0x06, 0x38, 0xb4, 0xa1, 0xd5, 0xc8, 0xb6, 0xf6, 0xb5, 0xdf, 0x9d,\n\t0xe9, 0x73, 0x03, 0x8b, 0xdb, 0x51, 0x91, 0xb6, 0xa4, 0xd0, 0xc0,\n\t0x6e, 0x3e, 0x27, 0x9a, 0xdf, 0x8c, 0x16, 0xf6, 0xbf, 0xe7, 0x1d,\n\t0xf0, 0x7a, 0xbf, 0xea, 0x61, 0x5c, 0xb6, 0x36, 0xa9, 0x11, 0x0e,\n\t0xe8, 0x5a, 0x63, 0x2b, 0xdd, 0xf4, 0xf6, 0x95, 0xd2, 0x42, 0x2d,\n\t0xee, 0x71, 0x53, 0x7c, 0xce, 0xa8, 0x26, 0x18, 0xc6, 0xfe, 0x1b,\n\t0x3e, 0x2e, 0x67, 0x8d, 0xc1, 0x18, 0xcc, 0x48, 0xb9, 0xca, 0x99,\n\t0xf1, 0x0c, 0x6a, 0x54, 0x83, 0x1a, 0x30, 0x8f, 0xb9, 0xcc, 0x67,\n\t0x4e, 0xf3, 0x9a, 0xdb, 0xfc, 0xe6, 0x38, 0x9f, 0x79, 0x35, 0xb4,\n\t0x51, 0x07, 0x95, 0x01, 0x1c, 0x2a, 0x02, 0xff, 0xd5, 0xbd, 0x9f,\n\t0x15, 0x08, 0x45, 0x18, 0xfd, 0xe8, 0x8a, 0x78, 0x44, 0x30, 0x96,\n\t0xce, 0xf4, 0xa6, 0x3b, 0xfd, 0xe9, 0x50, 0x8f, 0xba, 0xd4, 0xa7,\n\t0xfe, 0x74, 0x62, 0xb4, 0xca, 0xe7, 0x0c, 0x07, 0xba, 0xc3, 0xf5,\n\t0xc5, 0xaf, 0x2e, 0x1c, 0x61, 0x7c, 0xa9, 0x4b, 0x5d, 0x22, 0xae,\n\t0x13, 0xa5, 0xb2, 0x9b, 0xfd, 0xec, 0xb4, 0x98, 0x9a, 0xc8, 0x7f,\n\t0xfe, 0x94, 0xa0, 0x63, 0x2b, 0x56, 0x4c, 0x8b, 0x05, 0xd8, 0xc3,\n\t0xde, 0x87, 0x44, 0x34, 0xe2, 0xec, 0x78, 0xcf, 0xbb, 0x84, 0xbc,\n\t0xe6, 0x33, 0x79, 0xaf, 0x7a, 0xeb, 0x6f, 0x87, 0x18, 0x21, 0xe8,\n\t0x9e, 0x3a, 0x44, 0xdc, 0x5d, 0xef, 0x88, 0x2f, 0x7b, 0x24, 0x3c,\n\t0x81, 0x86, 0xbe, 0xfb, 0x3d, 0xda, 0x80, 0xc7, 0xd6, 0xc3, 0x36,\n\t0x40, 0x83, 0x1a, 0x85, 0x1d, 0x11, 0x8c, 0x48, 0xbc, 0xe6, 0x55,\n\t0x14, 0x09, 0x3b, 0x6c, 0xe0, 0x62, 0x17, 0x67, 0x7b, 0x51, 0xdc,\n\t0x4e, 0xb0, 0x36, 0x84, 0xa1, 0x09, 0x0a, 0x30, 0x40, 0xe5, 0x09,\n\t0x8f, 0xa4, 0x45, 0x90, 0x7d, 0xf3, 0xb0, 0x6f, 0x04, 0x0d, 0x0c,\n\t0xd0, 0x01, 0x37, 0x80, 0xfe, 0xf1, 0xea, 0xbe, 0xfd, 0xbd, 0x0b,\n\t0x83, 0x00, 0x19, 0xcc, 0x9d, 0xee, 0x98, 0x7f, 0x3d, 0xec, 0xf3,\n\t0xde, 0x88, 0x45, 0xc8, 0x60, 0x23, 0xb5, 0xbf, 0xfd, 0xb0, 0xff,\n\t0xee, 0x78, 0x5b, 0x77, 0x40, 0x20, 0x03, 0x78, 0x01, 0xeb, 0xc5,\n\t0x7e, 0xf8, 0xe1, 0x9b, 0x3d, 0x12, 0x05, 0x7a, 0xc1, 0x5b, 0x92,\n\t0xfe, 0x7f, 0xfb, 0x91, 0x6b, 0xbd, 0xf9, 0x6f, 0x68, 0xc3, 0xf3,\n\t0x05, 0x12, 0x80, 0x13, 0x40, 0xc2, 0xf2, 0x97, 0x5f, 0x44, 0xf5,\n\t0xad, 0xcf, 0x79, 0x46, 0x24, 0x02, 0x12, 0x27, 0xb0, 0x10, 0xf7,\n\t0x41, 0xef, 0xfd, 0xb6, 0x47, 0x9e, 0x60, 0x6e, 0x18, 0xff, 0x40,\n\t0x34, 0x80, 0x07, 0xf4, 0x87, 0xfd, 0x10, 0xea, 0x27, 0x7c, 0xec,\n\t0x57, 0x1e, 0xd8, 0x97, 0x08, 0x88, 0x80, 0x07, 0x96, 0x35, 0x7f,\n\t0x58, 0xc7, 0x7c, 0xca, 0x97, 0x7f, 0x06, 0x81, 0x00, 0x2f, 0xf0,\n\t0x07, 0xfe, 0x97, 0x3a, 0x87, 0x90, 0x08, 0x8c, 0xb0, 0x7e, 0xb0,\n\t0x17, 0x09, 0xc5, 0x87, 0x08, 0x88, 0xf0, 0x07, 0x2f, 0xb0, 0x31,\n\t0x0a, 0xb8, 0x76, 0x59, 0x67, 0x7f, 0xe0, 0xe7, 0x80, 0xae, 0x81,\n\t0x07, 0xbf, 0xc7, 0x7a, 0x88, 0x60, 0x81, 0x8d, 0x20, 0x80, 0x67,\n\t0xa7, 0x81, 0x8b, 0xf0, 0x21, 0x7e, 0x80, 0x80, 0x08, 0x11, 0x82,\n\t0xa1, 0x37, 0x82, 0xa3, 0x77, 0x7f, 0xd8, 0x22, 0x7e, 0x09, 0x61,\n\t0x00, 0x2a, 0xd0, 0x7f, 0xd3, 0xf7, 0x7f, 0x88, 0xb0, 0x08, 0x17,\n\t0xd8, 0x82, 0x33, 0x12, 0x09, 0x1a, 0xd8, 0x08, 0xee, 0x57, 0x23,\n\t0x07, 0xe8, 0x02, 0x05, 0x54, 0x10, 0x1d, 0xd0, 0x06, 0xca, 0x57,\n\t0x7f, 0x45, 0xe1, 0x00, 0x66, 0xd0, 0x7c, 0x70, 0x60, 0x82, 0x09,\n\t0x01, 0x81, 0x79, 0x12, 0x84, 0x84, 0xc7, 0x81, 0x89, 0x10, 0x86,\n\t0x8b, 0x30, 0x86, 0x63, 0x18, 0x86, 0x1c, 0xe8, 0x25, 0x74, 0x07,\n\t0x08, 0x1f, 0xb8, 0x10, 0xb5, 0x87, 0x85, 0x57, 0x76, 0x16, 0x0c,\n\t0xa0, 0x05, 0x72, 0xd0, 0x7d, 0x6f, 0xb8, 0x10, 0x0c, 0x10, 0x05,\n\t0x47, 0x40, 0x08, 0x7e, 0x80, 0x86, 0x5e, 0xd8, 0x87, 0x84, 0x77,\n\t0x08, 0x21, 0x72, 0x04, 0x51, 0xc0, 0x00, 0x1c, 0x61, 0x85, 0xcd,\n\t0x27, 0x07, 0xfe, 0x5a, 0x40, 0x88, 0x67, 0xa1, 0x04, 0x73, 0x08,\n\t0x7a, 0x72, 0xe0, 0x04, 0x40, 0x56, 0x10, 0x0c, 0xc0, 0x04, 0x50,\n\t0x30, 0x05, 0x55, 0x60, 0x04, 0x81, 0xb0, 0x87, 0x7e, 0xd8, 0x87,\n\t0x80, 0x18, 0x08, 0x46, 0x50, 0x05, 0x53, 0x00, 0x05, 0x4c, 0xa0,\n\t0x88, 0x0a, 0xa1, 0x62, 0x8d, 0x78, 0x31, 0x72, 0xa0, 0x04, 0x71,\n\t0xd1, 0x01, 0x3a, 0x98, 0x85, 0x22, 0xd0, 0x11, 0x93, 0x28, 0x2b,\n\t0x50, 0xd0, 0x05, 0x52, 0x70, 0x89, 0x84, 0x00, 0x08, 0x7b, 0xc8,\n\t0x81, 0x29, 0x18, 0x76, 0x7e, 0x70, 0x86, 0x7e, 0x00, 0x08, 0x84,\n\t0xf0, 0x89, 0x52, 0xd0, 0x05, 0xb2, 0x38, 0x8a, 0x1d, 0x21, 0x02,\n\t0x6e, 0xd0, 0x77, 0x90, 0xa6, 0x7f, 0x67, 0xd1, 0x02, 0x6e, 0x20,\n\t0x07, 0x68, 0x33, 0x87, 0x43, 0xe0, 0x11, 0xb1, 0x58, 0x2e, 0xb3,\n\t0xe2, 0x05, 0x53, 0x40, 0x05, 0x55, 0x70, 0x04, 0x41, 0x40, 0x03,\n\t0x78, 0x00, 0x09, 0x82, 0xf0, 0x07, 0xe2, 0x38, 0x8e, 0x90, 0x80,\n\t0x07, 0x34, 0x10, 0x04, 0x47, 0x50, 0x05, 0x85, 0x03, 0x05, 0x73,\n\t0xe3, 0x2c, 0xa2, 0x48, 0x8a, 0x0b, 0x31, 0x04, 0x6f, 0x00, 0x8d,\n\t0xd9, 0x22, 0x07, 0x6e, 0xe0, 0x01, 0x86, 0x21, 0x02, 0x5c, 0xd0,\n\t0x06, 0x72, 0x30, 0x87, 0x5c, 0x20, 0x02, 0x91, 0x68, 0x10, 0x93,\n\t0x68, 0x8d, 0x04, 0x29, 0x2b, 0xcf, 0x37, 0x00, 0x08, 0x30, 0x01,\n\t0x0a, 0xb9, 0x90, 0x13, 0x80, 0x00, 0x5b, 0xd1, 0x01, 0xb3, 0x42,\n\t0x90, 0xd6, 0x68, 0x8c, 0x1d, 0x11, 0x00, 0xfa, 0x38, 0x8f, 0x72,\n\t0xd0, 0x06, 0xff, 0x08, 0x19, 0x03, 0x20, 0x02, 0x25, 0x50, 0x02,\n\t0x22, 0x00, 0x8f, 0x85, 0xd8, 0x05, 0xcd, 0x22, 0x91, 0xe5, 0xc2,\n\t0x8c, 0x09, 0x01, 0x91, 0x26, 0xe9, 0x2c, 0x5f, 0xd0, 0x05, 0x69,\n\t0x46, 0x8d, 0x1e, 0x09, 0xfe, 0x92, 0x34, 0x35, 0x1a, 0x20, 0x61,\n\t0x85, 0x6d, 0x20, 0x06, 0x5f, 0xc0, 0x2f, 0x12, 0x89, 0x92, 0x35,\n\t0x68, 0x92, 0x5e, 0xf0, 0x05, 0x62, 0xd0, 0x06, 0x75, 0x48, 0x93,\n\t0x86, 0x61, 0x88, 0xe1, 0x87, 0x06, 0x38, 0xa9, 0x93, 0xce, 0xc2,\n\t0x93, 0x07, 0xa1, 0x92, 0xce, 0xf2, 0x93, 0x62, 0x80, 0x06, 0x52,\n\t0x08, 0x07, 0x43, 0x49, 0x94, 0x7c, 0x61, 0x94, 0xa0, 0x72, 0x94,\n\t0x62, 0x10, 0x06, 0x39, 0xc9, 0x94, 0x06, 0xd1, 0x01, 0x3f, 0x19,\n\t0x06, 0x51, 0x39, 0x95, 0xd9, 0x52, 0x95, 0x56, 0x09, 0x17, 0x58,\n\t0x09, 0x2c, 0xbe, 0xd2, 0x06, 0x68, 0xf0, 0x8a, 0x1c, 0x21, 0x02,\n\t0x52, 0x09, 0x2a, 0x3e, 0x43, 0x95, 0x2f, 0x79, 0x96, 0x68, 0x79,\n\t0x85, 0xca, 0xf7, 0x06, 0x6e, 0xb9, 0x10, 0x22, 0x90, 0x97, 0x74,\n\t0x69, 0x97, 0x57, 0x89, 0x97, 0xca, 0xb7, 0x97, 0x0a, 0xd1, 0x97,\n\t0x53, 0x68, 0x96, 0x80, 0xc9, 0x15, 0x69, 0x09, 0x7a, 0x84, 0x99,\n\t0x10, 0x86, 0x49, 0x87, 0x75, 0x99, 0x98, 0x8a, 0x29, 0x98, 0xb7,\n\t0xd7, 0x98, 0x08, 0xf1, 0x98, 0xf4, 0x87, 0x98, 0x92, 0xf9, 0x14,\n\t0x8b, 0x79, 0x31, 0x96, 0x79, 0x10, 0x98, 0xa9, 0x32, 0x9a, 0xb9,\n\t0x99, 0x44, 0xd1, 0x99, 0x04, 0xf3, 0x99, 0x06, 0x11, 0x9a, 0x22,\n\t0x37, 0x9a, 0xa4, 0x29, 0x14, 0xa6, 0x89, 0x2d, 0xa8, 0x59, 0x10,\n\t0xaa, 0x79, 0x71, 0xac, 0xd9, 0x9a, 0x36, 0xf1, 0x9a, 0xbf, 0x12,\n\t0x9b, 0x04, 0x31, 0x9b, 0xc0, 0x52, 0x9b, 0xb6, 0x49, 0x13, 0xb8,\n\t0xf9, 0x2a, 0xba, 0x39, 0x10, 0xbc, 0x59, 0x96, 0x91, 0xf9, 0x9b,\n\t0xae, 0x49, 0x99, 0x8c, 0x79, 0x8c, 0x7e, 0xe9, 0x9b, 0xc8, 0x19,\n\t0x12, 0x71, 0x78, 0x8a, 0x22, 0xa7, 0x85, 0x0a, 0xd1, 0x86, 0xb7,\n\t0x87, 0x88, 0x22, 0xf9, 0x9c, 0x7f, 0x6a, 0xe3, 0x04, 0xd2, 0x89,\n\t0x2d, 0x72, 0xb0, 0x05, 0xc7, 0x79, 0x10, 0x0e, 0xb0, 0x05, 0xdd,\n\t0xf9, 0x2b, 0x8f, 0x18, 0x90, 0xda, 0x29, 0x12, 0x7d, 0xe9, 0x78,\n\t0xa9, 0xf8, 0x11, 0x8c, 0x48, 0x7f, 0x7a, 0x99, 0x9e, 0x17, 0xc2,\n\t0x88, 0x3e, 0x23, 0x07, 0x5c, 0x10, 0x9e, 0x08, 0xe1, 0x00, 0x5c,\n\t0xd0, 0x9d, 0x70, 0x90, 0x8a, 0xe8, 0x29, 0x9f, 0xd0, 0xa9, 0x04,\n\t0xf3, 0x28, 0x29, 0xfe, 0xe8, 0x95, 0x29, 0xc9, 0x05, 0x03, 0xda,\n\t0x9f, 0x6f, 0xa0, 0x04, 0xd9, 0x09, 0xa0, 0x7f, 0x53, 0x02, 0x5c,\n\t0x90, 0x06, 0x6e, 0xc0, 0x05, 0x43, 0xd0, 0xa0, 0x1c, 0xc1, 0x00,\n\t0x43, 0xc0, 0x05, 0x6e, 0x90, 0x06, 0x5c, 0x50, 0x02, 0xff, 0x09,\n\t0x17, 0x01, 0x01, 0x00, 0x3b\n};\n\nstatic const int _img_sad_length = 3998;\nstatic const char _img_selfie[4459] = {\n\t0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x7f, 0x00, 0x7f, 0x00, 0xf7,\n\t0xf1, 0x00, 0x00, 0x00, 0x00, 0x8e, 0xb1, 0x93, 0x1f, 0x8f, 0xaf,\n\t0x57, 0x69, 0x6d, 0xf5, 0xc8, 0x4f, 0x03, 0x81, 0xc4, 0x51, 0xb4,\n\t0xc4, 0xb2, 0xcc, 0xb7, 0x12, 0x85, 0xb9, 0x61, 0x70, 0x72, 0xee,\n\t0xc4, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f,\n\t0xf3, 0xc7, 0x4f, 0x0a, 0x7a, 0xb4, 0x28, 0x8f, 0xc5, 0x3f, 0xb5,\n\t0xaf, 0xa0, 0xc6, 0xe5, 0xbe, 0xdb, 0xec, 0x48, 0x4f, 0x57, 0x17,\n\t0x61, 0x8a, 0x2b, 0xa1, 0xb1, 0xa3, 0xb2, 0xbb, 0x55, 0x5c, 0x64,\n\t0xb2, 0x98, 0x4d, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7,\n\t0x4f, 0xf3, 0xc7, 0x4f, 0xe2, 0xb9, 0x49, 0xc6, 0xa1, 0x3f, 0xf3,\n\t0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xec, 0xc1, 0x4d, 0xf3, 0xc7, 0x4f,\n\t0xd3, 0xb7, 0x55, 0x00, 0x81, 0xc6, 0x00, 0x7f, 0xc2, 0x0b, 0x76,\n\t0xac, 0x94, 0xb0, 0xc6, 0x40, 0xb9, 0xb3, 0x3b, 0xae, 0xa9, 0x9f,\n\t0xc6, 0xe5, 0xc8, 0xdb, 0xe5, 0x33, 0x93, 0x8e, 0x52, 0x59, 0x60,\n\t0x49, 0x4f, 0x56, 0xe1, 0xb8, 0x49, 0xc0, 0xa0, 0x42, 0x98, 0xb0,\n\t0x6e, 0x04, 0x6b, 0xa0, 0x2a, 0x5b, 0x78, 0x06, 0x7e, 0xbd, 0x40,\n\t0xb8, 0xb2, 0x06, 0x70, 0xa8, 0x3a, 0xa9, 0xa2, 0x3b, 0x94, 0x97,\n\t0x8e, 0x95, 0x9a, 0x2f, 0x35, 0x3d, 0x39, 0x3e, 0x47, 0x39, 0x3f,\n\t0x48, 0x35, 0x3c, 0x45, 0x4d, 0x53, 0x59, 0x33, 0x95, 0x8f, 0x39,\n\t0x41, 0x4a, 0x3a, 0x4c, 0x54, 0x3a, 0x55, 0x5b, 0x3b, 0x5c, 0x62,\n\t0x3b, 0x64, 0x69, 0x3c, 0x77, 0x79, 0x39, 0x6f, 0x75, 0x16, 0x63,\n\t0x8d, 0x57, 0x5e, 0x66, 0x45, 0x4c, 0x55, 0x4d, 0x53, 0x5c, 0x52,\n\t0x57, 0x5d, 0x4f, 0x56, 0x5e, 0x73, 0x6d, 0x56, 0x55, 0x5b, 0x64,\n\t0x55, 0x5c, 0x65, 0x5f, 0x66, 0x6f, 0x5e, 0x65, 0x6e, 0x5f, 0x66,\n\t0x6f, 0x60, 0x67, 0x70, 0x62, 0x69, 0x72, 0x6c, 0x71, 0x75, 0x76,\n\t0x7d, 0x84, 0x6a, 0x65, 0x4e, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f,\n\t0xf2, 0xc5, 0x4e, 0xf3, 0xc7, 0x4f, 0xe3, 0xba, 0x4a, 0x82, 0x76,\n\t0x4d, 0x40, 0xba, 0xb3, 0x65, 0x88, 0x74, 0x89, 0xbf, 0x8a, 0xf3,\n\t0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f,\n\t0xc2, 0x9f, 0x3f, 0xc4, 0xa0, 0x3e, 0xb4, 0x9b, 0x4c, 0x87, 0x92,\n\t0x64, 0x98, 0xae, 0x77, 0xad, 0xb3, 0x6f, 0xa0, 0x94, 0x56, 0xf3,\n\t0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc9, 0x56, 0xf3, 0xc7, 0x4f,\n\t0xc5, 0xa1, 0x40, 0xcc, 0xa7, 0x42, 0xd5, 0xba, 0x59, 0xd7, 0xb1,\n\t0x4a, 0xf3, 0xc7, 0x4f, 0xee, 0xc3, 0x4e, 0xe3, 0xbc, 0x50, 0xc7,\n\t0xba, 0x65, 0xd0, 0xbd, 0x60, 0xc2, 0x9f, 0x40, 0xab, 0xc1, 0x77,\n\t0xf2, 0xc6, 0x4f, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xf5, 0xc8,\n\t0x4f, 0xec, 0xc5, 0x53, 0xe4, 0xc4, 0x57, 0xf6, 0xc9, 0x50, 0xf3,\n\t0xc8, 0x52, 0xce, 0xc3, 0x64, 0xee, 0xce, 0x70, 0xdc, 0xc0, 0x5b,\n\t0xe4, 0xcb, 0x7c, 0x00, 0x81, 0xc6, 0x06, 0x86, 0xc4, 0xa0, 0xc6,\n\t0xe6, 0x05, 0x6b, 0xa1, 0x02, 0x80, 0xc4, 0x00, 0x81, 0xc6, 0x00,\n\t0x81, 0xc6, 0x00, 0x67, 0x9e, 0x00, 0x67, 0x9e, 0x02, 0x69, 0x9f,\n\t0x05, 0x6a, 0x9e, 0x0b, 0x6f, 0x9f, 0x31, 0x79, 0x8d, 0x01, 0x81,\n\t0xc6, 0x00, 0x67, 0xa0, 0x00, 0x6a, 0xa2, 0x00, 0x6e, 0xa9, 0x00,\n\t0x71, 0xad, 0x00, 0x75, 0xb4, 0x00, 0x7a, 0xbc, 0x00, 0x80, 0xc4,\n\t0x0a, 0x7b, 0xb7, 0x45, 0x7e, 0x82, 0x7b, 0x81, 0x88, 0x00, 0x7f,\n\t0xc4, 0x40, 0xba, 0xb3, 0xa0, 0xc6, 0xe6, 0x40, 0xba, 0xb3, 0x40,\n\t0xba, 0xb3, 0x3d, 0x86, 0x86, 0x33, 0x95, 0x8f, 0x34, 0x96, 0x8f,\n\t0x34, 0x97, 0x91, 0x3c, 0x99, 0x96, 0x29, 0x8c, 0x92, 0x3b, 0xa2,\n\t0x9e, 0x40, 0xba, 0xb3, 0x18, 0x88, 0xba, 0x1c, 0x99, 0xbe, 0x19,\n\t0x87, 0xa7, 0x39, 0x92, 0xaa, 0x29, 0x8f, 0xb0, 0x3d, 0xaa, 0xa5,\n\t0x3e, 0xb1, 0xaa, 0x40, 0xba, 0xb3, 0x3c, 0xb6, 0xb4, 0x3e, 0xba,\n\t0xb3, 0x36, 0xb1, 0xb6, 0x35, 0xb0, 0xb5, 0x31, 0x99, 0xd0, 0x7f,\n\t0x85, 0x8c, 0x61, 0x9d, 0x97, 0x73, 0xaf, 0x92, 0x4c, 0x97, 0xa1,\n\t0x40, 0xb4, 0xae, 0x4a, 0xbb, 0xad, 0x40, 0xba, 0xb3, 0x4a, 0xbb,\n\t0xb5, 0x57, 0xb9, 0xb4, 0x54, 0xb8, 0xa6, 0x76, 0xb7, 0xb4, 0x66,\n\t0xb8, 0xb4, 0x62, 0x9d, 0xa8, 0x57, 0xc2, 0xbc, 0x00, 0x81, 0xc6,\n\t0x00, 0x82, 0xc8, 0x0b, 0x87, 0xc4, 0x14, 0x8c, 0xc9, 0x13, 0x91,\n\t0xc1, 0x30, 0x99, 0xd1, 0x3d, 0xa0, 0xd3, 0x52, 0xaa, 0xd8, 0x69,\n\t0xb5, 0xdd, 0x76, 0xbb, 0xe0, 0x68, 0xc8, 0xc3, 0x77, 0xce, 0xc9,\n\t0xf5, 0xfb, 0xfb, 0x81, 0x87, 0x8e, 0x89, 0x8e, 0x95, 0x89, 0xa9,\n\t0x83, 0x91, 0xb3, 0xb4, 0xb9, 0xb4, 0xb7, 0xad, 0xb9, 0xba, 0xaa,\n\t0xb9, 0xc6, 0xd0, 0xb2, 0xb6, 0xe9, 0xb0, 0xb7, 0xf1, 0xb0, 0xb7,\n\t0x93, 0xc1, 0x85, 0xda, 0xd0, 0xa2, 0xa2, 0xc5, 0xe1, 0x8f, 0xd5,\n\t0xd3, 0xae, 0xd3, 0xd1, 0xac, 0xe1, 0xde, 0x9a, 0xc9, 0xe7, 0x8a,\n\t0xc5, 0xe4, 0xa0, 0xc6, 0xe7, 0xa2, 0xc9, 0xe8, 0xac, 0xd6, 0xec,\n\t0xb8, 0xe5, 0xe3, 0xcc, 0xcc, 0xcc, 0xc8, 0xca, 0xcb, 0xd6, 0xd7,\n\t0xd6, 0xc8, 0xe4, 0xf3, 0xd3, 0xed, 0xee, 0xe9, 0xf5, 0xf8, 0xff,\n\t0xff, 0xff, 0xf5, 0xfa, 0xf9, 0xf1, 0xf0, 0xeb, 0xf4, 0xf1, 0xe5,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x21, 0xf9, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x21, 0xff, 0x0b,\n\t0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x6b,\n\t0x0d, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x3d, 0x30, 0x2e, 0x34, 0x35,\n\t0x34, 0x35, 0x35, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00,\n\t0x7f, 0x00, 0x00, 0x08, 0xfe, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0,\n\t0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x5c, 0xc8, 0xb0, 0xa1, 0xc3,\n\t0x87, 0x10, 0x23, 0x4a, 0x9c, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18,\n\t0x33, 0x6a, 0xdc, 0xc8, 0xb1, 0xa3, 0xc7, 0x8f, 0x20, 0x43, 0x8a,\n\t0x54, 0x18, 0x80, 0x42, 0x82, 0x91, 0x28, 0x53, 0x42, 0x54, 0x54,\n\t0x2e, 0x9c, 0xa2, 0x01, 0x2a, 0x63, 0xca, 0x24, 0x38, 0x20, 0x1c,\n\t0xba, 0x9b, 0xa1, 0x4e, 0xce, 0xdc, 0x89, 0x72, 0x40, 0x35, 0x74,\n\t0xe7, 0xce, 0xa1, 0xdb, 0x46, 0x81, 0xa7, 0xd1, 0x87, 0x03, 0x10,\n\t0x28, 0x85, 0xc9, 0x90, 0xc2, 0x36, 0xa0, 0x42, 0xc3, 0x61, 0x38,\n\t0x4a, 0xf5, 0x60, 0x81, 0x13, 0x88, 0x1a, 0x75, 0xea, 0xf4, 0x68,\n\t0x11, 0xa2, 0x12, 0x4c, 0x13, 0x26, 0x08, 0x15, 0x54, 0x68, 0x39,\n\t0x45, 0x01, 0xaa, 0x4e, 0x1c, 0x10, 0x21, 0x85, 0x8b, 0x1c, 0x39,\n\t0xbe, 0x7c, 0x81, 0x9b, 0x82, 0x42, 0x84, 0xb0, 0x0b, 0x11, 0xd4,\n\t0xe8, 0x94, 0xac, 0xaf, 0xdf, 0xbe, 0xc8, 0x1a, 0x9d, 0xc0, 0x6b,\n\t0x70, 0x00, 0x4b, 0xa0, 0xe8, 0xca, 0x15, 0x55, 0xeb, 0x70, 0x00,\n\t0x85, 0x1c, 0xa3, 0x64, 0x01, 0x9b, 0x4c, 0x99, 0x72, 0x2d, 0x56,\n\t0xa3, 0x72, 0x50, 0x20, 0x5c, 0xb0, 0x44, 0x23, 0xc0, 0xc8, 0x42,\n\t0x8b, 0x0e, 0x9d, 0x0c, 0x19, 0x22, 0x08, 0x0b, 0x31, 0xd8, 0xbc,\n\t0x39, 0x95, 0xf1, 0xc2, 0x01, 0x29, 0x46, 0xd1, 0xaa, 0x4c, 0xbb,\n\t0x36, 0xb0, 0x5a, 0x99, 0x23, 0x1c, 0x3c, 0x51, 0xa9, 0xf4, 0xe8,\n\t0xdf, 0xa2, 0x93, 0x35, 0x5a, 0x9c, 0x90, 0x82, 0xa8, 0x70, 0xa1,\n\t0x38, 0xbb, 0x26, 0x48, 0x61, 0x54, 0x2d, 0xdb, 0xd0, 0x6b, 0xb3,\n\t0xd2, 0x9c, 0x56, 0x60, 0x09, 0x4e, 0xbe, 0x81, 0x6b, 0x17, 0x8e,\n\t0x5a, 0xe1, 0x80, 0x04, 0xd5, 0x97, 0xfe, 0x17, 0xce, 0x21, 0x39,\n\t0xba, 0x79, 0xda, 0xb4, 0x42, 0x15, 0x85, 0xc0, 0x77, 0x7b, 0xf6,\n\t0xdf, 0xc9, 0x10, 0x29, 0x6f, 0x9c, 0x80, 0x02, 0x06, 0x17, 0x2e,\n\t0x74, 0xce, 0x8c, 0x30, 0xea, 0xbc, 0xff, 0xda, 0xb2, 0xe4, 0x80,\n\t0xc8, 0x7b, 0xa2, 0xb5, 0x02, 0x4b, 0x2f, 0xb0, 0xb4, 0xa2, 0x1d,\n\t0x32, 0x27, 0x3c, 0x14, 0x80, 0x63, 0x14, 0xb8, 0xf0, 0x42, 0x12,\n\t0x9f, 0xe8, 0x52, 0x4d, 0x35, 0xd6, 0xbc, 0xb0, 0x53, 0x73, 0xff,\n\t0x75, 0x48, 0x5b, 0x2d, 0xae, 0xfc, 0xd6, 0x0a, 0x2f, 0x79, 0x00,\n\t0x02, 0x48, 0x20, 0x78, 0xec, 0xa2, 0x0c, 0x7c, 0x8d, 0xcc, 0x37,\n\t0xd0, 0x00, 0x18, 0x4c, 0xd8, 0xc4, 0x14, 0x52, 0x54, 0x51, 0x85,\n\t0x15, 0xba, 0xe4, 0x68, 0xe1, 0x15, 0x2e, 0x7e, 0x94, 0x02, 0x2b,\n\t0x1e, 0x06, 0x59, 0xd9, 0x2d, 0xcc, 0x84, 0xd6, 0xca, 0x1a, 0x7f,\n\t0xfc, 0xe1, 0xc7, 0x92, 0x7f, 0x00, 0x72, 0xcd, 0x8a, 0xbf, 0x95,\n\t0xb0, 0x90, 0x0b, 0x50, 0xd8, 0x48, 0x85, 0x14, 0x58, 0x4a, 0x61,\n\t0x85, 0x35, 0xd6, 0x54, 0x63, 0xe1, 0x27, 0xfa, 0xa1, 0xf4, 0xa3,\n\t0x90, 0x64, 0x4e, 0x76, 0x8b, 0x2b, 0xca, 0xa8, 0xa1, 0xe4, 0x92,\n\t0x6c, 0x36, 0xb9, 0x0b, 0x7c, 0x35, 0x4c, 0xf9, 0x44, 0x96, 0x74,\n\t0x5a, 0x33, 0xcf, 0x3c, 0xe3, 0x78, 0xa9, 0x0b, 0x71, 0x23, 0x51,\n\t0x40, 0x4a, 0x99, 0x80, 0xda, 0xe2, 0x0b, 0x21, 0x6b, 0xb2, 0xc9,\n\t0x24, 0x1e, 0x0a, 0x06, 0xb7, 0x48, 0x8f, 0x18, 0x30, 0x41, 0x27,\n\t0x96, 0x55, 0xac, 0x13, 0x4f, 0x3c, 0xf2, 0x60, 0x63, 0xa1, 0x0b,\n\t0x29, 0xf1, 0x07, 0xe8, 0xa6, 0xc0, 0xf0, 0x42, 0xa8, 0xa1, 0x6c,\n\t0x06, 0x02, 0x4b, 0x76, 0xc9, 0x3c, 0x82, 0x80, 0x42, 0x14, 0x2c,\n\t0xf1, 0x68, 0x8d, 0xed, 0x4c, 0x5a, 0x69, 0x8e, 0xfe, 0x1a, 0x8e,\n\t0x34, 0x40, 0x28, 0x9c, 0x6e, 0x6a, 0xcb, 0x30, 0x7b, 0x80, 0xba,\n\t0x24, 0x20, 0xbd, 0x90, 0xda, 0xc9, 0xa9, 0x62, 0x35, 0xb1, 0xaa,\n\t0x14, 0xd6, 0xb4, 0x33, 0x4f, 0x36, 0x56, 0x24, 0x9b, 0x44, 0x78,\n\t0x20, 0xe5, 0x50, 0x2b, 0xa7, 0xb7, 0xe6, 0x0a, 0x2a, 0x20, 0xa3,\n\t0x06, 0xf7, 0xab, 0x77, 0x49, 0x40, 0x31, 0xac, 0x15, 0x9f, 0x54,\n\t0x91, 0x65, 0x13, 0x3d, 0x36, 0x36, 0xc0, 0xb8, 0x06, 0xa5, 0x30,\n\t0xdb, 0xb3, 0xb6, 0xfe, 0x22, 0x2d, 0x93, 0x79, 0x24, 0x4a, 0x5a,\n\t0x8b, 0x0b, 0xbd, 0xa0, 0xed, 0xb0, 0x8f, 0x4e, 0x11, 0x66, 0x44,\n\t0x10, 0xd4, 0x90, 0xd5, 0x23, 0x5d, 0x21, 0x72, 0x42, 0x77, 0x08,\n\t0xf4, 0x87, 0x2e, 0xb4, 0xea, 0xb6, 0xc9, 0x0b, 0x7c, 0x88, 0x30,\n\t0xe4, 0xc2, 0x9c, 0xf4, 0x3e, 0xca, 0xe7, 0x43, 0x14, 0x20, 0xd2,\n\t0xdb, 0x5f, 0x7e, 0x75, 0x52, 0x03, 0x04, 0xce, 0x0e, 0x5c, 0xab,\n\t0x2d, 0x05, 0xff, 0xb1, 0x86, 0xbb, 0xa4, 0x35, 0xb8, 0x10, 0x05,\n\t0x8e, 0x36, 0x9c, 0x65, 0x15, 0x98, 0x42, 0x34, 0x40, 0x0d, 0x13,\n\t0x2f, 0xd8, 0x57, 0x27, 0xb1, 0xd8, 0xa2, 0xf1, 0xc6, 0xea, 0xaa,\n\t0x01, 0x32, 0x32, 0xc9, 0x74, 0x52, 0x00, 0x4d, 0x09, 0x88, 0x20,\n\t0xc3, 0x02, 0x03, 0x51, 0xa0, 0x84, 0xc9, 0x27, 0xc7, 0xda, 0xd8,\n\t0x80, 0x04, 0xba, 0xe7, 0xca, 0x73, 0x33, 0xdb, 0x0a, 0x4c, 0x88,\n\t0x70, 0x0e, 0xb4, 0x40, 0x16, 0x6f, 0xd4, 0x21, 0x88, 0x20, 0x6f,\n\t0x30, 0x35, 0x80, 0xb0, 0x44, 0xd7, 0xb8, 0xac, 0x43, 0x01, 0x0c,\n\t0xb8, 0xe0, 0xd8, 0xae, 0xc8, 0xdc, 0xf4, 0xa6, 0x44, 0x8e, 0x26,\n\t0x1c, 0xb0, 0x03, 0x90, 0x71, 0xb5, 0x92, 0x7f, 0xf4, 0xa1, 0xd3,\n\t0x00, 0x3f, 0xcc, 0xbb, 0xea, 0x95, 0xdf, 0x86, 0x3b, 0xd0, 0xfe,\n\t0x09, 0xa0, 0xb8, 0x9c, 0xb4, 0x68, 0xae, 0x9c, 0xcd, 0xe9, 0x2d,\n\t0x50, 0x26, 0x53, 0x89, 0x94, 0x02, 0x2d, 0x60, 0xb5, 0x1f, 0x57,\n\t0x0b, 0x42, 0x46, 0x58, 0x2f, 0x30, 0x4c, 0x05, 0xde, 0x52, 0x40,\n\t0xf1, 0xc4, 0x12, 0x4a, 0x28, 0x11, 0x44, 0x10, 0x0f, 0x23, 0x04,\n\t0xc1, 0x23, 0x7f, 0xc7, 0x02, 0x4b, 0x82, 0x0b, 0x2a, 0x73, 0x8b,\n\t0xe0, 0x68, 0x2b, 0x93, 0x0c, 0x27, 0x22, 0x0b, 0x14, 0x80, 0x18,\n\t0x7e, 0xf0, 0x11, 0x87, 0x18, 0x18, 0x28, 0x40, 0x90, 0x0b, 0x25,\n\t0x5f, 0x8e, 0xf9, 0xe6, 0x9b, 0xf7, 0xd0, 0xc3, 0xe6, 0x2e, 0xe8,\n\t0x3d, 0x83, 0x26, 0xc0, 0xc1, 0xa2, 0xc6, 0x1c, 0x27, 0xce, 0x71,\n\t0x4d, 0x2c, 0xda, 0x05, 0x8e, 0x3a, 0xa0, 0xae, 0x3c, 0x82, 0x38,\n\t0x4d, 0x1d, 0x74, 0x00, 0xb4, 0x41, 0x14, 0xf0, 0xc0, 0x7b, 0x10,\n\t0xbe, 0x6f, 0xcf, 0x7b, 0x0f, 0x5e, 0x90, 0x71, 0x3d, 0x42, 0x08,\n\t0x2c, 0x42, 0xfc, 0x68, 0xbd, 0xcc, 0x91, 0x24, 0x93, 0x7f, 0xe0,\n\t0x01, 0x0b, 0x70, 0xca, 0x30, 0xfd, 0xbc, 0x90, 0xb6, 0xd0, 0x20,\n\t0x11, 0x05, 0x3b, 0xf8, 0xe0, 0xfd, 0xf7, 0xdb, 0x3b, 0x21, 0x48,\n\t0x19, 0xb6, 0x43, 0x08, 0x05, 0x20, 0x71, 0xbe, 0xd0, 0xc4, 0x42,\n\t0x7d, 0xba, 0xf2, 0xd8, 0xcd, 0x90, 0x71, 0xba, 0xf9, 0x91, 0x89,\n\t0x14, 0x9d, 0x7b, 0x4d, 0xfe, 0x7a, 0xf7, 0xbb, 0xcd, 0x65, 0x6e,\n\t0x09, 0x4f, 0xd0, 0x96, 0x15, 0xee, 0xf0, 0x87, 0x2c, 0x24, 0x64,\n\t0x06, 0x97, 0x28, 0x20, 0x32, 0xae, 0x51, 0x28, 0x5d, 0xbd, 0xe9,\n\t0x37, 0x0d, 0x74, 0xa0, 0x90, 0x46, 0x11, 0x2e, 0x0a, 0x80, 0x45,\n\t0x20, 0x03, 0x98, 0xe0, 0x05, 0x33, 0x48, 0xa7, 0xc9, 0x69, 0x49,\n\t0x7d, 0x6f, 0x48, 0x48, 0x0d, 0x2e, 0x91, 0x89, 0x02, 0xe1, 0xa1,\n\t0x84, 0xfe, 0x86, 0xfa, 0x83, 0x1a, 0x80, 0x93, 0x42, 0x15, 0x06,\n\t0x29, 0x07, 0x09, 0x59, 0x19, 0x27, 0x4c, 0xc3, 0x94, 0x17, 0x2c,\n\t0xc1, 0x6e, 0x36, 0xbc, 0x1b, 0x1d, 0xe2, 0x96, 0x90, 0x1b, 0x5c,\n\t0x02, 0x13, 0x7d, 0x43, 0x46, 0x2b, 0x10, 0xa8, 0x2b, 0x3f, 0x78,\n\t0x0c, 0x4a, 0xa1, 0x31, 0x9d, 0x11, 0xc9, 0x24, 0x8b, 0x08, 0x0e,\n\t0x00, 0x11, 0x38, 0x5b, 0x5d, 0x77, 0x70, 0xd7, 0xb5, 0xca, 0xa1,\n\t0xe1, 0x0f, 0x75, 0xa8, 0xe2, 0x25, 0x2c, 0xb1, 0x09, 0x23, 0xe5,\n\t0x01, 0x88, 0x6d, 0x5a, 0x03, 0x18, 0x91, 0xc1, 0x0c, 0xf9, 0x8d,\n\t0x11, 0x3a, 0xa9, 0x28, 0x45, 0x2a, 0x2a, 0xc3, 0xc2, 0x82, 0x0c,\n\t0x60, 0x11, 0xbe, 0x59, 0x9b, 0x40, 0x52, 0x25, 0x05, 0xca, 0x61,\n\t0xc9, 0x72, 0xba, 0x63, 0x82, 0x13, 0xe8, 0xe0, 0xb8, 0x0f, 0x5e,\n\t0x02, 0x12, 0x3d, 0x0c, 0x8d, 0x9a, 0xba, 0xe8, 0xc5, 0x83, 0x8d,\n\t0xc6, 0x79, 0x7f, 0x04, 0xa4, 0x10, 0x78, 0x20, 0x84, 0x41, 0x52,\n\t0x26, 0x65, 0x03, 0xa9, 0x41, 0x22, 0x87, 0x33, 0x90, 0x04, 0x28,\n\t0x81, 0x09, 0x50, 0x88, 0xe5, 0xe5, 0x98, 0x20, 0x49, 0x27, 0xb0,\n\t0x81, 0x0d, 0x72, 0xb8, 0xc3, 0x92, 0x3e, 0x90, 0x90, 0x13, 0x5c,\n\t0xf2, 0x12, 0x75, 0x44, 0x46, 0x2f, 0x00, 0x81, 0xc7, 0x3f, 0x18,\n\t0x82, 0x79, 0xa3, 0x29, 0x62, 0x28, 0x69, 0x63, 0x04, 0xed, 0xf1,\n\t0xc0, 0x08, 0x95, 0x21, 0x85, 0x6e, 0x5c, 0x87, 0xc8, 0xbe, 0x2c,\n\t0xa2, 0x3b, 0xae, 0x7b, 0x41, 0xe6, 0x92, 0xf0, 0x02, 0x5b, 0xa2,\n\t0x81, 0x0e, 0x77, 0xe0, 0x83, 0x17, 0x93, 0xf4, 0x07, 0x3a, 0x8c,\n\t0x0f, 0x7b, 0x92, 0x80, 0x04, 0x24, 0xb0, 0x88, 0x0c, 0x65, 0x5c,\n\t0xc3, 0x8b, 0x41, 0x04, 0xc4, 0x09, 0x45, 0xd3, 0xc7, 0x65, 0x42,\n\t0xa7, 0x14, 0xbf, 0xfe, 0xe3, 0x41, 0x11, 0x68, 0x83, 0xc4, 0x81,\n\t0x94, 0xa0, 0x13, 0xa0, 0x40, 0x04, 0xb0, 0x68, 0x62, 0x92, 0x01,\n\t0x28, 0xe0, 0x0d, 0x82, 0x20, 0x27, 0xa8, 0x04, 0x21, 0x06, 0x92,\n\t0x20, 0xe1, 0x92, 0x98, 0xec, 0x9b, 0x32, 0x78, 0x61, 0x08, 0x85,\n\t0xe6, 0x61, 0x9e, 0xa1, 0x01, 0x05, 0x28, 0xed, 0x49, 0x1b, 0x59,\n\t0x8c, 0x32, 0x08, 0xd0, 0xac, 0x0c, 0x2d, 0xf8, 0x04, 0x81, 0xcd,\n\t0x2c, 0x04, 0x04, 0x9c, 0x64, 0x92, 0x08, 0x16, 0x52, 0x02, 0x75,\n\t0xaa, 0x33, 0x13, 0x59, 0x8c, 0xc5, 0x2e, 0xae, 0x71, 0x8d, 0x5d,\n\t0xdc, 0x0c, 0x14, 0xad, 0xf0, 0x23, 0x47, 0x2b, 0x93, 0x0a, 0x23,\n\t0x94, 0xc2, 0x17, 0xb5, 0xf9, 0x42, 0x44, 0xda, 0x26, 0x08, 0x4e,\n\t0xfe, 0x21, 0x0e, 0xe7, 0x3c, 0x48, 0x00, 0xac, 0xe8, 0x52, 0x4c,\n\t0xd4, 0x11, 0x34, 0x04, 0xda, 0x44, 0x26, 0x70, 0x31, 0x46, 0x5f,\n\t0xcc, 0x82, 0x53, 0x23, 0x85, 0x88, 0x07, 0xfa, 0x90, 0x52, 0x86,\n\t0x36, 0x04, 0x02, 0x8b, 0x80, 0x28, 0x24, 0x78, 0xb8, 0x89, 0x2c,\n\t0x8e, 0x06, 0x14, 0x9a, 0xb8, 0x44, 0x2c, 0xc6, 0x98, 0x0a, 0x22,\n\t0x0c, 0xa1, 0x14, 0x9c, 0x12, 0x6a, 0x63, 0xdc, 0x96, 0xd2, 0x3e,\n\t0x74, 0xc0, 0x21, 0x14, 0x78, 0x84, 0x58, 0xc7, 0x8a, 0x09, 0x4d,\n\t0x68, 0x62, 0x13, 0x9b, 0xf0, 0x2b, 0x26, 0x20, 0xf1, 0x0a, 0x9d,\n\t0x0e, 0xcc, 0x17, 0xb2, 0x00, 0xea, 0x64, 0x7c, 0x51, 0x04, 0x1e,\n\t0x90, 0xb2, 0x3c, 0xe7, 0xb1, 0x85, 0x64, 0x27, 0x63, 0xb6, 0xac,\n\t0x36, 0x44, 0x04, 0x29, 0x65, 0x5c, 0x19, 0xf4, 0x16, 0xb4, 0xb0,\n\t0x46, 0xc2, 0xa5, 0xa0, 0x75, 0x69, 0x24, 0x0a, 0x2b, 0xb8, 0x59,\n\t0x1c, 0x41, 0x08, 0x45, 0x28, 0x8f, 0x2f, 0x88, 0xa0, 0xbd, 0x20,\n\t0x98, 0xd2, 0x36, 0x92, 0x95, 0xfe, 0x99, 0x30, 0x88, 0x81, 0x8d,\n\t0x6c, 0x64, 0x83, 0x18, 0x94, 0xe9, 0xe7, 0x42, 0x16, 0x80, 0xd0,\n\t0x94, 0xfe, 0xe1, 0xae, 0x2a, 0x9b, 0x81, 0x5e, 0xf7, 0xea, 0x52,\n\t0xb5, 0x1a, 0x16, 0x50, 0xb2, 0x80, 0x2c, 0x30, 0x4a, 0xc1, 0xbd,\n\t0x67, 0x4e, 0x66, 0x16, 0x43, 0xa8, 0xe0, 0x6b, 0x69, 0x63, 0x8b,\n\t0x60, 0xd0, 0x36, 0x1b, 0xdc, 0xe8, 0x86, 0x37, 0xb6, 0xcb, 0x0d,\n\t0x61, 0xc8, 0xec, 0x14, 0x03, 0x45, 0xc8, 0xeb, 0x8a, 0xca, 0x49,\n\t0xac, 0x05, 0x10, 0x5f, 0x33, 0x40, 0x42, 0x3a, 0xd5, 0x19, 0x89,\n\t0x4b, 0xbc, 0x82, 0xaa, 0xe7, 0x41, 0xec, 0x7f, 0x4a, 0x21, 0x04,\n\t0x21, 0xc0, 0x75, 0x32, 0xf8, 0xe4, 0x9e, 0x7d, 0x7b, 0xda, 0x3b,\n\t0x21, 0xac, 0x02, 0xb6, 0xc2, 0xc8, 0x86, 0x76, 0xb7, 0x4b, 0x60,\n\t0x6f, 0x74, 0xc3, 0xbb, 0x93, 0x49, 0x41, 0x6a, 0x32, 0xeb, 0x45,\n\t0x19, 0x58, 0x64, 0x00, 0x10, 0x38, 0x01, 0x25, 0x54, 0x11, 0x0b,\n\t0x5c, 0x1c, 0x97, 0x36, 0xab, 0x28, 0x82, 0x10, 0x8c, 0xa0, 0x58,\n\t0xe8, 0xc8, 0x62, 0x08, 0x8e, 0x15, 0x42, 0x79, 0x8c, 0x50, 0xc1,\n\t0x0a, 0xf2, 0x4e, 0x9f, 0x1d, 0xae, 0x8c, 0x2d, 0x88, 0x51, 0xe0,\n\t0x02, 0x77, 0x43, 0x1b, 0x95, 0x09, 0x05, 0xb3, 0x0a, 0xd2, 0x81,\n\t0x3a, 0xe0, 0x91, 0x4d, 0xe6, 0xc5, 0x48, 0x04, 0x4e, 0x61, 0x0a,\n\t0xe5, 0x9a, 0xa7, 0x99, 0xbf, 0x9b, 0x6e, 0x6d, 0xa0, 0x5b, 0xc1,\n\t0x22, 0x04, 0x52, 0x08, 0x26, 0xde, 0x5e, 0x0f, 0x4a, 0x09, 0x9d,\n\t0x15, 0x0f, 0xd8, 0xc0, 0xdc, 0xc8, 0x06, 0x36, 0x8a, 0x11, 0x0c,\n\t0xb3, 0x01, 0x83, 0x15, 0xd3, 0x34, 0x48, 0x07, 0x28, 0xc9, 0xe0,\n\t0x95, 0x8a, 0x77, 0x00, 0x33, 0x16, 0xa0, 0x29, 0x50, 0x71, 0xd5,\n\t0xff, 0x1c, 0xc1, 0x99, 0x21, 0x8d, 0x0e, 0xfe, 0x89, 0x7b, 0xc7,\n\t0xe6, 0xe6, 0xfa, 0x8e, 0x07, 0x4b, 0x16, 0x32, 0x6d, 0x82, 0x81,\n\t0x8d, 0x28, 0x63, 0x83, 0x18, 0xc2, 0x00, 0xc6, 0x64, 0x69, 0xa3,\n\t0x60, 0x83, 0x78, 0x80, 0xcb, 0x5d, 0x7d, 0xdc, 0x41, 0xa6, 0x46,\n\t0x86, 0x37, 0x90, 0x21, 0x0b, 0x49, 0x2d, 0x17, 0x2a, 0xc8, 0xdc,\n\t0x21, 0xe6, 0xf6, 0xc0, 0xb9, 0xe6, 0xf9, 0x70, 0x6b, 0xf9, 0x77,\n\t0x84, 0x23, 0x0c, 0x61, 0x08, 0x44, 0x30, 0x82, 0x8f, 0x6b, 0x23,\n\t0xb3, 0x60, 0xe8, 0x79, 0xcf, 0xb6, 0x91, 0xeb, 0x8b, 0xb2, 0xb0,\n\t0x38, 0xdf, 0xd6, 0x41, 0x03, 0x07, 0xd1, 0x00, 0x42, 0x1b, 0x87,\n\t0x35, 0xe0, 0x22, 0xc4, 0x05, 0x8b, 0x2e, 0xb3, 0x7f, 0x66, 0xa1,\n\t0xe1, 0xd4, 0xfa, 0x67, 0x15, 0x44, 0x08, 0x02, 0x9c, 0x1d, 0x0b,\n\t0x52, 0xa0, 0xce, 0x62, 0x16, 0x29, 0x8e, 0xec, 0x7f, 0x0a, 0x29,\n\t0x10, 0x0d, 0x90, 0x01, 0x9e, 0x99, 0xed, 0xe0, 0x41, 0x12, 0xd0,\n\t0x5b, 0x43, 0x09, 0x02, 0xa9, 0x09, 0xa1, 0x41, 0xac, 0x3d, 0x84,\n\t0xd8, 0x60, 0x47, 0x67, 0x16, 0xa5, 0x28, 0x02, 0xa6, 0x8f, 0x20,\n\t0xe7, 0xa6, 0xd1, 0x42, 0x37, 0x1a, 0x10, 0x43, 0xa9, 0x33, 0xcb,\n\t0x50, 0xe5, 0x74, 0xe1, 0xc6, 0x82, 0xf0, 0x20, 0x42, 0x72, 0x30,\n\t0xed, 0xf9, 0xf9, 0xc2, 0xda, 0x82, 0xb3, 0xc5, 0x0f, 0xc4, 0x9d,\n\t0x50, 0x06, 0x33, 0xee, 0x0d, 0x89, 0x16, 0x48, 0x1c, 0xd0, 0x9d,\n\t0xb5, 0x75, 0xb7, 0x9b, 0x7e, 0xb1, 0xb5, 0xf2, 0x4e, 0x29, 0x63,\n\t0x8b, 0x6f, 0xd4, 0xdb, 0xde, 0x82, 0xa8, 0x83, 0xab, 0x0d, 0xc2,\n\t0xd5, 0x2e, 0x96, 0x33, 0xdf, 0x01, 0x40, 0xc2, 0xbf, 0xfd, 0x13,\n\t0x5b, 0x60, 0x04, 0xa3, 0x18, 0xc4, 0x20, 0x46, 0x95, 0x07, 0xae,\n\t0x62, 0x5e, 0x00, 0xc2, 0xde, 0x8c, 0xab, 0x03, 0x08, 0xfe, 0x14,\n\t0x62, 0x63, 0x87, 0xd7, 0x21, 0xdf, 0x03, 0x90, 0x38, 0xa3, 0x29,\n\t0x5e, 0x5d, 0x61, 0x60, 0x43, 0x1b, 0xd9, 0x35, 0x30, 0x8c, 0x39,\n\t0x4e, 0xf0, 0x61, 0x7c, 0x9c, 0xc1, 0x09, 0x1f, 0xb9, 0x42, 0xf6,\n\t0xcd, 0xc9, 0x3e, 0xa0, 0xba, 0x30, 0x40, 0x40, 0x45, 0x8f, 0x29,\n\t0x4e, 0xe7, 0x98, 0xb7, 0x98, 0x1b, 0x1b, 0xe7, 0xb8, 0x64, 0x87,\n\t0x11, 0x88, 0x1b, 0xe3, 0x58, 0xe4, 0x0c, 0x69, 0x76, 0x17, 0x75,\n\t0x6e, 0xc8, 0xa0, 0x0f, 0x3d, 0xb2, 0xd8, 0x78, 0x72, 0x8b, 0xb3,\n\t0xe1, 0x69, 0x8e, 0xc6, 0x36, 0x18, 0xc7, 0x98, 0xc6, 0x38, 0x0a,\n\t0x41, 0xee, 0x37, 0xfc, 0x7c, 0x21, 0x62, 0x20, 0xaf, 0xae, 0xd2,\n\t0xad, 0x54, 0x89, 0x5f, 0xdd, 0x3c, 0xb6, 0xc0, 0x46, 0x8b, 0xa1,\n\t0xac, 0x0d, 0x04, 0xff, 0xb1, 0xe2, 0x61, 0x17, 0x87, 0x3b, 0xe0,\n\t0x41, 0x29, 0xb2, 0x77, 0xb1, 0xa8, 0x62, 0xc8, 0xf7, 0x41, 0xb2,\n\t0x10, 0xe8, 0x30, 0x47, 0x5c, 0xe8, 0xff, 0x8d, 0x6c, 0x31, 0xb8,\n\t0x41, 0xf7, 0x29, 0x7b, 0x5a, 0xe0, 0xcf, 0xc3, 0xfb, 0x34, 0xf4,\n\t0x0e, 0x0f, 0x79, 0x4c, 0xca, 0x55, 0x7e, 0x0f, 0xe2, 0xb3, 0x45,\n\t0x10, 0xe6, 0x84, 0x74, 0xa0, 0xe1, 0x09, 0x3c, 0xf9, 0x41, 0xdc,\n\t0xde, 0x6d, 0xdb, 0xcc, 0x96, 0xca, 0x9f, 0x86, 0xfc, 0xd9, 0x24,\n\t0x4f, 0x79, 0xcb, 0x5f, 0xfe, 0xf5, 0xf2, 0xc8, 0xbc, 0x17, 0x13,\n\t0x8e, 0xe8, 0x88, 0x2c, 0x60, 0x8a, 0x46, 0xe5, 0xa5, 0x41, 0xd8,\n\t0x3d, 0x66, 0x59, 0xc3, 0xbd, 0xe2, 0xf3, 0xc3, 0xbb, 0x34, 0xc4,\n\t0xa1, 0x8e, 0xca, 0xbf, 0xfe, 0xf8, 0x97, 0x8f, 0xfd, 0xec, 0x05,\n\t0x41, 0x87, 0x2e, 0xdc, 0x0b, 0x6c, 0x69, 0x2f, 0xaf, 0xa0, 0x0b,\n\t0x22, 0xed, 0xde, 0xd3, 0x3c, 0xf5, 0xc0, 0x38, 0xc6, 0xf0, 0x8b,\n\t0xfe, 0xef, 0x7a, 0xe4, 0x7b, 0xbf, 0xef, 0x71, 0x7b, 0xc3, 0xcf,\n\t0x2c, 0x92, 0x05, 0xb5, 0xeb, 0xaa, 0x0f, 0x1e, 0x30, 0x08, 0xac,\n\t0x4d, 0xf1, 0xf6, 0x65, 0x0a, 0x9f, 0xf8, 0xc6, 0xff, 0xbe, 0xfc,\n\t0x27, 0x35, 0x8f, 0x37, 0x64, 0x41, 0x03, 0x9c, 0x5d, 0x88, 0x06,\n\t0x4a, 0xfe, 0xf7, 0xcd, 0x16, 0x04, 0x03, 0x42, 0x67, 0x0a, 0x89,\n\t0x37, 0x46, 0x15, 0x17, 0x0c, 0xdb, 0xf7, 0x0e, 0xdd, 0x37, 0x7f,\n\t0x0a, 0xb8, 0x0d, 0xf9, 0xd7, 0x10, 0x01, 0x40, 0x57, 0x46, 0xa5,\n\t0x6e, 0x41, 0xc3, 0x63, 0xa6, 0x90, 0x0a, 0xaa, 0xd7, 0x34, 0x05,\n\t0x78, 0x80, 0x09, 0xa8, 0x80, 0x1c, 0x18, 0x0f, 0xd4, 0xd0, 0x11,\n\t0x22, 0xe0, 0x74, 0x5e, 0x54, 0x07, 0xe9, 0xd7, 0x4a, 0xaa, 0x20,\n\t0x74, 0x2b, 0x87, 0x81, 0x93, 0x65, 0x80, 0xc4, 0x87, 0x80, 0x1d,\n\t0xf8, 0x82, 0xc7, 0x57, 0x0d, 0x1d, 0x71, 0x50, 0xe6, 0xb7, 0x50,\n\t0x74, 0xe0, 0x6a, 0x03, 0x60, 0x75, 0xed, 0xb7, 0x31, 0x2b, 0xa8,\n\t0x81, 0x30, 0xf8, 0x83, 0xc7, 0xd7, 0x1a, 0x1c, 0x21, 0x03, 0x22,\n\t0x18, 0x72, 0x54, 0xc7, 0x7b, 0x15, 0x78, 0x81, 0x1e, 0x12, 0x70,\n\t0x2c, 0x48, 0x0e, 0x2e, 0x08, 0x84, 0x50, 0x78, 0x79, 0xf3, 0x10,\n\t0x41, 0x17, 0x41, 0x83, 0xe4, 0xd6, 0x07, 0x81, 0x07, 0x00, 0x29,\n\t0x10, 0x80, 0x29, 0xb8, 0x84, 0x5f, 0x37, 0x7c, 0x4e, 0xb8, 0x81,\n\t0x51, 0x18, 0x85, 0xda, 0xd0, 0x80, 0x10, 0x01, 0x02, 0x7d, 0x50,\n\t0x84, 0x7f, 0xf0, 0x6c, 0x59, 0xe0, 0x02, 0xa5, 0x30, 0x66, 0x02,\n\t0x18, 0x70, 0xbf, 0x27, 0x59, 0x60, 0x27, 0x0e, 0x4e, 0xc8, 0x77,\n\t0x63, 0x98, 0x87, 0x31, 0x08, 0x12, 0xe3, 0x65, 0x6f, 0x6b, 0xd8,\n\t0x07, 0x73, 0xb0, 0x06, 0x6b, 0xa0, 0x06, 0x6a, 0xb0, 0x07, 0xdf,\n\t0xc0, 0x0b, 0xfe, 0xbf, 0xa0, 0x7a, 0x5f, 0x77, 0x0c, 0x76, 0xf8,\n\t0x0e, 0x78, 0xa8, 0x87, 0x90, 0xf8, 0x7a, 0x42, 0xe8, 0x11, 0xbc,\n\t0x55, 0x83, 0xbe, 0x45, 0x4e, 0xe4, 0x04, 0x08, 0x84, 0x30, 0x0c,\n\t0x32, 0xb3, 0x88, 0xd3, 0x70, 0x87, 0x91, 0x18, 0x8a, 0xc7, 0xd7,\n\t0x0e, 0xcf, 0xc7, 0x11, 0x1a, 0x00, 0x68, 0x20, 0x97, 0x40, 0x9b,\n\t0x08, 0x76, 0x9f, 0xe8, 0x88, 0xa2, 0xf8, 0x8a, 0xc7, 0xf7, 0x81,\n\t0x23, 0x01, 0x02, 0xe3, 0x96, 0x8a, 0xa0, 0x02, 0x0e, 0xae, 0x08,\n\t0x8b, 0xba, 0x78, 0x79, 0xf0, 0x30, 0x89, 0x21, 0x41, 0x8b, 0x96,\n\t0x68, 0x8b, 0x85, 0x20, 0x86, 0xbb, 0xa8, 0x87, 0xf0, 0xa0, 0x0e,\n\t0xe6, 0xf0, 0x0c, 0xb9, 0x60, 0x86, 0x16, 0xe1, 0x01, 0x71, 0x10,\n\t0x8c, 0x20, 0x37, 0x08, 0xf3, 0x50, 0x8c, 0x90, 0x78, 0x8c, 0xc9,\n\t0xd8, 0x0c, 0x2b, 0x92, 0x0c, 0x71, 0x12, 0x13, 0x1a, 0x50, 0x06,\n\t0x07, 0x67, 0x8b, 0x7e, 0x20, 0x8d, 0xd4, 0x08, 0x85, 0xf0, 0xe0,\n\t0x0e, 0xd7, 0xb8, 0x22, 0x59, 0x94, 0x33, 0x3b, 0x23, 0x13, 0x03,\n\t0x40, 0x6a, 0xdf, 0x08, 0x72, 0xc3, 0x38, 0x8e, 0x1d, 0x58, 0x8e,\n\t0xe7, 0x88, 0x0c, 0x66, 0x15, 0x1c, 0xdb, 0xb8, 0x13, 0xe1, 0xd6,\n\t0x07, 0xef, 0x98, 0x59, 0xe0, 0x20, 0x8f, 0xf2, 0x57, 0x8e, 0xe5,\n\t0xf0, 0x0c, 0xd8, 0x68, 0x8f, 0x63, 0x93, 0x0c, 0x8b, 0x10, 0x5e,\n\t0x33, 0x11, 0x00, 0x1d, 0x20, 0x06, 0x53, 0xf4, 0x36, 0x29, 0x55,\n\t0x08, 0xed, 0x40, 0x8c, 0xc5, 0x28, 0x90, 0xd0, 0x50, 0x90, 0xf7,\n\t0x38, 0x36, 0x9a, 0x30, 0x3d, 0x54, 0xb1, 0x00, 0x22, 0x20, 0x06,\n\t0x55, 0xc3, 0x38, 0xac, 0x16, 0x8e, 0x85, 0xb0, 0x0e, 0xeb, 0xd0,\n\t0x2a, 0xe3, 0x68, 0x91, 0xcd, 0xb0, 0x0c, 0x06, 0x39, 0x36, 0xc0,\n\t0xb1, 0x09, 0x37, 0xd0, 0xfe, 0x79, 0x47, 0x31, 0x00, 0x0b, 0xd0,\n\t0x01, 0x3e, 0x93, 0x05, 0x32, 0x10, 0x03, 0xe0, 0x00, 0x0e, 0x26,\n\t0x69, 0x92, 0x28, 0xf9, 0x8a, 0xf2, 0xe0, 0x0e, 0xe5, 0x70, 0x91,\n\t0x2c, 0x99, 0x91, 0x2e, 0x39, 0x1a, 0x9b, 0xf0, 0x08, 0xd8, 0x24,\n\t0x1e, 0x86, 0x64, 0x0d, 0x3d, 0xd9, 0x93, 0x3f, 0x99, 0x87, 0x41,\n\t0x89, 0x0e, 0x44, 0x69, 0x8f, 0x46, 0x79, 0x94, 0x48, 0x69, 0x09,\n\t0x1c, 0xc9, 0x94, 0x05, 0x41, 0x01, 0xda, 0xf0, 0x94, 0x3e, 0x49,\n\t0x91, 0xf3, 0x27, 0x0f, 0xef, 0x40, 0x95, 0xce, 0x50, 0x94, 0x57,\n\t0x89, 0x95, 0xbf, 0xb1, 0x09, 0x97, 0x90, 0x8f, 0x5c, 0x79, 0x10,\n\t0x18, 0xc0, 0x0e, 0x60, 0x79, 0x92, 0x62, 0x09, 0x7b, 0xef, 0x90,\n\t0x0e, 0xd0, 0x70, 0x96, 0x56, 0xa9, 0x96, 0x7c, 0xa9, 0x09, 0x98,\n\t0x70, 0x03, 0xcc, 0xa8, 0x16, 0x2e, 0x20, 0x97, 0x60, 0x69, 0x2c,\n\t0xdf, 0x47, 0x96, 0xe9, 0x10, 0x0d, 0x7a, 0x09, 0x0a, 0x69, 0xc9,\n\t0x97, 0xda, 0x01, 0x0a, 0x99, 0x70, 0x09, 0x09, 0xf9, 0x96, 0x0b,\n\t0x11, 0x00, 0x58, 0x30, 0x97, 0x26, 0x39, 0x8d, 0xae, 0x72, 0x97,\n\t0xd1, 0xf0, 0x0c, 0x68, 0xe9, 0x98, 0xa0, 0x89, 0x0c, 0x9b, 0x80,\n\t0x09, 0x92, 0xb9, 0x94, 0x94, 0x29, 0x5e, 0x58, 0x40, 0x98, 0x4f,\n\t0xc9, 0x0e, 0xe3, 0x80, 0x0e, 0x9d, 0xb9, 0x0c, 0xc9, 0xc0, 0x98,\n\t0xa1, 0x19, 0x9a, 0x68, 0x75, 0x09, 0xa5, 0x79, 0x9a, 0x0e, 0x38,\n\t0x98, 0xeb, 0xc0, 0x0e, 0xda, 0x80, 0x0d, 0xc6, 0x00, 0x0b, 0xed,\n\t0x95, 0x09, 0xc1, 0x34, 0x9b, 0xa0, 0x89, 0x56, 0x83, 0x75, 0x09,\n\t0x48, 0x60, 0x9a, 0xb8, 0xa9, 0x10, 0x18, 0xf0, 0x9b, 0x9d, 0xf0,\n\t0x59, 0xa0, 0x45, 0x56, 0xc4, 0xa9, 0x96, 0xc6, 0xc9, 0x5e, 0x37,\n\t0xa0, 0x90, 0xcb, 0x39, 0x32, 0x61, 0xfe, 0x15, 0x5a, 0xc5, 0x25,\n\t0x9c, 0x8d, 0x39, 0x9b, 0x81, 0x35, 0x58, 0xea, 0x24, 0x09, 0x33,\n\t0x10, 0x98, 0xcb, 0xa9, 0x17, 0x92, 0x00, 0x9d, 0xdc, 0xb9, 0x4e,\n\t0x7f, 0xf5, 0x9d, 0x47, 0x19, 0x58, 0x91, 0x09, 0x5a, 0x94, 0x80,\n\t0x4a, 0xd9, 0x29, 0x11, 0x25, 0xb0, 0x9d, 0xeb, 0xa9, 0x4e, 0x96,\n\t0xc0, 0x43, 0xed, 0x89, 0x95, 0xa0, 0x00, 0x58, 0x7e, 0x49, 0x5c,\n\t0x91, 0x00, 0x06, 0x68, 0xb0, 0x70, 0xf5, 0x19, 0x11, 0x7a, 0xa1,\n\t0x57, 0xf9, 0x19, 0x5a, 0x57, 0x84, 0x09, 0x99, 0xe0, 0x57, 0x10,\n\t0xaa, 0x09, 0x99, 0x90, 0x09, 0xa4, 0x49, 0x5c, 0xec, 0x45, 0x09,\n\t0x69, 0x80, 0x06, 0x67, 0x60, 0xa0, 0x07, 0x8a, 0x2f, 0x35, 0xa0,\n\t0x57, 0xea, 0xb9, 0xa0, 0x22, 0xba, 0x9e, 0x96, 0x10, 0x09, 0x18,\n\t0xaa, 0xa1, 0x66, 0xb0, 0xa1, 0x1d, 0x7a, 0x11, 0x10, 0xe0, 0x02,\n\t0x8b, 0xd0, 0x5e, 0x23, 0x1a, 0xa3, 0xfa, 0x29, 0x09, 0x9e, 0x90,\n\t0xa1, 0x67, 0x60, 0x06, 0x38, 0x1a, 0x07, 0x1c, 0xba, 0xa2, 0x12,\n\t0x81, 0x00, 0x25, 0x70, 0x03, 0x8f, 0x10, 0x09, 0x96, 0x20, 0xa3,\n\t0xd1, 0x79, 0x09, 0x91, 0xf0, 0x08, 0x94, 0x00, 0x06, 0x6c, 0x80,\n\t0xa2, 0x38, 0x6a, 0x06, 0x71, 0x70, 0x07, 0x54, 0xc7, 0xa3, 0x17,\n\t0x81, 0x01, 0x69, 0x00, 0x06, 0x94, 0x30, 0x09, 0x91, 0x20, 0xa4,\n\t0x96, 0xb0, 0xa5, 0xfb, 0x69, 0x9b, 0x5e, 0x2a, 0x09, 0x5d, 0x51,\n\t0x03, 0xff, 0x22, 0x03, 0x37, 0xda, 0xa4, 0x4e, 0x9a, 0x4b, 0x82,\n\t0xe0, 0x65, 0x52, 0x7a, 0x11, 0x1e, 0x70, 0x06, 0x67, 0x80, 0x06,\n\t0x68, 0xc0, 0x06, 0x60, 0x00, 0x06, 0xa5, 0xe0, 0x09, 0x9e, 0x70,\n\t0x04, 0x37, 0x70, 0x03, 0x35, 0x50, 0x03, 0x33, 0x50, 0x02, 0x14,\n\t0x50, 0x00, 0x61, 0x21, 0x03, 0x72, 0xd0, 0xa4, 0xfe, 0x67, 0x90,\n\t0x4b, 0x4b, 0x92, 0xa6, 0x6b, 0x8a, 0x11, 0x6d, 0x4a, 0xa8, 0x6e,\n\t0x1a, 0x07, 0x7a, 0x10, 0x07, 0x0e, 0xb6, 0x10, 0x32, 0x10, 0x07,\n\t0x67, 0x1a, 0x4e, 0x38, 0xa6, 0xa6, 0x89, 0x4a, 0x11, 0x8b, 0x6a,\n\t0xa6, 0x4d, 0x0a, 0xa9, 0x0c, 0x21, 0xa8, 0xe0, 0xb4, 0x76, 0x98,\n\t0x9a, 0xa9, 0x12, 0xe1, 0x01, 0x72, 0x40, 0xa9, 0x9c, 0xea, 0xa4,\n\t0x91, 0xaa, 0x10, 0x59, 0xe0, 0x74, 0x88, 0x4a, 0xaa, 0x14, 0x81,\n\t0x52, 0x7c, 0x70, 0x07, 0x74, 0x20, 0x07, 0xa7, 0x1a, 0x07, 0x71,\n\t0x20, 0x07, 0xab, 0x9a, 0x10, 0xe5, 0x57, 0x5e, 0xa3, 0x0a, 0xab,\n\t0x0f, 0x01, 0x02, 0x35, 0x38, 0xab, 0x77, 0x70, 0x07, 0x12, 0xc8,\n\t0xab, 0xd0, 0xf8, 0xaa, 0xc0, 0x1a, 0x11, 0xc2, 0x5a, 0x5e, 0x5d,\n\t0xc0, 0x10, 0xbd, 0xfa, 0x77, 0xbf, 0xba, 0xac, 0x0c, 0xd1, 0xac,\n\t0x7f, 0xf7, 0xac, 0x0b, 0x11, 0xad, 0xa2, 0x4a, 0xad, 0xcc, 0x9a,\n\t0xac, 0xd8, 0xca, 0xaa, 0xc9, 0x3a, 0xad, 0xdc, 0x9a, 0x10, 0xd6,\n\t0xba, 0x76, 0xdf, 0x8a, 0xac, 0xbe, 0x3a, 0xae, 0xc1, 0xea, 0xad,\n\t0xd0, 0x1a, 0xae, 0xea, 0xea, 0x10, 0xe5, 0xba, 0x50, 0xe7, 0x8a,\n\t0x10, 0xda, 0xba, 0x50, 0xe2, 0xfa, 0xae, 0x05, 0x11, 0xaf, 0xce,\n\t0x36, 0xaf, 0x83, 0xe7, 0xae, 0xf8, 0x7a, 0x52, 0xec, 0x9a, 0xad,\n\t0xfe, 0xfa, 0xaf, 0xe4, 0xea, 0xaa, 0xfc, 0x6a, 0x10, 0xf5, 0xea,\n\t0x6c, 0xf7, 0x4a, 0xb0, 0x00, 0xd0, 0x01, 0x5d, 0x75, 0xac, 0xf4,\n\t0x0a, 0x8d, 0x7e, 0x50, 0x82, 0x0c, 0x3b, 0x68, 0xb8, 0xd7, 0x45,\n\t0x14, 0xeb, 0x79, 0x46, 0x25, 0x7a, 0x15, 0x1b, 0xb1, 0x6b, 0xe7,\n\t0x7f, 0xaf, 0x01, 0x81, 0xce, 0xd6, 0x50, 0x1d, 0x8b, 0x10, 0x0a,\n\t0xe0, 0x36, 0xe4, 0xb5, 0x86, 0x71, 0x70, 0x76, 0xfa, 0x87, 0x39,\n\t0x50, 0x6b, 0x72, 0x35, 0xe2, 0x53, 0xb2, 0x09, 0xa1, 0x00, 0x59,\n\t0x10, 0x07, 0x7d, 0xc0, 0x07, 0x75, 0x90, 0x85, 0x0f, 0xb1, 0x00,\n\t0xe2, 0xc6, 0x07, 0x7d, 0x10, 0x07, 0x59, 0x70, 0x5e, 0x32, 0x6b,\n\t0xb2, 0x1a, 0xa0, 0x01, 0x82, 0xc7, 0x10, 0x0b, 0x50, 0xb4, 0x47,\n\t0x3b, 0xb4, 0x4c, 0xdb, 0xb4, 0x4e, 0xfb, 0xb4, 0x50, 0x9b, 0x10,\n\t0x01, 0x01, 0x00, 0x3b\n};\n\nstatic const int _img_selfie_length = 4459;\nstatic const char _img_shower[5130] = {\n\t0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x7f, 0x00, 0x7f, 0x00, 0xf7,\n\t0xf2, 0x00, 0x00, 0x00, 0x00, 0xc8, 0xd2, 0xdc, 0x92, 0xbb, 0xbd,\n\t0x5a, 0xa5, 0xb7, 0x8f, 0xcc, 0xdb, 0xc1, 0xd8, 0xe3, 0xa5, 0xae,\n\t0x8f, 0x75, 0xac, 0xbb, 0xe7, 0xad, 0xb3, 0xf3, 0xc7, 0x4f, 0xb8,\n\t0xdb, 0xe8, 0x00, 0x81, 0xc6, 0xb7, 0xdb, 0xe7, 0x34, 0xaf, 0xb6,\n\t0xbd, 0xde, 0xea, 0xb6, 0xda, 0xe7, 0xce, 0xc9, 0xd3, 0x2d, 0x9d,\n\t0xa8, 0xb4, 0xd9, 0xe6, 0xc1, 0xcc, 0xd6, 0xf3, 0xc7, 0x4f, 0xf3,\n\t0xc7, 0x4f, 0xf1, 0xb6, 0xbc, 0xce, 0x97, 0x9d, 0xf3, 0xc7, 0x4f,\n\t0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x50, 0xe6, 0xca, 0x6c, 0x00, 0x81,\n\t0xc6, 0xb9, 0xdc, 0xe8, 0x00, 0x81, 0xc5, 0x00, 0x81, 0xc6, 0xb5,\n\t0xda, 0xe7, 0x27, 0x9f, 0xb3, 0xce, 0xd2, 0xdc, 0xb6, 0xda, 0xe7,\n\t0xe8, 0xb2, 0xb8, 0xb4, 0xd9, 0xe6, 0xb8, 0xdb, 0xe8, 0xca, 0xe6,\n\t0xf0, 0xe9, 0xbb, 0xb9, 0x40, 0xba, 0xb3, 0x00, 0x81, 0xc6, 0x00,\n\t0x81, 0xc6, 0x38, 0xa7, 0xa3, 0xde, 0xa3, 0xaa, 0xdd, 0xa2, 0xa9,\n\t0xb4, 0xd9, 0xe6, 0xb7, 0xdb, 0xe7, 0x39, 0x3e, 0x47, 0x39, 0x3f,\n\t0x48, 0x39, 0x41, 0x4a, 0x3a, 0x4b, 0x53, 0x3a, 0x53, 0x59, 0x3b,\n\t0x5d, 0x62, 0x3b, 0x68, 0x6c, 0x3c, 0x77, 0x79, 0x3b, 0x6d, 0x70,\n\t0x33, 0x95, 0x8f, 0x70, 0x94, 0x7a, 0xf3, 0xc7, 0x4f, 0xf3, 0xc7,\n\t0x4f, 0xf1, 0xb7, 0xbd, 0xe5, 0xa9, 0xaf, 0xd0, 0x96, 0x9b, 0x6d,\n\t0x98, 0x6e, 0x4f, 0x96, 0x7f, 0x5c, 0xaf, 0x96, 0xf3, 0xc7, 0x4f,\n\t0xf3, 0xc7, 0x4f, 0xf3, 0xc7, 0x4f, 0xc3, 0x9f, 0x3e, 0xc8, 0xa2,\n\t0x3e, 0x98, 0x9c, 0x56, 0xb2, 0x9c, 0x47, 0x9b, 0xab, 0x75, 0xb0,\n\t0xb4, 0x70, 0xae, 0xa9, 0x69, 0xf3, 0xc7, 0x4f, 0xdd, 0xb6, 0x49,\n\t0xef, 0xc4, 0x4e, 0xf3, 0xc7, 0x4f, 0xc9, 0xbb, 0x64, 0xc1, 0x9f,\n\t0x40, 0xab, 0xc0, 0x77, 0xde, 0xc1, 0x59, 0xf3, 0xc7, 0x4f, 0xf5,\n\t0xc8, 0x4e, 0xea, 0xc6, 0x58, 0xf6, 0xc9, 0x50, 0xf1, 0xc7, 0x50,\n\t0xf1, 0xc5, 0x4e, 0xcc, 0xc2, 0x64, 0xe8, 0xcd, 0x71, 0x00, 0x81,\n\t0xc6, 0x00, 0x81, 0xc6, 0xb8, 0xdc, 0xe8, 0x79, 0x8e, 0xad, 0x01,\n\t0x67, 0x9e, 0x0e, 0x72, 0x9d, 0x30, 0x79, 0x88, 0x00, 0x7c, 0xbf,\n\t0x01, 0x7a, 0xbb, 0x0c, 0x7b, 0xb9, 0x00, 0x80, 0xc5, 0xf2, 0xb9,\n\t0xbf, 0xbb, 0xdd, 0xe9, 0xb9, 0xdc, 0xe8, 0xb8, 0xdb, 0xe8, 0xb4,\n\t0xd9, 0xe6, 0x3d, 0x86, 0x86, 0x33, 0x95, 0x8f, 0x38, 0x95, 0x8c,\n\t0x33, 0x97, 0x91, 0x3a, 0x9b, 0x97, 0x27, 0x8a, 0x93, 0x3c, 0xa3,\n\t0x9e, 0x19, 0x8a, 0xbc, 0x27, 0x89, 0xb8, 0x33, 0x92, 0xb1, 0x3d,\n\t0xaa, 0xa5, 0x3e, 0xa9, 0xa5, 0x3e, 0xb3, 0xac, 0x40, 0xba, 0xb3,\n\t0x3e, 0xba, 0xb3, 0x3c, 0xb6, 0xb3, 0x3b, 0xb5, 0xb5, 0x39, 0xaf,\n\t0xad, 0x53, 0x9b, 0x9c, 0x70, 0xb1, 0x94, 0x46, 0x8f, 0xae, 0x40,\n\t0xb5, 0xae, 0x58, 0xb6, 0xad, 0x40, 0xba, 0xb3, 0x4c, 0xba, 0xb4,\n\t0x49, 0xba, 0xb5, 0x55, 0xba, 0xb5, 0x5f, 0xad, 0xaf, 0x78, 0xac,\n\t0xaa, 0x68, 0xb8, 0xb4, 0x67, 0xb8, 0xb4, 0x6b, 0xb1, 0xaf, 0x6e,\n\t0x91, 0x9a, 0x55, 0xc0, 0xbc, 0x00, 0x81, 0xc6, 0x00, 0x82, 0xc8,\n\t0x0b, 0x85, 0xc2, 0x1c, 0x84, 0xc0, 0x21, 0x86, 0xc1, 0x66, 0xc8,\n\t0xc2, 0x68, 0xc6, 0xc5, 0x78, 0xca, 0xcb, 0x5e, 0xc3, 0xc0, 0xc6,\n\t0xe3, 0xed, 0xf2, 0xb8, 0xbe, 0xb7, 0xda, 0xe7, 0xc3, 0xe1, 0xeb,\n\t0xba, 0xdc, 0xe9, 0xc5, 0xe3, 0xee, 0xf1, 0xb7, 0xbd, 0xb4, 0xd9,\n\t0xe6, 0xb7, 0xda, 0xe6, 0xbd, 0x98, 0x9e, 0x8d, 0x90, 0xa9, 0xa9,\n\t0x98, 0xa3, 0xb7, 0x99, 0xa8, 0x87, 0xa8, 0xa8, 0x95, 0xa4, 0xa5,\n\t0x8c, 0xb6, 0xb5, 0xa7, 0xaf, 0xb1, 0xaf, 0xbd, 0xa6, 0xf1, 0xb4,\n\t0xbb, 0xcc, 0x96, 0x9c, 0xcf, 0x98, 0x9e, 0xc4, 0x97, 0x9d, 0xd0,\n\t0x99, 0x9f, 0xd5, 0x9c, 0xa2, 0xd9, 0x9f, 0xa5, 0xd6, 0xa4, 0xae,\n\t0xde, 0xa3, 0xa9, 0xda, 0xa0, 0xa7, 0xd2, 0xb2, 0xb6, 0xdd, 0xb1,\n\t0xb7, 0xdb, 0xb1, 0xb7, 0xe2, 0xa6, 0xac, 0xec, 0xad, 0xb4, 0xed,\n\t0xae, 0xb5, 0xe9, 0xab, 0xb2, 0xe6, 0xb1, 0xb7, 0xee, 0xb0, 0xb7,\n\t0xf0, 0xb0, 0xb7, 0xf2, 0xb2, 0xb9, 0xf2, 0xb8, 0xbe, 0xf2, 0xba,\n\t0xc0, 0xf2, 0xba, 0xc0, 0xd9, 0xd3, 0x9b, 0xd5, 0xcd, 0x92, 0xe2,\n\t0xd1, 0x89, 0xd1, 0xd5, 0xb0, 0xb4, 0xd9, 0xe6, 0xc5, 0xe3, 0xed,\n\t0xb4, 0xd9, 0xe6, 0xf3, 0xbd, 0xc3, 0xf4, 0xc4, 0xc9, 0xc7, 0xe4,\n\t0xef, 0x98, 0xd3, 0xda, 0x92, 0xd1, 0xd7, 0xb5, 0xd9, 0xe6, 0xb4,\n\t0xd9, 0xe6, 0xa7, 0xca, 0xd6, 0xaa, 0xcd, 0xd9, 0xad, 0xd1, 0xde,\n\t0xb4, 0xd9, 0xe6, 0xae, 0xd2, 0xde, 0xa1, 0xd5, 0xde, 0xb7, 0xd7,\n\t0xde, 0xc3, 0xe0, 0xe8, 0xad, 0xd6, 0xe1, 0xb3, 0xd7, 0xe3, 0xb4,\n\t0xd9, 0xe6, 0xba, 0xdb, 0xe7, 0xb6, 0xdb, 0xe9, 0xbd, 0xde, 0xe9,\n\t0xc6, 0xe4, 0xef, 0xbf, 0xe0, 0xeb, 0xcc, 0xde, 0xd2, 0xf4, 0xc4,\n\t0xc9, 0xf4, 0xc2, 0xc8, 0xf4, 0xc4, 0xc9, 0xc1, 0xe0, 0xea, 0xc1,\n\t0xde, 0xe6, 0xc4, 0xe2, 0xed, 0xca, 0xe5, 0xee, 0xc8, 0xe2, 0xe7,\n\t0xc6, 0xe5, 0xf1, 0xca, 0xe6, 0xf1, 0xcd, 0xe8, 0xf2, 0xd1, 0xe9,\n\t0xf2, 0xdb, 0xed, 0xf3, 0xd0, 0xe7, 0xef, 0xe8, 0xf4, 0xf8, 0xf3,\n\t0xfb, 0xfa, 0xff, 0xff, 0xff, 0xcd, 0xe0, 0xd7, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x21, 0xf9, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x21, 0xff, 0x0b,\n\t0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x6b,\n\t0x0d, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x3d, 0x30, 0x2e, 0x34, 0x35,\n\t0x34, 0x35, 0x35, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00,\n\t0x7f, 0x00, 0x00, 0x08, 0xfe, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0,\n\t0xa0, 0xc1, 0x83, 0x08, 0x13, 0x1e, 0x1c, 0x70, 0x40, 0xc4, 0x05,\n\t0x1f, 0x9a, 0x56, 0xad, 0x92, 0x95, 0x2b, 0x97, 0x2e, 0x5d, 0xbb,\n\t0x72, 0xc9, 0x92, 0xa8, 0xc9, 0x47, 0x0b, 0x11, 0x15, 0x06, 0x08,\n\t0x50, 0x48, 0xb2, 0xa4, 0xc9, 0x93, 0x28, 0x53, 0x1a, 0x14, 0x60,\n\t0x40, 0x04, 0xc4, 0x89, 0xbb, 0x7a, 0xfd, 0x9a, 0x39, 0xd3, 0x97,\n\t0xcd, 0x9b, 0x34, 0x6b, 0x66, 0xfc, 0xf4, 0xc9, 0x47, 0x84, 0x03,\n\t0x23, 0x55, 0x0a, 0x1d, 0x4a, 0x14, 0xa5, 0x80, 0x0a, 0x2d, 0x3e,\n\t0xc9, 0xd2, 0x05, 0x0c, 0x58, 0xcd, 0x9b, 0x50, 0xa3, 0x4a, 0xf5,\n\t0x45, 0x13, 0x98, 0x2f, 0x5c, 0xab, 0x7c, 0x88, 0x18, 0x50, 0xb4,\n\t0xab, 0xd7, 0xa1, 0x07, 0x5a, 0xac, 0xca, 0x45, 0x73, 0xaa, 0xd9,\n\t0xb3, 0x52, 0x7f, 0x89, 0x13, 0x47, 0x2e, 0x6b, 0x85, 0xa0, 0x5f,\n\t0xe3, 0xca, 0x15, 0x78, 0xf4, 0x87, 0xac, 0xb2, 0x68, 0xf3, 0xe6,\n\t0x05, 0xb6, 0xb6, 0xef, 0xb2, 0x4f, 0x22, 0xe0, 0xce, 0x1d, 0x2c,\n\t0xb4, 0x42, 0x9a, 0x5c, 0x4e, 0xf5, 0x2a, 0xde, 0xdb, 0xb7, 0x71,\n\t0xdb, 0xc0, 0x84, 0x23, 0x9b, 0x34, 0xe0, 0x83, 0xec, 0xaf, 0xc5,\n\t0x98, 0xcf, 0x2a, 0x6b, 0xcc, 0x99, 0x9c, 0xa6, 0x08, 0x92, 0x43,\n\t0x1f, 0x14, 0xb1, 0xea, 0x69, 0xde, 0x8b, 0xba, 0x32, 0xdb, 0x44,\n\t0x7d, 0x93, 0x2f, 0x67, 0xce, 0xb2, 0x2e, 0x08, 0x16, 0x4d, 0x58,\n\t0x40, 0x0b, 0xb2, 0x8b, 0x75, 0xd1, 0x6a, 0x05, 0x6b, 0x57, 0x66,\n\t0x5d, 0xb1, 0x5a, 0xc5, 0x4a, 0xed, 0xcb, 0xf5, 0x6b, 0xc7, 0x69,\n\t0xb8, 0xd2, 0xae, 0xed, 0x43, 0xd7, 0xe5, 0xc5, 0xb3, 0x58, 0x49,\n\t0xa7, 0x95, 0x19, 0x97, 0x74, 0x56, 0xc3, 0xa9, 0x8e, 0x3b, 0xfe,\n\t0x5a, 0x93, 0xf2, 0x93, 0x0c, 0x44, 0xfe, 0x88, 0x17, 0xc1, 0x60,\n\t0xb9, 0x41, 0x1e, 0xce, 0x31, 0xef, 0x6a, 0x75, 0x9d, 0x3a, 0x66,\n\t0xeb, 0xd7, 0x71, 0xd9, 0xdc, 0xcc, 0x9d, 0xb3, 0x77, 0x93, 0x03,\n\t0xc2, 0x3c, 0x3b, 0xc7, 0xae, 0xdd, 0xba, 0x67, 0x90, 0x99, 0x07,\n\t0x80, 0x08, 0xb4, 0x3c, 0xb7, 0x18, 0x2d, 0xd7, 0xbd, 0xe2, 0x1b,\n\t0x66, 0xba, 0xc0, 0x72, 0x1d, 0x2c, 0xa9, 0x19, 0x57, 0x5f, 0x5f,\n\t0x3e, 0x94, 0x34, 0x40, 0x27, 0xeb, 0xac, 0x73, 0xce, 0x3a, 0xed,\n\t0xb4, 0xe3, 0x4e, 0x3b, 0x99, 0xcc, 0x26, 0x99, 0x01, 0xa2, 0x10,\n\t0x97, 0xdb, 0x2b, 0xf1, 0xa9, 0xe6, 0xcb, 0x7a, 0x29, 0xfa, 0x42,\n\t0xdf, 0x84, 0x6b, 0x2d, 0x23, 0x02, 0x49, 0x6b, 0xb0, 0x83, 0xce,\n\t0x39, 0x1b, 0x76, 0xa8, 0x63, 0x18, 0xe6, 0xb5, 0x90, 0xdd, 0x7b,\n\t0x0f, 0x9a, 0xc8, 0x60, 0x2c, 0xd7, 0xc5, 0x62, 0xd3, 0x2f, 0xdb,\n\t0xc1, 0xb8, 0xd6, 0x27, 0x22, 0x0e, 0xc4, 0xc1, 0x37, 0xea, 0xe0,\n\t0x98, 0xa3, 0x8e, 0xed, 0x40, 0x03, 0x01, 0x6d, 0x24, 0xfe, 0xa8,\n\t0x58, 0x83, 0xd7, 0xcd, 0xa2, 0xa2, 0x4d, 0xf0, 0xb1, 0x02, 0xa1,\n\t0x4d, 0xc0, 0x24, 0x09, 0xe3, 0x32, 0x15, 0x24, 0xa4, 0x06, 0x3b,\n\t0x52, 0x9e, 0x83, 0x4e, 0x7f, 0x54, 0xce, 0x28, 0x5a, 0x04, 0x62,\n\t0x0a, 0x79, 0x1a, 0x8a, 0xac, 0xb4, 0xb2, 0xa0, 0x8a, 0x5c, 0x4a,\n\t0xb7, 0x67, 0x99, 0x4a, 0x2a, 0x53, 0x21, 0x42, 0x9d, 0xb0, 0xd9,\n\t0xa6, 0x3a, 0x70, 0xb6, 0xc3, 0xce, 0x1a, 0xb4, 0xb5, 0xc0, 0x9b,\n\t0x9d, 0x68, 0xed, 0x12, 0xe4, 0x97, 0xbe, 0x00, 0xd7, 0x25, 0x54,\n\t0xbf, 0x28, 0x63, 0x26, 0x67, 0xca, 0x34, 0xa5, 0x49, 0x42, 0x99,\n\t0x18, 0xda, 0xe6, 0x39, 0xea, 0xac, 0xf3, 0x66, 0x26, 0xb4, 0xf1,\n\t0xd0, 0x8a, 0x9e, 0x40, 0x4a, 0x67, 0x24, 0xa5, 0xfe, 0xbe, 0x44,\n\t0xe7, 0x6a, 0x5a, 0xc0, 0x28, 0xa3, 0xe9, 0x38, 0xb6, 0x26, 0xf6,\n\t0x0b, 0x93, 0x08, 0x85, 0x3a, 0xea, 0xa8, 0xec, 0xa8, 0xd1, 0x28,\n\t0x7b, 0x5e, 0x1e, 0x78, 0x29, 0xac, 0x61, 0x8e, 0x89, 0xd9, 0xae,\n\t0x4d, 0x0e, 0x78, 0xe3, 0xaf, 0x38, 0xa2, 0x93, 0x8e, 0x9c, 0x24,\n\t0x0d, 0xc0, 0xc0, 0x77, 0x28, 0x39, 0xca, 0xca, 0x2b, 0x90, 0x9a,\n\t0x85, 0xa0, 0x74, 0xf2, 0xc1, 0x2a, 0xa9, 0x74, 0xca, 0x2e, 0x06,\n\t0xcc, 0x0f, 0x09, 0x0d, 0x70, 0x8c, 0xa8, 0xc0, 0xaa, 0xd2, 0xec,\n\t0x40, 0x20, 0xa8, 0x71, 0xcc, 0x33, 0xcf, 0x70, 0x42, 0xc2, 0xbb,\n\t0x06, 0x45, 0xe0, 0xca, 0x74, 0xdd, 0x4a, 0x05, 0x9f, 0x82, 0xb0,\n\t0x56, 0xea, 0x20, 0x2b, 0xee, 0x2d, 0x7b, 0x81, 0x42, 0x22, 0x64,\n\t0xc3, 0x2e, 0x8e, 0xec, 0x3c, 0xc3, 0x81, 0x42, 0x03, 0xac, 0x91,\n\t0x8d, 0x37, 0xdd, 0x80, 0x83, 0x0e, 0x3a, 0xe6, 0x64, 0xa2, 0xc0,\n\t0x49, 0x02, 0xfc, 0xc0, 0x1e, 0x2b, 0xc5, 0x9e, 0x86, 0xcb, 0x2c,\n\t0x7b, 0x8a, 0x3b, 0x0b, 0x2e, 0xfd, 0x9a, 0xf5, 0x8b, 0x2c, 0x06,\n\t0x90, 0x24, 0xc2, 0x33, 0xec, 0xb0, 0x93, 0xa1, 0xcc, 0xc7, 0x80,\n\t0xa0, 0x90, 0x00, 0x6b, 0x74, 0xd3, 0xcd, 0x36, 0xdb, 0xb4, 0x89,\n\t0x4e, 0x27, 0xf8, 0x0e, 0xb4, 0x40, 0x18, 0x1f, 0xb7, 0x32, 0x4b,\n\t0xca, 0x01, 0x27, 0x1d, 0xd5, 0x2f, 0xaa, 0x44, 0x10, 0xb4, 0x01,\n\t0x30, 0xa8, 0x42, 0x6f, 0x26, 0x22, 0x6c, 0xac, 0x10, 0x09, 0xda,\n\t0xf0, 0xcc, 0x73, 0x39, 0xa3, 0x52, 0x8b, 0xd0, 0x02, 0x5e, 0x98,\n\t0x21, 0xc9, 0x28, 0xd7, 0x11, 0x8c, 0xb4, 0xd2, 0x49, 0xeb, 0x52,\n\t0x0a, 0x25, 0x68, 0x78, 0xf1, 0x30, 0x49, 0x02, 0x0c, 0x20, 0x52,\n\t0x49, 0x02, 0xa8, 0xe2, 0x8d, 0xd6, 0xdb, 0x78, 0xe3, 0xf3, 0xfe,\n\t0x31, 0xcd, 0x0a, 0xc0, 0x81, 0x19, 0x91, 0x44, 0x02, 0x89, 0x1d,\n\t0xa4, 0x94, 0x0d, 0x0b, 0xca, 0x68, 0x27, 0xbe, 0x1a, 0x2e, 0xae,\n\t0xdc, 0x01, 0x09, 0x24, 0x91, 0x94, 0xa1, 0x02, 0xb6, 0x5d, 0x19,\n\t0xf0, 0xcc, 0xce, 0x78, 0xeb, 0x2d, 0xe5, 0x34, 0x57, 0xae, 0xa4,\n\t0x02, 0x1a, 0x82, 0x3f, 0x3e, 0x78, 0xe1, 0x86, 0x93, 0x7c, 0x91,\n\t0xe2, 0x5f, 0x62, 0x34, 0x0b, 0x2c, 0xa5, 0x08, 0x22, 0x3a, 0xe4,\n\t0x91, 0x78, 0x41, 0x39, 0x51, 0x12, 0x50, 0x83, 0xb7, 0xd6, 0xdc,\n\t0x78, 0xe3, 0x0d, 0x37, 0xda, 0xd8, 0x6c, 0x90, 0x0a, 0x90, 0xbf,\n\t0xfe, 0xf8, 0x24, 0xa3, 0xec, 0x5b, 0xb6, 0x98, 0xb1, 0xd0, 0x72,\n\t0x32, 0x2e, 0xcc, 0xcf, 0x72, 0xf2, 0xe9, 0x69, 0x8f, 0xbc, 0x3c,\n\t0xf3, 0x23, 0xc7, 0x02, 0x0b, 0x7b, 0xa3, 0xd8, 0x21, 0xfc, 0xe3,\n\t0xb1, 0x07, 0x6d, 0x12, 0x04, 0xd0, 0x60, 0x7e, 0xbb, 0xd6, 0xd4,\n\t0xbc, 0x4d, 0x10, 0x07, 0xa0, 0x6f, 0x1f, 0xbc, 0x20, 0xc5, 0x7f,\n\t0x7c, 0xfc, 0xfb, 0xdb, 0xc6, 0x82, 0xf2, 0xd9, 0x52, 0x5d, 0x84,\n\t0x4b, 0x2c, 0x78, 0xc2, 0x2f, 0x1d, 0x29, 0x82, 0x48, 0x12, 0xba,\n\t0xfa, 0x2a, 0xf8, 0x8a, 0xba, 0xc4, 0x37, 0xbe, 0x6e, 0x3c, 0xa3,\n\t0x3c, 0x04, 0x19, 0xc0, 0x17, 0xfe, 0x27, 0x3a, 0x49, 0xdc, 0x01,\n\t0x10, 0x80, 0xb8, 0x43, 0x1d, 0xc8, 0xe0, 0x08, 0x52, 0x18, 0x4f,\n\t0x7f, 0xc7, 0x7b, 0x05, 0x2c, 0x4c, 0x07, 0xbd, 0xa8, 0xa0, 0x66,\n\t0x17, 0xb3, 0xc0, 0x1f, 0x06, 0x59, 0xe1, 0x0a, 0x52, 0x8c, 0x42,\n\t0x10, 0x75, 0xb0, 0x03, 0x04, 0x25, 0xb8, 0xbd, 0x48, 0x98, 0xe1,\n\t0x00, 0x5f, 0x09, 0xc3, 0xdd, 0xc6, 0xc7, 0x33, 0x6f, 0x30, 0xaa,\n\t0x20, 0x1c, 0x50, 0x9f, 0x20, 0x98, 0x80, 0x05, 0x2d, 0x68, 0x01,\n\t0x0b, 0xfe, 0x49, 0x20, 0x83, 0x18, 0xc6, 0x00, 0x08, 0x45, 0x98,\n\t0xe2, 0x14, 0x48, 0x3c, 0x85, 0x29, 0x14, 0xa1, 0x88, 0x53, 0x94,\n\t0x42, 0x7f, 0xbc, 0x81, 0x45, 0xf2, 0x9c, 0x37, 0x0b, 0x5a, 0xd0,\n\t0x02, 0x16, 0xb0, 0xc8, 0x9f, 0x2b, 0x4e, 0xc1, 0xc4, 0x23, 0x26,\n\t0x71, 0x89, 0x89, 0xd0, 0x9e, 0x1d, 0x96, 0x50, 0x05, 0x1f, 0x62,\n\t0x41, 0x0a, 0x80, 0x68, 0x61, 0x00, 0xbd, 0x62, 0x80, 0x63, 0xcc,\n\t0xf0, 0x76, 0x06, 0xec, 0xdc, 0x40, 0x04, 0xe0, 0x05, 0x06, 0x42,\n\t0x02, 0x10, 0x55, 0xb8, 0x82, 0x15, 0xf6, 0x08, 0x05, 0x24, 0x28,\n\t0x81, 0x0c, 0x73, 0xc0, 0x03, 0x1f, 0x06, 0x59, 0x88, 0x42, 0x0e,\n\t0x92, 0x0f, 0x85, 0x20, 0x84, 0x22, 0x48, 0x21, 0x8a, 0x11, 0xea,\n\t0xaf, 0x84, 0xa6, 0x20, 0x44, 0x21, 0x0e, 0x89, 0x48, 0x43, 0x0e,\n\t0xb2, 0x0f, 0x77, 0x90, 0xc2, 0x15, 0xf4, 0xb8, 0xc7, 0x2b, 0x60,\n\t0x21, 0x10, 0xc2, 0x8b, 0xc4, 0x19, 0x66, 0x27, 0x14, 0x10, 0x3c,\n\t0x83, 0x62, 0x5a, 0xeb, 0x86, 0x37, 0x00, 0x64, 0x10, 0x03, 0x00,\n\t0xee, 0x75, 0x76, 0xd0, 0xe4, 0x1e, 0xad, 0x00, 0x85, 0x29, 0x1c,\n\t0xe1, 0x08, 0x41, 0x90, 0x43, 0x25, 0x0b, 0xc9, 0x4b, 0x5e, 0x0e,\n\t0xf2, 0x10, 0x8a, 0x3c, 0x05, 0x29, 0x4a, 0x71, 0xc1, 0xe3, 0xb9,\n\t0xa2, 0x14, 0xa4, 0xe0, 0x22, 0x21, 0x0e, 0x41, 0xc8, 0x5e, 0x3a,\n\t0x73, 0x92, 0x81, 0xd0, 0xc2, 0x2c, 0x67, 0xe9, 0x49, 0xd7, 0xbd,\n\t0x0e, 0x0d, 0xe6, 0xeb, 0x0a, 0x04, 0xd4, 0xf0, 0x8c, 0x6d, 0xec,\n\t0x0c, 0x1a, 0x9c, 0x00, 0x8d, 0x41, 0x72, 0x28, 0xbc, 0x40, 0x70,\n\t0xd2, 0x0a, 0x5b, 0x78, 0xc2, 0x2d, 0x93, 0x00, 0x08, 0x3d, 0x3c,\n\t0xf3, 0x9d, 0x93, 0x44, 0xe4, 0x21, 0x0c, 0x91, 0x88, 0x46, 0x74,\n\t0x71, 0x89, 0x8a, 0xfe, 0x68, 0x44, 0x22, 0x96, 0x19, 0xcf, 0x5d,\n\t0xc2, 0xb3, 0x97, 0x54, 0x98, 0x26, 0x35, 0x97, 0x10, 0xca, 0x35,\n\t0xc6, 0x05, 0x02, 0x24, 0x10, 0x01, 0x09, 0x20, 0xd0, 0x2c, 0x0e,\n\t0x30, 0x50, 0x12, 0x4c, 0x38, 0xa7, 0x3a, 0x8f, 0xa0, 0x04, 0x21,\n\t0xe0, 0xe1, 0x9f, 0x18, 0xa5, 0xa4, 0x46, 0x0f, 0x89, 0xd1, 0x7f,\n\t0xf2, 0x81, 0x10, 0x5c, 0x38, 0x67, 0x27, 0xa5, 0x50, 0x87, 0xd7,\n\t0x45, 0xc2, 0xa0, 0x02, 0x02, 0x80, 0x43, 0x5f, 0x07, 0x51, 0x4e,\n\t0xd6, 0x92, 0xa2, 0xb9, 0x74, 0x67, 0x47, 0x67, 0x4a, 0xd3, 0x9a,\n\t0xf2, 0x21, 0x10, 0x58, 0x10, 0xe8, 0x15, 0xa4, 0xa0, 0x3d, 0xd1,\n\t0xc5, 0x2e, 0xa5, 0x4e, 0xb2, 0x63, 0x44, 0xd1, 0x69, 0xcb, 0x23,\n\t0x24, 0x01, 0x0e, 0x17, 0xad, 0xa9, 0x52, 0x97, 0x0a, 0x4f, 0x55,\n\t0xe8, 0x94, 0xa4, 0x26, 0x45, 0xa9, 0x80, 0xc8, 0xf9, 0xba, 0x40,\n\t0xec, 0x71, 0xa2, 0x15, 0x95, 0x43, 0x1f, 0x98, 0xca, 0x55, 0xae,\n\t0x7e, 0x34, 0xa4, 0x03, 0x2d, 0x28, 0x50, 0x05, 0x32, 0x80, 0x57,\n\t0x8a, 0xae, 0x0e, 0x52, 0x78, 0xe9, 0x14, 0x82, 0x10, 0x87, 0xa4,\n\t0x76, 0xf5, 0xad, 0x36, 0xc5, 0x69, 0x27, 0xab, 0xe0, 0xb8, 0x6b,\n\t0x66, 0x33, 0xa5, 0x75, 0x14, 0x9e, 0x20, 0x94, 0xb0, 0x4e, 0x38,\n\t0xe8, 0x12, 0xae, 0x80, 0xad, 0x29, 0x15, 0x36, 0x89, 0x05, 0x47,\n\t0x84, 0x72, 0x94, 0x63, 0x15, 0x08, 0x55, 0x45, 0x57, 0x06, 0x32,\n\t0x24, 0x41, 0x09, 0x6c, 0x75, 0x6b, 0x60, 0x27, 0xfb, 0xce, 0xaf,\n\t0x32, 0xc1, 0x9a, 0x51, 0x4d, 0x2c, 0x5d, 0xf2, 0xfa, 0x38, 0x34,\n\t0x88, 0xe1, 0xb3, 0x64, 0xf0, 0xeb, 0x56, 0x29, 0x4b, 0xda, 0x77,\n\t0xe6, 0x41, 0x12, 0x2d, 0x3c, 0x43, 0xcb, 0x34, 0xab, 0x52, 0xb3,\n\t0x96, 0xe1, 0xb3, 0x62, 0x98, 0xfe, 0xc3, 0x1b, 0x24, 0x5b, 0xda,\n\t0xda, 0x16, 0xa2, 0x0f, 0xa8, 0xdd, 0xde, 0x5d, 0x13, 0x9b, 0xc3,\n\t0x48, 0x78, 0xf6, 0xb3, 0x63, 0x78, 0x83, 0x1c, 0x64, 0x6a, 0xdb,\n\t0xe2, 0x96, 0xd4, 0xa4, 0x5e, 0xf0, 0x1e, 0x6d, 0x04, 0xf0, 0xb9,\n\t0xd7, 0x7e, 0x56, 0xb6, 0xb4, 0x2d, 0x6e, 0x69, 0x71, 0xcb, 0x3d,\n\t0x48, 0xc8, 0x8e, 0xb5, 0xe3, 0x3c, 0x03, 0x70, 0xdf, 0x10, 0x07,\n\t0xe2, 0x4a, 0xd7, 0xb6, 0x75, 0x08, 0x9c, 0x19, 0x54, 0xa0, 0xdc,\n\t0x94, 0x1a, 0xc0, 0x03, 0x67, 0x90, 0xed, 0x5f, 0xbf, 0x5b, 0xdc,\n\t0x3e, 0x98, 0xc1, 0x0b, 0xe2, 0xbc, 0x59, 0x79, 0xe7, 0x12, 0x01,\n\t0xe8, 0xb2, 0x57, 0xba, 0x7c, 0xd8, 0x01, 0x49, 0x14, 0x20, 0x02,\n\t0x4e, 0xa8, 0x42, 0x15, 0x99, 0xb8, 0x57, 0x4a, 0x77, 0x10, 0x87,\n\t0xee, 0xde, 0x57, 0xba, 0x2c, 0x40, 0xd8, 0x31, 0x54, 0xe9, 0x8d,\n\t0x8b, 0x65, 0x0c, 0x86, 0xcb, 0x11, 0x80, 0x0e, 0xe2, 0x20, 0x87,\n\t0x03, 0x4b, 0x57, 0x0e, 0x10, 0x36, 0xc8, 0xcb, 0x30, 0xa7, 0x39,\n\t0x37, 0x1d, 0x63, 0xb5, 0x73, 0x82, 0xc3, 0x6c, 0x2d, 0x2c, 0xdd,\n\t0x14, 0x1c, 0x84, 0x01, 0x0b, 0xd6, 0x5a, 0x87, 0xdd, 0x84, 0x2a,\n\t0xda, 0x10, 0xd8, 0xc0, 0xcf, 0x1c, 0x04, 0x1c, 0xdc, 0x90, 0x07,\n\t0x12, 0x3b, 0x33, 0x0f, 0x6e, 0x70, 0x83, 0x77, 0x9f, 0xf9, 0x07,\n\t0x11, 0x89, 0x80, 0x80, 0xdc, 0x18, 0x15, 0x36, 0xe4, 0x18, 0x99,\n\t0x01, 0x4c, 0x58, 0xab, 0xef, 0x74, 0xc3, 0x0c, 0x62, 0x60, 0x83,\n\t0x1a, 0xdb, 0xb8, 0x10, 0x83, 0xc8, 0x81, 0x0c, 0x64, 0x90, 0x83,\n\t0x41, 0xfc, 0xd3, 0x0f, 0xf1, 0x1d, 0x08, 0x27, 0xde, 0x58, 0xc3,\n\t0xae, 0xcd, 0xe9, 0x0d, 0x6f, 0xa0, 0xc3, 0x3b, 0x07, 0x61, 0x83,\n\t0x18, 0xcc, 0x60, 0x06, 0x15, 0x7e, 0x72, 0xfe, 0x1e, 0x68, 0x30,\n\t0x65, 0x1a, 0x38, 0x19, 0x9e, 0xfa, 0x25, 0x48, 0xdd, 0x08, 0xc8,\n\t0xb3, 0xdc, 0xe9, 0xce, 0x1b, 0x3c, 0x3a, 0xc9, 0x00, 0x30, 0xc0,\n\t0x83, 0x22, 0xf0, 0x20, 0x4d, 0x24, 0x21, 0xf0, 0x88, 0x63, 0x5c,\n\t0xe6, 0x33, 0xa7, 0x19, 0x9e, 0x83, 0x70, 0xc3, 0x0d, 0xdc, 0x60,\n\t0xe5, 0x42, 0xe6, 0x21, 0x07, 0x39, 0x38, 0x74, 0x21, 0xe4, 0x70,\n\t0x03, 0x1c, 0xbc, 0xd9, 0xb4, 0x6c, 0x96, 0x81, 0x9b, 0x31, 0xda,\n\t0x63, 0x39, 0xab, 0x82, 0xce, 0xb7, 0xc3, 0xf3, 0x49, 0x2a, 0xe0,\n\t0x04, 0x2b, 0x64, 0xe1, 0xd4, 0x51, 0xe0, 0xc1, 0xbb, 0x8c, 0x5c,\n\t0xe0, 0x1d, 0xf3, 0x12, 0x07, 0x32, 0x88, 0x41, 0x0d, 0x2e, 0xfd,\n\t0x4c, 0x25, 0x9b, 0x39, 0xcd, 0x83, 0xb8, 0x41, 0x0c, 0x64, 0x2d,\n\t0xd3, 0x3c, 0xd4, 0x60, 0xd7, 0x38, 0xc0, 0x68, 0xae, 0x77, 0x7d,\n\t0x83, 0x46, 0xc3, 0x93, 0x0e, 0x19, 0x16, 0x88, 0x1a, 0xb8, 0x4c,\n\t0x43, 0x12, 0x4c, 0xc6, 0x09, 0x59, 0x98, 0xe6, 0x15, 0xb2, 0xc0,\n\t0x83, 0x84, 0x44, 0x40, 0xc4, 0x30, 0x7e, 0xa6, 0x1e, 0xdc, 0x80,\n\t0x03, 0x49, 0xbf, 0x13, 0x07, 0x66, 0x96, 0x41, 0xb0, 0x0b, 0xe1,\n\t0x6b, 0x19, 0x18, 0xba, 0x90, 0x70, 0x38, 0x33, 0x93, 0x8d, 0x6d,\n\t0x5a, 0x1c, 0x58, 0x7a, 0xa6, 0x59, 0x06, 0x00, 0xd6, 0x68, 0xa8,\n\t0xb5, 0x6b, 0xc4, 0x1b, 0x21, 0x3c, 0x88, 0xb6, 0x4e, 0xa3, 0x00,\n\t0xe8, 0x7c, 0xc5, 0x41, 0xb8, 0x93, 0x75, 0x83, 0xb9, 0x65, 0x50,\n\t0x03, 0x39, 0xe4, 0x01, 0x07, 0x67, 0x9e, 0x81, 0x0c, 0x6e, 0x90,\n\t0x07, 0x3a, 0xdc, 0xc0, 0xdc, 0x31, 0xc8, 0x41, 0x69, 0x13, 0x2c,\n\t0xe7, 0x4e, 0x30, 0x1b, 0x6f, 0xc3, 0x30, 0x42, 0xd0, 0x06, 0x00,\n\t0x6d, 0x81, 0xee, 0x91, 0xda, 0x08, 0x61, 0xc1, 0xbf, 0xfe, 0xc5,\n\t0x1c, 0x58, 0x39, 0xb0, 0x59, 0xe1, 0x34, 0xa0, 0x41, 0xc2, 0x13,\n\t0x9e, 0xf2, 0x95, 0xbb, 0xa1, 0xb4, 0x9d, 0x26, 0x08, 0x04, 0x42,\n\t0x01, 0xea, 0x6d, 0x18, 0x03, 0x0b, 0x51, 0x48, 0xf6, 0x41, 0x0e,\n\t0x10, 0x05, 0x91, 0xce, 0x32, 0x0b, 0x45, 0x10, 0x08, 0x04, 0x44,\n\t0xa0, 0x86, 0x4c, 0xa8, 0x01, 0x06, 0x80, 0x90, 0xc3, 0xa0, 0x9d,\n\t0xb9, 0xd1, 0x66, 0xc2, 0x13, 0xd6, 0x67, 0x9e, 0x72, 0xd4, 0xcd,\n\t0xad, 0x70, 0xaa, 0xc7, 0xe0, 0x06, 0xae, 0xf6, 0x65, 0xd3, 0x31,\n\t0x8a, 0xec, 0x56, 0xaa, 0xe2, 0x1a, 0x78, 0xbb, 0xc6, 0x30, 0x72,\n\t0x6a, 0x05, 0x0c, 0x90, 0x04, 0x03, 0x1e, 0xff, 0x39, 0x0f, 0xb6,\n\t0x09, 0x0d, 0x44, 0xb1, 0xc3, 0x1d, 0xee, 0x40, 0x47, 0x35, 0x1a,\n\t0xa1, 0x07, 0x7f, 0x4e, 0x72, 0x9e, 0x86, 0xc8, 0xbb, 0xde, 0x27,\n\t0x09, 0x4f, 0x3d, 0xdc, 0x60, 0xc9, 0x53, 0x8e, 0x35, 0x0d, 0x6a,\n\t0x10, 0xf8, 0xc0, 0xdb, 0x80, 0xe4, 0xf0, 0xd4, 0xbb, 0xe2, 0x0d,\n\t0xd1, 0xd1, 0x7b, 0x03, 0x00, 0x03, 0x5d, 0x20, 0x86, 0x31, 0x86,\n\t0x41, 0x8c, 0x2e, 0xfc, 0x3c, 0x03, 0x67, 0xf7, 0xf9, 0xcf, 0x9b,\n\t0x00, 0x33, 0x0d, 0xf1, 0x87, 0x4a, 0xe8, 0x70, 0x06, 0x33, 0x7b,\n\t0xd9, 0x88, 0x5a, 0x98, 0xfe, 0xf4, 0xa6, 0x4f, 0x85, 0x21, 0xec,\n\t0xce, 0xcb, 0x6d, 0xdb, 0x20, 0xe5, 0x35, 0x88, 0xf4, 0xc1, 0x6b,\n\t0x00, 0xfb, 0x77, 0xff, 0x13, 0x15, 0xa8, 0x47, 0x3d, 0x2a, 0x30,\n\t0x1a, 0xe7, 0x82, 0xa0, 0x5d, 0xf3, 0xa6, 0xae, 0xb6, 0x42, 0x30,\n\t0xa0, 0x6f, 0x8f, 0x17, 0x23, 0x1d, 0x9e, 0x77, 0x13, 0x95, 0x74,\n\t0xe4, 0x0c, 0x5f, 0x22, 0xa2, 0x16, 0x06, 0x8a, 0x0a, 0x2a, 0x58,\n\t0xdf, 0xcb, 0x41, 0x34, 0xfc, 0xd2, 0x7a, 0xa0, 0x43, 0x1e, 0xb2,\n\t0xfe, 0xee, 0xcb, 0x45, 0xf0, 0xc2, 0x2c, 0xbc, 0x60, 0x04, 0xf5,\n\t0x0b, 0x41, 0xf1, 0x82, 0xf0, 0x1c, 0xf8, 0x40, 0x3f, 0x7b, 0xf1,\n\t0xa7, 0xd9, 0x85, 0x79, 0x44, 0x49, 0x4a, 0xe8, 0x58, 0x7e, 0x87,\n\t0xd0, 0x71, 0x09, 0x44, 0xf2, 0x01, 0x11, 0xb6, 0x38, 0xcb, 0xf4,\n\t0xbf, 0xcb, 0x87, 0x45, 0xf4, 0xc2, 0x2c, 0xbd, 0xb0, 0x08, 0xe3,\n\t0x17, 0x73, 0x04, 0x71, 0x7e, 0x69, 0x97, 0x7e, 0xc3, 0x07, 0x7c,\n\t0xc6, 0xf0, 0x7e, 0xf0, 0x97, 0x28, 0x54, 0x92, 0x0d, 0xa3, 0x57,\n\t0x08, 0xa8, 0x60, 0x0b, 0xbc, 0x50, 0x81, 0x16, 0xc8, 0x0b, 0xb5,\n\t0x80, 0x08, 0xe3, 0x37, 0x59, 0x7c, 0x60, 0x08, 0xa9, 0x70, 0x81,\n\t0x17, 0xa8, 0x7a, 0x03, 0x38, 0x3b, 0x15, 0xb0, 0x05, 0x69, 0x17,\n\t0x7c, 0x67, 0x97, 0x76, 0x58, 0xe0, 0x7e, 0xbf, 0xc2, 0x21, 0xf2,\n\t0xb7, 0x0e, 0x96, 0xb0, 0x4b, 0x88, 0xb0, 0x08, 0x34, 0x58, 0x83,\n\t0x8c, 0xb0, 0x7a, 0xf7, 0xc5, 0x07, 0x87, 0xc0, 0x08, 0x35, 0x68,\n\t0x83, 0x11, 0xf8, 0x4e, 0x74, 0x00, 0x62, 0x03, 0x41, 0x7c, 0x27,\n\t0x08, 0x72, 0x0a, 0x71, 0x00, 0x50, 0xe0, 0x73, 0x5d, 0x90, 0x0e,\n\t0xd0, 0xf2, 0x26, 0xf2, 0xd7, 0x0e, 0xce, 0xb0, 0x4b, 0x4d, 0xe7,\n\t0x74, 0xec, 0x35, 0x85, 0x1b, 0x58, 0x48, 0x7e, 0xa0, 0x73, 0x02,\n\t0x50, 0x04, 0xeb, 0x27, 0x6d, 0x66, 0x07, 0x31, 0x1d, 0x37, 0x4d,\n\t0xc5, 0x00, 0x2d, 0xd1, 0xe2, 0x80, 0x32, 0xd3, 0x0c, 0x4f, 0x56,\n\t0x5c, 0x7b, 0x10, 0x6f, 0x18, 0x90, 0x84, 0x69, 0x77, 0x05, 0x39,\n\t0x57, 0x12, 0x5c, 0x28, 0x50, 0xc3, 0xc0, 0x80, 0xd0, 0x52, 0x2a,\n\t0x19, 0x82, 0x0e, 0xea, 0x80, 0x86, 0x69, 0x58, 0x5b, 0x7a, 0x90,\n\t0x65, 0x06, 0x10, 0x86, 0x1e, 0x97, 0x05, 0x4e, 0x40, 0x4a, 0xbe,\n\t0xe7, 0x73, 0xfe, 0x63, 0x48, 0x86, 0x77, 0xc8, 0x87, 0x7d, 0x48,\n\t0x5a, 0x7d, 0xd0, 0x00, 0x03, 0x71, 0x00, 0x46, 0xd0, 0x85, 0xd3,\n\t0x64, 0x84, 0x24, 0x11, 0x88, 0xeb, 0xb7, 0x84, 0x8a, 0xf8, 0x2b,\n\t0xf4, 0x47, 0x85, 0x8d, 0xb8, 0x54, 0x1a, 0xf5, 0x87, 0x00, 0x60,\n\t0x00, 0x18, 0x20, 0x88, 0x69, 0xb7, 0x05, 0x5f, 0x58, 0x12, 0xf9,\n\t0x36, 0x4d, 0x58, 0x10, 0x0e, 0x76, 0xb8, 0x89, 0xe7, 0x60, 0x09,\n\t0x87, 0x70, 0x08, 0xfd, 0x04, 0x4f, 0x1a, 0xd5, 0x87, 0x1c, 0x35,\n\t0x8b, 0x88, 0xf0, 0x08, 0x88, 0x60, 0x08, 0x3b, 0x50, 0x04, 0x4e,\n\t0xb0, 0x49, 0x27, 0xf8, 0x71, 0x1a, 0x77, 0x12, 0x07, 0xf0, 0x04,\n\t0x22, 0x35, 0x0c, 0xb0, 0xd8, 0x26, 0xe0, 0x90, 0x0d, 0xd6, 0xd0,\n\t0x0c, 0xce, 0x70, 0x09, 0x96, 0xf0, 0x08, 0xcc, 0x24, 0x85, 0x85,\n\t0x60, 0x08, 0x98, 0x50, 0x09, 0x98, 0x40, 0x8d, 0x9e, 0x58, 0x5c,\n\t0x84, 0x84, 0x08, 0x96, 0x70, 0x09, 0xcd, 0xd0, 0x0c, 0xd9, 0xe0,\n\t0x4d, 0x3c, 0x13, 0x0e, 0x93, 0xd7, 0x05, 0x64, 0x77, 0x82, 0xa8,\n\t0x98, 0x12, 0xab, 0x38, 0x4b, 0xad, 0xf8, 0x8a, 0x64, 0xc8, 0x0d,\n\t0xe3, 0x93, 0x0d, 0xcd, 0x70, 0x09, 0x8f, 0x70, 0x77, 0x95, 0xe0,\n\t0x0c, 0x13, 0x03, 0x0e, 0x14, 0x73, 0x8f, 0x3f, 0x68, 0x5b, 0x83,\n\t0x64, 0x08, 0x96, 0xc0, 0x8f, 0x2a, 0x46, 0x86, 0xe9, 0x80, 0x8e,\n\t0x5d, 0x20, 0x4d, 0x02, 0x05, 0x74, 0xf3, 0x05, 0x00, 0x03, 0x30,\n\t0x89, 0xec, 0xc7, 0x82, 0x9b, 0x48, 0x6f, 0x5a, 0x93, 0x0d, 0xce,\n\t0x50, 0x90, 0xda, 0x10, 0x64, 0xbf, 0x62, 0x0d, 0x95, 0x80, 0x5f,\n\t0x86, 0x70, 0x09, 0xd6, 0x10, 0x6a, 0xcb, 0x98, 0x0e, 0xc6, 0x50,\n\t0x0c, 0x0c, 0x69, 0x6a, 0x4e, 0xa0, 0x73, 0x26, 0x71, 0x00, 0xa6,\n\t0x48, 0x0c, 0xe6, 0xb0, 0xfe, 0x89, 0xd7, 0x50, 0x8e, 0x16, 0x49,\n\t0x92, 0xd0, 0xd2, 0x0d, 0x31, 0x68, 0x85, 0x3a, 0x69, 0x85, 0x85,\n\t0x60, 0x09, 0x23, 0x79, 0x3b, 0x1c, 0xb9, 0x8c, 0xe7, 0x60, 0x92,\n\t0x96, 0x07, 0x87, 0xa9, 0xa8, 0x12, 0xa4, 0x16, 0x6d, 0x58, 0x40,\n\t0x0c, 0xd1, 0x20, 0x0d, 0xda, 0xc0, 0x35, 0xa3, 0xc2, 0x0d, 0xd2,\n\t0x20, 0x0d, 0x35, 0x39, 0x3e, 0x2b, 0x36, 0x2a, 0xdb, 0x70, 0x09,\n\t0x95, 0xb0, 0x95, 0x5c, 0xd9, 0x95, 0x5e, 0xf9, 0x95, 0x60, 0xe9,\n\t0x0c, 0x59, 0x03, 0x47, 0x42, 0x39, 0x2a, 0xf3, 0x50, 0x0c, 0x51,\n\t0x70, 0x94, 0x85, 0xe1, 0x04, 0x5d, 0x60, 0x0c, 0xd1, 0xf0, 0x96,\n\t0x4d, 0x59, 0x0d, 0xda, 0x30, 0x97, 0xd5, 0x20, 0x0d, 0x4d, 0x39,\n\t0x96, 0x55, 0xa9, 0x35, 0xb0, 0xf8, 0x0e, 0xf1, 0xd0, 0x97, 0x7e,\n\t0xf9, 0x97, 0x80, 0x19, 0x98, 0x80, 0x09, 0x0f, 0x17, 0xd7, 0x65,\n\t0x65, 0xe9, 0x33, 0x99, 0x60, 0x88, 0x28, 0x71, 0x01, 0x60, 0x57,\n\t0x97, 0x70, 0xf9, 0x98, 0x6f, 0xe9, 0x94, 0x79, 0x69, 0x93, 0x8a,\n\t0x08, 0x0f, 0xf2, 0x70, 0x99, 0x98, 0x99, 0x99, 0x9a, 0xb9, 0x99,\n\t0x98, 0x49, 0x98, 0xf4, 0xd6, 0x0d, 0x87, 0xf9, 0x2b, 0xe6, 0xa0,\n\t0x06, 0x0f, 0x59, 0x10, 0x1b, 0xc6, 0x33, 0xda, 0xe0, 0x98, 0x8f,\n\t0x29, 0x0d, 0xd5, 0x80, 0x3b, 0x76, 0xc6, 0x0d, 0xf4, 0x68, 0x91,\n\t0x57, 0xf9, 0x2b, 0xee, 0xc0, 0x99, 0xb6, 0x69, 0x9b, 0x9e, 0x49,\n\t0x6f, 0xb3, 0x19, 0x9a, 0xe7, 0x10, 0x22, 0x43, 0x61, 0x4a, 0x74,\n\t0x46, 0x97, 0xd5, 0x90, 0x0d, 0x78, 0x69, 0x67, 0x77, 0x76, 0x67,\n\t0xdc, 0x50, 0x73, 0x41, 0x49, 0x86, 0xef, 0x70, 0x9b, 0xce, 0x89,\n\t0x99, 0xf1, 0x50, 0x0e, 0x35, 0x09, 0x95, 0xbc, 0x39, 0x2a, 0xc2,\n\t0xa2, 0x12, 0x11, 0x70, 0x39, 0x93, 0xfe, 0x69, 0x9c, 0xc7, 0xd9,\n\t0x9d, 0xb1, 0x49, 0x99, 0x4d, 0x18, 0x0f, 0xcf, 0xe9, 0x9c, 0xe8,\n\t0x50, 0x93, 0xa0, 0x59, 0x9d, 0xbf, 0xc2, 0x0d, 0x5e, 0x53, 0x12,\n\t0x0a, 0xf0, 0x69, 0xdb, 0xd9, 0x9d, 0xf0, 0x89, 0x9c, 0x05, 0x44,\n\t0x9d, 0x9c, 0x28, 0x9e, 0xf1, 0x00, 0x0f, 0x70, 0xf7, 0x21, 0x1e,\n\t0xe2, 0x0e, 0xf0, 0x00, 0x0f, 0xe2, 0xb9, 0x99, 0xee, 0x50, 0x95,\n\t0xcb, 0x89, 0x9e, 0x52, 0xf2, 0x0c, 0x44, 0x76, 0x33, 0x39, 0x33,\n\t0x99, 0x0c, 0x16, 0x9f, 0xf1, 0xf9, 0x9d, 0xa9, 0xb4, 0x9b, 0x38,\n\t0x12, 0x77, 0x33, 0xb4, 0x9b, 0xe8, 0xc0, 0x9f, 0xff, 0x09, 0x0f,\n\t0xe8, 0x50, 0x73, 0x3c, 0xd3, 0x0d, 0xb9, 0x43, 0xa0, 0x9c, 0xc8,\n\t0x09, 0xca, 0x35, 0x6f, 0x93, 0xc9, 0xa0, 0x24, 0x5a, 0x98, 0xdb,\n\t0xd0, 0xa1, 0x38, 0x52, 0x0e, 0xa8, 0x04, 0x9e, 0x9c, 0xd8, 0x0e,\n\t0xe7, 0x50, 0x93, 0xdc, 0x00, 0x0e, 0x52, 0x02, 0x27, 0x36, 0xe2,\n\t0xa1, 0xe7, 0xc0, 0x0d, 0xce, 0x56, 0x2d, 0x29, 0x96, 0x97, 0xdc,\n\t0x59, 0xa2, 0xc7, 0xe9, 0xa0, 0x05, 0xa4, 0xa1, 0xdb, 0x40, 0x9f,\n\t0xbf, 0x62, 0xa2, 0x07, 0x29, 0x25, 0x2e, 0xa8, 0x23, 0xcf, 0x82,\n\t0x9e, 0xe8, 0xe0, 0x2e, 0x24, 0xd1, 0x02, 0x42, 0x1a, 0x6a, 0x3e,\n\t0xca, 0xa0, 0x93, 0xa9, 0x9b, 0x9b, 0x68, 0xa4, 0x79, 0x33, 0x2a,\n\t0x49, 0xaa, 0x23, 0x0b, 0x13, 0x9a, 0xea, 0xa9, 0x10, 0x28, 0x16,\n\t0xa5, 0x99, 0x33, 0xa5, 0xf1, 0x29, 0xa6, 0x16, 0x39, 0xa0, 0x51,\n\t0x79, 0xa6, 0x2d, 0xf8, 0x84, 0x4b, 0xca, 0x9b, 0xe8, 0xd0, 0x62,\n\t0x08, 0xf1, 0x63, 0x55, 0xba, 0xa0, 0x64, 0x7a, 0x9c, 0x66, 0x2a,\n\t0x9b, 0x64, 0x68, 0xa4, 0xda, 0x00, 0x2d, 0x5b, 0x4a, 0x25, 0x1e,\n\t0x7a, 0x40, 0x08, 0x31, 0x67, 0x73, 0x5a, 0xa7, 0xfe, 0xf0, 0x09,\n\t0xa4, 0x55, 0xba, 0xa1, 0xb3, 0x69, 0xa4, 0x72, 0x79, 0x87, 0x4f,\n\t0xd8, 0x0e, 0x6d, 0x1a, 0x9a, 0xdb, 0xb0, 0x9e, 0x03, 0x11, 0x01,\n\t0xb6, 0x33, 0xa8, 0x84, 0x6a, 0xa7, 0x87, 0x4a, 0x6f, 0x28, 0xba,\n\t0x3b, 0x16, 0xa9, 0x0d, 0xd2, 0xc0, 0x0d, 0x8f, 0x8a, 0x23, 0x7d,\n\t0xda, 0x21, 0x5d, 0x2a, 0x94, 0xba, 0x73, 0x9d, 0x06, 0x01, 0xa5,\n\t0x99, 0x7a, 0xa9, 0x98, 0x9a, 0xa9, 0xae, 0x8a, 0x37, 0x76, 0x09,\n\t0xa1, 0x53, 0xc2, 0xa5, 0xa1, 0x2a, 0x94, 0xb9, 0xe3, 0xa4, 0x06,\n\t0x61, 0x71, 0xab, 0xca, 0xaa, 0xba, 0xf3, 0xaa, 0xbe, 0xba, 0x0d,\n\t0xda, 0xd0, 0x94, 0xb0, 0x38, 0x33, 0x79, 0x88, 0x9e, 0x77, 0xd3,\n\t0x0d, 0xc7, 0x30, 0x3b, 0x0a, 0xa0, 0x9d, 0x87, 0xda, 0xa3, 0x64,\n\t0x6a, 0xa8, 0xbf, 0x9a, 0x97, 0xc1, 0x2a, 0x0d, 0x44, 0x6a, 0xa3,\n\t0x64, 0xb8, 0x33, 0x06, 0x24, 0x84, 0x02, 0x51, 0x3b, 0xaf, 0xca,\n\t0xab, 0x1a, 0xca, 0x60, 0x52, 0xc2, 0xa9, 0xd1, 0x5a, 0x0d, 0x6f,\n\t0xd9, 0x60, 0xd6, 0xba, 0x89, 0xb1, 0xd9, 0x0d, 0x56, 0x62, 0x10,\n\t0x24, 0xe0, 0xab, 0xce, 0x5a, 0xa2, 0xd0, 0xaa, 0x4a, 0x52, 0xa2,\n\t0x0e, 0x5c, 0x7a, 0x0e, 0x77, 0x4a, 0x43, 0xe4, 0x1a, 0x0d, 0x7b,\n\t0x7a, 0xae, 0xf3, 0x88, 0x37, 0xd4, 0x20, 0x01, 0x1a, 0x76, 0xaf,\n\t0x40, 0x49, 0xa8, 0x34, 0x74, 0x9e, 0x48, 0xba, 0x7c, 0xe8, 0x00,\n\t0xad, 0x79, 0x99, 0x0d, 0x91, 0xc9, 0xaf, 0xd0, 0x02, 0xa4, 0xff,\n\t0x6a, 0x10, 0x30, 0x80, 0xa5, 0x30, 0x3a, 0xa5, 0xf1, 0xfa, 0x2b,\n\t0x0e, 0x38, 0x7f, 0x02, 0xab, 0x35, 0xc1, 0xfa, 0x96, 0x3d, 0xe3,\n\t0xb0, 0x38, 0xb2, 0xa2, 0xa9, 0x64, 0xa0, 0x06, 0x21, 0x43, 0xd1,\n\t0xfa, 0xae, 0xf2, 0x49, 0x43, 0xb3, 0x99, 0xb1, 0x1d, 0xf2, 0xfe,\n\t0xa2, 0xaf, 0x6a, 0x97, 0x4d, 0x29, 0xab, 0x6d, 0x82, 0xa2, 0x8a,\n\t0x28, 0xae, 0x70, 0x04, 0xa8, 0x05, 0x61, 0xb2, 0xd1, 0x7a, 0xa2,\n\t0xdc, 0x09, 0x9b, 0xf4, 0x36, 0x97, 0x7c, 0xfa, 0x84, 0xec, 0x40,\n\t0xb1, 0x34, 0xc4, 0xb0, 0x91, 0x29, 0xb3, 0x37, 0xba, 0xa1, 0x76,\n\t0x06, 0x95, 0x2a, 0x9a, 0x9c, 0x16, 0x89, 0xac, 0x22, 0x32, 0xb1,\n\t0x3b, 0xeb, 0xaa, 0x9f, 0x1a, 0xaa, 0xa3, 0xda, 0xb2, 0xbe, 0x0a,\n\t0xb3, 0x77, 0x19, 0x2d, 0x17, 0xf3, 0x2c, 0x4e, 0xbb, 0xb3, 0xde,\n\t0x80, 0xaa, 0x04, 0x21, 0xa7, 0x53, 0x5b, 0xa5, 0x75, 0xa9, 0x88,\n\t0x57, 0xeb, 0xb2, 0xae, 0xea, 0xa9, 0xab, 0x79, 0x0d, 0xb0, 0xb9,\n\t0x3b, 0xa9, 0x89, 0x97, 0xd1, 0xea, 0x0d, 0x30, 0x70, 0x10, 0xed,\n\t0x5a, 0xb6, 0x93, 0xe9, 0xa9, 0xd2, 0xb0, 0x89, 0xeb, 0x90, 0x28,\n\t0x32, 0x63, 0xaf, 0xbe, 0x9a, 0x9a, 0x90, 0xb9, 0x9a, 0x72, 0x1b,\n\t0xad, 0xbd, 0x73, 0x10, 0xdc, 0x8a, 0xb7, 0x55, 0x39, 0xad, 0xb0,\n\t0x88, 0x0e, 0x19, 0x62, 0x2a, 0x38, 0xb2, 0xb1, 0xb7, 0xa3, 0xb7,\n\t0xab, 0xd9, 0x9a, 0x78, 0x8b, 0xac, 0xa4, 0xc4, 0x00, 0xcc, 0xaa,\n\t0xb8, 0xf4, 0x46, 0xae, 0x7b, 0xcb, 0x9b, 0x65, 0x3b, 0x97, 0xa2,\n\t0xcb, 0xb9, 0x79, 0x23, 0xb6, 0x15, 0x47, 0xb4, 0x65, 0xeb, 0xb9,\n\t0x48, 0xfb, 0x2b, 0xa4, 0x4b, 0xba, 0x06, 0x04, 0xb0, 0x08, 0x21,\n\t0xb5, 0xad, 0x3b, 0x3e, 0xf9, 0x8a, 0xa6, 0x57, 0x3a, 0xbb, 0x8a,\n\t0x1b, 0xb6, 0x0a, 0xc1, 0x01, 0x95, 0x8a, 0xbb, 0x5a, 0x93, 0xaf,\n\t0xd5, 0x10, 0x9a, 0x92, 0x0b, 0x94, 0x3d, 0x3b, 0xbc, 0x05, 0xeb,\n\t0x30, 0x37, 0xe3, 0x9e, 0xbe, 0x8b, 0x9a, 0x70, 0xf9, 0xb1, 0xcb,\n\t0x88, 0xba, 0x9f, 0x89, 0xb2, 0x0a, 0x9b, 0xa9, 0xdd, 0x90, 0x67,\n\t0x08, 0xfe, 0x63, 0xbc, 0x54, 0x1b, 0x99, 0xb6, 0x3b, 0x2a, 0xd0,\n\t0x5b, 0xb0, 0x3e, 0x3a, 0xbd, 0x0a, 0x1a, 0x0a, 0x56, 0x03, 0xa6,\n\t0x3b, 0xba, 0xbc, 0x46, 0xdb, 0x94, 0xdb, 0x1b, 0xb2, 0x60, 0x6b,\n\t0xb1, 0xbf, 0x6a, 0x40, 0xbe, 0x53, 0x12, 0x30, 0x80, 0xbd, 0x99,\n\t0x9a, 0xaf, 0x6f, 0x59, 0x0d, 0xb3, 0x09, 0xbe, 0xef, 0x49, 0xa6,\n\t0xbe, 0xda, 0x0d, 0xd4, 0x20, 0xa9, 0x09, 0x11, 0xa6, 0xcb, 0xab,\n\t0x35, 0x5a, 0x1b, 0x99, 0x72, 0x99, 0x9a, 0xac, 0x39, 0xb5, 0x84,\n\t0x8a, 0xbf, 0x05, 0xd4, 0xbf, 0x2a, 0x21, 0xa2, 0x01, 0xbc, 0x0d,\n\t0xaa, 0x09, 0x99, 0x07, 0xbc, 0xb3, 0x74, 0xfa, 0xbd, 0xd4, 0xcb,\n\t0xc0, 0x2a, 0x21, 0x00, 0x6a, 0x20, 0xbf, 0x99, 0x6a, 0xc0, 0x53,\n\t0x39, 0x95, 0x72, 0x59, 0xb6, 0x15, 0x0c, 0xaf, 0x87, 0x6a, 0x40,\n\t0x39, 0x2a, 0x14, 0x0c, 0x40, 0x73, 0x0f, 0x1c, 0xc0, 0x23, 0x4c,\n\t0xa2, 0x0a, 0xbc, 0xa1, 0xc7, 0x70, 0xa0, 0x2a, 0xc1, 0x01, 0x9b,\n\t0xbb, 0xc2, 0xad, 0xdb, 0xc2, 0x0c, 0xfa, 0xc2, 0x79, 0xa3, 0x0a,\n\t0x5f, 0x01, 0x9c, 0x36, 0x8c, 0xbb, 0x09, 0x5c, 0xa5, 0xde, 0xc0,\n\t0x09, 0x71, 0x41, 0x02, 0x35, 0xfc, 0xc3, 0x78, 0x8b, 0xb2, 0xf0,\n\t0x79, 0xa8, 0xba, 0x1b, 0x17, 0x20, 0x50, 0xbe, 0x48, 0x8c, 0xb7,\n\t0xcf, 0x7a, 0xa8, 0xda, 0x70, 0xc2, 0x5f, 0x01, 0x01, 0x9f, 0xc6,\n\t0xc1, 0x51, 0xfc, 0xa0, 0x24, 0x3c, 0xa7, 0xc9, 0x3a, 0x18, 0x03,\n\t0x00, 0x03, 0xa7, 0xb4, 0xc5, 0x22, 0x2c, 0xbd, 0x25, 0x5c, 0xc5,\n\t0x92, 0x21, 0x01, 0x9c, 0x40, 0x0d, 0x22, 0x4b, 0xc6, 0xee, 0x6a,\n\t0x9c, 0xb0, 0x09, 0x6a, 0xdf, 0xaa, 0x0d, 0xd6, 0x1b, 0x19, 0x02,\n\t0x00, 0x02, 0x9c, 0x10, 0x3e, 0x3a, 0x73, 0xc3, 0x6d, 0x3c, 0xa7,\n\t0x14, 0x4c, 0x0d, 0xda, 0xa1, 0xc0, 0xc6, 0x98, 0xa3, 0x33, 0xab,\n\t0xd4, 0x02, 0xa5, 0x29, 0x14, 0x02, 0x00, 0x01, 0x51, 0x03, 0x0d,\n\t0x79, 0x43, 0x31, 0x3a, 0xf3, 0xc8, 0x0c, 0xe6, 0x4d, 0x7d, 0x0c,\n\t0x47, 0x77, 0x73, 0x0c, 0xdc, 0x34, 0xc9, 0x9f, 0x69, 0x40, 0xda,\n\t0x30, 0xbc, 0x3a, 0x13, 0x0a, 0xf7, 0x12, 0x2f, 0xcf, 0x40, 0x0d,\n\t0xda, 0x00, 0x0d, 0x96, 0x2c, 0xc3, 0xcb, 0x35, 0x74, 0x6a, 0xc0,\n\t0x09, 0xa1, 0x00, 0x0a, 0xf4, 0xf2, 0x0c, 0xc7, 0x10, 0x0a, 0x9c,\n\t0x10, 0x06, 0x09, 0x25, 0x35, 0x0c, 0x06, 0xc9, 0xba, 0x63, 0x40,\n\t0xaa, 0xb0, 0x15, 0x00, 0xb0, 0x4d, 0x82, 0xfc, 0xb4, 0x3a, 0xf3,\n\t0x0c, 0x30, 0x60, 0x00, 0x24, 0xa0, 0x0a, 0xda, 0x80, 0xc9, 0x94,\n\t0xbc, 0x0d, 0xc7, 0xa0, 0xcb, 0x03, 0xc1, 0x00, 0x12, 0xc0, 0x01,\n\t0x10, 0xa0, 0x98, 0x29, 0x15, 0x37, 0x0c, 0xc0, 0x00, 0x0a, 0x30,\n\t0x37, 0x73, 0x84, 0xca, 0x9d, 0x10, 0x0a, 0xc7, 0x70, 0x0c, 0xaa,\n\t0xd0, 0x09, 0x6a, 0x20, 0x02, 0x0c, 0x25, 0x67, 0x11, 0x20, 0x2f,\n\t0xb6, 0x03, 0xc9, 0x3a, 0x33, 0xca, 0xaa, 0xd0, 0x02, 0x20, 0x76,\n\t0xc7, 0xe4, 0xec, 0x4d, 0x7b, 0xbc, 0xa1, 0xe7, 0x5c, 0x2f, 0x24,\n\t0x00, 0xcd, 0xd8, 0x35, 0x14, 0x02, 0x10, 0x37, 0x22, 0x11, 0x34,\n\t0x0a, 0x00, 0x02, 0x30, 0xa0, 0x06, 0xaa, 0xf0, 0xca, 0xaa, 0xb0,\n\t0x06, 0x22, 0xe0, 0x34, 0x08, 0xc1, 0x00, 0xfc, 0xdc, 0x09, 0xf3,\n\t0x22, 0xca, 0xd4, 0xf0, 0x0c, 0x01, 0x2d, 0x02, 0x40, 0x11, 0x1a,\n\t0x01, 0x01, 0x00, 0x3b\n};\n\nstatic const int _img_shower_length = 5130;\nstatic const char _img_sick[4387] = {\n\t0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x7f, 0x00, 0x7f, 0x00, 0xf7,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0x79, 0xcc, 0x93, 0x94, 0xd0,\n\t0x4f, 0x67, 0x85, 0x41, 0x82, 0xcb, 0x74, 0xc2, 0xc4, 0xc8, 0xdf,\n\t0xe7, 0x01, 0x81, 0xc5, 0x8a, 0x7a, 0xcd, 0x5c, 0x57, 0x81, 0x8e,\n\t0x78, 0xcf, 0x8e, 0x78, 0xcf, 0x3a, 0xab, 0xa5, 0xc7, 0xdf, 0xe8,\n\t0x01, 0x81, 0xc6, 0x28, 0x92, 0x9e, 0xa0, 0x97, 0xd6, 0x01, 0x81,\n\t0xc6, 0x93, 0x82, 0xd2, 0x00, 0x81, 0xc6, 0x8e, 0x78, 0xcf, 0x8e,\n\t0x78, 0xcf, 0x42, 0xa5, 0xbb, 0xcf, 0xe6, 0xef, 0xc0, 0xda, 0xe4,\n\t0xcf, 0xe6, 0xef, 0x33, 0x96, 0x91, 0x39, 0x40, 0x49, 0x8e, 0x78,\n\t0xcf, 0x2f, 0x92, 0x92, 0x00, 0x81, 0xc6, 0x00, 0x81, 0xc6, 0x00,\n\t0x80, 0xc4, 0x37, 0xa6, 0xa2, 0x8e, 0x78, 0xcf, 0x8e, 0x78, 0xcf,\n\t0xbd, 0xd7, 0xe0, 0x38, 0x3f, 0x48, 0x39, 0x3e, 0x47, 0x39, 0x3f,\n\t0x48, 0x37, 0x3e, 0x47, 0x39, 0x40, 0x49, 0x7f, 0x3a, 0x51, 0x58,\n\t0x36, 0x46, 0x39, 0x41, 0x4a, 0x3a, 0x4b, 0x52, 0x3a, 0x54, 0x5a,\n\t0x3a, 0x53, 0x5a, 0x3b, 0x5c, 0x61, 0x3b, 0x65, 0x6a, 0x3c, 0x79,\n\t0x7b, 0x23, 0x87, 0x95, 0x75, 0x47, 0x5a, 0x72, 0x5a, 0x6a, 0x6a,\n\t0x6a, 0x75, 0x66, 0x64, 0x70, 0x8a, 0x23, 0x3f, 0x89, 0x25, 0x40,\n\t0x87, 0x29, 0x43, 0x83, 0x33, 0x4b, 0x82, 0x3b, 0x52, 0x8e, 0x51,\n\t0x66, 0x3f, 0xba, 0xb2, 0x56, 0x90, 0x79, 0x75, 0x91, 0x67, 0x33,\n\t0x95, 0x90, 0xc3, 0x9f, 0x3f, 0xc3, 0xa0, 0x3f, 0xb2, 0x9d, 0x48,\n\t0x9b, 0xae, 0x7a, 0xb1, 0xb4, 0x6f, 0x8f, 0x9b, 0x5c, 0xd0, 0xaf,\n\t0x4b, 0xe3, 0xb9, 0x49, 0xd1, 0xbd, 0x60, 0xaa, 0xc1, 0x78, 0xdc,\n\t0xc1, 0x5a, 0xf3, 0xc7, 0x4f, 0xf6, 0xc8, 0x4e, 0xe8, 0xc5, 0x55,\n\t0xee, 0xc3, 0x4e, 0xc9, 0xc3, 0x66, 0x00, 0x81, 0xc6, 0x00, 0x81,\n\t0xc6, 0x8e, 0x78, 0xcf, 0x8e, 0x78, 0xcf, 0x8e, 0x78, 0xcf, 0x8e,\n\t0x78, 0xcf, 0xd1, 0xe7, 0xf0, 0x00, 0x81, 0xc6, 0x00, 0x81, 0xc6,\n\t0x00, 0x67, 0x9e, 0x07, 0x6c, 0x9c, 0x12, 0x73, 0x97, 0x3d, 0x7f,\n\t0x80, 0x00, 0x6b, 0xa4, 0x03, 0x7a, 0xb9, 0x2c, 0x94, 0xcc, 0x8e,\n\t0x78, 0xcf, 0x8e, 0x78, 0xcf, 0x8e, 0x78, 0xcf, 0x8e, 0x78, 0xcf,\n\t0x6a, 0x7b, 0x84, 0x72, 0x60, 0xa6, 0x75, 0x63, 0xab, 0x78, 0x65,\n\t0xaf, 0x79, 0x66, 0xb1, 0x7d, 0x69, 0xb6, 0x7f, 0x6b, 0xb9, 0x8e,\n\t0x78, 0xcf, 0x64, 0x76, 0x96, 0x00, 0x80, 0xc5, 0x7b, 0x7e, 0xc2,\n\t0x8e, 0x78, 0xcf, 0x80, 0x6c, 0xbc, 0x89, 0x7b, 0xb2, 0xa1, 0x72,\n\t0x86, 0x84, 0x6f, 0xc0, 0x86, 0x71, 0xc3, 0x88, 0x73, 0xc7, 0x8c,\n\t0x76, 0xcc, 0x8e, 0x78, 0xcf, 0x89, 0x7a, 0xcc, 0x8f, 0x79, 0xd0,\n\t0x90, 0x7a, 0xd2, 0x90, 0x7a, 0xcf, 0xcb, 0xe4, 0xed, 0x3a, 0x8c,\n\t0x8a, 0x33, 0x95, 0x8e, 0x2a, 0x8e, 0x92, 0x34, 0x96, 0x91, 0x35,\n\t0x9a, 0x94, 0x3d, 0x99, 0x94, 0x3c, 0x98, 0x96, 0x2b, 0x92, 0x97,\n\t0x3a, 0xa4, 0x9e, 0x37, 0xa1, 0x9b, 0x16, 0x8a, 0xbb, 0x26, 0x8c,\n\t0xb3, 0x34, 0x94, 0xae, 0x3d, 0xa6, 0xa1, 0x3c, 0xab, 0xa4, 0x3f,\n\t0xae, 0xa9, 0x3b, 0xaf, 0xa9, 0x3e, 0xb3, 0xac, 0x40, 0xba, 0xb3,\n\t0x3e, 0xba, 0xb3, 0x3d, 0xb6, 0xb1, 0x32, 0xad, 0xb7, 0x36, 0xa9,\n\t0xab, 0x43, 0x9a, 0x99, 0x57, 0x9b, 0x9b, 0x50, 0x8c, 0x8b, 0x70,\n\t0x85, 0x8d, 0x4d, 0xa0, 0x9e, 0x6d, 0xb4, 0x97, 0x51, 0x93, 0xa9,\n\t0x66, 0x87, 0xb4, 0x60, 0x90, 0xb3, 0x48, 0xaa, 0xa7, 0x49, 0xa9,\n\t0xa7, 0x41, 0xb4, 0xae, 0x47, 0xbb, 0xaf, 0x40, 0xba, 0xb3, 0x49,\n\t0xb8, 0xb6, 0x51, 0xaf, 0xb2, 0x69, 0xab, 0xaa, 0x79, 0xb2, 0xb5,\n\t0x62, 0xbc, 0xa0, 0x67, 0xc2, 0xbe, 0x00, 0x81, 0xc6, 0x00, 0x83,\n\t0xc9, 0x0a, 0x85, 0xc2, 0x1a, 0x8a, 0xc6, 0x3f, 0x9b, 0xcb, 0x69,\n\t0x97, 0xc2, 0x7b, 0x88, 0xc8, 0x52, 0xa4, 0xce, 0x59, 0xa4, 0xc7,\n\t0x5f, 0xc3, 0xc0, 0x68, 0xc6, 0xc4, 0x72, 0xca, 0xc8, 0x41, 0xba,\n\t0xb2, 0xc7, 0xe2, 0xec, 0xd7, 0xeb, 0xf2, 0xca, 0xe3, 0xed, 0x89,\n\t0xa7, 0x81, 0x88, 0xb9, 0xbd, 0xa5, 0xb2, 0xbc, 0xd4, 0xe9, 0xf1,\n\t0x9a, 0x88, 0xcf, 0x89, 0x82, 0xcd, 0xa5, 0x96, 0xd1, 0x94, 0xbd,\n\t0xc4, 0x96, 0xbf, 0xd2, 0xb5, 0xb0, 0xce, 0xbb, 0xae, 0xe2, 0xc5,\n\t0xbe, 0xda, 0x9c, 0xc1, 0xc8, 0x82, 0xd2, 0xcd, 0x91, 0xce, 0xd3,\n\t0xa5, 0xc5, 0xcd, 0xb4, 0xcc, 0xd5, 0xb8, 0xcd, 0xd7, 0xba, 0xd3,\n\t0xdd, 0xbc, 0xd9, 0xe4, 0xb6, 0xd8, 0xe1, 0xbe, 0xd9, 0xe3, 0xbb,\n\t0xda, 0xe3, 0xad, 0xd8, 0xe4, 0xc7, 0xe4, 0xeb, 0xcc, 0xcc, 0xcc,\n\t0xc4, 0xc2, 0xcc, 0xd5, 0xd5, 0xd5, 0xce, 0xde, 0xe7, 0xc4, 0xde,\n\t0xe8, 0xd3, 0xd3, 0xed, 0xc7, 0xe2, 0xec, 0xca, 0xe4, 0xed, 0xcd,\n\t0xe8, 0xed, 0xd3, 0xe9, 0xf0, 0xca, 0xe6, 0xf0, 0xd3, 0xe9, 0xf0,\n\t0xdd, 0xee, 0xf4, 0xd1, 0xe7, 0xf0, 0xe7, 0xe7, 0xe7, 0xe0, 0xf1,\n\t0xf8, 0xfe, 0xff, 0xff, 0xf3, 0xf3, 0xf5, 0xee, 0xeb, 0xf6, 0xe0,\n\t0xda, 0xf2, 0x9a, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t0x21, 0xf9, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x21, 0xff, 0x0b,\n\t0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x67, 0x69, 0x63, 0x6b,\n\t0x0d, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x3d, 0x30, 0x2e, 0x34, 0x35,\n\t0x34, 0x35, 0x35, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00,\n\t0x7f, 0x00, 0x00, 0x08, 0xfe, 0x00, 0x01, 0x08, 0x1c, 0x48, 0xb0,\n\t0xa0, 0xc1, 0x83, 0x08, 0x13, 0x2a, 0x2c, 0x38, 0x60, 0x43, 0x0a,\n\t0x14, 0x29, 0x36, 0x0c, 0x58, 0x48, 0xb1, 0xa2, 0xc5, 0x8b, 0x18,\n\t0x33, 0x6a, 0x1c, 0xd8, 0x90, 0x85, 0x47, 0x8f, 0x12, 0x37, 0x8a,\n\t0x1c, 0x49, 0xb2, 0x64, 0xc5, 0x0d, 0x1f, 0x53, 0x6e, 0x30, 0xc9,\n\t0xb2, 0xa5, 0xcb, 0x8b, 0x03, 0x4a, 0xa4, 0xfc, 0x58, 0x62, 0xe2,\n\t0xcb, 0x9b, 0x38, 0x5f, 0x26, 0x48, 0x31, 0xd3, 0x63, 0x8a, 0x04,\n\t0x39, 0x83, 0x0a, 0x15, 0x19, 0x13, 0x85, 0xd1, 0xa3, 0x28, 0x6a,\n\t0x0e, 0x5d, 0xca, 0x54, 0x61, 0x80, 0x04, 0x25, 0xcc, 0x64, 0xca,\n\t0xa4, 0x4b, 0x57, 0x26, 0x33, 0x37, 0x12, 0x04, 0x68, 0xca, 0x75,\n\t0xe9, 0x53, 0x0d, 0xb7, 0x78, 0x19, 0xbb, 0x96, 0x2d, 0x1b, 0x38,\n\t0x6f, 0x68, 0xc1, 0x65, 0x93, 0xd6, 0xeb, 0x96, 0x06, 0xad, 0x5d,\n\t0xe3, 0x5e, 0x4c, 0x70, 0xa1, 0x83, 0xad, 0x5b, 0xb7, 0x6c, 0x5d,\n\t0xd0, 0x9a, 0x00, 0xac, 0x33, 0x6d, 0xe0, 0xb6, 0x69, 0x2b, 0x9b,\n\t0x6d, 0x1b, 0xda, 0xc3, 0xde, 0xbe, 0x7d, 0xf3, 0x76, 0x8d, 0xd7,\n\t0xdb, 0xa7, 0x17, 0xee, 0xe2, 0xa5, 0xb2, 0x57, 0x2e, 0xd7, 0x00,\n\t0x17, 0x6e, 0x25, 0xbb, 0xb6, 0x0d, 0x9c, 0x67, 0xb5, 0xd2, 0xc4,\n\t0x6a, 0x13, 0x4c, 0xb8, 0xb4, 0x61, 0xc4, 0xa8, 0xbf, 0x6d, 0x33,\n\t0xc6, 0x4b, 0x5a, 0xb6, 0x6f, 0xe2, 0x62, 0x8b, 0xfb, 0x66, 0xed,\n\t0xd6, 0x85, 0xad, 0x96, 0x83, 0x26, 0xb8, 0xc5, 0x79, 0x70, 0xe9,\n\t0xb2, 0xa3, 0x7d, 0xff, 0x26, 0x0c, 0x18, 0x35, 0x62, 0x70, 0xda,\n\t0x82, 0x67, 0x4b, 0xac, 0xb8, 0xb9, 0x38, 0x6e, 0xb7, 0x80, 0xe6,\n\t0xbe, 0x19, 0x81, 0x17, 0xe9, 0xe1, 0xd8, 0xb3, 0x17, 0x36, 0x9e,\n\t0x56, 0x78, 0x59, 0xe6, 0xcd, 0x9d, 0xfe, 0xe7, 0xba, 0x30, 0xdd,\n\t0x65, 0x02, 0xeb, 0xda, 0xd3, 0x63, 0xef, 0x8c, 0x1a, 0xf9, 0x70,\n\t0xf0, 0xe1, 0x15, 0x8b, 0xa3, 0xe6, 0xa0, 0xbc, 0xc9, 0x01, 0xb7,\n\t0xb6, 0xa9, 0xdf, 0xff, 0x7b, 0xf4, 0xe7, 0xeb, 0xbf, 0x6d, 0x13,\n\t0x5f, 0x7c, 0xe2, 0xf4, 0x62, 0x93, 0x7d, 0x22, 0x5d, 0xc0, 0x0c,\n\t0x7f, 0x0c, 0xf6, 0xa7, 0x1e, 0x7c, 0x03, 0x7e, 0xa3, 0x01, 0x82,\n\t0x22, 0x05, 0x70, 0xcb, 0x33, 0x0d, 0x66, 0xc8, 0x9f, 0x36, 0x11,\n\t0x3a, 0xd7, 0x0b, 0x6e, 0x14, 0x62, 0x94, 0x40, 0x30, 0x18, 0x6a,\n\t0x68, 0xa2, 0x76, 0x02, 0x76, 0xf8, 0x4d, 0x36, 0xd2, 0x85, 0x78,\n\t0x11, 0x03, 0xca, 0x2c, 0x78, 0xe2, 0x8c, 0xc3, 0xa5, 0x18, 0x61,\n\t0x36, 0xe4, 0xb9, 0xf8, 0xa2, 0x32, 0xcb, 0x90, 0x45, 0xe3, 0x8f,\n\t0xc0, 0x9d, 0xd5, 0x9c, 0x37, 0xee, 0xe5, 0xa8, 0x63, 0x45, 0x0e,\n\t0x24, 0xa3, 0x4c, 0x89, 0x40, 0x36, 0x99, 0x4d, 0x72, 0x84, 0x41,\n\t0x53, 0xdf, 0x91, 0x15, 0x0d, 0xc0, 0xcb, 0x32, 0x3d, 0x3a, 0xa9,\n\t0x65, 0x59, 0xdb, 0x18, 0x48, 0xa5, 0x45, 0x1d, 0x2c, 0x13, 0xe3,\n\t0x96, 0x5a, 0x6e, 0x43, 0xc5, 0x97, 0x09, 0x0d, 0xe0, 0x80, 0x07,\n\t0x20, 0x48, 0x31, 0x85, 0x31, 0xca, 0xc4, 0xe8, 0x23, 0x99, 0x33,\n\t0x6a, 0x13, 0xcd, 0x14, 0x52, 0x80, 0xe0, 0x81, 0x03, 0x07, 0x52,\n\t0x99, 0x80, 0x07, 0x5a, 0xbc, 0xb1, 0xca, 0xa0, 0xab, 0xb8, 0x12,\n\t0x27, 0x8f, 0x73, 0xd2, 0xa9, 0x21, 0x34, 0xb1, 0x10, 0xba, 0xca,\n\t0x1b, 0x5a, 0x78, 0xd0, 0xa2, 0x8b, 0x11, 0x68, 0x31, 0xa8, 0x2a,\n\t0x98, 0x66, 0x1a, 0x8b, 0x92, 0x71, 0x32, 0x73, 0x4d, 0xa2, 0xa5,\n\t0x5d, 0xc3, 0xcc, 0xa8, 0xcf, 0x7c, 0xca, 0xe0, 0xa7, 0xa3, 0x7a,\n\t0x0a, 0x2a, 0x61, 0xd7, 0x28, 0x13, 0x4b, 0xa6, 0xfe, 0x99, 0x0e,\n\t0xaa, 0x45, 0x04, 0x2e, 0x06, 0xe0, 0x81, 0xa0, 0xb0, 0xe6, 0xea,\n\t0x8a, 0x30, 0x87, 0xf2, 0x48, 0xea, 0x33, 0xc0, 0x32, 0x23, 0x66,\n\t0xaf, 0xbe, 0xfe, 0x0a, 0xec, 0xb1, 0xa9, 0x62, 0x49, 0xec, 0x32,\n\t0xc6, 0x8e, 0xba, 0x8c, 0x31, 0xae, 0xe4, 0x0a, 0xeb, 0xa3, 0x1e,\n\t0x80, 0x58, 0x9e, 0x07, 0xaa, 0xac, 0x22, 0x6d, 0xae, 0xad, 0x78,\n\t0xc2, 0x2b, 0xb1, 0x87, 0x26, 0xb3, 0xcb, 0x29, 0xbb, 0x70, 0x0a,\n\t0xee, 0xb9, 0x71, 0x8a, 0x4b, 0xae, 0xb9, 0xe0, 0x1a, 0x23, 0x4b,\n\t0x2b, 0xdb, 0x4e, 0xab, 0x8a, 0x07, 0x08, 0x46, 0x80, 0x6b, 0xbc,\n\t0x98, 0xbe, 0xf1, 0xc5, 0x16, 0x5d, 0x70, 0x72, 0x4a, 0x30, 0xc6,\n\t0x24, 0x63, 0x4c, 0x30, 0xbb, 0x98, 0xa2, 0x89, 0x20, 0x80, 0x08,\n\t0x62, 0x89, 0x26, 0xa6, 0x90, 0x0b, 0xb0, 0x31, 0x01, 0x43, 0x3c,\n\t0xf0, 0xb8, 0x06, 0x5b, 0x82, 0xb0, 0x20, 0x0c, 0xef, 0x02, 0xb0,\n\t0xc0, 0xc1, 0x9c, 0x52, 0x0a, 0xbc, 0xf8, 0x4e, 0xfb, 0x06, 0xad,\n\t0xd3, 0x25, 0x60, 0xe9, 0xb6, 0x89, 0x28, 0xa2, 0x08, 0x2b, 0xfa,\n\t0x6e, 0xc1, 0x6f, 0x20, 0x09, 0x13, 0x62, 0x09, 0x21, 0x84, 0x20,\n\t0x0c, 0xc8, 0xcd, 0x38, 0xdf, 0x2c, 0x88, 0x20, 0x34, 0x5b, 0xe2,\n\t0x33, 0xcd, 0x3b, 0xe7, 0x2c, 0x34, 0xcf, 0x32, 0xd7, 0x0c, 0x88,\n\t0x21, 0x89, 0xc0, 0xca, 0x8a, 0xca, 0x49, 0x4b, 0xbb, 0x8a, 0x16,\n\t0x93, 0xc6, 0xe5, 0x81, 0xb6, 0xb9, 0x2e, 0x52, 0x84, 0x12, 0x4f,\n\t0x30, 0x61, 0x04, 0x26, 0x5c, 0x6c, 0xc1, 0x05, 0xcc, 0x42, 0xe7,\n\t0x3c, 0x08, 0x22, 0x83, 0xd8, 0x1c, 0xf6, 0xd9, 0x3a, 0x8f, 0x3d,\n\t0x08, 0xda, 0x37, 0x23, 0xad, 0x0a, 0x2b, 0x97, 0x18, 0x81, 0xb5,\n\t0x12, 0x45, 0x2c, 0xe2, 0x34, 0xbd, 0x96, 0x0d, 0x70, 0x32, 0xfe,\n\t0xac, 0x97, 0x30, 0xe1, 0x84, 0x13, 0x4d, 0x34, 0x91, 0x04, 0x11,\n\t0x40, 0x74, 0x11, 0x48, 0x23, 0x87, 0x0c, 0x52, 0xf6, 0xce, 0x82,\n\t0x8c, 0xdd, 0x08, 0x24, 0xa3, 0x40, 0x02, 0x09, 0xe2, 0x8a, 0x2f,\n\t0xce, 0xf8, 0xce, 0x95, 0x1f, 0xf2, 0x38, 0xe4, 0x93, 0x93, 0x7d,\n\t0xb9, 0xe2, 0x87, 0x40, 0x42, 0x49, 0x22, 0xba, 0x40, 0xf1, 0x77,\n\t0x13, 0x7f, 0x33, 0x71, 0x49, 0xae, 0x4f, 0xf7, 0xc9, 0x95, 0x03,\n\t0x6f, 0x54, 0xed, 0x77, 0xe0, 0x82, 0x23, 0x21, 0x04, 0x11, 0x3f,\n\t0x30, 0x32, 0xca, 0x28, 0x93, 0x48, 0xee, 0xfb, 0x24, 0xbb, 0x07,\n\t0x2f, 0x7c, 0xef, 0xbe, 0x17, 0x0f, 0x09, 0xf0, 0xc2, 0x0f, 0x6f,\n\t0xbc, 0x24, 0xbb, 0x4b, 0x82, 0xca, 0x13, 0xb4, 0xd3, 0xee, 0x04,\n\t0x13, 0x76, 0xc3, 0xfa, 0xc6, 0x94, 0x71, 0x45, 0x40, 0x75, 0xa6,\n\t0x45, 0x00, 0x1e, 0x38, 0x14, 0xb6, 0x0b, 0x71, 0x04, 0x21, 0x90,\n\t0x27, 0x6f, 0xfe, 0xf9, 0xe8, 0xa7, 0xaf, 0xfe, 0xee, 0xa2, 0x2c,\n\t0x11, 0xbd, 0xf4, 0x45, 0xb0, 0x4e, 0xb2, 0xd4, 0xdb, 0xab, 0x92,\n\t0x88, 0x12, 0xde, 0x37, 0x11, 0xfe, 0x11, 0x96, 0x34, 0xb2, 0xfe,\n\t0xff, 0x00, 0x0c, 0x9e, 0x24, 0x06, 0x78, 0x3e, 0x49, 0x88, 0x22,\n\t0x0a, 0xf9, 0x0b, 0x9c, 0x13, 0x94, 0xd0, 0x34, 0x4c, 0xad, 0x02,\n\t0x6f, 0x71, 0x91, 0x42, 0xfd, 0x14, 0xc1, 0x04, 0xda, 0x25, 0x41,\n\t0x08, 0xb7, 0xfb, 0x01, 0x22, 0x02, 0xc8, 0xc1, 0xf4, 0x31, 0x8f,\n\t0x14, 0x20, 0x24, 0x60, 0xf2, 0x24, 0xb1, 0x09, 0xe8, 0xbd, 0x8f,\n\t0x09, 0x8a, 0x98, 0x96, 0x14, 0x2c, 0x03, 0x82, 0x09, 0xe2, 0xaf,\n\t0x76, 0x18, 0x04, 0x82, 0x20, 0xca, 0xd7, 0xc1, 0x1a, 0x06, 0x8f,\n\t0x16, 0xc8, 0x80, 0x46, 0x36, 0xa0, 0x71, 0x0c, 0x52, 0x30, 0xcf,\n\t0x7c, 0xfe, 0xe7, 0x78, 0xdf, 0x02, 0x53, 0x18, 0x2b, 0x10, 0x58,\n\t0x66, 0x6a, 0x4a, 0x33, 0x02, 0xe0, 0xc2, 0x47, 0x04, 0x4b, 0x1c,\n\t0xc2, 0x86, 0x50, 0x1c, 0xc5, 0x31, 0x9e, 0x04, 0x9e, 0x68, 0xf8,\n\t0x70, 0x84, 0x07, 0xcc, 0x9f, 0x13, 0x8c, 0xc0, 0x8a, 0x69, 0x41,\n\t0xb0, 0x2b, 0x11, 0x90, 0xd6, 0x25, 0xa0, 0x90, 0x84, 0x21, 0x64,\n\t0x70, 0x10, 0x34, 0x8c, 0x22, 0x00, 0x25, 0x41, 0x0b, 0xe0, 0xc4,\n\t0x07, 0x19, 0x05, 0x2c, 0x21, 0xed, 0xa0, 0xb0, 0xba, 0x5c, 0xcd,\n\t0xaf, 0x2b, 0x26, 0xab, 0x1f, 0x2b, 0x74, 0xb1, 0x3f, 0x40, 0xe8,\n\t0x4e, 0x8d, 0x1d, 0x44, 0xc6, 0x60, 0x38, 0x14, 0x9e, 0x6d, 0xcc,\n\t0xe2, 0x87, 0xc9, 0x5b, 0xc2, 0xe9, 0x74, 0xd1, 0xc5, 0x58, 0x41,\n\t0x2d, 0x37, 0x12, 0xcc, 0x15, 0x18, 0x7e, 0x40, 0x04, 0x22, 0x60,\n\t0x02, 0x8d, 0x80, 0x0c, 0xa0, 0x24, 0x48, 0xa1, 0xc3, 0x27, 0x0d,\n\t0xa8, 0x16, 0x88, 0x14, 0x20, 0x2a, 0x98, 0xa0, 0x84, 0x4d, 0x34,\n\t0x32, 0x56, 0x2b, 0xcc, 0x8d, 0x03, 0xc0, 0xb0, 0x3d, 0x30, 0xec,\n\t0xab, 0x0b, 0x98, 0x00, 0xc4, 0x13, 0x33, 0xb9, 0x46, 0x4e, 0x12,\n\t0xc6, 0x46, 0x8b, 0x01, 0x25, 0xfa, 0x40, 0x41, 0xc4, 0x69, 0x81,\n\t0x01, 0x7b, 0x47, 0x6c, 0xa5, 0xcb, 0xbe, 0x36, 0x43, 0x5a, 0xd6,\n\t0x32, 0x1a, 0xc2, 0x39, 0x8d, 0x5a, 0x0e, 0x89, 0x3e, 0x4a, 0x9c,\n\t0x32, 0x56, 0x5f, 0xcc, 0x5b, 0x24, 0x5d, 0xe9, 0x32, 0x98, 0x6d,\n\t0xd0, 0x98, 0x6b, 0x9c, 0xe2, 0x70, 0xec, 0x44, 0x0a, 0xf5, 0xf5,\n\t0xd2, 0x81, 0x52, 0x70, 0x9d, 0x65, 0x12, 0x90, 0x85, 0x55, 0x80,\n\t0x61, 0x98, 0x81, 0x10, 0x84, 0x23, 0xb0, 0x19, 0x40, 0x64, 0x6c,\n\t0x13, 0x1a, 0xcc, 0x4c, 0x9f, 0x33, 0x63, 0x95, 0x85, 0xa8, 0x4d,\n\t0x67, 0x00, 0x20, 0xfe, 0xf8, 0xc2, 0x2b, 0x01, 0x31, 0x08, 0xe4,\n\t0xb1, 0xd3, 0x83, 0xb3, 0xe8, 0x64, 0x69, 0xa2, 0x41, 0x8b, 0x50,\n\t0xa2, 0x2f, 0x69, 0x8f, 0x02, 0x81, 0x38, 0xcb, 0x13, 0x00, 0x07,\n\t0x80, 0xe0, 0x6b, 0x7e, 0xfc, 0xe7, 0xff, 0x04, 0x49, 0x98, 0x68,\n\t0xd4, 0x82, 0x16, 0x57, 0xfc, 0xdf, 0xe8, 0xb2, 0x70, 0x47, 0x1d,\n\t0x05, 0xa0, 0x03, 0x3b, 0x4b, 0xa3, 0x44, 0x47, 0xd8, 0xc6, 0xd2,\n\t0x80, 0xd2, 0xa0, 0xea, 0x93, 0xc4, 0x06, 0xac, 0x45, 0xa5, 0x0e,\n\t0x28, 0x0e, 0xa5, 0x23, 0x1d, 0xc5, 0x26, 0x91, 0x09, 0x1c, 0x64,\n\t0x74, 0xb3, 0x86, 0x21, 0x40, 0x93, 0x40, 0x12, 0xf0, 0x87, 0x88,\n\t0xc6, 0xf4, 0x7c, 0x99, 0xa0, 0xc3, 0x32, 0x9e, 0xf4, 0x8c, 0x78,\n\t0x76, 0xf0, 0x11, 0xf6, 0x74, 0x11, 0x48, 0x8b, 0xf9, 0x53, 0xe1,\n\t0x49, 0x02, 0x14, 0x3c, 0xc0, 0x01, 0x0f, 0x78, 0x61, 0x0d, 0x38,\n\t0x46, 0x71, 0x25, 0x5f, 0x1a, 0xc0, 0x0c, 0x1a, 0xe7, 0x4f, 0xe1,\n\t0x41, 0xc2, 0x11, 0x8e, 0x08, 0x05, 0x3b, 0x6d, 0x90, 0x83, 0x1c,\n\t0xe0, 0x20, 0x07, 0x3d, 0xc8, 0xa8, 0xf0, 0x42, 0x01, 0x56, 0x91,\n\t0x26, 0xcf, 0x16, 0x0b, 0x45, 0x90, 0x03, 0x6e, 0x36, 0xcb, 0xb5,\n\t0xca, 0xc0, 0x05, 0x2f, 0x78, 0x01, 0x0c, 0x08, 0x41, 0x4b, 0x49,\n\t0x5c, 0x62, 0x07, 0x65, 0x2d, 0xab, 0x19, 0xce, 0x47, 0x08, 0x18,\n\t0xe4, 0xd5, 0x05, 0x32, 0x10, 0xeb, 0xf9, 0x20, 0xf1, 0x80, 0x2f,\n\t0xb9, 0x14, 0x10, 0xfe, 0x4b, 0x1e, 0x21, 0x58, 0x60, 0x82, 0x13,\n\t0x9c, 0xc0, 0x04, 0x2e, 0x70, 0xab, 0xfa, 0xd8, 0xda, 0x88, 0xb0,\n\t0xee, 0x2e, 0x14, 0x35, 0x38, 0xab, 0x59, 0x69, 0xf0, 0x09, 0x83,\n\t0x42, 0xc2, 0x05, 0x95, 0xbd, 0x2c, 0x0b, 0xf8, 0x8a, 0x3e, 0xac,\n\t0x7a, 0x74, 0xab, 0x4c, 0x15, 0xfe, 0xde, 0x64, 0x2d, 0x7b, 0x59,\n\t0x17, 0xac, 0x13, 0x80, 0x8c, 0xf0, 0x42, 0x0c, 0xf0, 0xea, 0x82,\n\t0x18, 0xfc, 0x81, 0x11, 0x98, 0xd0, 0x41, 0x60, 0x75, 0x80, 0x09,\n\t0x94, 0x3a, 0x02, 0xb5, 0xb4, 0x5d, 0x6d, 0xfa, 0x6c, 0xc1, 0x52,\n\t0xb9, 0xf6, 0xb4, 0x9f, 0xe6, 0x0b, 0x85, 0x0c, 0x5a, 0x40, 0xdd,\n\t0x17, 0xfc, 0x01, 0x80, 0xd2, 0x6d, 0xc1, 0x65, 0x69, 0x5b, 0xd9,\n\t0x16, 0xac, 0x40, 0xb8, 0x65, 0xad, 0x81, 0x62, 0xcd, 0xf7, 0x87,\n\t0x17, 0x50, 0xb7, 0x05, 0x89, 0x4d, 0x1f, 0x52, 0x8f, 0xa4, 0x01,\n\t0x84, 0x5d, 0x33, 0xba, 0x8c, 0x38, 0x04, 0x23, 0x6e, 0xbb, 0x3e,\n\t0x48, 0xc4, 0x80, 0x05, 0x27, 0xf8, 0x48, 0x7e, 0x3d, 0x62, 0xd9,\n\t0xef, 0xe6, 0x60, 0x07, 0x97, 0x80, 0xe9, 0xee, 0x1c, 0x11, 0x5f,\n\t0x46, 0x8c, 0x17, 0x7d, 0x13, 0xd2, 0xd1, 0x63, 0xff, 0x98, 0x49,\n\t0xe9, 0xee, 0x77, 0xbf, 0x2d, 0xe0, 0xef, 0x47, 0x56, 0x90, 0x03,\n\t0x1b, 0xb0, 0xd3, 0x07, 0x3a, 0xd2, 0x2a, 0xc2, 0x22, 0x9b, 0xc9,\n\t0x3f, 0xe8, 0xf7, 0x05, 0x32, 0x28, 0x04, 0x23, 0x0a, 0x21, 0x83,\n\t0x17, 0xec, 0xd7, 0x04, 0x34, 0x00, 0x85, 0x80, 0x6d, 0x58, 0x89,\n\t0xb8, 0x8e, 0xb3, 0xa7, 0xb1, 0x55, 0x23, 0x24, 0x60, 0x60, 0x02,\n\t0xfc, 0xba, 0xa0, 0xae, 0xbb, 0x3b, 0x84, 0x0b, 0xf2, 0x6b, 0x02,\n\t0x18, 0x1c, 0x38, 0x93, 0xeb, 0x0d, 0xd1, 0x03, 0x2e, 0xa6, 0xd9,\n\t0x4f, 0x18, 0xf9, 0xc8, 0x9f, 0xf8, 0xb1, 0xf0, 0x0a, 0x91, 0x12,\n\t0xd6, 0x4a, 0x36, 0x25, 0x85, 0x48, 0x5f, 0x28, 0x90, 0x7c, 0xe4,\n\t0xf5, 0x35, 0x36, 0x44, 0x8f, 0xc5, 0xe4, 0x5a, 0x6d, 0xa0, 0x82,\n\t0x2e, 0x7b, 0x59, 0x05, 0x34, 0xc0, 0x04, 0xfa, 0xfe, 0xc0, 0xe3,\n\t0x18, 0x28, 0x79, 0x14, 0xa1, 0x88, 0x41, 0xfe, 0x8d, 0x4f, 0x70,\n\t0xdd, 0xf3, 0x61, 0x82, 0x06, 0x5f, 0xf6, 0xb2, 0x0d, 0xce, 0xbc,\n\t0xbb, 0x0e, 0x94, 0x4c, 0x04, 0x57, 0xa0, 0x42, 0x04, 0x12, 0x90,\n\t0xe5, 0xae, 0x4a, 0x22, 0xb8, 0x81, 0x0d, 0x34, 0x0e, 0x54, 0xf0,\n\t0x89, 0xf3, 0xc9, 0xa0, 0xc6, 0x26, 0x90, 0x41, 0xfa, 0x0e, 0x4d,\n\t0x59, 0x45, 0x9b, 0xef, 0x13, 0x2a, 0x10, 0x6d, 0xa0, 0x73, 0x40,\n\t0x5c, 0x01, 0xfb, 0x20, 0x01, 0x11, 0xa0, 0xc2, 0x15, 0x44, 0x90,\n\t0x54, 0x9c, 0x44, 0x20, 0x0e, 0x7c, 0x08, 0x35, 0x1e, 0xc4, 0xe0,\n\t0x86, 0x42, 0xf0, 0xd3, 0xcf, 0x98, 0x98, 0x74, 0x60, 0x07, 0x5d,\n\t0x5a, 0xf3, 0x79, 0xa1, 0xb2, 0x2c, 0x68, 0xf3, 0xf9, 0x3c, 0x7c,\n\t0x59, 0x2f, 0x98, 0x4f, 0x12, 0x90, 0x96, 0xf4, 0xa4, 0x8b, 0x3b,\n\t0xc2, 0x4d, 0x72, 0x42, 0x0c, 0x78, 0x08, 0x35, 0x1f, 0xe2, 0xd0,\n\t0x51, 0x9c, 0x24, 0x60, 0x0c, 0x7c, 0xc8, 0x83, 0xb2, 0xf3, 0xb0,\n\t0x87, 0x3d, 0xe8, 0xa1, 0x13, 0x96, 0x10, 0xe1, 0xee, 0x3e, 0x51,\n\t0x83, 0x1d, 0x58, 0xfb, 0xda, 0x3b, 0x50, 0xc1, 0x60, 0xcf, 0xd7,\n\t0x88, 0x18, 0xb4, 0x20, 0x06, 0xf4, 0x35, 0x9f, 0x23, 0xbc, 0x1d,\n\t0x03, 0x0e, 0x27, 0xcf, 0x0c, 0x2a, 0xc0, 0xf6, 0xb5, 0x6b, 0x50,\n\t0x68, 0x01, 0x42, 0x02, 0x14, 0x9e, 0xd0, 0x03, 0xb3, 0x97, 0x9d,\n\t0x07, 0x3e, 0x8c, 0xa1, 0xd3, 0x2d, 0x89, 0x00, 0xbd, 0xe9, 0xbd,\n\t0x87, 0x3c, 0xe8, 0xe1, 0x15, 0xa5, 0x90, 0x69, 0xf0, 0x42, 0x01,\n\t0x8a, 0x4b, 0x68, 0xe2, 0xe0, 0x07, 0x6f, 0x37, 0xfa, 0x42, 0xd1,\n\t0x08, 0x3a, 0x0f, 0xbc, 0xe1, 0xea, 0xfb, 0x04, 0xc2, 0x0f, 0x7e,\n\t0x09, 0x50, 0x8c, 0x77, 0x72, 0x9a, 0xe8, 0x84, 0xbc, 0xf7, 0x4d,\n\t0xef, 0x62, 0xbf, 0x44, 0x04, 0xc9, 0xe6, 0x38, 0xbd, 0xfe, 0x7f,\n\t0x01, 0x70, 0x81, 0xcb, 0x74, 0x80, 0x28, 0x97, 0x76, 0x53, 0x4f,\n\t0x9e, 0x72, 0x02, 0x4a, 0x02, 0x12, 0x87, 0xb0, 0x84, 0xc6, 0xe7,\n\t0x2d, 0xf2, 0x7a, 0x8b, 0x60, 0x28, 0x54, 0x08, 0x79, 0xcd, 0x97,\n\t0x4d, 0xf2, 0x80, 0xaf, 0x78, 0xe5, 0xe9, 0xeb, 0x9c, 0xcc, 0xe5,\n\t0xdd, 0xef, 0x9d, 0xd7, 0xfb, 0x4c, 0x42, 0xb9, 0x82, 0xce, 0x8d,\n\t0xae, 0xec, 0x9e, 0x9b, 0x1c, 0xe8, 0xf5, 0x65, 0xc4, 0x20, 0x86,\n\t0x4e, 0x73, 0xa6, 0xf3, 0xe1, 0x0a, 0x42, 0x19, 0x80, 0x18, 0x8a,\n\t0xce, 0xf4, 0x91, 0xbf, 0x42, 0xad, 0x50, 0x37, 0x1f, 0xcc, 0x07,\n\t0x51, 0x88, 0x99, 0x73, 0xbd, 0xeb, 0x7b, 0x10, 0x83, 0x8b, 0x4b,\n\t0x32, 0x80, 0x38, 0x9c, 0xbd, 0xeb, 0x3c, 0xf7, 0x04, 0xd8, 0xc3,\n\t0x3e, 0xf6, 0x42, 0x70, 0x02, 0x0e, 0x55, 0x87, 0x3b, 0xb3, 0xe3,\n\t0xb0, 0x76, 0x92, 0x24, 0xa0, 0x0e, 0x6f, 0xd7, 0xbb, 0xb2, 0x61,\n\t0xe1, 0x73, 0xba, 0x27, 0x4e, 0x10, 0x77, 0xcf, 0x3b, 0xbd, 0xef,\n\t0x70, 0x07, 0x3c, 0xd4, 0x7c, 0x0f, 0x75, 0xc0, 0x77, 0x49, 0x1c,\n\t0xb0, 0x71, 0xc1, 0x8b, 0x9c, 0xf0, 0x4f, 0x1f, 0x29, 0x24, 0xa4,\n\t0x0e, 0x08, 0x99, 0xe3, 0x21, 0xf0, 0xcb, 0xb6, 0x83, 0x1c, 0xe4,\n\t0x60, 0x87, 0x9d, 0xeb, 0x01, 0x98, 0x2f, 0xd1, 0xb7, 0xe5, 0x77,\n\t0x8e, 0x87, 0xaf, 0xff, 0x3c, 0x8a, 0x92, 0x68, 0xc4, 0xda, 0xca,\n\t0xae, 0x07, 0xd0, 0x2f, 0xfb, 0x0e, 0xa3, 0x1f, 0xbd, 0xe3, 0x6b,\n\t0xee, 0x71, 0x96, 0x54, 0xc0, 0xf6, 0xab, 0x1f, 0x7c, 0xe1, 0xb1,\n\t0x09, 0x09, 0x44, 0x24, 0x2c, 0xf1, 0x4c, 0xc7, 0x43, 0xee, 0xe5,\n\t0x50, 0x87, 0x9d, 0xef, 0xa1, 0x02, 0x41, 0x01, 0x79, 0xf0, 0x99,\n\t0xee, 0xfa, 0x96, 0x5b, 0xff, 0xfa, 0xd6, 0x87, 0x39, 0xc2, 0xca,\n\t0xfe, 0xfe, 0xf9, 0xae, 0x8b, 0x3e, 0xf7, 0xbb, 0x17, 0x39, 0x1f,\n\t0x6e, 0x9e, 0x93, 0x9c, 0x73, 0x1c, 0x0f, 0xe1, 0x9f, 0x3e, 0x2c,\n\t0x5e, 0x71, 0x8c, 0xf6, 0xbb, 0xff, 0xfd, 0xf0, 0x8f, 0x7f, 0xfb,\n\t0x6b, 0x61, 0x8a, 0xfa, 0x7b, 0x02, 0xef, 0x70, 0xc7, 0x7d, 0xee,\n\t0x4b, 0xbf, 0x73, 0x3e, 0x20, 0x1d, 0x27, 0x4a, 0x47, 0x6f, 0x78,\n\t0x50, 0x07, 0xa3, 0x77, 0x07, 0xd3, 0xb7, 0x6c, 0x7c, 0x40, 0x0c,\n\t0xe5, 0x30, 0x0e, 0x0c, 0xd8, 0x80, 0x0e, 0xf8, 0x80, 0x0e, 0x48,\n\t0x0e, 0xe1, 0x30, 0x0d, 0xd3, 0x40, 0x0d, 0xc0, 0xc0, 0x07, 0xc0,\n\t0x27, 0x80, 0xcb, 0xd7, 0x7c, 0x46, 0x77, 0x75, 0x41, 0x21, 0x06,\n\t0x4b, 0xa7, 0x7f, 0x05, 0x78, 0x80, 0xcb, 0x06, 0x0c, 0xe6, 0x00,\n\t0x81, 0x28, 0x18, 0x81, 0xd5, 0x40, 0x81, 0xc3, 0xe0, 0x0b, 0x96,\n\t0xa7, 0x7c, 0xe0, 0x67, 0x75, 0x62, 0x90, 0x13, 0x01, 0x40, 0x06,\n\t0x4b, 0x07, 0x83, 0xb9, 0x67, 0x80, 0x24, 0x98, 0x07, 0xbe, 0x80,\n\t0x0d, 0x29, 0x88, 0x82, 0x13, 0xc8, 0x82, 0x4b, 0xa7, 0x77, 0xdf,\n\t0xa7, 0x83, 0x1d, 0x48, 0x06, 0xcd, 0x75, 0x1f, 0x63, 0xf0, 0x76,\n\t0x22, 0x38, 0x7a, 0xfc, 0x47, 0x82, 0x09, 0xb8, 0x80, 0x3f, 0x38,\n\t0x0e, 0xe4, 0xb0, 0x82, 0x15, 0x08, 0x0c, 0x24, 0x88, 0x7e, 0x70,\n\t0xb7, 0x07, 0x63, 0xd0, 0x77, 0x1b, 0x91, 0x00, 0x65, 0x10, 0x78,\n\t0x4d, 0x48, 0x7a, 0x3b, 0xa8, 0x6c, 0x26, 0xf8, 0x83, 0x55, 0xc8,\n\t0x82, 0x2e, 0x58, 0x86, 0x5b, 0x58, 0x06, 0x92, 0x27, 0x12, 0x7f,\n\t0x07, 0x7a, 0x63, 0xf8, 0x84, 0x24, 0xd8, 0x83, 0x28, 0x58, 0x0e,\n\t0x56, 0xd8, 0x82, 0x6c, 0xa8, 0x77, 0x90, 0xf7, 0x86, 0x5f, 0x08,\n\t0x78, 0x35, 0x37, 0x86, 0xe9, 0x77, 0x80, 0x7c, 0x50, 0x0c, 0x0f,\n\t0x18, 0x84, 0xfe, 0xd3, 0x30, 0x0c, 0x43, 0xb8, 0x87, 0xce, 0x17,\n\t0x79, 0x38, 0x41, 0x79, 0x46, 0x87, 0x83, 0x72, 0x30, 0x88, 0x84,\n\t0x48, 0x0c, 0xe4, 0xc0, 0x80, 0x41, 0x68, 0x81, 0xc1, 0xa7, 0x85,\n\t0x24, 0x78, 0x7a, 0x9e, 0x46, 0x89, 0xfb, 0x86, 0x07, 0x76, 0x50,\n\t0x07, 0x46, 0xc8, 0x7a, 0x8c, 0x07, 0x77, 0xc0, 0x50, 0x0e, 0x99,\n\t0x88, 0x85, 0xab, 0x07, 0x83, 0x75, 0x00, 0x8a, 0x70, 0x87, 0x07,\n\t0xbd, 0x47, 0x12, 0x11, 0x90, 0x81, 0x82, 0x87, 0x07, 0x22, 0x48,\n\t0x87, 0x22, 0x87, 0x07, 0x6a, 0x30, 0x07, 0xc3, 0x50, 0x81, 0x6b,\n\t0xb8, 0x7a, 0xdf, 0x37, 0x82, 0xc1, 0xb7, 0x07, 0xb3, 0x38, 0x12,\n\t0xbf, 0x57, 0x86, 0xa2, 0xb8, 0x7c, 0xba, 0xb7, 0x73, 0x77, 0xa0,\n\t0x06, 0x67, 0x70, 0x06, 0xbe, 0x18, 0x8c, 0xab, 0x37, 0x87, 0xb0,\n\t0xe8, 0x7c, 0xd0, 0x77, 0x13, 0xd2, 0x77, 0x80, 0x77, 0x40, 0x80,\n\t0xcc, 0xc8, 0x7c, 0xce, 0x08, 0x8d, 0xd1, 0x98, 0x06, 0xd7, 0xd8,\n\t0x75, 0xcb, 0xb8, 0x81, 0xe5, 0xc8, 0x71, 0xe3, 0x87, 0x13, 0xe6,\n\t0x37, 0x7d, 0x63, 0xb8, 0x7f, 0xb0, 0x78, 0x07, 0x69, 0x10, 0x8d,\n\t0x67, 0x90, 0x06, 0xa5, 0xc8, 0x8d, 0xcc, 0xa8, 0x8b, 0xca, 0xc6,\n\t0x78, 0x94, 0xe8, 0x7f, 0xec, 0xb8, 0x88, 0x44, 0xf8, 0x8d, 0x8d,\n\t0xc7, 0x7a, 0xe2, 0x78, 0x06, 0x68, 0x70, 0x8f, 0x59, 0xb8, 0x7c,\n\t0xfa, 0x28, 0x82, 0x83, 0xe8, 0x8f, 0x37, 0x11, 0x80, 0x91, 0x08,\n\t0x8a, 0x22, 0x48, 0x8a, 0xe5, 0xc8, 0x8b, 0xf4, 0x88, 0x06, 0xfa,\n\t0xb8, 0x83, 0xe7, 0x38, 0x88, 0x4d, 0x78, 0x8f, 0x1e, 0x78, 0x13,\n\t0x20, 0x68, 0x74, 0xdf, 0x97, 0x91, 0xb8, 0x98, 0x8e, 0x79, 0x80,\n\t0x07, 0x6b, 0x70, 0x91, 0x19, 0xc9, 0x86, 0x9c, 0xb8, 0x6c, 0x92,\n\t0x38, 0x89, 0xfb, 0xc6, 0xfe, 0x07, 0x33, 0xf8, 0x12, 0x01, 0x10,\n\t0x92, 0x35, 0x37, 0x8c, 0x30, 0x79, 0x80, 0x6c, 0x40, 0x8f, 0x67,\n\t0x20, 0x07, 0x8c, 0x68, 0x8e, 0xde, 0x48, 0x8c, 0xf4, 0x26, 0x93,\n\t0x49, 0x38, 0x12, 0x35, 0x09, 0x90, 0x79, 0x80, 0x93, 0x2b, 0x09,\n\t0x77, 0x72, 0xc0, 0x93, 0x6b, 0x10, 0x89, 0xfc, 0xb8, 0x87, 0x4a,\n\t0x29, 0x7e, 0x62, 0x50, 0x94, 0x44, 0xb1, 0x84, 0x22, 0x87, 0x93,\n\t0x39, 0x19, 0x7c, 0x76, 0x80, 0x06, 0xf4, 0xa8, 0x06, 0xe5, 0x38,\n\t0x92, 0x6c, 0x38, 0x95, 0x22, 0xc7, 0x85, 0x5e, 0x88, 0x11, 0x03,\n\t0x40, 0x06, 0x81, 0xa7, 0x95, 0x26, 0x59, 0x73, 0x78, 0x30, 0x8f,\n\t0xd1, 0x78, 0x90, 0xc0, 0xd7, 0x84, 0x6d, 0xe9, 0x8c, 0xe8, 0xf8,\n\t0x78, 0x64, 0x70, 0x96, 0x73, 0xe1, 0x76, 0xfb, 0xc6, 0x96, 0x24,\n\t0x98, 0x92, 0xf4, 0xc8, 0x81, 0x6e, 0xa9, 0x90, 0x65, 0x88, 0x93,\n\t0xd7, 0xb8, 0x07, 0x71, 0xe0, 0x87, 0x22, 0x02, 0x88, 0xb7, 0xc7,\n\t0x8c, 0x75, 0x29, 0x72, 0x4d, 0x49, 0x8f, 0x4f, 0x29, 0x92, 0xcb,\n\t0xf7, 0x98, 0x81, 0x98, 0x83, 0x46, 0xd7, 0x87, 0x3a, 0xc1, 0x98,\n\t0xca, 0x66, 0x98, 0x24, 0x78, 0x07, 0x5e, 0x39, 0x8e, 0xe5, 0xd8,\n\t0x91, 0x7b, 0x78, 0x07, 0x76, 0x90, 0x8e, 0x9a, 0x69, 0x1e, 0x9c,\n\t0x99, 0x07, 0x0c, 0x79, 0x8b, 0x51, 0xa9, 0x6c, 0x80, 0x19, 0x8d,\n\t0x4b, 0x79, 0x92, 0x1b, 0xf8, 0x93, 0x5b, 0xe8, 0x88, 0x2e, 0xe1,\n\t0x00, 0x7d, 0x70, 0x7e, 0x03, 0x19, 0x8b, 0xc3, 0x58, 0x7a, 0x90,\n\t0xe7, 0x94, 0x4c, 0xe7, 0x99, 0x6e, 0x69, 0x9a, 0x08, 0xb9, 0x83,\n\t0x7d, 0x80, 0x7a, 0x25, 0x11, 0x01, 0xc7, 0xa9, 0x77, 0xa6, 0xf9,\n\t0x8d, 0xe8, 0x07, 0x97, 0x06, 0xd9, 0x9c, 0xcb, 0xb6, 0x7c, 0xd4,\n\t0x99, 0x94, 0xd6, 0x69, 0x99, 0xce, 0xfe, 0x78, 0x8c, 0x1a, 0x11,\n\t0x01, 0xda, 0xb9, 0x8f, 0x41, 0x49, 0x98, 0x91, 0x19, 0x8d, 0x3e,\n\t0x39, 0x9c, 0xa3, 0xf7, 0x8a, 0x46, 0x17, 0x9e, 0x4e, 0xf8, 0x9d,\n\t0xa1, 0xc8, 0x9d, 0x19, 0x51, 0x8b, 0xc1, 0xf7, 0x8e, 0x23, 0x08,\n\t0x9a, 0xf4, 0x48, 0x8e, 0xf9, 0xd7, 0x9b, 0x76, 0xf9, 0x8d, 0x5b,\n\t0x39, 0x7d, 0xc6, 0xf8, 0x12, 0x12, 0x60, 0x8b, 0x59, 0xc9, 0x8c,\n\t0x14, 0xa9, 0x6c, 0x3b, 0x49, 0x8f, 0xe5, 0xf9, 0x93, 0xcf, 0xe9,\n\t0x98, 0x3b, 0xb8, 0x07, 0x12, 0xf0, 0x12, 0xc9, 0x58, 0x8d, 0xfb,\n\t0x57, 0x8a, 0xf4, 0x29, 0x9a, 0xb6, 0xe9, 0x92, 0xc3, 0x28, 0x98,\n\t0x07, 0xf8, 0x7c, 0x2f, 0xb1, 0x01, 0x48, 0x99, 0x7c, 0xf8, 0xb9,\n\t0x6c, 0x05, 0x4a, 0x9e, 0x15, 0x1a, 0x8a, 0xaf, 0x09, 0x85, 0xae,\n\t0xc5, 0x12, 0xdb, 0x78, 0x7e, 0x2d, 0x19, 0x8b, 0xa1, 0x69, 0x90,\n\t0xec, 0x39, 0xa2, 0x5d, 0xb7, 0x8e, 0x2e, 0x91, 0xa2, 0x8b, 0x77,\n\t0x9e, 0x75, 0xb9, 0x07, 0xe3, 0x79, 0x06, 0x6c, 0xc0, 0x86, 0xc6,\n\t0x09, 0xa3, 0x43, 0x49, 0x7e, 0x2d, 0x41, 0xa3, 0xa1, 0xb7, 0x7f,\n\t0x7a, 0x67, 0x91, 0x71, 0x79, 0x07, 0x00, 0x1a, 0x89, 0x98, 0xe9,\n\t0xa3, 0x36, 0xf7, 0x12, 0xed, 0xd8, 0x97, 0xd6, 0x89, 0x76, 0x76,\n\t0xc0, 0x93, 0x6a, 0xc0, 0xa3, 0x95, 0x79, 0x80, 0x25, 0xd9, 0x81,\n\t0xff, 0xc7, 0x12, 0x4f, 0xaa, 0x81, 0x57, 0xca, 0x74, 0xb1, 0xd9,\n\t0x93, 0x62, 0x68, 0x07, 0xd7, 0xe9, 0xa5, 0x42, 0x69, 0x79, 0xad,\n\t0x59, 0x73, 0x0e, 0xd9, 0x12, 0x5d, 0x5a, 0xa3, 0x44, 0x1a, 0x89,\n\t0xd2, 0x79, 0x90, 0x1c, 0x97, 0x8b, 0x01, 0x19, 0x83, 0x68, 0x1a,\n\t0xa5, 0x6a, 0xba, 0xa5, 0x26, 0xd1, 0xa6, 0xf4, 0x86, 0x93, 0xd4,\n\t0xb9, 0x07, 0x53, 0xfa, 0x95, 0x22, 0xd7, 0x84, 0xf0, 0xb3, 0xe9,\n\t0x92, 0x78, 0xea, 0x9c, 0x0a, 0x9a, 0xa7, 0x2f, 0x01, 0x91, 0xbb,\n\t0x58, 0x9b, 0x3b, 0x17, 0xa2, 0x62, 0x7a, 0x7e, 0xf9, 0x08, 0x77,\n\t0xc4, 0xd9, 0x75, 0x63, 0x78, 0x9d, 0x1f, 0xd9, 0x12, 0x8c, 0x3a,\n\t0xa8, 0x5f, 0x7a, 0x7e, 0x05, 0x29, 0x97, 0x8d, 0xaa, 0x90, 0xe9,\n\t0x28, 0x89, 0x85, 0xba, 0x8f, 0xcc, 0x58, 0xa6, 0x99, 0xca, 0x12,\n\t0x9b, 0x1a, 0xa0, 0x64, 0x18, 0x88, 0x2d, 0x6a, 0x9f, 0x83, 0x49,\n\t0x98, 0xe6, 0xe9, 0x84, 0xde, 0x77, 0xaa, 0x31, 0x8a, 0x75, 0x2e,\n\t0xb1, 0xaa, 0x83, 0xfa, 0xa1, 0xfc, 0x56, 0x07, 0xc2, 0xa9, 0xa4,\n\t0x9d, 0xea, 0x96, 0xde, 0x58, 0xa6, 0x97, 0x0a, 0x77, 0x32, 0xf9,\n\t0x12, 0x36, 0xb9, 0x83, 0x90, 0x2a, 0x07, 0xb6, 0x28, 0x89, 0x26,\n\t0x99, 0xa5, 0x4c, 0x47, 0x9a, 0xc6, 0x5a, 0x95, 0x2d, 0x71, 0x94,\n\t0x6c, 0x58, 0x90, 0x67, 0x60, 0x07, 0x00, 0x2a, 0x8a, 0xa7, 0x69,\n\t0x9b, 0x38, 0x58, 0xa6, 0x43, 0x49, 0xad, 0x2c, 0x61, 0xad, 0x1a,\n\t0xd9, 0xa2, 0x72, 0xca, 0xa4, 0xe6, 0xc8, 0xab, 0x32, 0x68, 0x95,\n\t0x19, 0x41, 0xae, 0x9f, 0xf9, 0xaa, 0x2f, 0x8a, 0xae, 0xeb, 0x5a,\n\t0xad, 0x36, 0xb8, 0xa0, 0x81, 0x1a, 0x8d, 0x55, 0x2a, 0xaf, 0x23,\n\t0xca, 0x07, 0x48, 0x48, 0xaf, 0x1d, 0xba, 0x85, 0x39, 0xba, 0xa3,\n\t0xfa, 0x5a, 0xa1, 0xfc, 0xca, 0xae, 0x19, 0xa1, 0xab, 0x96, 0x87,\n\t0xa3, 0x3c, 0x79, 0xa0, 0x03, 0xcb, 0x88, 0xa9, 0x6a, 0x12, 0x11,\n\t0xb0, 0x9a, 0xc1, 0xb7, 0xac, 0x49, 0xda, 0xb0, 0xb7, 0xe9, 0x9e,\n\t0x19, 0x51, 0x01, 0x71, 0xb0, 0x83, 0x61, 0xaa, 0xad, 0x16, 0xbb,\n\t0x87, 0x71, 0x90, 0x8d, 0x15, 0x11, 0x10, 0x00, 0x3b\n};\n\nstatic const int _img_sick_length = 4387;\n",
        "footer": "",
        "functions": {
          "ATMO_Setup": {
            "returnType": "void",
            "code": "    Connect_NTAG_A1006();",
            "arguments": []
          }
        }
      }
    },
    "App View": {
      "type": "app",
      "compilerVersion": "latest",
      "variants": [],
      "meta": {
        "appViewLayouts": {
          "320": {
            "560": true
          }
        }
      },
      "elements": [
        {
          "name": "BLECharacteristicCustom",
          "type": "AppBLECharacteristicCustom",
          "variants": [
            "app",
            "ble"
          ],
          "properties": {
            "errorData": {},
            "readData": null,
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_BLE_GATTSAddService(\n\t\tATMO_PROPERTY(BLECharacteristicCustom, instance),\n\t\t&ATMO_VARIABLE(BLECharacteristicCustom, bleServiceHandle), \n\t\tATMO_PROPERTY(BLECharacteristicCustom, bleServiceUuid));\n\t\n\tuint8_t property = 0;\n\tuint8_t permission = 0;\n\t\n\tproperty |= ATMO_PROPERTY(BLECharacteristicCustom, read) ? ATMO_BLE_Property_Read : 0;\n\tproperty |= ATMO_PROPERTY(BLECharacteristicCustom, write) ? ATMO_BLE_Property_Write : 0;\n\tproperty |= ATMO_PROPERTY(BLECharacteristicCustom, notify) ? ATMO_BLE_Property_Notify : 0;\n\n\tpermission |= ATMO_PROPERTY(BLECharacteristicCustom, read) ? ATMO_BLE_Permission_Read : 0;\n\tpermission |= ATMO_PROPERTY(BLECharacteristicCustom, write) ? ATMO_BLE_Permission_Write : 0;\n\n\tATMO_DATATYPE types[3] = {ATMO_PROPERTY(BLECharacteristicCustom, writeDataType), ATMO_PROPERTY(BLECharacteristicCustom, readDataType), ATMO_PROPERTY(BLECharacteristicCustom, notifyDataType)};\n\t\n\tATMO_BLE_GATTSAddCharacteristic(\n\t\tATMO_PROPERTY(BLECharacteristicCustom, instance),\n\t\t&ATMO_VARIABLE(BLECharacteristicCustom, bleCharacteristicHandle), \n\t\tATMO_VARIABLE(BLECharacteristicCustom, bleServiceHandle), \n\t\tATMO_PROPERTY(BLECharacteristicCustom, bleCharacteristicUuid), \n\t\tproperty, permission, ATMO_GetMaxValueSize(3, 64, types));\n\t\n\tATMO_BLE_GATTSRegisterCharacteristicAbilityHandle(\n\t\tATMO_PROPERTY(BLECharacteristicCustom, instance),\n\t\tATMO_VARIABLE(BLECharacteristicCustom, bleCharacteristicHandle), \n\t\tATMO_BLE_Characteristic_Written, \n\t\tATMO_ABILITY(BLECharacteristicCustom, written));\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setValue": "\n\t\n\t// Convert to the desired write data type\n\tATMO_Value_t convertedValue;\n\tATMO_InitValue(&convertedValue);\n\tATMO_CreateValueConverted(&convertedValue, ATMO_PROPERTY(BLECharacteristicCustom, readDataType), in);\n\n\tATMO_BLE_GATTSSetCharacteristic(\n\t\tATMO_PROPERTY(BLECharacteristicCustom, instance),\n\t\tATMO_VARIABLE(BLECharacteristicCustom, bleCharacteristicHandle),\n\t\tconvertedValue.size, \n\t\t(uint8_t *)convertedValue.data,\n\t\tNULL);\n\t\n\tATMO_FreeValue(&convertedValue);\n\t\t\n\treturn ATMO_Status_Success;\n\t",
              "written": "\n\tATMO_CreateValueConverted(out, ATMO_PROPERTY(BLECharacteristicCustom, writeDataType), in);\n\treturn ATMO_Status_Success;\n\t",
              "subscibed": "\treturn ATMO_Status_Success;",
              "unsubscribed": "\treturn ATMO_Status_Success;"
            },
            "variables": {
              "bleServiceHandle": {
                "type": "ATMO_BLE_Handle_t"
              },
              "bleCharacteristicHandle": {
                "type": "ATMO_BLE_Handle_t"
              }
            },
            "embeddedPropertyConversions": {
              "bleServiceUuid": "string",
              "bleCharacteristicUuid": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "setValue": false,
              "written": false,
              "subscibed": false,
              "unsubscribed": false
            },
            "instance": "ATMO_DRIVERINSTANCE_BLE_BLE1",
            "bleServiceUuid": "2d441758-e231-4bf3-a514-d447cb8d55dc",
            "bleCharacteristicUuid": "2d441758-e231-4bf3-a514-d447cb8d55dd",
            "read": false,
            "write": true,
            "notify": false,
            "readDataType": "ATMO_DATATYPE_STRING",
            "writeDataType": "ATMO_DATATYPE_STRING",
            "notifyDataType": "ATMO_DATATYPE_STRING"
          },
          "meta": {
            "editorX": 100,
            "editorY": 0,
            "lastTrigger": "read"
          },
          "triggers": {
            "triggered": [],
            "read": [],
            "written": [],
            "notification": [],
            "indication": [],
            "subscribed": [],
            "unsubscribed": []
          },
          "coupledElementName": "BLECharacteristicCustom",
          "coupledElementPlaneName": "NXP Rapid IoT"
        },
        {
          "name": "Temp",
          "type": "AppBLECharacteristicCustom",
          "variants": [
            "app",
            "ble"
          ],
          "properties": {
            "errorData": {},
            "readData": null,
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_BLE_GATTSAddService(\n\t\tATMO_PROPERTY(Temp, instance),\n\t\t&ATMO_VARIABLE(Temp, bleServiceHandle), \n\t\tATMO_PROPERTY(Temp, bleServiceUuid));\n\t\n\tuint8_t property = 0;\n\tuint8_t permission = 0;\n\t\n\tproperty |= ATMO_PROPERTY(Temp, read) ? ATMO_BLE_Property_Read : 0;\n\tproperty |= ATMO_PROPERTY(Temp, write) ? ATMO_BLE_Property_Write : 0;\n\tproperty |= ATMO_PROPERTY(Temp, notify) ? ATMO_BLE_Property_Notify : 0;\n\n\tpermission |= ATMO_PROPERTY(Temp, read) ? ATMO_BLE_Permission_Read : 0;\n\tpermission |= ATMO_PROPERTY(Temp, write) ? ATMO_BLE_Permission_Write : 0;\n\n\tATMO_DATATYPE types[3] = {ATMO_PROPERTY(Temp, writeDataType), ATMO_PROPERTY(Temp, readDataType), ATMO_PROPERTY(Temp, notifyDataType)};\n\t\n\tATMO_BLE_GATTSAddCharacteristic(\n\t\tATMO_PROPERTY(Temp, instance),\n\t\t&ATMO_VARIABLE(Temp, bleCharacteristicHandle), \n\t\tATMO_VARIABLE(Temp, bleServiceHandle), \n\t\tATMO_PROPERTY(Temp, bleCharacteristicUuid), \n\t\tproperty, permission, ATMO_GetMaxValueSize(3, 64, types));\n\t\n\tATMO_BLE_GATTSRegisterCharacteristicAbilityHandle(\n\t\tATMO_PROPERTY(Temp, instance),\n\t\tATMO_VARIABLE(Temp, bleCharacteristicHandle), \n\t\tATMO_BLE_Characteristic_Written, \n\t\tATMO_ABILITY(Temp, written));\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setValue": "\n\t\n\t// Convert to the desired write data type\n\tATMO_Value_t convertedValue;\n\tATMO_InitValue(&convertedValue);\n\tATMO_CreateValueConverted(&convertedValue, ATMO_PROPERTY(Temp, readDataType), in);\n\n\tATMO_BLE_GATTSSetCharacteristic(\n\t\tATMO_PROPERTY(Temp, instance),\n\t\tATMO_VARIABLE(Temp, bleCharacteristicHandle),\n\t\tconvertedValue.size, \n\t\t(uint8_t *)convertedValue.data,\n\t\tNULL);\n\t\n\tATMO_FreeValue(&convertedValue);\n\t\t\n\treturn ATMO_Status_Success;\n\t",
              "written": "\n\tATMO_CreateValueConverted(out, ATMO_PROPERTY(Temp, writeDataType), in);\n\treturn ATMO_Status_Success;\n\t",
              "subscibed": "\treturn ATMO_Status_Success;",
              "unsubscribed": "\treturn ATMO_Status_Success;"
            },
            "variables": {
              "bleServiceHandle": {
                "type": "ATMO_BLE_Handle_t"
              },
              "bleCharacteristicHandle": {
                "type": "ATMO_BLE_Handle_t"
              }
            },
            "embeddedPropertyConversions": {
              "bleServiceUuid": "string",
              "bleCharacteristicUuid": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "setValue": false,
              "written": false,
              "subscibed": false,
              "unsubscribed": false
            },
            "instance": "ATMO_DRIVERINSTANCE_BLE_BLE1",
            "bleServiceUuid": "2d441758-e231-4bf3-a514-d447cb8d55dc",
            "bleCharacteristicUuid": "2d441758-e231-4bf3-a514-d447cb8d55de",
            "read": true,
            "write": false,
            "notify": true,
            "readDataType": "ATMO_DATATYPE_FLOAT",
            "writeDataType": "ATMO_DATATYPE_FLOAT",
            "notifyDataType": "ATMO_DATATYPE_FLOAT"
          },
          "meta": {
            "editorX": 200,
            "editorY": 0,
            "lastTrigger": "read"
          },
          "triggers": {
            "triggered": [],
            "read": [],
            "written": [],
            "notification": [],
            "indication": [],
            "subscribed": [],
            "unsubscribed": []
          },
          "coupledElementName": "Temp",
          "coupledElementPlaneName": "NXP Rapid IoT"
        },
        {
          "name": "Humidity",
          "type": "AppBLECharacteristicCustom",
          "variants": [
            "app",
            "ble"
          ],
          "properties": {
            "errorData": {},
            "readData": null,
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_BLE_GATTSAddService(\n\t\tATMO_PROPERTY(Humidity, instance),\n\t\t&ATMO_VARIABLE(Humidity, bleServiceHandle), \n\t\tATMO_PROPERTY(Humidity, bleServiceUuid));\n\t\n\tuint8_t property = 0;\n\tuint8_t permission = 0;\n\t\n\tproperty |= ATMO_PROPERTY(Humidity, read) ? ATMO_BLE_Property_Read : 0;\n\tproperty |= ATMO_PROPERTY(Humidity, write) ? ATMO_BLE_Property_Write : 0;\n\tproperty |= ATMO_PROPERTY(Humidity, notify) ? ATMO_BLE_Property_Notify : 0;\n\n\tpermission |= ATMO_PROPERTY(Humidity, read) ? ATMO_BLE_Permission_Read : 0;\n\tpermission |= ATMO_PROPERTY(Humidity, write) ? ATMO_BLE_Permission_Write : 0;\n\n\tATMO_DATATYPE types[3] = {ATMO_PROPERTY(Humidity, writeDataType), ATMO_PROPERTY(Humidity, readDataType), ATMO_PROPERTY(Humidity, notifyDataType)};\n\t\n\tATMO_BLE_GATTSAddCharacteristic(\n\t\tATMO_PROPERTY(Humidity, instance),\n\t\t&ATMO_VARIABLE(Humidity, bleCharacteristicHandle), \n\t\tATMO_VARIABLE(Humidity, bleServiceHandle), \n\t\tATMO_PROPERTY(Humidity, bleCharacteristicUuid), \n\t\tproperty, permission, ATMO_GetMaxValueSize(3, 64, types));\n\t\n\tATMO_BLE_GATTSRegisterCharacteristicAbilityHandle(\n\t\tATMO_PROPERTY(Humidity, instance),\n\t\tATMO_VARIABLE(Humidity, bleCharacteristicHandle), \n\t\tATMO_BLE_Characteristic_Written, \n\t\tATMO_ABILITY(Humidity, written));\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setValue": "\n\t\n\t// Convert to the desired write data type\n\tATMO_Value_t convertedValue;\n\tATMO_InitValue(&convertedValue);\n\tATMO_CreateValueConverted(&convertedValue, ATMO_PROPERTY(Humidity, readDataType), in);\n\n\tATMO_BLE_GATTSSetCharacteristic(\n\t\tATMO_PROPERTY(Humidity, instance),\n\t\tATMO_VARIABLE(Humidity, bleCharacteristicHandle),\n\t\tconvertedValue.size, \n\t\t(uint8_t *)convertedValue.data,\n\t\tNULL);\n\t\n\tATMO_FreeValue(&convertedValue);\n\t\t\n\treturn ATMO_Status_Success;\n\t",
              "written": "\n\tATMO_CreateValueConverted(out, ATMO_PROPERTY(Humidity, writeDataType), in);\n\treturn ATMO_Status_Success;\n\t",
              "subscibed": "\treturn ATMO_Status_Success;",
              "unsubscribed": "\treturn ATMO_Status_Success;"
            },
            "variables": {
              "bleServiceHandle": {
                "type": "ATMO_BLE_Handle_t"
              },
              "bleCharacteristicHandle": {
                "type": "ATMO_BLE_Handle_t"
              }
            },
            "embeddedPropertyConversions": {
              "bleServiceUuid": "string",
              "bleCharacteristicUuid": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "setValue": false,
              "written": false,
              "subscibed": false,
              "unsubscribed": false
            },
            "instance": "ATMO_DRIVERINSTANCE_BLE_BLE1",
            "bleServiceUuid": "2d441758-e231-4bf3-a514-d447cb8d55dc",
            "bleCharacteristicUuid": "2d441758-e231-4bf3-a514-d447cb8d55df",
            "read": true,
            "write": false,
            "notify": true,
            "readDataType": "ATMO_DATATYPE_FLOAT",
            "writeDataType": "ATMO_DATATYPE_FLOAT",
            "notifyDataType": "ATMO_DATATYPE_FLOAT"
          },
          "meta": {
            "editorX": 300,
            "editorY": 0,
            "lastTrigger": "read"
          },
          "triggers": {
            "triggered": [],
            "read": [],
            "written": [],
            "notification": [],
            "indication": [],
            "subscribed": [],
            "unsubscribed": []
          },
          "coupledElementName": "Humidity",
          "coupledElementPlaneName": "NXP Rapid IoT"
        },
        {
          "name": "AirQuality",
          "type": "AppBLECharacteristicCustom",
          "variants": [
            "app",
            "ble"
          ],
          "properties": {
            "errorData": {},
            "readData": null,
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_BLE_GATTSAddService(\n\t\tATMO_PROPERTY(AirQuality, instance),\n\t\t&ATMO_VARIABLE(AirQuality, bleServiceHandle), \n\t\tATMO_PROPERTY(AirQuality, bleServiceUuid));\n\t\n\tuint8_t property = 0;\n\tuint8_t permission = 0;\n\t\n\tproperty |= ATMO_PROPERTY(AirQuality, read) ? ATMO_BLE_Property_Read : 0;\n\tproperty |= ATMO_PROPERTY(AirQuality, write) ? ATMO_BLE_Property_Write : 0;\n\tproperty |= ATMO_PROPERTY(AirQuality, notify) ? ATMO_BLE_Property_Notify : 0;\n\n\tpermission |= ATMO_PROPERTY(AirQuality, read) ? ATMO_BLE_Permission_Read : 0;\n\tpermission |= ATMO_PROPERTY(AirQuality, write) ? ATMO_BLE_Permission_Write : 0;\n\n\tATMO_DATATYPE types[3] = {ATMO_PROPERTY(AirQuality, writeDataType), ATMO_PROPERTY(AirQuality, readDataType), ATMO_PROPERTY(AirQuality, notifyDataType)};\n\t\n\tATMO_BLE_GATTSAddCharacteristic(\n\t\tATMO_PROPERTY(AirQuality, instance),\n\t\t&ATMO_VARIABLE(AirQuality, bleCharacteristicHandle), \n\t\tATMO_VARIABLE(AirQuality, bleServiceHandle), \n\t\tATMO_PROPERTY(AirQuality, bleCharacteristicUuid), \n\t\tproperty, permission, ATMO_GetMaxValueSize(3, 64, types));\n\t\n\tATMO_BLE_GATTSRegisterCharacteristicAbilityHandle(\n\t\tATMO_PROPERTY(AirQuality, instance),\n\t\tATMO_VARIABLE(AirQuality, bleCharacteristicHandle), \n\t\tATMO_BLE_Characteristic_Written, \n\t\tATMO_ABILITY(AirQuality, written));\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setValue": "\n\t\n\t// Convert to the desired write data type\n\tATMO_Value_t convertedValue;\n\tATMO_InitValue(&convertedValue);\n\tATMO_CreateValueConverted(&convertedValue, ATMO_PROPERTY(AirQuality, readDataType), in);\n\n\tATMO_BLE_GATTSSetCharacteristic(\n\t\tATMO_PROPERTY(AirQuality, instance),\n\t\tATMO_VARIABLE(AirQuality, bleCharacteristicHandle),\n\t\tconvertedValue.size, \n\t\t(uint8_t *)convertedValue.data,\n\t\tNULL);\n\t\n\tATMO_FreeValue(&convertedValue);\n\t\t\n\treturn ATMO_Status_Success;\n\t",
              "written": "\n\tATMO_CreateValueConverted(out, ATMO_PROPERTY(AirQuality, writeDataType), in);\n\treturn ATMO_Status_Success;\n\t",
              "subscibed": "\treturn ATMO_Status_Success;",
              "unsubscribed": "\treturn ATMO_Status_Success;"
            },
            "variables": {
              "bleServiceHandle": {
                "type": "ATMO_BLE_Handle_t"
              },
              "bleCharacteristicHandle": {
                "type": "ATMO_BLE_Handle_t"
              }
            },
            "embeddedPropertyConversions": {
              "bleServiceUuid": "string",
              "bleCharacteristicUuid": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "setValue": false,
              "written": false,
              "subscibed": false,
              "unsubscribed": false
            },
            "instance": "ATMO_DRIVERINSTANCE_BLE_BLE1",
            "bleServiceUuid": "2d441758-e231-4bf3-a514-d447cb8d55dc",
            "bleCharacteristicUuid": "2d441758-e231-4bf3-a514-d447cb8d55e0",
            "read": true,
            "write": false,
            "notify": true,
            "readDataType": "ATMO_DATATYPE_UNSIGNED_INT",
            "writeDataType": "ATMO_DATATYPE_UNSIGNED_INT",
            "notifyDataType": "ATMO_DATATYPE_UNSIGNED_INT"
          },
          "meta": {
            "editorX": 400,
            "editorY": 0,
            "lastTrigger": "read"
          },
          "triggers": {
            "triggered": [],
            "read": [],
            "written": [],
            "notification": [],
            "indication": [],
            "subscribed": [],
            "unsubscribed": []
          },
          "coupledElementName": "AirQuality",
          "coupledElementPlaneName": "NXP Rapid IoT"
        },
        {
          "name": "HasMotion",
          "type": "AppBLECharacteristicCustom",
          "variants": [
            "app",
            "ble"
          ],
          "properties": {
            "errorData": {},
            "readData": null,
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_BLE_GATTSAddService(\n\t\tATMO_PROPERTY(HasMotion, instance),\n\t\t&ATMO_VARIABLE(HasMotion, bleServiceHandle), \n\t\tATMO_PROPERTY(HasMotion, bleServiceUuid));\n\t\n\tuint8_t property = 0;\n\tuint8_t permission = 0;\n\t\n\tproperty |= ATMO_PROPERTY(HasMotion, read) ? ATMO_BLE_Property_Read : 0;\n\tproperty |= ATMO_PROPERTY(HasMotion, write) ? ATMO_BLE_Property_Write : 0;\n\tproperty |= ATMO_PROPERTY(HasMotion, notify) ? ATMO_BLE_Property_Notify : 0;\n\n\tpermission |= ATMO_PROPERTY(HasMotion, read) ? ATMO_BLE_Permission_Read : 0;\n\tpermission |= ATMO_PROPERTY(HasMotion, write) ? ATMO_BLE_Permission_Write : 0;\n\n\tATMO_DATATYPE types[3] = {ATMO_PROPERTY(HasMotion, writeDataType), ATMO_PROPERTY(HasMotion, readDataType), ATMO_PROPERTY(HasMotion, notifyDataType)};\n\t\n\tATMO_BLE_GATTSAddCharacteristic(\n\t\tATMO_PROPERTY(HasMotion, instance),\n\t\t&ATMO_VARIABLE(HasMotion, bleCharacteristicHandle), \n\t\tATMO_VARIABLE(HasMotion, bleServiceHandle), \n\t\tATMO_PROPERTY(HasMotion, bleCharacteristicUuid), \n\t\tproperty, permission, ATMO_GetMaxValueSize(3, 64, types));\n\t\n\tATMO_BLE_GATTSRegisterCharacteristicAbilityHandle(\n\t\tATMO_PROPERTY(HasMotion, instance),\n\t\tATMO_VARIABLE(HasMotion, bleCharacteristicHandle), \n\t\tATMO_BLE_Characteristic_Written, \n\t\tATMO_ABILITY(HasMotion, written));\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setValue": "\n\t\n\t// Convert to the desired write data type\n\tATMO_Value_t convertedValue;\n\tATMO_InitValue(&convertedValue);\n\tATMO_CreateValueConverted(&convertedValue, ATMO_PROPERTY(HasMotion, readDataType), in);\n\n\tATMO_BLE_GATTSSetCharacteristic(\n\t\tATMO_PROPERTY(HasMotion, instance),\n\t\tATMO_VARIABLE(HasMotion, bleCharacteristicHandle),\n\t\tconvertedValue.size, \n\t\t(uint8_t *)convertedValue.data,\n\t\tNULL);\n\t\n\tATMO_FreeValue(&convertedValue);\n\t\t\n\treturn ATMO_Status_Success;\n\t",
              "written": "\n\tATMO_CreateValueConverted(out, ATMO_PROPERTY(HasMotion, writeDataType), in);\n\treturn ATMO_Status_Success;\n\t",
              "subscibed": "\treturn ATMO_Status_Success;",
              "unsubscribed": "\treturn ATMO_Status_Success;"
            },
            "variables": {
              "bleServiceHandle": {
                "type": "ATMO_BLE_Handle_t"
              },
              "bleCharacteristicHandle": {
                "type": "ATMO_BLE_Handle_t"
              }
            },
            "embeddedPropertyConversions": {
              "bleServiceUuid": "string",
              "bleCharacteristicUuid": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "setValue": false,
              "written": false,
              "subscibed": false,
              "unsubscribed": false
            },
            "instance": "ATMO_DRIVERINSTANCE_BLE_BLE1",
            "bleServiceUuid": "2d441758-e231-4bf3-a514-d447cb8d55dc",
            "bleCharacteristicUuid": "2d441758-e231-4bf3-a514-d447cb8d55e1",
            "read": false,
            "write": false,
            "notify": true,
            "readDataType": "ATMO_DATATYPE_VOID",
            "writeDataType": "ATMO_DATATYPE_VOID",
            "notifyDataType": "ATMO_DATATYPE_VOID"
          },
          "meta": {
            "editorX": 500,
            "editorY": 0,
            "lastTrigger": "read"
          },
          "triggers": {
            "triggered": [],
            "read": [],
            "written": [],
            "notification": [],
            "indication": [],
            "subscribed": [],
            "unsubscribed": []
          },
          "coupledElementName": "HasMotion",
          "coupledElementPlaneName": "NXP Rapid IoT"
        },
        {
          "name": "Pressure",
          "type": "AppBLECharacteristicCustom",
          "variants": [
            "app",
            "ble"
          ],
          "properties": {
            "errorData": {},
            "readData": null,
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_BLE_GATTSAddService(\n\t\tATMO_PROPERTY(Pressure, instance),\n\t\t&ATMO_VARIABLE(Pressure, bleServiceHandle), \n\t\tATMO_PROPERTY(Pressure, bleServiceUuid));\n\t\n\tuint8_t property = 0;\n\tuint8_t permission = 0;\n\t\n\tproperty |= ATMO_PROPERTY(Pressure, read) ? ATMO_BLE_Property_Read : 0;\n\tproperty |= ATMO_PROPERTY(Pressure, write) ? ATMO_BLE_Property_Write : 0;\n\tproperty |= ATMO_PROPERTY(Pressure, notify) ? ATMO_BLE_Property_Notify : 0;\n\n\tpermission |= ATMO_PROPERTY(Pressure, read) ? ATMO_BLE_Permission_Read : 0;\n\tpermission |= ATMO_PROPERTY(Pressure, write) ? ATMO_BLE_Permission_Write : 0;\n\n\tATMO_DATATYPE types[3] = {ATMO_PROPERTY(Pressure, writeDataType), ATMO_PROPERTY(Pressure, readDataType), ATMO_PROPERTY(Pressure, notifyDataType)};\n\t\n\tATMO_BLE_GATTSAddCharacteristic(\n\t\tATMO_PROPERTY(Pressure, instance),\n\t\t&ATMO_VARIABLE(Pressure, bleCharacteristicHandle), \n\t\tATMO_VARIABLE(Pressure, bleServiceHandle), \n\t\tATMO_PROPERTY(Pressure, bleCharacteristicUuid), \n\t\tproperty, permission, ATMO_GetMaxValueSize(3, 64, types));\n\t\n\tATMO_BLE_GATTSRegisterCharacteristicAbilityHandle(\n\t\tATMO_PROPERTY(Pressure, instance),\n\t\tATMO_VARIABLE(Pressure, bleCharacteristicHandle), \n\t\tATMO_BLE_Characteristic_Written, \n\t\tATMO_ABILITY(Pressure, written));\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setValue": "\n\t\n\t// Convert to the desired write data type\n\tATMO_Value_t convertedValue;\n\tATMO_InitValue(&convertedValue);\n\tATMO_CreateValueConverted(&convertedValue, ATMO_PROPERTY(Pressure, readDataType), in);\n\n\tATMO_BLE_GATTSSetCharacteristic(\n\t\tATMO_PROPERTY(Pressure, instance),\n\t\tATMO_VARIABLE(Pressure, bleCharacteristicHandle),\n\t\tconvertedValue.size, \n\t\t(uint8_t *)convertedValue.data,\n\t\tNULL);\n\t\n\tATMO_FreeValue(&convertedValue);\n\t\t\n\treturn ATMO_Status_Success;\n\t",
              "written": "\n\tATMO_CreateValueConverted(out, ATMO_PROPERTY(Pressure, writeDataType), in);\n\treturn ATMO_Status_Success;\n\t",
              "subscibed": "\treturn ATMO_Status_Success;",
              "unsubscribed": "\treturn ATMO_Status_Success;"
            },
            "variables": {
              "bleServiceHandle": {
                "type": "ATMO_BLE_Handle_t"
              },
              "bleCharacteristicHandle": {
                "type": "ATMO_BLE_Handle_t"
              }
            },
            "embeddedPropertyConversions": {
              "bleServiceUuid": "string",
              "bleCharacteristicUuid": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "setValue": false,
              "written": false,
              "subscibed": false,
              "unsubscribed": false
            },
            "instance": "ATMO_DRIVERINSTANCE_BLE_BLE1",
            "bleServiceUuid": "2d441758-e231-4bf3-a514-d447cb8d55dc",
            "bleCharacteristicUuid": "2d441758-e231-4bf3-a514-d447cb8d55e2",
            "read": true,
            "write": false,
            "notify": true,
            "readDataType": "ATMO_DATATYPE_UNSIGNED_INT",
            "writeDataType": "ATMO_DATATYPE_UNSIGNED_INT",
            "notifyDataType": "ATMO_DATATYPE_UNSIGNED_INT"
          },
          "meta": {
            "editorX": 600,
            "editorY": 0,
            "lastTrigger": "read"
          },
          "triggers": {
            "triggered": [],
            "read": [],
            "written": [],
            "notification": [],
            "indication": [],
            "subscribed": [],
            "unsubscribed": []
          },
          "coupledElementName": "Pressure",
          "coupledElementPlaneName": "NXP Rapid IoT"
        },
        {
          "name": "AmbientLight",
          "type": "AppBLECharacteristicCustom",
          "variants": [
            "app",
            "ble"
          ],
          "properties": {
            "errorData": {},
            "readData": null,
            "code": {
              "trigger": "\treturn ATMO_Status_Success;",
              "setup": "\n\tATMO_BLE_GATTSAddService(\n\t\tATMO_PROPERTY(AmbientLight, instance),\n\t\t&ATMO_VARIABLE(AmbientLight, bleServiceHandle), \n\t\tATMO_PROPERTY(AmbientLight, bleServiceUuid));\n\t\n\tuint8_t property = 0;\n\tuint8_t permission = 0;\n\t\n\tproperty |= ATMO_PROPERTY(AmbientLight, read) ? ATMO_BLE_Property_Read : 0;\n\tproperty |= ATMO_PROPERTY(AmbientLight, write) ? ATMO_BLE_Property_Write : 0;\n\tproperty |= ATMO_PROPERTY(AmbientLight, notify) ? ATMO_BLE_Property_Notify : 0;\n\n\tpermission |= ATMO_PROPERTY(AmbientLight, read) ? ATMO_BLE_Permission_Read : 0;\n\tpermission |= ATMO_PROPERTY(AmbientLight, write) ? ATMO_BLE_Permission_Write : 0;\n\n\tATMO_DATATYPE types[3] = {ATMO_PROPERTY(AmbientLight, writeDataType), ATMO_PROPERTY(AmbientLight, readDataType), ATMO_PROPERTY(AmbientLight, notifyDataType)};\n\t\n\tATMO_BLE_GATTSAddCharacteristic(\n\t\tATMO_PROPERTY(AmbientLight, instance),\n\t\t&ATMO_VARIABLE(AmbientLight, bleCharacteristicHandle), \n\t\tATMO_VARIABLE(AmbientLight, bleServiceHandle), \n\t\tATMO_PROPERTY(AmbientLight, bleCharacteristicUuid), \n\t\tproperty, permission, ATMO_GetMaxValueSize(3, 64, types));\n\t\n\tATMO_BLE_GATTSRegisterCharacteristicAbilityHandle(\n\t\tATMO_PROPERTY(AmbientLight, instance),\n\t\tATMO_VARIABLE(AmbientLight, bleCharacteristicHandle), \n\t\tATMO_BLE_Characteristic_Written, \n\t\tATMO_ABILITY(AmbientLight, written));\n\t\n\treturn ATMO_Status_Success;\n\t",
              "setValue": "\n\t\n\t// Convert to the desired write data type\n\tATMO_Value_t convertedValue;\n\tATMO_InitValue(&convertedValue);\n\tATMO_CreateValueConverted(&convertedValue, ATMO_PROPERTY(AmbientLight, readDataType), in);\n\n\tATMO_BLE_GATTSSetCharacteristic(\n\t\tATMO_PROPERTY(AmbientLight, instance),\n\t\tATMO_VARIABLE(AmbientLight, bleCharacteristicHandle),\n\t\tconvertedValue.size, \n\t\t(uint8_t *)convertedValue.data,\n\t\tNULL);\n\t\n\tATMO_FreeValue(&convertedValue);\n\t\t\n\treturn ATMO_Status_Success;\n\t",
              "written": "\n\tATMO_CreateValueConverted(out, ATMO_PROPERTY(AmbientLight, writeDataType), in);\n\treturn ATMO_Status_Success;\n\t",
              "subscibed": "\treturn ATMO_Status_Success;",
              "unsubscribed": "\treturn ATMO_Status_Success;"
            },
            "variables": {
              "bleServiceHandle": {
                "type": "ATMO_BLE_Handle_t"
              },
              "bleCharacteristicHandle": {
                "type": "ATMO_BLE_Handle_t"
              }
            },
            "embeddedPropertyConversions": {
              "bleServiceUuid": "string",
              "bleCharacteristicUuid": "string"
            },
            "codeUserChanged": {
              "setup": false,
              "setValue": false,
              "written": false,
              "subscibed": false,
              "unsubscribed": false
            },
            "instance": "ATMO_DRIVERINSTANCE_BLE_BLE1",
            "bleServiceUuid": "2d441758-e231-4bf3-a514-d447cb8d55dc",
            "bleCharacteristicUuid": "2d441758-e231-4bf3-a514-d447cb8d55e3",
            "read": true,
            "write": false,
            "notify": true,
            "readDataType": "ATMO_DATATYPE_UNSIGNED_INT",
            "writeDataType": "ATMO_DATATYPE_UNSIGNED_INT",
            "notifyDataType": "ATMO_DATATYPE_UNSIGNED_INT"
          },
          "meta": {
            "editorX": 700,
            "editorY": 0,
            "lastTrigger": "read"
          },
          "triggers": {
            "triggered": [],
            "read": [],
            "written": [],
            "notification": [],
            "indication": [],
            "subscribed": [],
            "unsubscribed": []
          },
          "coupledElementName": "AmbientLight",
          "coupledElementPlaneName": "NXP Rapid IoT"
        }
      ]
    },
    "Cloud": {
      "type": "cloud",
      "compilerVersion": "latest",
      "variants": [],
      "meta": {},
      "elements": [],
      "layout": {
        "height": 1000,
        "width": 1000,
        "zIndexOrder": []
      }
    }
  }
}